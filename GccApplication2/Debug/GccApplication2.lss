
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001a32  00001ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011b  008000b4  008000b4  00001b1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a3a  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f70  00000000  00000000  00004786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e62  00000000  00000000  000056f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  00006558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d09  00000000  00000000  00006ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fc0  00000000  00000000  000077ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000097ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	40 c0       	rjmp	.+128    	; 0x9e <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	ff 02       	muls	r31, r31

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	e2 e3       	ldi	r30, 0x32	; 50
      3c:	fa e1       	ldi	r31, 0x1A	; 26
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	a4 3b       	cpi	r26, 0xB4	; 180
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	21 e0       	ldi	r18, 0x01	; 1
      4c:	a4 eb       	ldi	r26, 0xB4	; 180
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	af 3c       	cpi	r26, 0xCF	; 207
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	05 da       	rcall	.-3062   	; 0xfffff472 <__eeprom_end+0xff7ef472>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	fc d1       	rcall	.+1016   	; 0x468 <main>
      70:	de cc       	rjmp	.-1604   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:

	for(i = 0; i < len; ++i)
	standardDeviation += pow(ar[i] - mean, 2);

	return sqrt(standardDeviation / len);
}
      74:	14 ba       	out	0x14, r1	; 20
      76:	f8 94       	cli
      78:	16 b8       	out	0x06, r1	; 6
      7a:	3e 9a       	sbi	0x07, 6	; 7
      7c:	3d 9a       	sbi	0x07, 5	; 7
      7e:	32 9a       	sbi	0x06, 2	; 6
      80:	35 9a       	sbi	0x06, 5	; 6
      82:	33 9a       	sbi	0x06, 3	; 6
      84:	37 9a       	sbi	0x06, 7	; 6
      86:	36 9a       	sbi	0x06, 6	; 6
      88:	78 94       	sei
      8a:	08 95       	ret

0000008c <_Z5resetv>:
      8c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_ZL5index>
      90:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_ZL7noMatch>
      94:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <_ZL8maxSlope+0x1>
      98:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <_ZL8maxSlope>
      9c:	08 95       	ret

0000009e <__vector_14>:
      9e:	1f 92       	push	r1
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	0f 92       	push	r0
      a6:	11 24       	eor	r1, r1
      a8:	2f 93       	push	r18
      aa:	3f 93       	push	r19
      ac:	4f 93       	push	r20
      ae:	5f 93       	push	r21
      b0:	6f 93       	push	r22
      b2:	7f 93       	push	r23
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
      b8:	af 93       	push	r26
      ba:	bf 93       	push	r27
      bc:	ef 93       	push	r30
      be:	ff 93       	push	r31
      c0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_ZL5ticks>
      c4:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_ZL5ticks+0x1>
      c8:	01 96       	adiw	r24, 0x01	; 1
      ca:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_ZL5ticks+0x1>
      ce:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_ZL5ticks>
      d2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_ZL7newData>
      d6:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <_ZL8prevData>
      da:	85 b1       	in	r24, 0x05	; 5
      dc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <_ZL7newData>
      e0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <_ZL8prevData>
      e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      e8:	98 17       	cp	r25, r24
      ea:	08 f0       	brcs	.+2      	; 0xee <__vector_14+0x50>
      ec:	ef c0       	rjmp	.+478    	; 0x2cc <__vector_14+0x22e>
      ee:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <_ZL7newData>
      f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      f6:	98 17       	cp	r25, r24
      f8:	08 f0       	brcs	.+2      	; 0xfc <__vector_14+0x5e>
      fa:	24 c1       	rjmp	.+584    	; 0x344 <__vector_14+0x2a6>
      fc:	e7 c0       	rjmp	.+462    	; 0x2cc <__vector_14+0x22e>
      fe:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <_ZL5index>
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ZL8newSlope>
     108:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ZL8newSlope+0x1>
     10c:	ee 0f       	add	r30, r30
     10e:	ff 1f       	adc	r31, r31
     110:	e7 5a       	subi	r30, 0xA7	; 167
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	91 83       	std	Z+1, r25	; 0x01
     116:	80 83       	st	Z, r24
     118:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <_ZL5index>
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <_ZL4time>
     122:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <_ZL4time+0x1>
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	e3 59       	subi	r30, 0x93	; 147
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	91 83       	std	Z+1, r25	; 0x01
     130:	80 83       	st	Z, r24
     132:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_ZL4time+0x1>
     136:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL4time>
     13a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZL5index>
     13e:	81 11       	cpse	r24, r1
     140:	08 c0       	rjmp	.+16     	; 0x152 <__vector_14+0xb4>
     142:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_ZL7noMatch>
     146:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZL5index>
     14a:	8f 5f       	subi	r24, 0xFF	; 255
     14c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_ZL5index>
     150:	bd c0       	rjmp	.+378    	; 0x2cc <__vector_14+0x22e>
     152:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_ZL5timer>
     156:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_ZL5timer+0x1>
     15a:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <_ZL5index>
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	e3 59       	subi	r30, 0x93	; 147
     166:	fe 4f       	sbci	r31, 0xFE	; 254
     168:	20 81       	ld	r18, Z
     16a:	31 81       	ldd	r19, Z+1	; 0x01
     16c:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_ZL8timerTol>
     170:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_ZL8timerTol+0x1>
     174:	82 1b       	sub	r24, r18
     176:	93 0b       	sbc	r25, r19
     178:	9c 01       	movw	r18, r24
     17a:	22 f4       	brpl	.+8      	; 0x184 <__vector_14+0xe6>
     17c:	22 27       	eor	r18, r18
     17e:	33 27       	eor	r19, r19
     180:	28 1b       	sub	r18, r24
     182:	39 0b       	sbc	r19, r25
     184:	24 17       	cp	r18, r20
     186:	35 07       	cpc	r19, r21
     188:	0c f0       	brlt	.+2      	; 0x18c <__vector_14+0xee>
     18a:	00 c1       	rjmp	.+512    	; 0x38c <__vector_14+0x2ee>
     18c:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <_ZL5slope>
     190:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <_ZL5slope+0x1>
     194:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <_ZL8newSlope>
     198:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <_ZL8newSlope+0x1>
     19c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     1a0:	84 1b       	sub	r24, r20
     1a2:	95 0b       	sbc	r25, r21
     1a4:	ac 01       	movw	r20, r24
     1a6:	22 f4       	brpl	.+8      	; 0x1b0 <__vector_14+0x112>
     1a8:	44 27       	eor	r20, r20
     1aa:	55 27       	eor	r21, r21
     1ac:	48 1b       	sub	r20, r24
     1ae:	59 0b       	sbc	r21, r25
     1b0:	82 2f       	mov	r24, r18
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	48 17       	cp	r20, r24
     1b6:	59 07       	cpc	r21, r25
     1b8:	0c f4       	brge	.+2      	; 0x1bc <__vector_14+0x11e>
     1ba:	f3 c0       	rjmp	.+486    	; 0x3a2 <__vector_14+0x304>
     1bc:	e7 c0       	rjmp	.+462    	; 0x38c <__vector_14+0x2ee>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	e8 2f       	mov	r30, r24
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	ee 0f       	add	r30, r30
     1c6:	ff 1f       	adc	r31, r31
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	fe 4f       	sbci	r31, 0xFE	; 254
     1cc:	40 81       	ld	r20, Z
     1ce:	51 81       	ldd	r21, Z+1	; 0x01
     1d0:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <_ZL10totalTimer>
     1d4:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <_ZL10totalTimer+0x1>
     1d8:	24 0f       	add	r18, r20
     1da:	35 1f       	adc	r19, r21
     1dc:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <_ZL10totalTimer+0x1>
     1e0:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <_ZL10totalTimer>
     1e4:	8f 5f       	subi	r24, 0xFF	; 255
     1e6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_ZL5index>
     1ea:	89 17       	cp	r24, r25
     1ec:	48 f3       	brcs	.-46     	; 0x1c0 <__vector_14+0x122>
     1ee:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <_ZL10totalTimer>
     1f2:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <_ZL10totalTimer+0x1>
     1f6:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <_ZL6period+0x1>
     1fa:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <_ZL6period>
     1fe:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <_ZL11checkMaxAmp>
     202:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     206:	89 17       	cp	r24, r25
     208:	b8 f4       	brcc	.+46     	; 0x238 <__vector_14+0x19a>
     20a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <_ZL6period>
     20e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <_ZL6period+0x1>
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	f5 d7       	rcall	.+4074   	; 0x1202 <__floatunsisf>
     218:	9b 01       	movw	r18, r22
     21a:	ac 01       	movw	r20, r24
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	7a e6       	ldi	r23, 0x6A	; 106
     220:	87 e1       	ldi	r24, 0x17	; 23
     222:	97 e4       	ldi	r25, 0x47	; 71
     224:	55 d7       	rcall	.+3754   	; 0x10d0 <__divsf3>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	48 ec       	ldi	r20, 0xC8	; 200
     22c:	52 e4       	ldi	r21, 0x42	; 66
     22e:	be d8       	rcall	.-3716   	; 0xfffff3ac <__eeprom_end+0xff7ef3ac>
     230:	b7 d7       	rcall	.+3950   	; 0x11a0 <__fixsfsi>
     232:	cb 01       	movw	r24, r22
     234:	b4 d6       	rcall	.+3432   	; 0xf9e <_Z18USART_Transmit_inti>
     236:	de d6       	rcall	.+3516   	; 0xff4 <_Z13USART_Printlnv>
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_ZL11periodReady>
     23e:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <_ZL5index>
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ee 0f       	add	r30, r30
     246:	ff 1f       	adc	r31, r31
     248:	e3 59       	subi	r30, 0x93	; 147
     24a:	fe 4f       	sbci	r31, 0xFE	; 254
     24c:	20 81       	ld	r18, Z
     24e:	31 81       	ldd	r19, Z+1	; 0x01
     250:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <_ZL5timer+0x1>
     254:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <_ZL5timer>
     258:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <_ZL5index>
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	e7 5a       	subi	r30, 0xA7	; 167
     264:	fe 4f       	sbci	r31, 0xFE	; 254
     266:	20 81       	ld	r18, Z
     268:	31 81       	ldd	r19, Z+1	; 0x01
     26a:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <_ZL5slope+0x1>
     26e:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <_ZL5slope>
     272:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_ZL5index>
     276:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_ZL7noMatch>
     27a:	28 c0       	rjmp	.+80     	; 0x2cc <__vector_14+0x22e>
     27c:	07 df       	rcall	.-498    	; 0x8c <_Z5resetv>
     27e:	26 c0       	rjmp	.+76     	; 0x2cc <__vector_14+0x22e>
     280:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <_ZL8newSlope>
     284:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <_ZL8newSlope+0x1>
     288:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ZL8maxSlope>
     28c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ZL8maxSlope+0x1>
     290:	82 17       	cp	r24, r18
     292:	93 07       	cpc	r25, r19
     294:	8c f4       	brge	.+34     	; 0x2b8 <__vector_14+0x21a>
     296:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ZL8newSlope>
     29a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ZL8newSlope+0x1>
     29e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <_ZL8maxSlope+0x1>
     2a2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <_ZL8maxSlope>
     2a6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <_ZL4time+0x1>
     2aa:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <_ZL4time>
     2ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_ZL7noMatch>
     2b2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_ZL5index>
     2b6:	0a c0       	rjmp	.+20     	; 0x2cc <__vector_14+0x22e>
     2b8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_ZL7noMatch>
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_ZL7noMatch>
     2c2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_ZL7noMatch>
     2c6:	8a 30       	cpi	r24, 0x0A	; 10
     2c8:	08 f0       	brcs	.+2      	; 0x2cc <__vector_14+0x22e>
     2ca:	e0 de       	rcall	.-576    	; 0x8c <_Z5resetv>
     2cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_ZL7newData>
     2d0:	88 23       	and	r24, r24
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <__vector_14+0x238>
     2d4:	6f c0       	rjmp	.+222    	; 0x3b4 <__vector_14+0x316>
     2d6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_ZL7newData>
     2da:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <_ZL4time>
     2de:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <_ZL4time+0x1>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <_ZL4time+0x1>
     2e8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_ZL4time>
     2ec:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <ampTimer>
     2f0:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <ampTimer+0x1>
     2f4:	2f 5f       	subi	r18, 0xFF	; 255
     2f6:	3f 4f       	sbci	r19, 0xFF	; 255
     2f8:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <ampTimer+0x1>
     2fc:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <ampTimer>
     300:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     304:	40 91 84 01 	lds	r20, 0x0184	; 0x800184 <_ZL7newData>
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	84 1b       	sub	r24, r20
     30c:	91 09       	sbc	r25, r1
     30e:	ac 01       	movw	r20, r24
     310:	22 f4       	brpl	.+8      	; 0x31a <__vector_14+0x27c>
     312:	44 27       	eor	r20, r20
     314:	55 27       	eor	r21, r21
     316:	48 1b       	sub	r20, r24
     318:	59 0b       	sbc	r21, r25
     31a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_ZL6maxAmp>
     31e:	84 17       	cp	r24, r20
     320:	10 f4       	brcc	.+4      	; 0x326 <__vector_14+0x288>
     322:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <_ZL6maxAmp>
     326:	28 3e       	cpi	r18, 0xE8	; 232
     328:	33 40       	sbci	r19, 0x03	; 3
     32a:	09 f0       	breq	.+2      	; 0x32e <__vector_14+0x290>
     32c:	47 c0       	rjmp	.+142    	; 0x3bc <__vector_14+0x31e>
     32e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <ampTimer+0x1>
     332:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <ampTimer>
     336:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_ZL6maxAmp>
     33a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_ZL11checkMaxAmp>
     33e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <_ZL6maxAmp>
     342:	3c c0       	rjmp	.+120    	; 0x3bc <__vector_14+0x31e>
     344:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_ZL7newData>
     348:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <_ZL8prevData>
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	82 1b       	sub	r24, r18
     350:	91 09       	sbc	r25, r1
     352:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ZL8newSlope+0x1>
     356:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ZL8newSlope>
     35a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_ZL8newSlope>
     35e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_ZL8newSlope+0x1>
     362:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <_ZL8maxSlope>
     366:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <_ZL8maxSlope+0x1>
     36a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     36e:	84 1b       	sub	r24, r20
     370:	95 0b       	sbc	r25, r21
     372:	ac 01       	movw	r20, r24
     374:	22 f4       	brpl	.+8      	; 0x37e <__vector_14+0x2e0>
     376:	44 27       	eor	r20, r20
     378:	55 27       	eor	r21, r21
     37a:	48 1b       	sub	r20, r24
     37c:	59 0b       	sbc	r21, r25
     37e:	82 2f       	mov	r24, r18
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	48 17       	cp	r20, r24
     384:	59 07       	cpc	r21, r25
     386:	0c f4       	brge	.+2      	; 0x38a <__vector_14+0x2ec>
     388:	ba ce       	rjmp	.-652    	; 0xfe <__vector_14+0x60>
     38a:	7a cf       	rjmp	.-268    	; 0x280 <__vector_14+0x1e2>
     38c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZL5index>
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_ZL5index>
     396:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZL5index>
     39a:	8a 30       	cpi	r24, 0x0A	; 10
     39c:	08 f4       	brcc	.+2      	; 0x3a0 <__vector_14+0x302>
     39e:	96 cf       	rjmp	.-212    	; 0x2cc <__vector_14+0x22e>
     3a0:	6d cf       	rjmp	.-294    	; 0x27c <__vector_14+0x1de>
     3a2:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <_ZL10totalTimer+0x1>
     3a6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <_ZL10totalTimer>
     3aa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZL5index>
     3ae:	81 11       	cpse	r24, r1
     3b0:	06 cf       	rjmp	.-500    	; 0x1be <__vector_14+0x120>
     3b2:	1d cf       	rjmp	.-454    	; 0x1ee <__vector_14+0x150>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <_ZL8clipping>
     3ba:	8f cf       	rjmp	.-226    	; 0x2da <__vector_14+0x23c>
     3bc:	ff 91       	pop	r31
     3be:	ef 91       	pop	r30
     3c0:	bf 91       	pop	r27
     3c2:	af 91       	pop	r26
     3c4:	9f 91       	pop	r25
     3c6:	8f 91       	pop	r24
     3c8:	7f 91       	pop	r23
     3ca:	6f 91       	pop	r22
     3cc:	5f 91       	pop	r21
     3ce:	4f 91       	pop	r20
     3d0:	3f 91       	pop	r19
     3d2:	2f 91       	pop	r18
     3d4:	0f 90       	pop	r0
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	0f 90       	pop	r0
     3da:	1f 90       	pop	r1
     3dc:	18 95       	reti

000003de <_Z6get_avPdi>:
     3de:	8f 92       	push	r8
     3e0:	9f 92       	push	r9
     3e2:	af 92       	push	r10
     3e4:	bf 92       	push	r11
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	6c 01       	movw	r12, r24
     3f8:	7b 01       	movw	r14, r22
     3fa:	16 16       	cp	r1, r22
     3fc:	17 06       	cpc	r1, r23
     3fe:	d4 f4       	brge	.+52     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     400:	8c 01       	movw	r16, r24
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	81 2c       	mov	r8, r1
     408:	91 2c       	mov	r9, r1
     40a:	54 01       	movw	r10, r8
     40c:	c1 14       	cp	r12, r1
     40e:	d1 04       	cpc	r13, r1
     410:	51 f0       	breq	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     412:	f8 01       	movw	r30, r16
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	42 81       	ldd	r20, Z+2	; 0x02
     41a:	53 81       	ldd	r21, Z+3	; 0x03
     41c:	c5 01       	movw	r24, r10
     41e:	b4 01       	movw	r22, r8
     420:	ef d5       	rcall	.+3038   	; 0x1000 <__addsf3>
     422:	4b 01       	movw	r8, r22
     424:	5c 01       	movw	r10, r24
     426:	21 96       	adiw	r28, 0x01	; 1
     428:	0c 5f       	subi	r16, 0xFC	; 252
     42a:	1f 4f       	sbci	r17, 0xFF	; 255
     42c:	ec 16       	cp	r14, r28
     42e:	fd 06       	cpc	r15, r29
     430:	69 f7       	brne	.-38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	81 2c       	mov	r8, r1
     436:	91 2c       	mov	r9, r1
     438:	54 01       	movw	r10, r8
     43a:	b7 01       	movw	r22, r14
     43c:	ff 0c       	add	r15, r15
     43e:	88 0b       	sbc	r24, r24
     440:	99 0b       	sbc	r25, r25
     442:	e1 d6       	rcall	.+3522   	; 0x1206 <__floatsisf>
     444:	9b 01       	movw	r18, r22
     446:	ac 01       	movw	r20, r24
     448:	c5 01       	movw	r24, r10
     44a:	b4 01       	movw	r22, r8
     44c:	41 d6       	rcall	.+3202   	; 0x10d0 <__divsf3>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	9f 90       	pop	r9
     464:	8f 90       	pop	r8
     466:	08 95       	ret

00000468 <main>:

int main() {
	setup();
     468:	05 de       	rcall	.-1014   	; 0x74 <_Z5setupv>
	USART_Init ( MYUBRR );
     46a:	83 e3       	ldi	r24, 0x33	; 51
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	70 d5       	rcall	.+2784   	; 0xf50 <_Z10USART_Initj>
	USART_Transmit('a');
     470:	81 e6       	ldi	r24, 0x61	; 97
     472:	75 d5       	rcall	.+2794   	; 0xf5e <_Z14USART_Transmith>
	while(1) {
		
		if (checkMaxAmp > ampThreshold) /* && checkMaxAmp < maxAmpThreshold) */ {
     474:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <_ZL11checkMaxAmp>
     478:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     47c:	89 17       	cp	r24, r25
     47e:	08 f0       	brcs	.+2      	; 0x482 <main+0x1a>
     480:	b7 c0       	rjmp	.+366    	; 0x5f0 <main+0x188>
			if (periodReady) { // prevent working twice with the same reading
     482:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <_ZL11periodReady>
     486:	88 23       	and	r24, r24
     488:	09 f4       	brne	.+2      	; 0x48c <main+0x24>
     48a:	b2 c0       	rjmp	.+356    	; 0x5f0 <main+0x188>
				periodReady = false;
     48c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_ZL11periodReady>
				
				frequency = FREQ_SAMPLING_RATE/float(period);//calculate frequency timer rate/period
     490:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <_ZL6period>
     494:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <_ZL6period+0x1>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	b2 d6       	rcall	.+3428   	; 0x1202 <__floatunsisf>
     49e:	9b 01       	movw	r18, r22
     4a0:	ac 01       	movw	r20, r24
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	7a e6       	ldi	r23, 0x6A	; 106
     4a6:	87 e1       	ldi	r24, 0x17	; 23
     4a8:	97 e4       	ldi	r25, 0x47	; 71
     4aa:	12 d6       	rcall	.+3108   	; 0x10d0 <__divsf3>
     4ac:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <_ZL9frequency>
     4b0:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <_ZL9frequency+0x1>
     4b4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_ZL9frequency+0x2>
     4b8:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <_ZL9frequency+0x3>
				
				//USART_Transmit_int((int)frequency);
				//USART_Println();
			
				if (isFreqLegal(frequency)) {
     4bc:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <_ZL9frequency>
     4c0:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <_ZL9frequency+0x1>
     4c4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZL9frequency+0x2>
     4c8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_ZL9frequency+0x3>
     4cc:	2d d3       	rcall	.+1626   	; 0xb28 <_Z11isFreqLegald>
     4ce:	88 23       	and	r24, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <main+0x6c>
     4d2:	8e c0       	rjmp	.+284    	; 0x5f0 <main+0x188>
			
					// Ignore noise and big swings
					long_last_frequencies[long_freq_ar_i++] = frequency;
     4d4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <long_freq_ar_i>
     4d8:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <long_freq_ar_i+0x1>
     4dc:	9c 01       	movw	r18, r24
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <long_freq_ar_i+0x1>
     4e6:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <long_freq_ar_i>
     4ea:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <_ZL9frequency>
     4ee:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <_ZL9frequency+0x1>
     4f2:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <_ZL9frequency+0x2>
     4f6:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <_ZL9frequency+0x3>
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	fc 01       	movw	r30, r24
     504:	e0 52       	subi	r30, 0x20	; 32
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	40 83       	st	Z, r20
     50a:	51 83       	std	Z+1, r21	; 0x01
     50c:	62 83       	std	Z+2, r22	; 0x02
     50e:	73 83       	std	Z+3, r23	; 0x03
					if (long_freq_ar_i >= LONG_FREQ_AR_LEN) long_freq_ar_i = 0;
     510:	29 31       	cpi	r18, 0x19	; 25
     512:	31 05       	cpc	r19, r1
     514:	24 f0       	brlt	.+8      	; 0x51e <main+0xb6>
     516:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <long_freq_ar_i+0x1>
     51a:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <long_freq_ar_i>
					float long_average_freq = get_av(long_last_frequencies, LONG_FREQ_AR_LEN);
     51e:	69 e1       	ldi	r22, 0x19	; 25
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 ee       	ldi	r24, 0xE0	; 224
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	5b df       	rcall	.-330    	; 0x3de <_Z6get_avPdi>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
					float diff = abs(long_average_freq - frequency);
     52c:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <_ZL9frequency>
     530:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <_ZL9frequency+0x1>
     534:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <_ZL9frequency+0x2>
     538:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <_ZL9frequency+0x3>
					float max_diff = long_average_freq * FREQ_MAX_DIFF;

					if (diff < max_diff){
     53c:	60 d5       	rcall	.+2752   	; 0xffe <__subsf3>
     53e:	30 d6       	rcall	.+3168   	; 0x11a0 <__fixsfsi>
     540:	9b 01       	movw	r18, r22
     542:	77 23       	and	r23, r23
     544:	24 f4       	brge	.+8      	; 0x54e <main+0xe6>
     546:	22 27       	eor	r18, r18
     548:	33 27       	eor	r19, r19
     54a:	26 1b       	sub	r18, r22
     54c:	37 0b       	sbc	r19, r23
     54e:	b9 01       	movw	r22, r18
     550:	33 0f       	add	r19, r19
     552:	88 0b       	sbc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	57 d6       	rcall	.+3246   	; 0x1206 <__floatsisf>
     558:	4b 01       	movw	r8, r22
     55a:	5c 01       	movw	r10, r24
     55c:	2d ec       	ldi	r18, 0xCD	; 205
     55e:	3c ec       	ldi	r19, 0xCC	; 204
     560:	4c e4       	ldi	r20, 0x4C	; 76
     562:	5e e3       	ldi	r21, 0x3E	; 62
     564:	c7 01       	movw	r24, r14
     566:	b6 01       	movw	r22, r12
     568:	21 d7       	rcall	.+3650   	; 0x13ac <__mulsf3>
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	c5 01       	movw	r24, r10
     570:	b4 01       	movw	r22, r8
     572:	aa d5       	rcall	.+2900   	; 0x10c8 <__cmpsf2>
     574:	88 23       	and	r24, r24
     576:	2c f5       	brge	.+74     	; 0x5c2 <main+0x15a>
						// get average freq
						short_last_frequencies[short_freq_ar_i++] = frequency;
     578:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
     57c:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x1>
     580:	9c 01       	movw	r18, r24
     582:	2f 5f       	subi	r18, 0xFF	; 255
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	30 93 b5 00 	sts	0x00B5, r19	; 0x8000b5 <__data_end+0x1>
     58a:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__data_end>
     58e:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <_ZL9frequency>
     592:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <_ZL9frequency+0x1>
     596:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <_ZL9frequency+0x2>
     59a:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <_ZL9frequency+0x3>
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	fc 01       	movw	r30, r24
     5a8:	ea 54       	subi	r30, 0x4A	; 74
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	40 83       	st	Z, r20
     5ae:	51 83       	std	Z+1, r21	; 0x01
     5b0:	62 83       	std	Z+2, r22	; 0x02
     5b2:	73 83       	std	Z+3, r23	; 0x03
						if (short_freq_ar_i >= SHORT_FREQ_AR_LEN) short_freq_ar_i = 0;
     5b4:	2a 30       	cpi	r18, 0x0A	; 10
     5b6:	31 05       	cpc	r19, r1
     5b8:	24 f0       	brlt	.+8      	; 0x5c2 <main+0x15a>
     5ba:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <__data_end+0x1>
     5be:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__data_end>
					}
			
					float short_average_freq = get_av(short_last_frequencies, SHORT_FREQ_AR_LEN);
     5c2:	6a e0       	ldi	r22, 0x0A	; 10
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	86 eb       	ldi	r24, 0xB6	; 182
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	09 df       	rcall	.-494    	; 0x3de <_Z6get_avPdi>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
					getNoteByFreq(&currentNote, short_average_freq); // RECOGNIZE NOTE
     5d0:	ab 01       	movw	r20, r22
     5d2:	bc 01       	movw	r22, r24
     5d4:	80 ec       	ldi	r24, 0xC0	; 192
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	c5 d2       	rcall	.+1418   	; 0xb64 <_Z13getNoteByFreqP4Noted>
					if (currentNote.valid) {
     5da:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <currentNote+0xe>
     5de:	88 23       	and	r24, r24
     5e0:	39 f0       	breq	.+14     	; 0x5f0 <main+0x188>
						//USART_Transmit_int((int)short_average_freq);
						//USART_Println();
						//USART_Println();
						displ.displayNote(&currentNote, short_average_freq); // DISPLAY NOTE
     5e2:	a7 01       	movw	r20, r14
     5e4:	96 01       	movw	r18, r12
     5e6:	60 ec       	ldi	r22, 0xC0	; 192
     5e8:	71 e0       	ldi	r23, 0x01	; 1
     5ea:	86 e8       	ldi	r24, 0x86	; 134
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	5e d2       	rcall	.+1212   	; 0xaac <_ZN7Display11displayNoteEPK4Noted>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f0:	8f e0       	ldi	r24, 0x0F	; 15
     5f2:	97 e2       	ldi	r25, 0x27	; 39
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <main+0x18c>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x192>
     5fa:	00 00       	nop
     5fc:	3b cf       	rjmp	.-394    	; 0x474 <main+0xc>

000005fe <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     5fe:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     602:	e6 e8       	ldi	r30, 0x86	; 134
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	11 82       	std	Z+1, r1	; 0x01
     608:	10 82       	st	Z, r1
     60a:	12 82       	std	Z+2, r1	; 0x02
     60c:	08 95       	ret

0000060e <_ZN7Display5lightEj>:
	}
	this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     60e:	fc 01       	movw	r30, r24
     610:	80 81       	ld	r24, Z
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	86 17       	cp	r24, r22
     616:	97 07       	cpc	r25, r23
     618:	99 f0       	breq	.+38     	; 0x640 <_ZN7Display5lightEj+0x32>
     61a:	12 ba       	out	0x12, r1	; 18
     61c:	11 82       	std	Z+1, r1	; 0x01
     61e:	10 82       	st	Z, r1
     620:	60 fd       	sbrc	r22, 0
     622:	91 9a       	sbi	0x12, 1	; 18
     624:	61 fd       	sbrc	r22, 1
     626:	94 9a       	sbi	0x12, 4	; 18
     628:	62 fd       	sbrc	r22, 2
     62a:	95 9a       	sbi	0x12, 5	; 18
     62c:	63 fd       	sbrc	r22, 3
     62e:	96 9a       	sbi	0x12, 6	; 18
     630:	64 fd       	sbrc	r22, 4
     632:	92 9a       	sbi	0x12, 2	; 18
     634:	65 fd       	sbrc	r22, 5
     636:	93 9a       	sbi	0x12, 3	; 18
     638:	66 fd       	sbrc	r22, 6
     63a:	90 9a       	sbi	0x12, 0	; 18
     63c:	71 83       	std	Z+1, r23	; 0x01
     63e:	60 83       	st	Z, r22
     640:	08 95       	ret

00000642 <_ZN7Display10lightSharpEb>:
     642:	66 23       	and	r22, r22
     644:	11 f0       	breq	.+4      	; 0x64a <_ZN7Display10lightSharpEb+0x8>
     646:	97 9a       	sbi	0x12, 7	; 18
     648:	01 c0       	rjmp	.+2      	; 0x64c <_ZN7Display10lightSharpEb+0xa>
     64a:	97 98       	cbi	0x12, 7	; 18
     64c:	fc 01       	movw	r30, r24
     64e:	62 83       	std	Z+2, r22	; 0x02
     650:	08 95       	ret

00000652 <_ZN7Display12rebuildCacheEd>:
	//Serial.print(ledFCache.Bs[2]);
	//Serial.println();
}

// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     652:	4f 92       	push	r4
     654:	5f 92       	push	r5
     656:	6f 92       	push	r6
     658:	7f 92       	push	r7
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	ec 01       	movw	r28, r24
     670:	4a 01       	movw	r8, r20
     672:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     674:	2a e0       	ldi	r18, 0x0A	; 10
     676:	37 ed       	ldi	r19, 0xD7	; 215
     678:	43 ea       	ldi	r20, 0xA3	; 163
     67a:	5d e3       	ldi	r21, 0x3D	; 61
     67c:	c5 01       	movw	r24, r10
     67e:	b4 01       	movw	r22, r8
     680:	95 d6       	rcall	.+3370   	; 0x13ac <__mulsf3>
     682:	2b 01       	movw	r4, r22
     684:	3c 01       	movw	r6, r24
     686:	6e a7       	std	Y+46, r22	; 0x2e
     688:	7f a7       	std	Y+47, r23	; 0x2f
     68a:	88 ab       	std	Y+48, r24	; 0x30
     68c:	99 ab       	std	Y+49, r25	; 0x31
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     68e:	2a e9       	ldi	r18, 0x9A	; 154
     690:	39 e9       	ldi	r19, 0x99	; 153
     692:	49 e1       	ldi	r20, 0x19	; 25
     694:	5e e3       	ldi	r21, 0x3E	; 62
     696:	c5 01       	movw	r24, r10
     698:	b4 01       	movw	r22, r8
     69a:	88 d6       	rcall	.+3344   	; 0x13ac <__mulsf3>
     69c:	6b 01       	movw	r12, r22
     69e:	7c 01       	movw	r14, r24
     6a0:	6a ab       	std	Y+50, r22	; 0x32
     6a2:	7b ab       	std	Y+51, r23	; 0x33
     6a4:	8c ab       	std	Y+52, r24	; 0x34
     6a6:	9d ab       	std	Y+53, r25	; 0x35
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     6a8:	23 e3       	ldi	r18, 0x33	; 51
     6aa:	33 e3       	ldi	r19, 0x33	; 51
     6ac:	43 eb       	ldi	r20, 0xB3	; 179
     6ae:	5e e3       	ldi	r21, 0x3E	; 62
     6b0:	c5 01       	movw	r24, r10
     6b2:	b4 01       	movw	r22, r8
     6b4:	7b d6       	rcall	.+3318   	; 0x13ac <__mulsf3>
     6b6:	4b 01       	movw	r8, r22
     6b8:	5c 01       	movw	r10, r24
     6ba:	6e ab       	std	Y+54, r22	; 0x36
     6bc:	7f ab       	std	Y+55, r23	; 0x37
     6be:	88 af       	std	Y+56, r24	; 0x38
     6c0:	99 af       	std	Y+57, r25	; 0x39
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     6c2:	a3 01       	movw	r20, r6
     6c4:	92 01       	movw	r18, r4
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	84 e8       	ldi	r24, 0x84	; 132
     6cc:	92 ec       	ldi	r25, 0xC2	; 194
     6ce:	00 d5       	rcall	.+2560   	; 0x10d0 <__divsf3>
     6d0:	6e 8b       	std	Y+22, r22	; 0x16
     6d2:	7f 8b       	std	Y+23, r23	; 0x17
     6d4:	88 8f       	std	Y+24, r24	; 0x18
     6d6:	99 8f       	std	Y+25, r25	; 0x19
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	a0 ef       	ldi	r26, 0xF0	; 240
     6de:	b2 e4       	ldi	r27, 0x42	; 66
     6e0:	8a a3       	std	Y+34, r24	; 0x22
     6e2:	9b a3       	std	Y+35, r25	; 0x23
     6e4:	ac a3       	std	Y+36, r26	; 0x24
     6e6:	bd a3       	std	Y+37, r27	; 0x25
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     6e8:	a3 01       	movw	r20, r6
     6ea:	92 01       	movw	r18, r4
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	86 d4       	rcall	.+2316   	; 0xffe <__subsf3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 e1       	ldi	r24, 0x10	; 16
     6fc:	92 ec       	ldi	r25, 0xC2	; 194
     6fe:	e8 d4       	rcall	.+2512   	; 0x10d0 <__divsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	6a 8f       	std	Y+26, r22	; 0x1a
     706:	7b 8f       	std	Y+27, r23	; 0x1b
     708:	8c 8f       	std	Y+28, r24	; 0x1c
     70a:	9d 8f       	std	Y+29, r25	; 0x1d
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	4d d6       	rcall	.+3226   	; 0x13ac <__mulsf3>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	80 e9       	ldi	r24, 0x90	; 144
     71c:	91 e4       	ldi	r25, 0x41	; 65
     71e:	6f d4       	rcall	.+2270   	; 0xffe <__subsf3>
     720:	6e a3       	std	Y+38, r22	; 0x26
     722:	7f a3       	std	Y+39, r23	; 0x27
     724:	88 a7       	std	Y+40, r24	; 0x28
     726:	99 a7       	std	Y+41, r25	; 0x29
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     728:	a7 01       	movw	r20, r14
     72a:	96 01       	movw	r18, r12
     72c:	c5 01       	movw	r24, r10
     72e:	b4 01       	movw	r22, r8
     730:	66 d4       	rcall	.+2252   	; 0xffe <__subsf3>
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e9       	ldi	r24, 0x90	; 144
     73c:	91 ec       	ldi	r25, 0xC1	; 193
     73e:	c8 d4       	rcall	.+2448   	; 0x10d0 <__divsf3>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	6e 8f       	std	Y+30, r22	; 0x1e
     746:	7f 8f       	std	Y+31, r23	; 0x1f
     748:	88 a3       	std	Y+32, r24	; 0x20
     74a:	99 a3       	std	Y+33, r25	; 0x21
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	2d d6       	rcall	.+3162   	; 0x13ac <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	cb 01       	movw	r24, r22
     75c:	50 d4       	rcall	.+2208   	; 0xffe <__subsf3>
     75e:	6a a7       	std	Y+42, r22	; 0x2a
     760:	7b a7       	std	Y+43, r23	; 0x2b
     762:	8c a7       	std	Y+44, r24	; 0x2c
     764:	9d a7       	std	Y+45, r25	; 0x2d
}
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	08 95       	ret

00000784 <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
     79e:	6a 01       	movw	r12, r20
     7a0:	7b 01       	movw	r14, r22
     7a2:	b9 01       	movw	r22, r18
     7a4:	a8 01       	movw	r20, r16
	this->rebuildCache(max_distance); // find new functions
     7a6:	55 df       	rcall	.-342    	; 0x652 <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	a9 01       	movw	r20, r18
     7ae:	c7 01       	movw	r24, r14
     7b0:	b6 01       	movw	r22, r12
     7b2:	8a d4       	rcall	.+2324   	; 0x10c8 <__cmpsf2>
     7b4:	88 23       	and	r24, r24
     7b6:	0c f4       	brge	.+2      	; 0x7ba <_ZN7Display25getIndicatorValByDistanceEdd+0x36>
     7b8:	4f c0       	rjmp	.+158    	; 0x858 <_ZN7Display25getIndicatorValByDistanceEdd+0xd4>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     7ba:	8e a8       	ldd	r8, Y+54	; 0x36
     7bc:	9f a8       	ldd	r9, Y+55	; 0x37
     7be:	a8 ac       	ldd	r10, Y+56	; 0x38
     7c0:	b9 ac       	ldd	r11, Y+57	; 0x39
     7c2:	a5 01       	movw	r20, r10
     7c4:	94 01       	movw	r18, r8
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	ec d5       	rcall	.+3032   	; 0x13a4 <__gesf2>
     7cc:	18 16       	cp	r1, r24
     7ce:	0c f4       	brge	.+2      	; 0x7d2 <_ZN7Display25getIndicatorValByDistanceEdd+0x4e>
     7d0:	46 c0       	rjmp	.+140    	; 0x85e <_ZN7Display25getIndicatorValByDistanceEdd+0xda>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     7d2:	2e a5       	ldd	r18, Y+46	; 0x2e
     7d4:	3f a5       	ldd	r19, Y+47	; 0x2f
     7d6:	48 a9       	ldd	r20, Y+48	; 0x30
     7d8:	59 a9       	ldd	r21, Y+49	; 0x31
     7da:	c7 01       	movw	r24, r14
     7dc:	b6 01       	movw	r22, r12
     7de:	74 d4       	rcall	.+2280   	; 0x10c8 <__cmpsf2>
     7e0:	18 16       	cp	r1, r24
     7e2:	b4 f4       	brge	.+44     	; 0x810 <_ZN7Display25getIndicatorValByDistanceEdd+0x8c>
     7e4:	2a a9       	ldd	r18, Y+50	; 0x32
     7e6:	3b a9       	ldd	r19, Y+51	; 0x33
     7e8:	4c a9       	ldd	r20, Y+52	; 0x34
     7ea:	5d a9       	ldd	r21, Y+53	; 0x35
     7ec:	c7 01       	movw	r24, r14
     7ee:	b6 01       	movw	r22, r12
     7f0:	6b d4       	rcall	.+2262   	; 0x10c8 <__cmpsf2>
     7f2:	18 16       	cp	r1, r24
     7f4:	54 f4       	brge	.+20     	; 0x80a <_ZN7Display25getIndicatorValByDistanceEdd+0x86>
     7f6:	a5 01       	movw	r20, r10
     7f8:	94 01       	movw	r18, r8
     7fa:	c7 01       	movw	r24, r14
     7fc:	b6 01       	movw	r22, r12
     7fe:	64 d4       	rcall	.+2248   	; 0x10c8 <__cmpsf2>
     800:	18 16       	cp	r1, r24
     802:	4c f0       	brlt	.+18     	; 0x816 <_ZN7Display25getIndicatorValByDistanceEdd+0x92>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     804:	02 e0       	ldi	r16, 0x02	; 2
     806:	10 e0       	ldi	r17, 0x00	; 0
     808:	08 c0       	rjmp	.+16     	; 0x81a <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
     80a:	01 e0       	ldi	r16, 0x01	; 1
     80c:	10 e0       	ldi	r17, 0x00	; 0
     80e:	05 c0       	rjmp	.+10     	; 0x81a <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance <= ledFCache.xBounds[i])
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     816:	03 e0       	ldi	r16, 0x03	; 3
     818:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     81a:	f8 01       	movw	r30, r16
     81c:	31 96       	adiw	r30, 0x01	; 1
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ee 0f       	add	r30, r30
     824:	ff 1f       	adc	r31, r31
     826:	ec 0f       	add	r30, r28
     828:	fd 1f       	adc	r31, r29
     82a:	22 89       	ldd	r18, Z+18	; 0x12
     82c:	33 89       	ldd	r19, Z+19	; 0x13
     82e:	44 89       	ldd	r20, Z+20	; 0x14
     830:	55 89       	ldd	r21, Z+21	; 0x15
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	ba d5       	rcall	.+2932   	; 0x13ac <__mulsf3>
     838:	0c 5f       	subi	r16, 0xFC	; 252
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
     83c:	00 0f       	add	r16, r16
     83e:	11 1f       	adc	r17, r17
     840:	00 0f       	add	r16, r16
     842:	11 1f       	adc	r17, r17
     844:	c0 0f       	add	r28, r16
     846:	d1 1f       	adc	r29, r17
     848:	2a 89       	ldd	r18, Y+18	; 0x12
     84a:	3b 89       	ldd	r19, Y+19	; 0x13
     84c:	4c 89       	ldd	r20, Y+20	; 0x14
     84e:	5d 89       	ldd	r21, Y+21	; 0x15
     850:	d7 d3       	rcall	.+1966   	; 0x1000 <__addsf3>
     852:	a6 d4       	rcall	.+2380   	; 0x11a0 <__fixsfsi>
	return val;
     854:	cb 01       	movw	r24, r22
     856:	05 c0       	rjmp	.+10     	; 0x862 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     858:	88 e7       	ldi	r24, 0x78	; 120
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	02 c0       	rjmp	.+4      	; 0x862 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
	return val;
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	ff 90       	pop	r15
     86c:	ef 90       	pop	r14
     86e:	df 90       	pop	r13
     870:	cf 90       	pop	r12
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	9f 90       	pop	r9
     878:	8f 90       	pop	r8
     87a:	08 95       	ret

0000087c <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     87c:	2f 92       	push	r2
     87e:	3f 92       	push	r3
     880:	4f 92       	push	r4
     882:	5f 92       	push	r5
     884:	6f 92       	push	r6
     886:	7f 92       	push	r7
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	6c 97       	sbiw	r28, 0x1c	; 28
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	1c 01       	movw	r2, r24
     8b2:	8b 01       	movw	r16, r22
     8b4:	2d 8b       	std	Y+21, r18	; 0x15
     8b6:	3e 8b       	std	Y+22, r19	; 0x16
     8b8:	4f 8b       	std	Y+23, r20	; 0x17
     8ba:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     8bc:	db 01       	movw	r26, r22
     8be:	16 96       	adiw	r26, 0x06	; 6
     8c0:	8d 91       	ld	r24, X+
     8c2:	9d 91       	ld	r25, X+
     8c4:	0d 90       	ld	r0, X+
     8c6:	bc 91       	ld	r27, X
     8c8:	a0 2d       	mov	r26, r0
     8ca:	89 8f       	std	Y+25, r24	; 0x19
     8cc:	9a 8f       	std	Y+26, r25	; 0x1a
     8ce:	ab 8f       	std	Y+27, r26	; 0x1b
     8d0:	bc 8f       	std	Y+28, r27	; 0x1c
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     8d2:	fb 01       	movw	r30, r22
     8d4:	82 84       	ldd	r8, Z+10	; 0x0a
     8d6:	93 84       	ldd	r9, Z+11	; 0x0b
     8d8:	a4 84       	ldd	r10, Z+12	; 0x0c
     8da:	b5 84       	ldd	r11, Z+13	; 0x0d
     8dc:	9c 01       	movw	r18, r24
     8de:	ad 01       	movw	r20, r26
     8e0:	c5 01       	movw	r24, r10
     8e2:	b4 01       	movw	r22, r8
     8e4:	8c d3       	rcall	.+1816   	; 0xffe <__subsf3>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     8ea:	d8 01       	movw	r26, r16
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	4d 90       	ld	r4, X+
     8f0:	5d 90       	ld	r5, X+
     8f2:	6d 90       	ld	r6, X+
     8f4:	7c 90       	ld	r7, X
     8f6:	15 97       	sbiw	r26, 0x05	; 5
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     8f8:	29 8d       	ldd	r18, Y+25	; 0x19
     8fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8fc:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8fe:	5c 8d       	ldd	r21, Y+28	; 0x1c
     900:	6d 89       	ldd	r22, Y+21	; 0x15
     902:	7e 89       	ldd	r23, Y+22	; 0x16
     904:	8f 89       	ldd	r24, Y+23	; 0x17
     906:	98 8d       	ldd	r25, Y+24	; 0x18
     908:	7a d3       	rcall	.+1780   	; 0xffe <__subsf3>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	b4 d4       	rcall	.+2408   	; 0x127c <fmin>
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     914:	69 83       	std	Y+1, r22	; 0x01
     916:	7a 83       	std	Y+2, r23	; 0x02
     918:	8b 83       	std	Y+3, r24	; 0x03
     91a:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
     91c:	29 8d       	ldd	r18, Y+25	; 0x19
     91e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     920:	4b 8d       	ldd	r20, Y+27	; 0x1b
     922:	5c 8d       	ldd	r21, Y+28	; 0x1c
     924:	c3 01       	movw	r24, r6
     926:	b2 01       	movw	r22, r4
     928:	6a d3       	rcall	.+1748   	; 0xffe <__subsf3>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	3c d5       	rcall	.+2680   	; 0x13ac <__mulsf3>
     934:	9b 01       	movw	r18, r22
     936:	ac 01       	movw	r20, r24
     938:	c3 01       	movw	r24, r6
     93a:	b2 01       	movw	r22, r4
     93c:	60 d3       	rcall	.+1728   	; 0xffe <__subsf3>
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	6d 89       	ldd	r22, Y+21	; 0x15
     944:	7e 89       	ldd	r23, Y+22	; 0x16
     946:	8f 89       	ldd	r24, Y+23	; 0x17
     948:	98 8d       	ldd	r25, Y+24	; 0x18
     94a:	59 d3       	rcall	.+1714   	; 0xffe <__subsf3>
     94c:	29 d4       	rcall	.+2130   	; 0x11a0 <__fixsfsi>
     94e:	9b 01       	movw	r18, r22
     950:	77 23       	and	r23, r23
     952:	24 f4       	brge	.+8      	; 0x95c <_ZN7Display14lightIndicatorEPK4Noted+0xe0>
     954:	22 27       	eor	r18, r18
     956:	33 27       	eor	r19, r19
     958:	26 1b       	sub	r18, r22
     95a:	37 0b       	sbc	r19, r23
     95c:	b9 01       	movw	r22, r18
     95e:	33 0f       	add	r19, r19
     960:	88 0b       	sbc	r24, r24
     962:	99 0b       	sbc	r25, r25
     964:	50 d4       	rcall	.+2208   	; 0x1206 <__floatsisf>
     966:	9b 01       	movw	r18, r22
     968:	ac 01       	movw	r20, r24
     96a:	c7 01       	movw	r24, r14
     96c:	b6 01       	movw	r22, r12
     96e:	86 d4       	rcall	.+2316   	; 0x127c <fmin>
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     970:	6d 83       	std	Y+5, r22	; 0x05
     972:	7e 83       	std	Y+6, r23	; 0x06
     974:	8f 83       	std	Y+7, r24	; 0x07
     976:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
     978:	a3 01       	movw	r20, r6
     97a:	92 01       	movw	r18, r4
     97c:	6d 89       	ldd	r22, Y+21	; 0x15
     97e:	7e 89       	ldd	r23, Y+22	; 0x16
     980:	8f 89       	ldd	r24, Y+23	; 0x17
     982:	98 8d       	ldd	r25, Y+24	; 0x18
     984:	3c d3       	rcall	.+1656   	; 0xffe <__subsf3>
     986:	0c d4       	rcall	.+2072   	; 0x11a0 <__fixsfsi>
     988:	9b 01       	movw	r18, r22
     98a:	77 23       	and	r23, r23
     98c:	24 f4       	brge	.+8      	; 0x996 <_ZN7Display14lightIndicatorEPK4Noted+0x11a>
     98e:	22 27       	eor	r18, r18
     990:	33 27       	eor	r19, r19
     992:	26 1b       	sub	r18, r22
     994:	37 0b       	sbc	r19, r23
     996:	b9 01       	movw	r22, r18
     998:	33 0f       	add	r19, r19
     99a:	88 0b       	sbc	r24, r24
     99c:	99 0b       	sbc	r25, r25
     99e:	33 d4       	rcall	.+2150   	; 0x1206 <__floatsisf>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	c7 01       	movw	r24, r14
     9a6:	b6 01       	movw	r22, r12
     9a8:	69 d4       	rcall	.+2258   	; 0x127c <fmin>
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     9aa:	69 87       	std	Y+9, r22	; 0x09
     9ac:	7a 87       	std	Y+10, r23	; 0x0a
     9ae:	8b 87       	std	Y+11, r24	; 0x0b
     9b0:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
     9b2:	a3 01       	movw	r20, r6
     9b4:	92 01       	movw	r18, r4
     9b6:	c5 01       	movw	r24, r10
     9b8:	b4 01       	movw	r22, r8
     9ba:	21 d3       	rcall	.+1602   	; 0xffe <__subsf3>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	5f e3       	ldi	r21, 0x3F	; 63
     9c4:	f3 d4       	rcall	.+2534   	; 0x13ac <__mulsf3>
     9c6:	a3 01       	movw	r20, r6
     9c8:	92 01       	movw	r18, r4
     9ca:	1a d3       	rcall	.+1588   	; 0x1000 <__addsf3>
     9cc:	2d 89       	ldd	r18, Y+21	; 0x15
     9ce:	3e 89       	ldd	r19, Y+22	; 0x16
     9d0:	4f 89       	ldd	r20, Y+23	; 0x17
     9d2:	58 8d       	ldd	r21, Y+24	; 0x18
     9d4:	14 d3       	rcall	.+1576   	; 0xffe <__subsf3>
     9d6:	e4 d3       	rcall	.+1992   	; 0x11a0 <__fixsfsi>
     9d8:	9b 01       	movw	r18, r22
     9da:	77 23       	and	r23, r23
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <_ZN7Display14lightIndicatorEPK4Noted+0x16a>
     9de:	22 27       	eor	r18, r18
     9e0:	33 27       	eor	r19, r19
     9e2:	26 1b       	sub	r18, r22
     9e4:	37 0b       	sbc	r19, r23
     9e6:	b9 01       	movw	r22, r18
     9e8:	33 0f       	add	r19, r19
     9ea:	88 0b       	sbc	r24, r24
     9ec:	99 0b       	sbc	r25, r25
     9ee:	0b d4       	rcall	.+2070   	; 0x1206 <__floatsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	41 d4       	rcall	.+2178   	; 0x127c <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     9fa:	6d 87       	std	Y+13, r22	; 0x0d
     9fc:	7e 87       	std	Y+14, r23	; 0x0e
     9fe:	8f 87       	std	Y+15, r24	; 0x0f
     a00:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     a02:	2d 89       	ldd	r18, Y+21	; 0x15
     a04:	3e 89       	ldd	r19, Y+22	; 0x16
     a06:	4f 89       	ldd	r20, Y+23	; 0x17
     a08:	58 8d       	ldd	r21, Y+24	; 0x18
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	f7 d2       	rcall	.+1518   	; 0xffe <__subsf3>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	31 d4       	rcall	.+2146   	; 0x127c <fmin>
	};
     a1a:	69 8b       	std	Y+17, r22	; 0x11
     a1c:	7a 8b       	std	Y+18, r23	; 0x12
     a1e:	8b 8b       	std	Y+19, r24	; 0x13
     a20:	9c 8b       	std	Y+20, r25	; 0x14
     a22:	fe 01       	movw	r30, r28
     a24:	31 96       	adiw	r30, 0x01	; 1
     a26:	3f 01       	movw	r6, r30
     a28:	41 01       	movw	r8, r2
     a2a:	aa 24       	eor	r10, r10
     a2c:	a3 94       	inc	r10
     a2e:	b1 2c       	mov	r11, r1
     a30:	06 c0       	rjmp	.+12     	; 0xa3e <_ZN7Display14lightIndicatorEPK4Noted+0x1c2>
     a32:	ff ef       	ldi	r31, 0xFF	; 255
     a34:	af 1a       	sub	r10, r31
     a36:	bf 0a       	sbc	r11, r31
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	88 0e       	add	r8, r24
     a3c:	91 1c       	adc	r9, r1
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     a3e:	d3 01       	movw	r26, r6
     a40:	4d 91       	ld	r20, X+
     a42:	5d 91       	ld	r21, X+
     a44:	6d 91       	ld	r22, X+
     a46:	7d 91       	ld	r23, X+
     a48:	3d 01       	movw	r6, r26
     a4a:	97 01       	movw	r18, r14
     a4c:	86 01       	movw	r16, r12
     a4e:	c1 01       	movw	r24, r2
     a50:	99 de       	rcall	.-718    	; 0x784 <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     a52:	b3 e0       	ldi	r27, 0x03	; 3
     a54:	ab 16       	cp	r10, r27
     a56:	b1 04       	cpc	r11, r1
     a58:	39 f0       	breq	.+14     	; 0xa68 <_ZN7Display14lightIndicatorEPK4Noted+0x1ec>
			this->indicatorBar[i].r = val;
     a5a:	f4 01       	movw	r30, r8
     a5c:	83 83       	std	Z+3, r24	; 0x03
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     a5e:	f5 e0       	ldi	r31, 0x05	; 5
     a60:	af 16       	cp	r10, r31
     a62:	b1 04       	cpc	r11, r1
     a64:	34 f3       	brlt	.-52     	; 0xa32 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <_ZN7Display14lightIndicatorEPK4Noted+0x1f4>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     a68:	d1 01       	movw	r26, r2
     a6a:	1a 96       	adiw	r26, 0x0a	; 10
     a6c:	8c 93       	st	X, r24
     a6e:	e1 cf       	rjmp	.-62     	; 0xa32 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     a70:	6f e0       	ldi	r22, 0x0F	; 15
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	c1 01       	movw	r24, r2
     a76:	03 96       	adiw	r24, 0x03	; 3
     a78:	3d d2       	rcall	.+1146   	; 0xef4 <ws2812_sendarray>
}
     a7a:	6c 96       	adiw	r28, 0x1c	; 28
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	7f 90       	pop	r7
     aa0:	6f 90       	pop	r6
     aa2:	5f 90       	pop	r5
     aa4:	4f 90       	pop	r4
     aa6:	3f 90       	pop	r3
     aa8:	2f 90       	pop	r2
     aaa:	08 95       	ret

00000aac <_ZN7Display11displayNoteEPK4Noted>:

void Display::displayNote(const Note* note, double frequency) {
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	8b 01       	movw	r16, r22
     ac0:	69 01       	movw	r12, r18
     ac2:	7a 01       	movw	r14, r20
	DI di = DI::A;
	switch(note->note) {
     ac4:	fb 01       	movw	r30, r22
     ac6:	80 81       	ld	r24, Z
     ac8:	84 34       	cpi	r24, 0x44	; 68
     aca:	81 f0       	breq	.+32     	; 0xaec <_ZN7Display11displayNoteEPK4Noted+0x40>
     acc:	28 f4       	brcc	.+10     	; 0xad8 <_ZN7Display11displayNoteEPK4Noted+0x2c>
     ace:	82 34       	cpi	r24, 0x42	; 66
     ad0:	49 f0       	breq	.+18     	; 0xae4 <_ZN7Display11displayNoteEPK4Noted+0x38>
     ad2:	83 34       	cpi	r24, 0x43	; 67
     ad4:	49 f0       	breq	.+18     	; 0xae8 <_ZN7Display11displayNoteEPK4Noted+0x3c>
     ad6:	12 c0       	rjmp	.+36     	; 0xafc <_ZN7Display11displayNoteEPK4Noted+0x50>
     ad8:	86 34       	cpi	r24, 0x46	; 70
     ada:	61 f0       	breq	.+24     	; 0xaf4 <_ZN7Display11displayNoteEPK4Noted+0x48>
     adc:	48 f0       	brcs	.+18     	; 0xaf0 <_ZN7Display11displayNoteEPK4Noted+0x44>
     ade:	87 34       	cpi	r24, 0x47	; 71
     ae0:	59 f0       	breq	.+22     	; 0xaf8 <_ZN7Display11displayNoteEPK4Noted+0x4c>
     ae2:	0c c0       	rjmp	.+24     	; 0xafc <_ZN7Display11displayNoteEPK4Noted+0x50>
		case 'A':
		di = DI::A;
		break;
		case 'B':
		di = DI::B;
     ae4:	69 e7       	ldi	r22, 0x79	; 121
     ae6:	0b c0       	rjmp	.+22     	; 0xafe <_ZN7Display11displayNoteEPK4Noted+0x52>
		break;
		case 'C':
		di = DI::C;
     ae8:	62 e7       	ldi	r22, 0x72	; 114
		break;
     aea:	09 c0       	rjmp	.+18     	; 0xafe <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'D':
		di = DI::D;
     aec:	6d e3       	ldi	r22, 0x3D	; 61
		break;
     aee:	07 c0       	rjmp	.+14     	; 0xafe <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'E':
		di = DI::E;
     af0:	63 e7       	ldi	r22, 0x73	; 115
		break;
     af2:	05 c0       	rjmp	.+10     	; 0xafe <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'F':
		di = DI::F;
     af4:	63 e6       	ldi	r22, 0x63	; 99
		break;
     af6:	03 c0       	rjmp	.+6      	; 0xafe <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'G':
		di = DI::G;
     af8:	6a e7       	ldi	r22, 0x7A	; 122
		break;
     afa:	01 c0       	rjmp	.+2      	; 0xafe <_ZN7Display11displayNoteEPK4Noted+0x52>

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::displayNote(const Note* note, double frequency) {
	DI di = DI::A;
     afc:	6f e6       	ldi	r22, 0x6F	; 111
void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
}

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	ce 01       	movw	r24, r28
     b02:	85 dd       	rcall	.-1270   	; 0x60e <_ZN7Display5lightEj>
		di = DI::G;
		break;
	}
	
	this->light(di);
	this->lightSharp(note->sharp);
     b04:	f8 01       	movw	r30, r16
     b06:	61 81       	ldd	r22, Z+1	; 0x01
     b08:	ce 01       	movw	r24, r28
     b0a:	9b dd       	rcall	.-1226   	; 0x642 <_ZN7Display10lightSharpEb>
	this->lightIndicator(note, frequency);
     b0c:	a7 01       	movw	r20, r14
     b0e:	96 01       	movw	r18, r12
     b10:	b8 01       	movw	r22, r16
     b12:	ce 01       	movw	r24, r28
     b14:	b3 de       	rcall	.-666    	; 0x87c <_ZN7Display14lightIndicatorEPK4Noted>
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	08 95       	ret

00000b28 <_Z11isFreqLegald>:
		multiplier *= 2.0;
		// last_octave_freq = FIRST_OCT_MAX_FREQ * multiplier;
	}

	return multiplier;
}
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	6b 01       	movw	r12, r22
     b32:	7c 01       	movw	r14, r24
     b34:	2b e9       	ldi	r18, 0x9B	; 155
     b36:	38 e4       	ldi	r19, 0x48	; 72
     b38:	4e e7       	ldi	r20, 0x7E	; 126
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	33 d4       	rcall	.+2150   	; 0x13a4 <__gesf2>
     b3e:	88 23       	and	r24, r24
     b40:	5c f0       	brlt	.+22     	; 0xb58 <_Z11isFreqLegald+0x30>
     b42:	22 e5       	ldi	r18, 0x52	; 82
     b44:	38 e4       	ldi	r19, 0x48	; 72
     b46:	4e ef       	ldi	r20, 0xFE	; 254
     b48:	53 e4       	ldi	r21, 0x43	; 67
     b4a:	c7 01       	movw	r24, r14
     b4c:	b6 01       	movw	r22, r12
     b4e:	bc d2       	rcall	.+1400   	; 0x10c8 <__cmpsf2>
     b50:	88 1f       	adc	r24, r24
     b52:	88 27       	eor	r24, r24
     b54:	88 1f       	adc	r24, r24
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <_Z11isFreqLegald+0x32>
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret

00000b64 <_Z13getNoteByFreqP4Noted>:

void getNoteByFreq(Note* note, double freq) {
     b64:	2f 92       	push	r2
     b66:	3f 92       	push	r3
     b68:	4f 92       	push	r4
     b6a:	5f 92       	push	r5
     b6c:	6f 92       	push	r6
     b6e:	7f 92       	push	r7
     b70:	8f 92       	push	r8
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	2c 97       	sbiw	r28, 0x0c	; 12
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	9e 83       	std	Y+6, r25	; 0x06
     b9a:	8d 83       	std	Y+5, r24	; 0x05
     b9c:	49 83       	std	Y+1, r20	; 0x01
     b9e:	5a 83       	std	Y+2, r21	; 0x02
     ba0:	6b 83       	std	Y+3, r22	; 0x03
     ba2:	7c 83       	std	Y+4, r23	; 0x04

#include "noteDetection.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     ba4:	2b e9       	ldi	r18, 0x9B	; 155
     ba6:	38 e4       	ldi	r19, 0x48	; 72
     ba8:	4e e7       	ldi	r20, 0x7E	; 126
     baa:	51 e4       	ldi	r21, 0x41	; 65
     bac:	69 81       	ldd	r22, Y+1	; 0x01
     bae:	7a 81       	ldd	r23, Y+2	; 0x02
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	f7 d3       	rcall	.+2030   	; 0x13a4 <__gesf2>
     bb6:	88 23       	and	r24, r24
     bb8:	0c f4       	brge	.+2      	; 0xbbc <_Z13getNoteByFreqP4Noted+0x58>
     bba:	f9 c0       	rjmp	.+498    	; 0xdae <_Z13getNoteByFreqP4Noted+0x24a>
     bbc:	22 e5       	ldi	r18, 0x52	; 82
     bbe:	38 e4       	ldi	r19, 0x48	; 72
     bc0:	4e ef       	ldi	r20, 0xFE	; 254
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	69 81       	ldd	r22, Y+1	; 0x01
     bc6:	7a 81       	ldd	r23, Y+2	; 0x02
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	7d d2       	rcall	.+1274   	; 0x10c8 <__cmpsf2>
     bce:	88 23       	and	r24, r24
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <_Z13getNoteByFreqP4Noted+0x70>
     bd2:	ed c0       	rjmp	.+474    	; 0xdae <_Z13getNoteByFreqP4Noted+0x24a>
     bd4:	f0 c0       	rjmp	.+480    	; 0xdb6 <_Z13getNoteByFreqP4Noted+0x252>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     bd6:	0f 2e       	mov	r0, r31
     bd8:	c1 2c       	mov	r12, r1
     bda:	d1 2c       	mov	r13, r1
     bdc:	f0 e8       	ldi	r31, 0x80	; 128
     bde:	ef 2e       	mov	r14, r31
     be0:	ff e3       	ldi	r31, 0x3F	; 63
     be2:	ff 2e       	mov	r15, r31
     be4:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     be6:	a7 01       	movw	r20, r14
     be8:	96 01       	movw	r18, r12
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	08 d2       	rcall	.+1040   	; 0x1000 <__addsf3>
     bf0:	6b 01       	movw	r12, r22
     bf2:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     bf4:	2b e9       	ldi	r18, 0x9B	; 155
     bf6:	38 e4       	ldi	r19, 0x48	; 72
     bf8:	4e ef       	ldi	r20, 0xFE	; 254
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	d7 d3       	rcall	.+1966   	; 0x13ac <__mulsf3>
     bfe:	4b 01       	movw	r8, r22
     c00:	5c 01       	movw	r10, r24
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	69 81       	ldd	r22, Y+1	; 0x01
     c08:	7a 81       	ldd	r23, Y+2	; 0x02
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	ca d3       	rcall	.+1940   	; 0x13a4 <__gesf2>
     c10:	18 16       	cp	r1, r24
     c12:	4c f3       	brlt	.-46     	; 0xbe6 <_Z13getNoteByFreqP4Noted+0x82>
     c14:	8f 82       	std	Y+7, r8	; 0x07
     c16:	98 86       	std	Y+8, r9	; 0x08
     c18:	a9 86       	std	Y+9, r10	; 0x09
     c1a:	ba 86       	std	Y+10, r11	; 0x0a
     c1c:	e8 c0       	rjmp	.+464    	; 0xdee <_Z13getNoteByFreqP4Noted+0x28a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c1e:	1c 01       	movw	r2, r24
     c20:	51 01       	movw	r10, r2
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	a8 1a       	sub	r10, r24
     c26:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     c28:	ab 85       	ldd	r26, Y+11	; 0x0b
     c2a:	bc 85       	ldd	r27, Y+12	; 0x0c
     c2c:	6d 91       	ld	r22, X+
     c2e:	7d 91       	ld	r23, X+
     c30:	8d 91       	ld	r24, X+
     c32:	9d 91       	ld	r25, X+
     c34:	bc 87       	std	Y+12, r27	; 0x0c
     c36:	ab 87       	std	Y+11, r26	; 0x0b
     c38:	a7 01       	movw	r20, r14
     c3a:	96 01       	movw	r18, r12
     c3c:	b7 d3       	rcall	.+1902   	; 0x13ac <__mulsf3>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	69 81       	ldd	r22, Y+1	; 0x01
     c44:	7a 81       	ldd	r23, Y+2	; 0x02
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	d9 d1       	rcall	.+946    	; 0xffe <__subsf3>
     c4c:	a9 d2       	rcall	.+1362   	; 0x11a0 <__fixsfsi>
     c4e:	9b 01       	movw	r18, r22
     c50:	77 23       	and	r23, r23
     c52:	24 f4       	brge	.+8      	; 0xc5c <_Z13getNoteByFreqP4Noted+0xf8>
     c54:	22 27       	eor	r18, r18
     c56:	33 27       	eor	r19, r19
     c58:	26 1b       	sub	r18, r22
     c5a:	37 0b       	sbc	r19, r23
     c5c:	b9 01       	movw	r22, r18
     c5e:	33 0f       	add	r19, r19
     c60:	88 0b       	sbc	r24, r24
     c62:	99 0b       	sbc	r25, r25
     c64:	d0 d2       	rcall	.+1440   	; 0x1206 <__floatsisf>
     c66:	96 2e       	mov	r9, r22
     c68:	07 2f       	mov	r16, r23
     c6a:	18 2f       	mov	r17, r24
     c6c:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     c6e:	27 2d       	mov	r18, r7
     c70:	34 2d       	mov	r19, r4
     c72:	45 2d       	mov	r20, r5
     c74:	56 2d       	mov	r21, r6
     c76:	28 d2       	rcall	.+1104   	; 0x10c8 <__cmpsf2>
     c78:	88 23       	and	r24, r24
     c7a:	54 f4       	brge	.+20     	; 0xc90 <_Z13getNoteByFreqP4Noted+0x12c>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c7c:	c1 01       	movw	r24, r2
     c7e:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     c80:	79 2c       	mov	r7, r9
     c82:	40 2e       	mov	r4, r16
     c84:	51 2e       	mov	r5, r17
     c86:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c88:	8c 30       	cpi	r24, 0x0C	; 12
     c8a:	91 05       	cpc	r25, r1
     c8c:	41 f6       	brne	.-112    	; 0xc1e <_Z13getNoteByFreqP4Noted+0xba>
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <_Z13getNoteByFreqP4Noted+0x12e>
     c90:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     c92:	f1 01       	movw	r30, r2
     c94:	ef 58       	subi	r30, 0x8F	; 143
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	80 81       	ld	r24, Z
     c9a:	ed 81       	ldd	r30, Y+5	; 0x05
     c9c:	fe 81       	ldd	r31, Y+6	; 0x06
     c9e:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     ca0:	f1 01       	movw	r30, r2
     ca2:	eb 59       	subi	r30, 0x9B	; 155
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	80 81       	ld	r24, Z
     ca8:	ad 81       	ldd	r26, Y+5	; 0x05
     caa:	be 81       	ldd	r27, Y+6	; 0x06
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     cb0:	f1 01       	movw	r30, r2
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e3 58       	subi	r30, 0x83	; 131
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	42 81       	ldd	r20, Z+2	; 0x02
     cc4:	53 81       	ldd	r21, Z+3	; 0x03
     cc6:	c7 01       	movw	r24, r14
     cc8:	b6 01       	movw	r22, r12
     cca:	70 d3       	rcall	.+1760   	; 0x13ac <__mulsf3>
     ccc:	2b 01       	movw	r4, r22
     cce:	3c 01       	movw	r6, r24
     cd0:	ed 81       	ldd	r30, Y+5	; 0x05
     cd2:	fe 81       	ldd	r31, Y+6	; 0x06
     cd4:	62 83       	std	Z+2, r22	; 0x02
     cd6:	73 83       	std	Z+3, r23	; 0x03
     cd8:	84 83       	std	Z+4, r24	; 0x04
     cda:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     ce0:	fb e0       	ldi	r31, 0x0B	; 11
     ce2:	2f 16       	cp	r2, r31
     ce4:	31 04       	cpc	r3, r1
     ce6:	59 f4       	brne	.+22     	; 0xcfe <_Z13getNoteByFreqP4Noted+0x19a>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	a9 85       	ldd	r26, Y+9	; 0x09
     cee:	ba 85       	ldd	r27, Y+10	; 0x0a
     cf0:	ed 81       	ldd	r30, Y+5	; 0x05
     cf2:	fe 81       	ldd	r31, Y+6	; 0x06
     cf4:	82 87       	std	Z+10, r24	; 0x0a
     cf6:	93 87       	std	Z+11, r25	; 0x0b
     cf8:	a4 87       	std	Z+12, r26	; 0x0c
     cfa:	b5 87       	std	Z+13, r27	; 0x0d
     cfc:	32 c0       	rjmp	.+100    	; 0xd62 <_Z13getNoteByFreqP4Noted+0x1fe>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     cfe:	f1 01       	movw	r30, r2
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	ef 57       	subi	r30, 0x7F	; 127
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	20 81       	ld	r18, Z
     d0e:	31 81       	ldd	r19, Z+1	; 0x01
     d10:	42 81       	ldd	r20, Z+2	; 0x02
     d12:	53 81       	ldd	r21, Z+3	; 0x03
     d14:	c7 01       	movw	r24, r14
     d16:	b6 01       	movw	r22, r12
     d18:	49 d3       	rcall	.+1682   	; 0x13ac <__mulsf3>
     d1a:	a3 01       	movw	r20, r6
     d1c:	92 01       	movw	r18, r4
     d1e:	6f d1       	rcall	.+734    	; 0xffe <__subsf3>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	5f e3       	ldi	r21, 0x3F	; 63
     d28:	41 d3       	rcall	.+1666   	; 0x13ac <__mulsf3>
     d2a:	a3 01       	movw	r20, r6
     d2c:	92 01       	movw	r18, r4
     d2e:	68 d1       	rcall	.+720    	; 0x1000 <__addsf3>
     d30:	ad 81       	ldd	r26, Y+5	; 0x05
     d32:	be 81       	ldd	r27, Y+6	; 0x06
     d34:	1a 96       	adiw	r26, 0x0a	; 10
     d36:	6d 93       	st	X+, r22
     d38:	7d 93       	st	X+, r23
     d3a:	8d 93       	st	X+, r24
     d3c:	9c 93       	st	X, r25
     d3e:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     d40:	21 14       	cp	r2, r1
     d42:	31 04       	cpc	r3, r1
     d44:	71 f4       	brne	.+28     	; 0xd62 <_Z13getNoteByFreqP4Noted+0x1fe>
		note->min_freq = MIN_FREQ*multiplier;
     d46:	2b e9       	ldi	r18, 0x9B	; 155
     d48:	38 e4       	ldi	r19, 0x48	; 72
     d4a:	4e e7       	ldi	r20, 0x7E	; 126
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	2c d3       	rcall	.+1624   	; 0x13ac <__mulsf3>
     d54:	ed 81       	ldd	r30, Y+5	; 0x05
     d56:	fe 81       	ldd	r31, Y+6	; 0x06
     d58:	66 83       	std	Z+6, r22	; 0x06
     d5a:	77 83       	std	Z+7, r23	; 0x07
     d5c:	80 87       	std	Z+8, r24	; 0x08
     d5e:	91 87       	std	Z+9, r25	; 0x09
     d60:	b0 c0       	rjmp	.+352    	; 0xec2 <_Z13getNoteByFreqP4Noted+0x35e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     d62:	f1 01       	movw	r30, r2
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	e7 58       	subi	r30, 0x87	; 135
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	20 81       	ld	r18, Z
     d72:	31 81       	ldd	r19, Z+1	; 0x01
     d74:	42 81       	ldd	r20, Z+2	; 0x02
     d76:	53 81       	ldd	r21, Z+3	; 0x03
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 01       	movw	r22, r12
     d7c:	17 d3       	rcall	.+1582   	; 0x13ac <__mulsf3>
     d7e:	9b 01       	movw	r18, r22
     d80:	ac 01       	movw	r20, r24
     d82:	c3 01       	movw	r24, r6
     d84:	b2 01       	movw	r22, r4
     d86:	3b d1       	rcall	.+630    	; 0xffe <__subsf3>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	5f e3       	ldi	r21, 0x3F	; 63
     d90:	0d d3       	rcall	.+1562   	; 0x13ac <__mulsf3>
     d92:	9b 01       	movw	r18, r22
     d94:	ac 01       	movw	r20, r24
     d96:	c3 01       	movw	r24, r6
     d98:	b2 01       	movw	r22, r4
     d9a:	31 d1       	rcall	.+610    	; 0xffe <__subsf3>
     d9c:	ad 81       	ldd	r26, Y+5	; 0x05
     d9e:	be 81       	ldd	r27, Y+6	; 0x06
     da0:	16 96       	adiw	r26, 0x06	; 6
     da2:	6d 93       	st	X+, r22
     da4:	7d 93       	st	X+, r23
     da6:	8d 93       	st	X+, r24
     da8:	9c 93       	st	X, r25
     daa:	19 97       	sbiw	r26, 0x09	; 9
     dac:	8a c0       	rjmp	.+276    	; 0xec2 <_Z13getNoteByFreqP4Noted+0x35e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     dae:	ed 81       	ldd	r30, Y+5	; 0x05
     db0:	fe 81       	ldd	r31, Y+6	; 0x06
     db2:	16 86       	std	Z+14, r1	; 0x0e
		return;
     db4:	86 c0       	rjmp	.+268    	; 0xec2 <_Z13getNoteByFreqP4Noted+0x35e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     db6:	2b e9       	ldi	r18, 0x9B	; 155
     db8:	38 e4       	ldi	r19, 0x48	; 72
     dba:	4e ef       	ldi	r20, 0xFE	; 254
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	69 81       	ldd	r22, Y+1	; 0x01
     dc0:	7a 81       	ldd	r23, Y+2	; 0x02
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	ee d2       	rcall	.+1500   	; 0x13a4 <__gesf2>
     dc8:	18 16       	cp	r1, r24
     dca:	0c f4       	brge	.+2      	; 0xdce <_Z13getNoteByFreqP4Noted+0x26a>
     dcc:	04 cf       	rjmp	.-504    	; 0xbd6 <_Z13getNoteByFreqP4Noted+0x72>
     dce:	8b e9       	ldi	r24, 0x9B	; 155
     dd0:	98 e4       	ldi	r25, 0x48	; 72
     dd2:	ae ef       	ldi	r26, 0xFE	; 254
     dd4:	b1 e4       	ldi	r27, 0x41	; 65
     dd6:	8f 83       	std	Y+7, r24	; 0x07
     dd8:	98 87       	std	Y+8, r25	; 0x08
     dda:	a9 87       	std	Y+9, r26	; 0x09
     ddc:	ba 87       	std	Y+10, r27	; 0x0a
     dde:	0f 2e       	mov	r0, r31
     de0:	c1 2c       	mov	r12, r1
     de2:	d1 2c       	mov	r13, r1
     de4:	f0 e8       	ldi	r31, 0x80	; 128
     de6:	ef 2e       	mov	r14, r31
     de8:	ff e3       	ldi	r31, 0x3F	; 63
     dea:	ff 2e       	mov	r15, r31
     dec:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     dee:	23 e1       	ldi	r18, 0x13	; 19
     df0:	30 ed       	ldi	r19, 0xD0	; 208
     df2:	42 e8       	ldi	r20, 0x82	; 130
     df4:	51 e4       	ldi	r21, 0x41	; 65
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	d8 d2       	rcall	.+1456   	; 0x13ac <__mulsf3>
     dfc:	9b 01       	movw	r18, r22
     dfe:	ac 01       	movw	r20, r24
     e00:	69 81       	ldd	r22, Y+1	; 0x01
     e02:	7a 81       	ldd	r23, Y+2	; 0x02
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	fa d0       	rcall	.+500    	; 0xffe <__subsf3>
     e0a:	ca d1       	rcall	.+916    	; 0x11a0 <__fixsfsi>
     e0c:	9b 01       	movw	r18, r22
     e0e:	77 23       	and	r23, r23
     e10:	24 f4       	brge	.+8      	; 0xe1a <_Z13getNoteByFreqP4Noted+0x2b6>
     e12:	22 27       	eor	r18, r18
     e14:	33 27       	eor	r19, r19
     e16:	26 1b       	sub	r18, r22
     e18:	37 0b       	sbc	r19, r23
     e1a:	b9 01       	movw	r22, r18
     e1c:	33 0f       	add	r19, r19
     e1e:	88 0b       	sbc	r24, r24
     e20:	99 0b       	sbc	r25, r25
     e22:	f1 d1       	rcall	.+994    	; 0x1206 <__floatsisf>
     e24:	76 2e       	mov	r7, r22
     e26:	47 2e       	mov	r4, r23
     e28:	58 2e       	mov	r5, r24
     e2a:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     e2c:	22 e5       	ldi	r18, 0x52	; 82
     e2e:	38 e4       	ldi	r19, 0x48	; 72
     e30:	4e ef       	ldi	r20, 0xFE	; 254
     e32:	53 e4       	ldi	r21, 0x43	; 67
     e34:	49 d1       	rcall	.+658    	; 0x10c8 <__cmpsf2>
     e36:	88 23       	and	r24, r24
     e38:	44 f4       	brge	.+16     	; 0xe4a <_Z13getNoteByFreqP4Noted+0x2e6>
     e3a:	a1 e8       	ldi	r26, 0x81	; 129
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     e3e:	22 24       	eor	r2, r2
     e40:	23 94       	inc	r2
     e42:	31 2c       	mov	r3, r1
     e44:	bc 87       	std	Y+12, r27	; 0x0c
     e46:	ab 87       	std	Y+11, r26	; 0x0b
     e48:	eb ce       	rjmp	.-554    	; 0xc20 <_Z13getNoteByFreqP4Noted+0xbc>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     e4a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZL10noteSharps+0xb>
     e4e:	ed 81       	ldd	r30, Y+5	; 0x05
     e50:	fe 81       	ldd	r31, Y+6	; 0x06
     e52:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     e54:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL8slopeTol>
     e58:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     e5a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <_ZL9noteNames+0x8>
     e5e:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <_ZL9noteNames+0x9>
     e62:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <_ZL9noteNames+0xa>
     e66:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <_ZL9noteNames+0xb>
     e6a:	c7 01       	movw	r24, r14
     e6c:	b6 01       	movw	r22, r12
     e6e:	9e d2       	rcall	.+1340   	; 0x13ac <__mulsf3>
     e70:	2b 01       	movw	r4, r22
     e72:	3c 01       	movw	r6, r24
     e74:	ad 81       	ldd	r26, Y+5	; 0x05
     e76:	be 81       	ldd	r27, Y+6	; 0x06
     e78:	12 96       	adiw	r26, 0x02	; 2
     e7a:	6d 93       	st	X+, r22
     e7c:	7d 93       	st	X+, r23
     e7e:	8d 93       	st	X+, r24
     e80:	9c 93       	st	X, r25
     e82:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	1e 96       	adiw	r26, 0x0e	; 14
     e88:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     e8a:	23 e1       	ldi	r18, 0x13	; 19
     e8c:	30 ed       	ldi	r19, 0xD0	; 208
     e8e:	42 e8       	ldi	r20, 0x82	; 130
     e90:	51 e4       	ldi	r21, 0x41	; 65
     e92:	c7 01       	movw	r24, r14
     e94:	b6 01       	movw	r22, r12
     e96:	8a d2       	rcall	.+1300   	; 0x13ac <__mulsf3>
     e98:	a3 01       	movw	r20, r6
     e9a:	92 01       	movw	r18, r4
     e9c:	b0 d0       	rcall	.+352    	; 0xffe <__subsf3>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	82 d2       	rcall	.+1284   	; 0x13ac <__mulsf3>
     ea8:	a3 01       	movw	r20, r6
     eaa:	92 01       	movw	r18, r4
     eac:	a9 d0       	rcall	.+338    	; 0x1000 <__addsf3>
     eae:	ed 81       	ldd	r30, Y+5	; 0x05
     eb0:	fe 81       	ldd	r31, Y+6	; 0x06
     eb2:	62 87       	std	Z+10, r22	; 0x0a
     eb4:	73 87       	std	Z+11, r23	; 0x0b
     eb6:	84 87       	std	Z+12, r24	; 0x0c
     eb8:	95 87       	std	Z+13, r25	; 0x0d
     eba:	22 24       	eor	r2, r2
     ebc:	2a 94       	dec	r2
     ebe:	32 2c       	mov	r3, r2
     ec0:	50 cf       	rjmp	.-352    	; 0xd62 <_Z13getNoteByFreqP4Noted+0x1fe>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     ec2:	2c 96       	adiw	r28, 0x0c	; 12
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	9f 90       	pop	r9
     ee4:	8f 90       	pop	r8
     ee6:	7f 90       	pop	r7
     ee8:	6f 90       	pop	r6
     eea:	5f 90       	pop	r5
     eec:	4f 90       	pop	r4
     eee:	3f 90       	pop	r3
     ef0:	2f 90       	pop	r2
     ef2:	08 95       	ret

00000ef4 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     ef4:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     ef6:	28 b3       	in	r18, 0x18	; 24
     ef8:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     efa:	38 b3       	in	r19, 0x18	; 24
     efc:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     efe:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     f00:	f8 94       	cli

  while (datlen--) {
     f02:	61 15       	cp	r22, r1
     f04:	71 05       	cpc	r23, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <ws2812_sendarray+0x16>
     f08:	21 c0       	rjmp	.+66     	; 0xf4c <loop301+0x38>
     f0a:	fc 01       	movw	r30, r24
     f0c:	68 0f       	add	r22, r24
     f0e:	79 1f       	adc	r23, r25
    curbyte=*data++;
     f10:	91 91       	ld	r25, Z+
    
    asm volatile(
     f12:	88 e0       	ldi	r24, 0x08	; 8

00000f14 <loop301>:
     f14:	38 bb       	out	0x18, r19	; 24
     f16:	97 ff       	sbrs	r25, 7
     f18:	28 bb       	out	0x18, r18	; 24
     f1a:	99 0f       	add	r25, r25
     f1c:	00 00       	nop
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <loop301+0xc>
     f20:	28 bb       	out	0x18, r18	; 24
     f22:	00 00       	nop
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <loop301+0x12>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <loop301+0x14>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <loop301+0x16>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <loop301+0x18>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <loop301+0x1a>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <loop301+0x1c>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <loop301+0x1e>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <loop301+0x20>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <loop301+0x22>
     f36:	00 c0       	rjmp	.+0      	; 0xf38 <loop301+0x24>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <loop301+0x26>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <loop301+0x28>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <loop301+0x2a>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <loop301+0x2c>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <loop301+0x2e>
     f42:	8a 95       	dec	r24
     f44:	39 f7       	brne	.-50     	; 0xf14 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     f46:	e6 17       	cp	r30, r22
     f48:	f7 07       	cpc	r31, r23
     f4a:	11 f7       	brne	.-60     	; 0xf10 <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     f4c:	4f bf       	out	0x3f, r20	; 63
     f4e:	08 95       	ret

00000f50 <_Z10USART_Initj>:

void USART_Transmit_unsigned_int (unsigned int data) {
	char fstr[30];
	sprintf(fstr, "%u", data);
	USART_Transmit_ar(fstr);
}
     f50:	90 bd       	out	0x20, r25	; 32
     f52:	89 b9       	out	0x09, r24	; 9
     f54:	88 e1       	ldi	r24, 0x18	; 24
     f56:	8a b9       	out	0x0a, r24	; 10
     f58:	8e e8       	ldi	r24, 0x8E	; 142
     f5a:	80 bd       	out	0x20, r24	; 32
     f5c:	08 95       	ret

00000f5e <_Z14USART_Transmith>:
     f5e:	5d 9b       	sbis	0x0b, 5	; 11
     f60:	fe cf       	rjmp	.-4      	; 0xf5e <_Z14USART_Transmith>
     f62:	8c b9       	out	0x0c, r24	; 12
     f64:	08 95       	ret

00000f66 <_Z17USART_Transmit_arPc>:
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	fc 01       	movw	r30, r24
     f70:	01 90       	ld	r0, Z+
     f72:	00 20       	and	r0, r0
     f74:	e9 f7       	brne	.-6      	; 0xf70 <_Z17USART_Transmit_arPc+0xa>
     f76:	31 97       	sbiw	r30, 0x01	; 1
     f78:	e8 1b       	sub	r30, r24
     f7a:	f9 0b       	sbc	r31, r25
     f7c:	1e 16       	cp	r1, r30
     f7e:	1f 06       	cpc	r1, r31
     f80:	4c f4       	brge	.+18     	; 0xf94 <_Z17USART_Transmit_arPc+0x2e>
     f82:	ec 01       	movw	r28, r24
     f84:	8c 01       	movw	r16, r24
     f86:	0e 0f       	add	r16, r30
     f88:	1f 1f       	adc	r17, r31
     f8a:	89 91       	ld	r24, Y+
     f8c:	e8 df       	rcall	.-48     	; 0xf5e <_Z14USART_Transmith>
     f8e:	c0 17       	cp	r28, r16
     f90:	d1 07       	cpc	r29, r17
     f92:	d9 f7       	brne	.-10     	; 0xf8a <_Z17USART_Transmit_arPc+0x24>
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <_Z18USART_Transmit_inti>:

void USART_Transmit_int (int data) {
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	6e 97       	sbiw	r28, 0x1e	; 30
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
	char fstr[30];
	sprintf(fstr, "%i", data);
     fb6:	9f 93       	push	r25
     fb8:	8f 93       	push	r24
     fba:	80 eb       	ldi	r24, 0xB0	; 176
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	8e 01       	movw	r16, r28
     fc4:	0f 5f       	subi	r16, 0xFF	; 255
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	1f 93       	push	r17
     fca:	0f 93       	push	r16
     fcc:	58 d2       	rcall	.+1200   	; 0x147e <sprintf>
	USART_Transmit_ar(fstr);
     fce:	c8 01       	movw	r24, r16
     fd0:	ca df       	rcall	.-108    	; 0xf66 <_Z17USART_Transmit_arPc>
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	6e 96       	adiw	r28, 0x1e	; 30
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <_Z13USART_Printlnv>:

void USART_Println() {
	USART_Transmit('\r');
     ff4:	8d e0       	ldi	r24, 0x0D	; 13
     ff6:	b3 df       	rcall	.-154    	; 0xf5e <_Z14USART_Transmith>
	USART_Transmit('\n');
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	b1 df       	rcall	.-158    	; 0xf5e <_Z14USART_Transmith>
     ffc:	08 95       	ret

00000ffe <__subsf3>:
     ffe:	50 58       	subi	r21, 0x80	; 128

00001000 <__addsf3>:
    1000:	bb 27       	eor	r27, r27
    1002:	aa 27       	eor	r26, r26
    1004:	0e d0       	rcall	.+28     	; 0x1022 <__addsf3x>
    1006:	94 c1       	rjmp	.+808    	; 0x1330 <__fp_round>
    1008:	85 d1       	rcall	.+778    	; 0x1314 <__fp_pscA>
    100a:	30 f0       	brcs	.+12     	; 0x1018 <__addsf3+0x18>
    100c:	8a d1       	rcall	.+788    	; 0x1322 <__fp_pscB>
    100e:	20 f0       	brcs	.+8      	; 0x1018 <__addsf3+0x18>
    1010:	31 f4       	brne	.+12     	; 0x101e <__addsf3+0x1e>
    1012:	9f 3f       	cpi	r25, 0xFF	; 255
    1014:	11 f4       	brne	.+4      	; 0x101a <__addsf3+0x1a>
    1016:	1e f4       	brtc	.+6      	; 0x101e <__addsf3+0x1e>
    1018:	7a c1       	rjmp	.+756    	; 0x130e <__fp_nan>
    101a:	0e f4       	brtc	.+2      	; 0x101e <__addsf3+0x1e>
    101c:	e0 95       	com	r30
    101e:	e7 fb       	bst	r30, 7
    1020:	70 c1       	rjmp	.+736    	; 0x1302 <__fp_inf>

00001022 <__addsf3x>:
    1022:	e9 2f       	mov	r30, r25
    1024:	96 d1       	rcall	.+812    	; 0x1352 <__fp_split3>
    1026:	80 f3       	brcs	.-32     	; 0x1008 <__addsf3+0x8>
    1028:	ba 17       	cp	r27, r26
    102a:	62 07       	cpc	r22, r18
    102c:	73 07       	cpc	r23, r19
    102e:	84 07       	cpc	r24, r20
    1030:	95 07       	cpc	r25, r21
    1032:	18 f0       	brcs	.+6      	; 0x103a <__addsf3x+0x18>
    1034:	71 f4       	brne	.+28     	; 0x1052 <__addsf3x+0x30>
    1036:	9e f5       	brtc	.+102    	; 0x109e <__addsf3x+0x7c>
    1038:	ae c1       	rjmp	.+860    	; 0x1396 <__fp_zero>
    103a:	0e f4       	brtc	.+2      	; 0x103e <__addsf3x+0x1c>
    103c:	e0 95       	com	r30
    103e:	0b 2e       	mov	r0, r27
    1040:	ba 2f       	mov	r27, r26
    1042:	a0 2d       	mov	r26, r0
    1044:	0b 01       	movw	r0, r22
    1046:	b9 01       	movw	r22, r18
    1048:	90 01       	movw	r18, r0
    104a:	0c 01       	movw	r0, r24
    104c:	ca 01       	movw	r24, r20
    104e:	a0 01       	movw	r20, r0
    1050:	11 24       	eor	r1, r1
    1052:	ff 27       	eor	r31, r31
    1054:	59 1b       	sub	r21, r25
    1056:	99 f0       	breq	.+38     	; 0x107e <__addsf3x+0x5c>
    1058:	59 3f       	cpi	r21, 0xF9	; 249
    105a:	50 f4       	brcc	.+20     	; 0x1070 <__addsf3x+0x4e>
    105c:	50 3e       	cpi	r21, 0xE0	; 224
    105e:	68 f1       	brcs	.+90     	; 0x10ba <__addsf3x+0x98>
    1060:	1a 16       	cp	r1, r26
    1062:	f0 40       	sbci	r31, 0x00	; 0
    1064:	a2 2f       	mov	r26, r18
    1066:	23 2f       	mov	r18, r19
    1068:	34 2f       	mov	r19, r20
    106a:	44 27       	eor	r20, r20
    106c:	58 5f       	subi	r21, 0xF8	; 248
    106e:	f3 cf       	rjmp	.-26     	; 0x1056 <__addsf3x+0x34>
    1070:	46 95       	lsr	r20
    1072:	37 95       	ror	r19
    1074:	27 95       	ror	r18
    1076:	a7 95       	ror	r26
    1078:	f0 40       	sbci	r31, 0x00	; 0
    107a:	53 95       	inc	r21
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__addsf3x+0x4e>
    107e:	7e f4       	brtc	.+30     	; 0x109e <__addsf3x+0x7c>
    1080:	1f 16       	cp	r1, r31
    1082:	ba 0b       	sbc	r27, r26
    1084:	62 0b       	sbc	r22, r18
    1086:	73 0b       	sbc	r23, r19
    1088:	84 0b       	sbc	r24, r20
    108a:	ba f0       	brmi	.+46     	; 0x10ba <__addsf3x+0x98>
    108c:	91 50       	subi	r25, 0x01	; 1
    108e:	a1 f0       	breq	.+40     	; 0x10b8 <__addsf3x+0x96>
    1090:	ff 0f       	add	r31, r31
    1092:	bb 1f       	adc	r27, r27
    1094:	66 1f       	adc	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	c2 f7       	brpl	.-16     	; 0x108c <__addsf3x+0x6a>
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <__addsf3x+0x98>
    109e:	ba 0f       	add	r27, r26
    10a0:	62 1f       	adc	r22, r18
    10a2:	73 1f       	adc	r23, r19
    10a4:	84 1f       	adc	r24, r20
    10a6:	48 f4       	brcc	.+18     	; 0x10ba <__addsf3x+0x98>
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	f7 95       	ror	r31
    10b2:	9e 3f       	cpi	r25, 0xFE	; 254
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <__addsf3x+0x96>
    10b6:	b3 cf       	rjmp	.-154    	; 0x101e <__addsf3+0x1e>
    10b8:	93 95       	inc	r25
    10ba:	88 0f       	add	r24, r24
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__addsf3x+0x9e>
    10be:	99 27       	eor	r25, r25
    10c0:	ee 0f       	add	r30, r30
    10c2:	97 95       	ror	r25
    10c4:	87 95       	ror	r24
    10c6:	08 95       	ret

000010c8 <__cmpsf2>:
    10c8:	f8 d0       	rcall	.+496    	; 0x12ba <__fp_cmp>
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <__cmpsf2+0x6>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	08 95       	ret

000010d0 <__divsf3>:
    10d0:	0c d0       	rcall	.+24     	; 0x10ea <__divsf3x>
    10d2:	2e c1       	rjmp	.+604    	; 0x1330 <__fp_round>
    10d4:	26 d1       	rcall	.+588    	; 0x1322 <__fp_pscB>
    10d6:	40 f0       	brcs	.+16     	; 0x10e8 <__divsf3+0x18>
    10d8:	1d d1       	rcall	.+570    	; 0x1314 <__fp_pscA>
    10da:	30 f0       	brcs	.+12     	; 0x10e8 <__divsf3+0x18>
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <__divsf3+0x16>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <__divsf3+0x18>
    10e2:	0f c1       	rjmp	.+542    	; 0x1302 <__fp_inf>
    10e4:	51 11       	cpse	r21, r1
    10e6:	58 c1       	rjmp	.+688    	; 0x1398 <__fp_szero>
    10e8:	12 c1       	rjmp	.+548    	; 0x130e <__fp_nan>

000010ea <__divsf3x>:
    10ea:	33 d1       	rcall	.+614    	; 0x1352 <__fp_split3>
    10ec:	98 f3       	brcs	.-26     	; 0x10d4 <__divsf3+0x4>

000010ee <__divsf3_pse>:
    10ee:	99 23       	and	r25, r25
    10f0:	c9 f3       	breq	.-14     	; 0x10e4 <__divsf3+0x14>
    10f2:	55 23       	and	r21, r21
    10f4:	b1 f3       	breq	.-20     	; 0x10e2 <__divsf3+0x12>
    10f6:	95 1b       	sub	r25, r21
    10f8:	55 0b       	sbc	r21, r21
    10fa:	bb 27       	eor	r27, r27
    10fc:	aa 27       	eor	r26, r26
    10fe:	62 17       	cp	r22, r18
    1100:	73 07       	cpc	r23, r19
    1102:	84 07       	cpc	r24, r20
    1104:	38 f0       	brcs	.+14     	; 0x1114 <__divsf3_pse+0x26>
    1106:	9f 5f       	subi	r25, 0xFF	; 255
    1108:	5f 4f       	sbci	r21, 0xFF	; 255
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	44 1f       	adc	r20, r20
    1110:	aa 1f       	adc	r26, r26
    1112:	a9 f3       	breq	.-22     	; 0x10fe <__divsf3_pse+0x10>
    1114:	33 d0       	rcall	.+102    	; 0x117c <__divsf3_pse+0x8e>
    1116:	0e 2e       	mov	r0, r30
    1118:	3a f0       	brmi	.+14     	; 0x1128 <__divsf3_pse+0x3a>
    111a:	e0 e8       	ldi	r30, 0x80	; 128
    111c:	30 d0       	rcall	.+96     	; 0x117e <__divsf3_pse+0x90>
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	50 40       	sbci	r21, 0x00	; 0
    1122:	e6 95       	lsr	r30
    1124:	00 1c       	adc	r0, r0
    1126:	ca f7       	brpl	.-14     	; 0x111a <__divsf3_pse+0x2c>
    1128:	29 d0       	rcall	.+82     	; 0x117c <__divsf3_pse+0x8e>
    112a:	fe 2f       	mov	r31, r30
    112c:	27 d0       	rcall	.+78     	; 0x117c <__divsf3_pse+0x8e>
    112e:	66 0f       	add	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	88 1f       	adc	r24, r24
    1134:	bb 1f       	adc	r27, r27
    1136:	26 17       	cp	r18, r22
    1138:	37 07       	cpc	r19, r23
    113a:	48 07       	cpc	r20, r24
    113c:	ab 07       	cpc	r26, r27
    113e:	b0 e8       	ldi	r27, 0x80	; 128
    1140:	09 f0       	breq	.+2      	; 0x1144 <__divsf3_pse+0x56>
    1142:	bb 0b       	sbc	r27, r27
    1144:	80 2d       	mov	r24, r0
    1146:	bf 01       	movw	r22, r30
    1148:	ff 27       	eor	r31, r31
    114a:	93 58       	subi	r25, 0x83	; 131
    114c:	5f 4f       	sbci	r21, 0xFF	; 255
    114e:	2a f0       	brmi	.+10     	; 0x115a <__divsf3_pse+0x6c>
    1150:	9e 3f       	cpi	r25, 0xFE	; 254
    1152:	51 05       	cpc	r21, r1
    1154:	68 f0       	brcs	.+26     	; 0x1170 <__divsf3_pse+0x82>
    1156:	d5 c0       	rjmp	.+426    	; 0x1302 <__fp_inf>
    1158:	1f c1       	rjmp	.+574    	; 0x1398 <__fp_szero>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	ec f3       	brlt	.-6      	; 0x1158 <__divsf3_pse+0x6a>
    115e:	98 3e       	cpi	r25, 0xE8	; 232
    1160:	dc f3       	brlt	.-10     	; 0x1158 <__divsf3_pse+0x6a>
    1162:	86 95       	lsr	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b7 95       	ror	r27
    116a:	f7 95       	ror	r31
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c9 f7       	brne	.-14     	; 0x1162 <__divsf3_pse+0x74>
    1170:	88 0f       	add	r24, r24
    1172:	91 1d       	adc	r25, r1
    1174:	96 95       	lsr	r25
    1176:	87 95       	ror	r24
    1178:	97 f9       	bld	r25, 7
    117a:	08 95       	ret
    117c:	e1 e0       	ldi	r30, 0x01	; 1
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	bb 1f       	adc	r27, r27
    1186:	62 17       	cp	r22, r18
    1188:	73 07       	cpc	r23, r19
    118a:	84 07       	cpc	r24, r20
    118c:	ba 07       	cpc	r27, r26
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__divsf3_pse+0xaa>
    1190:	62 1b       	sub	r22, r18
    1192:	73 0b       	sbc	r23, r19
    1194:	84 0b       	sbc	r24, r20
    1196:	ba 0b       	sbc	r27, r26
    1198:	ee 1f       	adc	r30, r30
    119a:	88 f7       	brcc	.-30     	; 0x117e <__divsf3_pse+0x90>
    119c:	e0 95       	com	r30
    119e:	08 95       	ret

000011a0 <__fixsfsi>:
    11a0:	04 d0       	rcall	.+8      	; 0x11aa <__fixunssfsi>
    11a2:	68 94       	set
    11a4:	b1 11       	cpse	r27, r1
    11a6:	f8 c0       	rjmp	.+496    	; 0x1398 <__fp_szero>
    11a8:	08 95       	ret

000011aa <__fixunssfsi>:
    11aa:	db d0       	rcall	.+438    	; 0x1362 <__fp_splitA>
    11ac:	88 f0       	brcs	.+34     	; 0x11d0 <__fixunssfsi+0x26>
    11ae:	9f 57       	subi	r25, 0x7F	; 127
    11b0:	90 f0       	brcs	.+36     	; 0x11d6 <__fixunssfsi+0x2c>
    11b2:	b9 2f       	mov	r27, r25
    11b4:	99 27       	eor	r25, r25
    11b6:	b7 51       	subi	r27, 0x17	; 23
    11b8:	a0 f0       	brcs	.+40     	; 0x11e2 <__fixunssfsi+0x38>
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <__fixunssfsi+0x46>
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	1a f0       	brmi	.+6      	; 0x11cc <__fixunssfsi+0x22>
    11c6:	ba 95       	dec	r27
    11c8:	c9 f7       	brne	.-14     	; 0x11bc <__fixunssfsi+0x12>
    11ca:	12 c0       	rjmp	.+36     	; 0x11f0 <__fixunssfsi+0x46>
    11cc:	b1 30       	cpi	r27, 0x01	; 1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <__fixunssfsi+0x46>
    11d0:	e2 d0       	rcall	.+452    	; 0x1396 <__fp_zero>
    11d2:	b1 e0       	ldi	r27, 0x01	; 1
    11d4:	08 95       	ret
    11d6:	df c0       	rjmp	.+446    	; 0x1396 <__fp_zero>
    11d8:	67 2f       	mov	r22, r23
    11da:	78 2f       	mov	r23, r24
    11dc:	88 27       	eor	r24, r24
    11de:	b8 5f       	subi	r27, 0xF8	; 248
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <__fixunssfsi+0x46>
    11e2:	b9 3f       	cpi	r27, 0xF9	; 249
    11e4:	cc f3       	brlt	.-14     	; 0x11d8 <__fixunssfsi+0x2e>
    11e6:	86 95       	lsr	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b3 95       	inc	r27
    11ee:	d9 f7       	brne	.-10     	; 0x11e6 <__fixunssfsi+0x3c>
    11f0:	3e f4       	brtc	.+14     	; 0x1200 <__fixunssfsi+0x56>
    11f2:	90 95       	com	r25
    11f4:	80 95       	com	r24
    11f6:	70 95       	com	r23
    11f8:	61 95       	neg	r22
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__floatunsisf>:
    1202:	e8 94       	clt
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <__floatsisf+0x12>

00001206 <__floatsisf>:
    1206:	97 fb       	bst	r25, 7
    1208:	3e f4       	brtc	.+14     	; 0x1218 <__floatsisf+0x12>
    120a:	90 95       	com	r25
    120c:	80 95       	com	r24
    120e:	70 95       	com	r23
    1210:	61 95       	neg	r22
    1212:	7f 4f       	sbci	r23, 0xFF	; 255
    1214:	8f 4f       	sbci	r24, 0xFF	; 255
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	99 23       	and	r25, r25
    121a:	a9 f0       	breq	.+42     	; 0x1246 <__floatsisf+0x40>
    121c:	f9 2f       	mov	r31, r25
    121e:	96 e9       	ldi	r25, 0x96	; 150
    1220:	bb 27       	eor	r27, r27
    1222:	93 95       	inc	r25
    1224:	f6 95       	lsr	r31
    1226:	87 95       	ror	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	b7 95       	ror	r27
    122e:	f1 11       	cpse	r31, r1
    1230:	f8 cf       	rjmp	.-16     	; 0x1222 <__floatsisf+0x1c>
    1232:	fa f4       	brpl	.+62     	; 0x1272 <__floatsisf+0x6c>
    1234:	bb 0f       	add	r27, r27
    1236:	11 f4       	brne	.+4      	; 0x123c <__floatsisf+0x36>
    1238:	60 ff       	sbrs	r22, 0
    123a:	1b c0       	rjmp	.+54     	; 0x1272 <__floatsisf+0x6c>
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	8f 4f       	sbci	r24, 0xFF	; 255
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	16 c0       	rjmp	.+44     	; 0x1272 <__floatsisf+0x6c>
    1246:	88 23       	and	r24, r24
    1248:	11 f0       	breq	.+4      	; 0x124e <__floatsisf+0x48>
    124a:	96 e9       	ldi	r25, 0x96	; 150
    124c:	11 c0       	rjmp	.+34     	; 0x1270 <__floatsisf+0x6a>
    124e:	77 23       	and	r23, r23
    1250:	21 f0       	breq	.+8      	; 0x125a <__floatsisf+0x54>
    1252:	9e e8       	ldi	r25, 0x8E	; 142
    1254:	87 2f       	mov	r24, r23
    1256:	76 2f       	mov	r23, r22
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <__floatsisf+0x5e>
    125a:	66 23       	and	r22, r22
    125c:	71 f0       	breq	.+28     	; 0x127a <__floatsisf+0x74>
    125e:	96 e8       	ldi	r25, 0x86	; 134
    1260:	86 2f       	mov	r24, r22
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	2a f0       	brmi	.+10     	; 0x1272 <__floatsisf+0x6c>
    1268:	9a 95       	dec	r25
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	da f7       	brpl	.-10     	; 0x1268 <__floatsisf+0x62>
    1272:	88 0f       	add	r24, r24
    1274:	96 95       	lsr	r25
    1276:	87 95       	ror	r24
    1278:	97 f9       	bld	r25, 7
    127a:	08 95       	ret

0000127c <fmin>:
    127c:	99 0f       	add	r25, r25
    127e:	bb 0b       	sbc	r27, r27
    1280:	55 0f       	add	r21, r21
    1282:	aa 0b       	sbc	r26, r26
    1284:	e0 e8       	ldi	r30, 0x80	; 128
    1286:	fe ef       	ldi	r31, 0xFE	; 254
    1288:	16 16       	cp	r1, r22
    128a:	17 06       	cpc	r1, r23
    128c:	e8 07       	cpc	r30, r24
    128e:	f9 07       	cpc	r31, r25
    1290:	70 f0       	brcs	.+28     	; 0x12ae <fmin+0x32>
    1292:	12 16       	cp	r1, r18
    1294:	13 06       	cpc	r1, r19
    1296:	e4 07       	cpc	r30, r20
    1298:	f5 07       	cpc	r31, r21
    129a:	60 f0       	brcs	.+24     	; 0x12b4 <fmin+0x38>
    129c:	ba 17       	cp	r27, r26
    129e:	54 f0       	brlt	.+20     	; 0x12b4 <fmin+0x38>
    12a0:	31 f4       	brne	.+12     	; 0x12ae <fmin+0x32>
    12a2:	26 17       	cp	r18, r22
    12a4:	37 07       	cpc	r19, r23
    12a6:	48 07       	cpc	r20, r24
    12a8:	59 07       	cpc	r21, r25
    12aa:	a7 95       	ror	r26
    12ac:	1b f4       	brvc	.+6      	; 0x12b4 <fmin+0x38>
    12ae:	b9 01       	movw	r22, r18
    12b0:	ca 01       	movw	r24, r20
    12b2:	ba 2f       	mov	r27, r26
    12b4:	b6 95       	lsr	r27
    12b6:	97 95       	ror	r25
    12b8:	08 95       	ret

000012ba <__fp_cmp>:
    12ba:	99 0f       	add	r25, r25
    12bc:	00 08       	sbc	r0, r0
    12be:	55 0f       	add	r21, r21
    12c0:	aa 0b       	sbc	r26, r26
    12c2:	e0 e8       	ldi	r30, 0x80	; 128
    12c4:	fe ef       	ldi	r31, 0xFE	; 254
    12c6:	16 16       	cp	r1, r22
    12c8:	17 06       	cpc	r1, r23
    12ca:	e8 07       	cpc	r30, r24
    12cc:	f9 07       	cpc	r31, r25
    12ce:	c0 f0       	brcs	.+48     	; 0x1300 <__fp_cmp+0x46>
    12d0:	12 16       	cp	r1, r18
    12d2:	13 06       	cpc	r1, r19
    12d4:	e4 07       	cpc	r30, r20
    12d6:	f5 07       	cpc	r31, r21
    12d8:	98 f0       	brcs	.+38     	; 0x1300 <__fp_cmp+0x46>
    12da:	62 1b       	sub	r22, r18
    12dc:	73 0b       	sbc	r23, r19
    12de:	84 0b       	sbc	r24, r20
    12e0:	95 0b       	sbc	r25, r21
    12e2:	39 f4       	brne	.+14     	; 0x12f2 <__fp_cmp+0x38>
    12e4:	0a 26       	eor	r0, r26
    12e6:	61 f0       	breq	.+24     	; 0x1300 <__fp_cmp+0x46>
    12e8:	23 2b       	or	r18, r19
    12ea:	24 2b       	or	r18, r20
    12ec:	25 2b       	or	r18, r21
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <__fp_cmp+0x3e>
    12f0:	08 95       	ret
    12f2:	0a 26       	eor	r0, r26
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <__fp_cmp+0x3e>
    12f6:	a1 40       	sbci	r26, 0x01	; 1
    12f8:	a6 95       	lsr	r26
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	81 1d       	adc	r24, r1
    12fe:	81 1d       	adc	r24, r1
    1300:	08 95       	ret

00001302 <__fp_inf>:
    1302:	97 f9       	bld	r25, 7
    1304:	9f 67       	ori	r25, 0x7F	; 127
    1306:	80 e8       	ldi	r24, 0x80	; 128
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	08 95       	ret

0000130e <__fp_nan>:
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	80 ec       	ldi	r24, 0xC0	; 192
    1312:	08 95       	ret

00001314 <__fp_pscA>:
    1314:	00 24       	eor	r0, r0
    1316:	0a 94       	dec	r0
    1318:	16 16       	cp	r1, r22
    131a:	17 06       	cpc	r1, r23
    131c:	18 06       	cpc	r1, r24
    131e:	09 06       	cpc	r0, r25
    1320:	08 95       	ret

00001322 <__fp_pscB>:
    1322:	00 24       	eor	r0, r0
    1324:	0a 94       	dec	r0
    1326:	12 16       	cp	r1, r18
    1328:	13 06       	cpc	r1, r19
    132a:	14 06       	cpc	r1, r20
    132c:	05 06       	cpc	r0, r21
    132e:	08 95       	ret

00001330 <__fp_round>:
    1330:	09 2e       	mov	r0, r25
    1332:	03 94       	inc	r0
    1334:	00 0c       	add	r0, r0
    1336:	11 f4       	brne	.+4      	; 0x133c <__fp_round+0xc>
    1338:	88 23       	and	r24, r24
    133a:	52 f0       	brmi	.+20     	; 0x1350 <__fp_round+0x20>
    133c:	bb 0f       	add	r27, r27
    133e:	40 f4       	brcc	.+16     	; 0x1350 <__fp_round+0x20>
    1340:	bf 2b       	or	r27, r31
    1342:	11 f4       	brne	.+4      	; 0x1348 <__fp_round+0x18>
    1344:	60 ff       	sbrs	r22, 0
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <__fp_round+0x20>
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	08 95       	ret

00001352 <__fp_split3>:
    1352:	57 fd       	sbrc	r21, 7
    1354:	90 58       	subi	r25, 0x80	; 128
    1356:	44 0f       	add	r20, r20
    1358:	55 1f       	adc	r21, r21
    135a:	59 f0       	breq	.+22     	; 0x1372 <__fp_splitA+0x10>
    135c:	5f 3f       	cpi	r21, 0xFF	; 255
    135e:	71 f0       	breq	.+28     	; 0x137c <__fp_splitA+0x1a>
    1360:	47 95       	ror	r20

00001362 <__fp_splitA>:
    1362:	88 0f       	add	r24, r24
    1364:	97 fb       	bst	r25, 7
    1366:	99 1f       	adc	r25, r25
    1368:	61 f0       	breq	.+24     	; 0x1382 <__fp_splitA+0x20>
    136a:	9f 3f       	cpi	r25, 0xFF	; 255
    136c:	79 f0       	breq	.+30     	; 0x138c <__fp_splitA+0x2a>
    136e:	87 95       	ror	r24
    1370:	08 95       	ret
    1372:	12 16       	cp	r1, r18
    1374:	13 06       	cpc	r1, r19
    1376:	14 06       	cpc	r1, r20
    1378:	55 1f       	adc	r21, r21
    137a:	f2 cf       	rjmp	.-28     	; 0x1360 <__fp_split3+0xe>
    137c:	46 95       	lsr	r20
    137e:	f1 df       	rcall	.-30     	; 0x1362 <__fp_splitA>
    1380:	08 c0       	rjmp	.+16     	; 0x1392 <__fp_splitA+0x30>
    1382:	16 16       	cp	r1, r22
    1384:	17 06       	cpc	r1, r23
    1386:	18 06       	cpc	r1, r24
    1388:	99 1f       	adc	r25, r25
    138a:	f1 cf       	rjmp	.-30     	; 0x136e <__fp_splitA+0xc>
    138c:	86 95       	lsr	r24
    138e:	71 05       	cpc	r23, r1
    1390:	61 05       	cpc	r22, r1
    1392:	08 94       	sec
    1394:	08 95       	ret

00001396 <__fp_zero>:
    1396:	e8 94       	clt

00001398 <__fp_szero>:
    1398:	bb 27       	eor	r27, r27
    139a:	66 27       	eor	r22, r22
    139c:	77 27       	eor	r23, r23
    139e:	cb 01       	movw	r24, r22
    13a0:	97 f9       	bld	r25, 7
    13a2:	08 95       	ret

000013a4 <__gesf2>:
    13a4:	8a df       	rcall	.-236    	; 0x12ba <__fp_cmp>
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <__gesf2+0x6>
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	08 95       	ret

000013ac <__mulsf3>:
    13ac:	0b d0       	rcall	.+22     	; 0x13c4 <__mulsf3x>
    13ae:	c0 cf       	rjmp	.-128    	; 0x1330 <__fp_round>
    13b0:	b1 df       	rcall	.-158    	; 0x1314 <__fp_pscA>
    13b2:	28 f0       	brcs	.+10     	; 0x13be <__mulsf3+0x12>
    13b4:	b6 df       	rcall	.-148    	; 0x1322 <__fp_pscB>
    13b6:	18 f0       	brcs	.+6      	; 0x13be <__mulsf3+0x12>
    13b8:	95 23       	and	r25, r21
    13ba:	09 f0       	breq	.+2      	; 0x13be <__mulsf3+0x12>
    13bc:	a2 cf       	rjmp	.-188    	; 0x1302 <__fp_inf>
    13be:	a7 cf       	rjmp	.-178    	; 0x130e <__fp_nan>
    13c0:	11 24       	eor	r1, r1
    13c2:	ea cf       	rjmp	.-44     	; 0x1398 <__fp_szero>

000013c4 <__mulsf3x>:
    13c4:	c6 df       	rcall	.-116    	; 0x1352 <__fp_split3>
    13c6:	a0 f3       	brcs	.-24     	; 0x13b0 <__mulsf3+0x4>

000013c8 <__mulsf3_pse>:
    13c8:	95 9f       	mul	r25, r21
    13ca:	d1 f3       	breq	.-12     	; 0x13c0 <__mulsf3+0x14>
    13cc:	95 0f       	add	r25, r21
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	55 1f       	adc	r21, r21
    13d2:	62 9f       	mul	r22, r18
    13d4:	f0 01       	movw	r30, r0
    13d6:	72 9f       	mul	r23, r18
    13d8:	bb 27       	eor	r27, r27
    13da:	f0 0d       	add	r31, r0
    13dc:	b1 1d       	adc	r27, r1
    13de:	63 9f       	mul	r22, r19
    13e0:	aa 27       	eor	r26, r26
    13e2:	f0 0d       	add	r31, r0
    13e4:	b1 1d       	adc	r27, r1
    13e6:	aa 1f       	adc	r26, r26
    13e8:	64 9f       	mul	r22, r20
    13ea:	66 27       	eor	r22, r22
    13ec:	b0 0d       	add	r27, r0
    13ee:	a1 1d       	adc	r26, r1
    13f0:	66 1f       	adc	r22, r22
    13f2:	82 9f       	mul	r24, r18
    13f4:	22 27       	eor	r18, r18
    13f6:	b0 0d       	add	r27, r0
    13f8:	a1 1d       	adc	r26, r1
    13fa:	62 1f       	adc	r22, r18
    13fc:	73 9f       	mul	r23, r19
    13fe:	b0 0d       	add	r27, r0
    1400:	a1 1d       	adc	r26, r1
    1402:	62 1f       	adc	r22, r18
    1404:	83 9f       	mul	r24, r19
    1406:	a0 0d       	add	r26, r0
    1408:	61 1d       	adc	r22, r1
    140a:	22 1f       	adc	r18, r18
    140c:	74 9f       	mul	r23, r20
    140e:	33 27       	eor	r19, r19
    1410:	a0 0d       	add	r26, r0
    1412:	61 1d       	adc	r22, r1
    1414:	23 1f       	adc	r18, r19
    1416:	84 9f       	mul	r24, r20
    1418:	60 0d       	add	r22, r0
    141a:	21 1d       	adc	r18, r1
    141c:	82 2f       	mov	r24, r18
    141e:	76 2f       	mov	r23, r22
    1420:	6a 2f       	mov	r22, r26
    1422:	11 24       	eor	r1, r1
    1424:	9f 57       	subi	r25, 0x7F	; 127
    1426:	50 40       	sbci	r21, 0x00	; 0
    1428:	8a f0       	brmi	.+34     	; 0x144c <__mulsf3_pse+0x84>
    142a:	e1 f0       	breq	.+56     	; 0x1464 <__mulsf3_pse+0x9c>
    142c:	88 23       	and	r24, r24
    142e:	4a f0       	brmi	.+18     	; 0x1442 <__mulsf3_pse+0x7a>
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	bb 1f       	adc	r27, r27
    1436:	66 1f       	adc	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	50 40       	sbci	r21, 0x00	; 0
    1440:	a9 f7       	brne	.-22     	; 0x142c <__mulsf3_pse+0x64>
    1442:	9e 3f       	cpi	r25, 0xFE	; 254
    1444:	51 05       	cpc	r21, r1
    1446:	70 f0       	brcs	.+28     	; 0x1464 <__mulsf3_pse+0x9c>
    1448:	5c cf       	rjmp	.-328    	; 0x1302 <__fp_inf>
    144a:	a6 cf       	rjmp	.-180    	; 0x1398 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	ec f3       	brlt	.-6      	; 0x144a <__mulsf3_pse+0x82>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	dc f3       	brlt	.-10     	; 0x144a <__mulsf3_pse+0x82>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	e7 95       	ror	r30
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__mulsf3_pse+0x8c>
    1464:	fe 2b       	or	r31, r30
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__tablejump2__>:
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	05 90       	lpm	r0, Z+
    1478:	f4 91       	lpm	r31, Z
    147a:	e0 2d       	mov	r30, r0
    147c:	09 94       	ijmp

0000147e <sprintf>:
    147e:	ae e0       	ldi	r26, 0x0E	; 14
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e4 e4       	ldi	r30, 0x44	; 68
    1484:	fa e0       	ldi	r31, 0x0A	; 10
    1486:	aa c2       	rjmp	.+1364   	; 0x19dc <__prologue_saves__+0x1c>
    1488:	0d 89       	ldd	r16, Y+21	; 0x15
    148a:	1e 89       	ldd	r17, Y+22	; 0x16
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	8c 83       	std	Y+4, r24	; 0x04
    1490:	1a 83       	std	Y+2, r17	; 0x02
    1492:	09 83       	std	Y+1, r16	; 0x01
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	9f e7       	ldi	r25, 0x7F	; 127
    1498:	9e 83       	std	Y+6, r25	; 0x06
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	ae 01       	movw	r20, r28
    149e:	47 5e       	subi	r20, 0xE7	; 231
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	6f 89       	ldd	r22, Y+23	; 0x17
    14a4:	78 8d       	ldd	r23, Y+24	; 0x18
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	08 d0       	rcall	.+16     	; 0x14bc <vfprintf>
    14ac:	ef 81       	ldd	r30, Y+7	; 0x07
    14ae:	f8 85       	ldd	r31, Y+8	; 0x08
    14b0:	e0 0f       	add	r30, r16
    14b2:	f1 1f       	adc	r31, r17
    14b4:	10 82       	st	Z, r1
    14b6:	2e 96       	adiw	r28, 0x0e	; 14
    14b8:	e4 e0       	ldi	r30, 0x04	; 4
    14ba:	ac c2       	rjmp	.+1368   	; 0x1a14 <__epilogue_restores__+0x1c>

000014bc <vfprintf>:
    14bc:	ab e0       	ldi	r26, 0x0B	; 11
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e3 e6       	ldi	r30, 0x63	; 99
    14c2:	fa e0       	ldi	r31, 0x0A	; 10
    14c4:	7d c2       	rjmp	.+1274   	; 0x19c0 <__prologue_saves__>
    14c6:	6c 01       	movw	r12, r24
    14c8:	7b 01       	movw	r14, r22
    14ca:	8a 01       	movw	r16, r20
    14cc:	fc 01       	movw	r30, r24
    14ce:	17 82       	std	Z+7, r1	; 0x07
    14d0:	16 82       	std	Z+6, r1	; 0x06
    14d2:	83 81       	ldd	r24, Z+3	; 0x03
    14d4:	81 ff       	sbrs	r24, 1
    14d6:	bf c1       	rjmp	.+894    	; 0x1856 <vfprintf+0x39a>
    14d8:	ce 01       	movw	r24, r28
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	3c 01       	movw	r6, r24
    14de:	f6 01       	movw	r30, r12
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	f7 01       	movw	r30, r14
    14e4:	93 fd       	sbrc	r25, 3
    14e6:	85 91       	lpm	r24, Z+
    14e8:	93 ff       	sbrs	r25, 3
    14ea:	81 91       	ld	r24, Z+
    14ec:	7f 01       	movw	r14, r30
    14ee:	88 23       	and	r24, r24
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <vfprintf+0x38>
    14f2:	ad c1       	rjmp	.+858    	; 0x184e <vfprintf+0x392>
    14f4:	85 32       	cpi	r24, 0x25	; 37
    14f6:	39 f4       	brne	.+14     	; 0x1506 <vfprintf+0x4a>
    14f8:	93 fd       	sbrc	r25, 3
    14fa:	85 91       	lpm	r24, Z+
    14fc:	93 ff       	sbrs	r25, 3
    14fe:	81 91       	ld	r24, Z+
    1500:	7f 01       	movw	r14, r30
    1502:	85 32       	cpi	r24, 0x25	; 37
    1504:	21 f4       	brne	.+8      	; 0x150e <vfprintf+0x52>
    1506:	b6 01       	movw	r22, r12
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	c0 d1       	rcall	.+896    	; 0x188c <fputc>
    150c:	e8 cf       	rjmp	.-48     	; 0x14de <vfprintf+0x22>
    150e:	91 2c       	mov	r9, r1
    1510:	21 2c       	mov	r2, r1
    1512:	31 2c       	mov	r3, r1
    1514:	ff e1       	ldi	r31, 0x1F	; 31
    1516:	f3 15       	cp	r31, r3
    1518:	d8 f0       	brcs	.+54     	; 0x1550 <vfprintf+0x94>
    151a:	8b 32       	cpi	r24, 0x2B	; 43
    151c:	79 f0       	breq	.+30     	; 0x153c <vfprintf+0x80>
    151e:	38 f4       	brcc	.+14     	; 0x152e <vfprintf+0x72>
    1520:	80 32       	cpi	r24, 0x20	; 32
    1522:	79 f0       	breq	.+30     	; 0x1542 <vfprintf+0x86>
    1524:	83 32       	cpi	r24, 0x23	; 35
    1526:	a1 f4       	brne	.+40     	; 0x1550 <vfprintf+0x94>
    1528:	23 2d       	mov	r18, r3
    152a:	20 61       	ori	r18, 0x10	; 16
    152c:	1d c0       	rjmp	.+58     	; 0x1568 <vfprintf+0xac>
    152e:	8d 32       	cpi	r24, 0x2D	; 45
    1530:	61 f0       	breq	.+24     	; 0x154a <vfprintf+0x8e>
    1532:	80 33       	cpi	r24, 0x30	; 48
    1534:	69 f4       	brne	.+26     	; 0x1550 <vfprintf+0x94>
    1536:	23 2d       	mov	r18, r3
    1538:	21 60       	ori	r18, 0x01	; 1
    153a:	16 c0       	rjmp	.+44     	; 0x1568 <vfprintf+0xac>
    153c:	83 2d       	mov	r24, r3
    153e:	82 60       	ori	r24, 0x02	; 2
    1540:	38 2e       	mov	r3, r24
    1542:	e3 2d       	mov	r30, r3
    1544:	e4 60       	ori	r30, 0x04	; 4
    1546:	3e 2e       	mov	r3, r30
    1548:	2a c0       	rjmp	.+84     	; 0x159e <vfprintf+0xe2>
    154a:	f3 2d       	mov	r31, r3
    154c:	f8 60       	ori	r31, 0x08	; 8
    154e:	1d c0       	rjmp	.+58     	; 0x158a <vfprintf+0xce>
    1550:	37 fc       	sbrc	r3, 7
    1552:	2d c0       	rjmp	.+90     	; 0x15ae <vfprintf+0xf2>
    1554:	20 ed       	ldi	r18, 0xD0	; 208
    1556:	28 0f       	add	r18, r24
    1558:	2a 30       	cpi	r18, 0x0A	; 10
    155a:	40 f0       	brcs	.+16     	; 0x156c <vfprintf+0xb0>
    155c:	8e 32       	cpi	r24, 0x2E	; 46
    155e:	b9 f4       	brne	.+46     	; 0x158e <vfprintf+0xd2>
    1560:	36 fc       	sbrc	r3, 6
    1562:	75 c1       	rjmp	.+746    	; 0x184e <vfprintf+0x392>
    1564:	23 2d       	mov	r18, r3
    1566:	20 64       	ori	r18, 0x40	; 64
    1568:	32 2e       	mov	r3, r18
    156a:	19 c0       	rjmp	.+50     	; 0x159e <vfprintf+0xe2>
    156c:	36 fe       	sbrs	r3, 6
    156e:	06 c0       	rjmp	.+12     	; 0x157c <vfprintf+0xc0>
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	98 9e       	mul	r9, r24
    1574:	20 0d       	add	r18, r0
    1576:	11 24       	eor	r1, r1
    1578:	92 2e       	mov	r9, r18
    157a:	11 c0       	rjmp	.+34     	; 0x159e <vfprintf+0xe2>
    157c:	ea e0       	ldi	r30, 0x0A	; 10
    157e:	2e 9e       	mul	r2, r30
    1580:	20 0d       	add	r18, r0
    1582:	11 24       	eor	r1, r1
    1584:	22 2e       	mov	r2, r18
    1586:	f3 2d       	mov	r31, r3
    1588:	f0 62       	ori	r31, 0x20	; 32
    158a:	3f 2e       	mov	r3, r31
    158c:	08 c0       	rjmp	.+16     	; 0x159e <vfprintf+0xe2>
    158e:	8c 36       	cpi	r24, 0x6C	; 108
    1590:	21 f4       	brne	.+8      	; 0x159a <vfprintf+0xde>
    1592:	83 2d       	mov	r24, r3
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	38 2e       	mov	r3, r24
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0xe2>
    159a:	88 36       	cpi	r24, 0x68	; 104
    159c:	41 f4       	brne	.+16     	; 0x15ae <vfprintf+0xf2>
    159e:	f7 01       	movw	r30, r14
    15a0:	93 fd       	sbrc	r25, 3
    15a2:	85 91       	lpm	r24, Z+
    15a4:	93 ff       	sbrs	r25, 3
    15a6:	81 91       	ld	r24, Z+
    15a8:	7f 01       	movw	r14, r30
    15aa:	81 11       	cpse	r24, r1
    15ac:	b3 cf       	rjmp	.-154    	; 0x1514 <vfprintf+0x58>
    15ae:	98 2f       	mov	r25, r24
    15b0:	9f 7d       	andi	r25, 0xDF	; 223
    15b2:	95 54       	subi	r25, 0x45	; 69
    15b4:	93 30       	cpi	r25, 0x03	; 3
    15b6:	28 f4       	brcc	.+10     	; 0x15c2 <vfprintf+0x106>
    15b8:	0c 5f       	subi	r16, 0xFC	; 252
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	9f e3       	ldi	r25, 0x3F	; 63
    15be:	99 83       	std	Y+1, r25	; 0x01
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <vfprintf+0x120>
    15c2:	83 36       	cpi	r24, 0x63	; 99
    15c4:	31 f0       	breq	.+12     	; 0x15d2 <vfprintf+0x116>
    15c6:	83 37       	cpi	r24, 0x73	; 115
    15c8:	71 f0       	breq	.+28     	; 0x15e6 <vfprintf+0x12a>
    15ca:	83 35       	cpi	r24, 0x53	; 83
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <vfprintf+0x114>
    15ce:	55 c0       	rjmp	.+170    	; 0x167a <vfprintf+0x1be>
    15d0:	20 c0       	rjmp	.+64     	; 0x1612 <vfprintf+0x156>
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 81       	ld	r24, Z
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	0e 5f       	subi	r16, 0xFE	; 254
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	88 24       	eor	r8, r8
    15de:	83 94       	inc	r8
    15e0:	91 2c       	mov	r9, r1
    15e2:	53 01       	movw	r10, r6
    15e4:	12 c0       	rjmp	.+36     	; 0x160a <vfprintf+0x14e>
    15e6:	28 01       	movw	r4, r16
    15e8:	f2 e0       	ldi	r31, 0x02	; 2
    15ea:	4f 0e       	add	r4, r31
    15ec:	51 1c       	adc	r5, r1
    15ee:	f8 01       	movw	r30, r16
    15f0:	a0 80       	ld	r10, Z
    15f2:	b1 80       	ldd	r11, Z+1	; 0x01
    15f4:	36 fe       	sbrs	r3, 6
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <vfprintf+0x142>
    15f8:	69 2d       	mov	r22, r9
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x146>
    15fe:	6f ef       	ldi	r22, 0xFF	; 255
    1600:	7f ef       	ldi	r23, 0xFF	; 255
    1602:	c5 01       	movw	r24, r10
    1604:	38 d1       	rcall	.+624    	; 0x1876 <strnlen>
    1606:	4c 01       	movw	r8, r24
    1608:	82 01       	movw	r16, r4
    160a:	f3 2d       	mov	r31, r3
    160c:	ff 77       	andi	r31, 0x7F	; 127
    160e:	3f 2e       	mov	r3, r31
    1610:	15 c0       	rjmp	.+42     	; 0x163c <vfprintf+0x180>
    1612:	28 01       	movw	r4, r16
    1614:	22 e0       	ldi	r18, 0x02	; 2
    1616:	42 0e       	add	r4, r18
    1618:	51 1c       	adc	r5, r1
    161a:	f8 01       	movw	r30, r16
    161c:	a0 80       	ld	r10, Z
    161e:	b1 80       	ldd	r11, Z+1	; 0x01
    1620:	36 fe       	sbrs	r3, 6
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x16e>
    1624:	69 2d       	mov	r22, r9
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <vfprintf+0x172>
    162a:	6f ef       	ldi	r22, 0xFF	; 255
    162c:	7f ef       	ldi	r23, 0xFF	; 255
    162e:	c5 01       	movw	r24, r10
    1630:	17 d1       	rcall	.+558    	; 0x1860 <strnlen_P>
    1632:	4c 01       	movw	r8, r24
    1634:	f3 2d       	mov	r31, r3
    1636:	f0 68       	ori	r31, 0x80	; 128
    1638:	3f 2e       	mov	r3, r31
    163a:	82 01       	movw	r16, r4
    163c:	33 fc       	sbrc	r3, 3
    163e:	19 c0       	rjmp	.+50     	; 0x1672 <vfprintf+0x1b6>
    1640:	82 2d       	mov	r24, r2
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 16       	cp	r8, r24
    1646:	99 06       	cpc	r9, r25
    1648:	a0 f4       	brcc	.+40     	; 0x1672 <vfprintf+0x1b6>
    164a:	b6 01       	movw	r22, r12
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	1d d1       	rcall	.+570    	; 0x188c <fputc>
    1652:	2a 94       	dec	r2
    1654:	f5 cf       	rjmp	.-22     	; 0x1640 <vfprintf+0x184>
    1656:	f5 01       	movw	r30, r10
    1658:	37 fc       	sbrc	r3, 7
    165a:	85 91       	lpm	r24, Z+
    165c:	37 fe       	sbrs	r3, 7
    165e:	81 91       	ld	r24, Z+
    1660:	5f 01       	movw	r10, r30
    1662:	b6 01       	movw	r22, r12
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	12 d1       	rcall	.+548    	; 0x188c <fputc>
    1668:	21 10       	cpse	r2, r1
    166a:	2a 94       	dec	r2
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	82 1a       	sub	r8, r18
    1670:	91 08       	sbc	r9, r1
    1672:	81 14       	cp	r8, r1
    1674:	91 04       	cpc	r9, r1
    1676:	79 f7       	brne	.-34     	; 0x1656 <vfprintf+0x19a>
    1678:	e1 c0       	rjmp	.+450    	; 0x183c <vfprintf+0x380>
    167a:	84 36       	cpi	r24, 0x64	; 100
    167c:	11 f0       	breq	.+4      	; 0x1682 <vfprintf+0x1c6>
    167e:	89 36       	cpi	r24, 0x69	; 105
    1680:	39 f5       	brne	.+78     	; 0x16d0 <vfprintf+0x214>
    1682:	f8 01       	movw	r30, r16
    1684:	37 fe       	sbrs	r3, 7
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <vfprintf+0x1da>
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	0c 5f       	subi	r16, 0xFC	; 252
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <vfprintf+0x1ea>
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	07 2e       	mov	r0, r23
    169c:	00 0c       	add	r0, r0
    169e:	88 0b       	sbc	r24, r24
    16a0:	99 0b       	sbc	r25, r25
    16a2:	0e 5f       	subi	r16, 0xFE	; 254
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	f3 2d       	mov	r31, r3
    16a8:	ff 76       	andi	r31, 0x6F	; 111
    16aa:	3f 2e       	mov	r3, r31
    16ac:	97 ff       	sbrs	r25, 7
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <vfprintf+0x206>
    16b0:	90 95       	com	r25
    16b2:	80 95       	com	r24
    16b4:	70 95       	com	r23
    16b6:	61 95       	neg	r22
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	8f 4f       	sbci	r24, 0xFF	; 255
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	f0 68       	ori	r31, 0x80	; 128
    16c0:	3f 2e       	mov	r3, r31
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	a3 01       	movw	r20, r6
    16c8:	1d d1       	rcall	.+570    	; 0x1904 <__ultoa_invert>
    16ca:	88 2e       	mov	r8, r24
    16cc:	86 18       	sub	r8, r6
    16ce:	44 c0       	rjmp	.+136    	; 0x1758 <vfprintf+0x29c>
    16d0:	85 37       	cpi	r24, 0x75	; 117
    16d2:	31 f4       	brne	.+12     	; 0x16e0 <vfprintf+0x224>
    16d4:	23 2d       	mov	r18, r3
    16d6:	2f 7e       	andi	r18, 0xEF	; 239
    16d8:	b2 2e       	mov	r11, r18
    16da:	2a e0       	ldi	r18, 0x0A	; 10
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	25 c0       	rjmp	.+74     	; 0x172a <vfprintf+0x26e>
    16e0:	93 2d       	mov	r25, r3
    16e2:	99 7f       	andi	r25, 0xF9	; 249
    16e4:	b9 2e       	mov	r11, r25
    16e6:	8f 36       	cpi	r24, 0x6F	; 111
    16e8:	c1 f0       	breq	.+48     	; 0x171a <vfprintf+0x25e>
    16ea:	18 f4       	brcc	.+6      	; 0x16f2 <vfprintf+0x236>
    16ec:	88 35       	cpi	r24, 0x58	; 88
    16ee:	79 f0       	breq	.+30     	; 0x170e <vfprintf+0x252>
    16f0:	ae c0       	rjmp	.+348    	; 0x184e <vfprintf+0x392>
    16f2:	80 37       	cpi	r24, 0x70	; 112
    16f4:	19 f0       	breq	.+6      	; 0x16fc <vfprintf+0x240>
    16f6:	88 37       	cpi	r24, 0x78	; 120
    16f8:	21 f0       	breq	.+8      	; 0x1702 <vfprintf+0x246>
    16fa:	a9 c0       	rjmp	.+338    	; 0x184e <vfprintf+0x392>
    16fc:	e9 2f       	mov	r30, r25
    16fe:	e0 61       	ori	r30, 0x10	; 16
    1700:	be 2e       	mov	r11, r30
    1702:	b4 fe       	sbrs	r11, 4
    1704:	0d c0       	rjmp	.+26     	; 0x1720 <vfprintf+0x264>
    1706:	fb 2d       	mov	r31, r11
    1708:	f4 60       	ori	r31, 0x04	; 4
    170a:	bf 2e       	mov	r11, r31
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <vfprintf+0x264>
    170e:	34 fe       	sbrs	r3, 4
    1710:	0a c0       	rjmp	.+20     	; 0x1726 <vfprintf+0x26a>
    1712:	29 2f       	mov	r18, r25
    1714:	26 60       	ori	r18, 0x06	; 6
    1716:	b2 2e       	mov	r11, r18
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <vfprintf+0x26a>
    171a:	28 e0       	ldi	r18, 0x08	; 8
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	05 c0       	rjmp	.+10     	; 0x172a <vfprintf+0x26e>
    1720:	20 e1       	ldi	r18, 0x10	; 16
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x26e>
    1726:	20 e1       	ldi	r18, 0x10	; 16
    1728:	32 e0       	ldi	r19, 0x02	; 2
    172a:	f8 01       	movw	r30, r16
    172c:	b7 fe       	sbrs	r11, 7
    172e:	07 c0       	rjmp	.+14     	; 0x173e <vfprintf+0x282>
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0c 5f       	subi	r16, 0xFC	; 252
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
    173c:	06 c0       	rjmp	.+12     	; 0x174a <vfprintf+0x28e>
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 5f       	subi	r16, 0xFE	; 254
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	a3 01       	movw	r20, r6
    174c:	db d0       	rcall	.+438    	; 0x1904 <__ultoa_invert>
    174e:	88 2e       	mov	r8, r24
    1750:	86 18       	sub	r8, r6
    1752:	fb 2d       	mov	r31, r11
    1754:	ff 77       	andi	r31, 0x7F	; 127
    1756:	3f 2e       	mov	r3, r31
    1758:	36 fe       	sbrs	r3, 6
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <vfprintf+0x2ba>
    175c:	23 2d       	mov	r18, r3
    175e:	2e 7f       	andi	r18, 0xFE	; 254
    1760:	a2 2e       	mov	r10, r18
    1762:	89 14       	cp	r8, r9
    1764:	58 f4       	brcc	.+22     	; 0x177c <vfprintf+0x2c0>
    1766:	34 fe       	sbrs	r3, 4
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <vfprintf+0x2c4>
    176a:	32 fc       	sbrc	r3, 2
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <vfprintf+0x2c4>
    176e:	83 2d       	mov	r24, r3
    1770:	8e 7e       	andi	r24, 0xEE	; 238
    1772:	a8 2e       	mov	r10, r24
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <vfprintf+0x2c4>
    1776:	b8 2c       	mov	r11, r8
    1778:	a3 2c       	mov	r10, r3
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <vfprintf+0x2c6>
    177c:	b8 2c       	mov	r11, r8
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <vfprintf+0x2c6>
    1780:	b9 2c       	mov	r11, r9
    1782:	a4 fe       	sbrs	r10, 4
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <vfprintf+0x2e8>
    1786:	fe 01       	movw	r30, r28
    1788:	e8 0d       	add	r30, r8
    178a:	f1 1d       	adc	r31, r1
    178c:	80 81       	ld	r24, Z
    178e:	80 33       	cpi	r24, 0x30	; 48
    1790:	21 f4       	brne	.+8      	; 0x179a <vfprintf+0x2de>
    1792:	9a 2d       	mov	r25, r10
    1794:	99 7e       	andi	r25, 0xE9	; 233
    1796:	a9 2e       	mov	r10, r25
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <vfprintf+0x2f0>
    179a:	a2 fe       	sbrs	r10, 2
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <vfprintf+0x2ee>
    179e:	b3 94       	inc	r11
    17a0:	b3 94       	inc	r11
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <vfprintf+0x2f0>
    17a4:	8a 2d       	mov	r24, r10
    17a6:	86 78       	andi	r24, 0x86	; 134
    17a8:	09 f0       	breq	.+2      	; 0x17ac <vfprintf+0x2f0>
    17aa:	b3 94       	inc	r11
    17ac:	a3 fc       	sbrc	r10, 3
    17ae:	10 c0       	rjmp	.+32     	; 0x17d0 <vfprintf+0x314>
    17b0:	a0 fe       	sbrs	r10, 0
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <vfprintf+0x304>
    17b4:	b2 14       	cp	r11, r2
    17b6:	80 f4       	brcc	.+32     	; 0x17d8 <vfprintf+0x31c>
    17b8:	28 0c       	add	r2, r8
    17ba:	92 2c       	mov	r9, r2
    17bc:	9b 18       	sub	r9, r11
    17be:	0d c0       	rjmp	.+26     	; 0x17da <vfprintf+0x31e>
    17c0:	b2 14       	cp	r11, r2
    17c2:	58 f4       	brcc	.+22     	; 0x17da <vfprintf+0x31e>
    17c4:	b6 01       	movw	r22, r12
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	60 d0       	rcall	.+192    	; 0x188c <fputc>
    17cc:	b3 94       	inc	r11
    17ce:	f8 cf       	rjmp	.-16     	; 0x17c0 <vfprintf+0x304>
    17d0:	b2 14       	cp	r11, r2
    17d2:	18 f4       	brcc	.+6      	; 0x17da <vfprintf+0x31e>
    17d4:	2b 18       	sub	r2, r11
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0x320>
    17d8:	98 2c       	mov	r9, r8
    17da:	21 2c       	mov	r2, r1
    17dc:	a4 fe       	sbrs	r10, 4
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <vfprintf+0x342>
    17e0:	b6 01       	movw	r22, r12
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	52 d0       	rcall	.+164    	; 0x188c <fputc>
    17e8:	a2 fe       	sbrs	r10, 2
    17ea:	16 c0       	rjmp	.+44     	; 0x1818 <vfprintf+0x35c>
    17ec:	a1 fc       	sbrc	r10, 1
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <vfprintf+0x33a>
    17f0:	88 e7       	ldi	r24, 0x78	; 120
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x33e>
    17f6:	88 e5       	ldi	r24, 0x58	; 88
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	b6 01       	movw	r22, r12
    17fc:	0c c0       	rjmp	.+24     	; 0x1816 <vfprintf+0x35a>
    17fe:	8a 2d       	mov	r24, r10
    1800:	86 78       	andi	r24, 0x86	; 134
    1802:	51 f0       	breq	.+20     	; 0x1818 <vfprintf+0x35c>
    1804:	a1 fe       	sbrs	r10, 1
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0x350>
    1808:	8b e2       	ldi	r24, 0x2B	; 43
    180a:	01 c0       	rjmp	.+2      	; 0x180e <vfprintf+0x352>
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	a7 fc       	sbrc	r10, 7
    1810:	8d e2       	ldi	r24, 0x2D	; 45
    1812:	b6 01       	movw	r22, r12
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	3a d0       	rcall	.+116    	; 0x188c <fputc>
    1818:	89 14       	cp	r8, r9
    181a:	30 f4       	brcc	.+12     	; 0x1828 <vfprintf+0x36c>
    181c:	b6 01       	movw	r22, r12
    181e:	80 e3       	ldi	r24, 0x30	; 48
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	34 d0       	rcall	.+104    	; 0x188c <fputc>
    1824:	9a 94       	dec	r9
    1826:	f8 cf       	rjmp	.-16     	; 0x1818 <vfprintf+0x35c>
    1828:	8a 94       	dec	r8
    182a:	f3 01       	movw	r30, r6
    182c:	e8 0d       	add	r30, r8
    182e:	f1 1d       	adc	r31, r1
    1830:	80 81       	ld	r24, Z
    1832:	b6 01       	movw	r22, r12
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	2a d0       	rcall	.+84     	; 0x188c <fputc>
    1838:	81 10       	cpse	r8, r1
    183a:	f6 cf       	rjmp	.-20     	; 0x1828 <vfprintf+0x36c>
    183c:	22 20       	and	r2, r2
    183e:	09 f4       	brne	.+2      	; 0x1842 <vfprintf+0x386>
    1840:	4e ce       	rjmp	.-868    	; 0x14de <vfprintf+0x22>
    1842:	b6 01       	movw	r22, r12
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	21 d0       	rcall	.+66     	; 0x188c <fputc>
    184a:	2a 94       	dec	r2
    184c:	f7 cf       	rjmp	.-18     	; 0x183c <vfprintf+0x380>
    184e:	f6 01       	movw	r30, r12
    1850:	86 81       	ldd	r24, Z+6	; 0x06
    1852:	97 81       	ldd	r25, Z+7	; 0x07
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x39e>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	9f ef       	ldi	r25, 0xFF	; 255
    185a:	2b 96       	adiw	r28, 0x0b	; 11
    185c:	e2 e1       	ldi	r30, 0x12	; 18
    185e:	cc c0       	rjmp	.+408    	; 0x19f8 <__epilogue_restores__>

00001860 <strnlen_P>:
    1860:	fc 01       	movw	r30, r24
    1862:	05 90       	lpm	r0, Z+
    1864:	61 50       	subi	r22, 0x01	; 1
    1866:	70 40       	sbci	r23, 0x00	; 0
    1868:	01 10       	cpse	r0, r1
    186a:	d8 f7       	brcc	.-10     	; 0x1862 <strnlen_P+0x2>
    186c:	80 95       	com	r24
    186e:	90 95       	com	r25
    1870:	8e 0f       	add	r24, r30
    1872:	9f 1f       	adc	r25, r31
    1874:	08 95       	ret

00001876 <strnlen>:
    1876:	fc 01       	movw	r30, r24
    1878:	61 50       	subi	r22, 0x01	; 1
    187a:	70 40       	sbci	r23, 0x00	; 0
    187c:	01 90       	ld	r0, Z+
    187e:	01 10       	cpse	r0, r1
    1880:	d8 f7       	brcc	.-10     	; 0x1878 <strnlen+0x2>
    1882:	80 95       	com	r24
    1884:	90 95       	com	r25
    1886:	8e 0f       	add	r24, r30
    1888:	9f 1f       	adc	r25, r31
    188a:	08 95       	ret

0000188c <fputc>:
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	fb 01       	movw	r30, r22
    1896:	23 81       	ldd	r18, Z+3	; 0x03
    1898:	21 fd       	sbrc	r18, 1
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <fputc+0x16>
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	9f ef       	ldi	r25, 0xFF	; 255
    18a0:	2c c0       	rjmp	.+88     	; 0x18fa <fputc+0x6e>
    18a2:	22 ff       	sbrs	r18, 2
    18a4:	16 c0       	rjmp	.+44     	; 0x18d2 <fputc+0x46>
    18a6:	46 81       	ldd	r20, Z+6	; 0x06
    18a8:	57 81       	ldd	r21, Z+7	; 0x07
    18aa:	24 81       	ldd	r18, Z+4	; 0x04
    18ac:	35 81       	ldd	r19, Z+5	; 0x05
    18ae:	42 17       	cp	r20, r18
    18b0:	53 07       	cpc	r21, r19
    18b2:	44 f4       	brge	.+16     	; 0x18c4 <fputc+0x38>
    18b4:	a0 81       	ld	r26, Z
    18b6:	b1 81       	ldd	r27, Z+1	; 0x01
    18b8:	9d 01       	movw	r18, r26
    18ba:	2f 5f       	subi	r18, 0xFF	; 255
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	31 83       	std	Z+1, r19	; 0x01
    18c0:	20 83       	st	Z, r18
    18c2:	8c 93       	st	X, r24
    18c4:	26 81       	ldd	r18, Z+6	; 0x06
    18c6:	37 81       	ldd	r19, Z+7	; 0x07
    18c8:	2f 5f       	subi	r18, 0xFF	; 255
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	37 83       	std	Z+7, r19	; 0x07
    18ce:	26 83       	std	Z+6, r18	; 0x06
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <fputc+0x6e>
    18d2:	8b 01       	movw	r16, r22
    18d4:	ec 01       	movw	r28, r24
    18d6:	fb 01       	movw	r30, r22
    18d8:	00 84       	ldd	r0, Z+8	; 0x08
    18da:	f1 85       	ldd	r31, Z+9	; 0x09
    18dc:	e0 2d       	mov	r30, r0
    18de:	09 95       	icall
    18e0:	89 2b       	or	r24, r25
    18e2:	e1 f6       	brne	.-72     	; 0x189c <fputc+0x10>
    18e4:	d8 01       	movw	r26, r16
    18e6:	16 96       	adiw	r26, 0x06	; 6
    18e8:	8d 91       	ld	r24, X+
    18ea:	9c 91       	ld	r25, X
    18ec:	17 97       	sbiw	r26, 0x07	; 7
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	17 96       	adiw	r26, 0x07	; 7
    18f2:	9c 93       	st	X, r25
    18f4:	8e 93       	st	-X, r24
    18f6:	16 97       	sbiw	r26, 0x06	; 6
    18f8:	ce 01       	movw	r24, r28
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <__ultoa_invert>:
    1904:	fa 01       	movw	r30, r20
    1906:	aa 27       	eor	r26, r26
    1908:	28 30       	cpi	r18, 0x08	; 8
    190a:	51 f1       	breq	.+84     	; 0x1960 <__ultoa_invert+0x5c>
    190c:	20 31       	cpi	r18, 0x10	; 16
    190e:	81 f1       	breq	.+96     	; 0x1970 <__ultoa_invert+0x6c>
    1910:	e8 94       	clt
    1912:	6f 93       	push	r22
    1914:	6e 7f       	andi	r22, 0xFE	; 254
    1916:	6e 5f       	subi	r22, 0xFE	; 254
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	8f 4f       	sbci	r24, 0xFF	; 255
    191c:	9f 4f       	sbci	r25, 0xFF	; 255
    191e:	af 4f       	sbci	r26, 0xFF	; 255
    1920:	b1 e0       	ldi	r27, 0x01	; 1
    1922:	3e d0       	rcall	.+124    	; 0x19a0 <__ultoa_invert+0x9c>
    1924:	b4 e0       	ldi	r27, 0x04	; 4
    1926:	3c d0       	rcall	.+120    	; 0x19a0 <__ultoa_invert+0x9c>
    1928:	67 0f       	add	r22, r23
    192a:	78 1f       	adc	r23, r24
    192c:	89 1f       	adc	r24, r25
    192e:	9a 1f       	adc	r25, r26
    1930:	a1 1d       	adc	r26, r1
    1932:	68 0f       	add	r22, r24
    1934:	79 1f       	adc	r23, r25
    1936:	8a 1f       	adc	r24, r26
    1938:	91 1d       	adc	r25, r1
    193a:	a1 1d       	adc	r26, r1
    193c:	6a 0f       	add	r22, r26
    193e:	71 1d       	adc	r23, r1
    1940:	81 1d       	adc	r24, r1
    1942:	91 1d       	adc	r25, r1
    1944:	a1 1d       	adc	r26, r1
    1946:	20 d0       	rcall	.+64     	; 0x1988 <__ultoa_invert+0x84>
    1948:	09 f4       	brne	.+2      	; 0x194c <__ultoa_invert+0x48>
    194a:	68 94       	set
    194c:	3f 91       	pop	r19
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	26 9f       	mul	r18, r22
    1952:	11 24       	eor	r1, r1
    1954:	30 19       	sub	r19, r0
    1956:	30 5d       	subi	r19, 0xD0	; 208
    1958:	31 93       	st	Z+, r19
    195a:	de f6       	brtc	.-74     	; 0x1912 <__ultoa_invert+0xe>
    195c:	cf 01       	movw	r24, r30
    195e:	08 95       	ret
    1960:	46 2f       	mov	r20, r22
    1962:	47 70       	andi	r20, 0x07	; 7
    1964:	40 5d       	subi	r20, 0xD0	; 208
    1966:	41 93       	st	Z+, r20
    1968:	b3 e0       	ldi	r27, 0x03	; 3
    196a:	0f d0       	rcall	.+30     	; 0x198a <__ultoa_invert+0x86>
    196c:	c9 f7       	brne	.-14     	; 0x1960 <__ultoa_invert+0x5c>
    196e:	f6 cf       	rjmp	.-20     	; 0x195c <__ultoa_invert+0x58>
    1970:	46 2f       	mov	r20, r22
    1972:	4f 70       	andi	r20, 0x0F	; 15
    1974:	40 5d       	subi	r20, 0xD0	; 208
    1976:	4a 33       	cpi	r20, 0x3A	; 58
    1978:	18 f0       	brcs	.+6      	; 0x1980 <__ultoa_invert+0x7c>
    197a:	49 5d       	subi	r20, 0xD9	; 217
    197c:	31 fd       	sbrc	r19, 1
    197e:	40 52       	subi	r20, 0x20	; 32
    1980:	41 93       	st	Z+, r20
    1982:	02 d0       	rcall	.+4      	; 0x1988 <__ultoa_invert+0x84>
    1984:	a9 f7       	brne	.-22     	; 0x1970 <__ultoa_invert+0x6c>
    1986:	ea cf       	rjmp	.-44     	; 0x195c <__ultoa_invert+0x58>
    1988:	b4 e0       	ldi	r27, 0x04	; 4
    198a:	a6 95       	lsr	r26
    198c:	97 95       	ror	r25
    198e:	87 95       	ror	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	ba 95       	dec	r27
    1996:	c9 f7       	brne	.-14     	; 0x198a <__ultoa_invert+0x86>
    1998:	00 97       	sbiw	r24, 0x00	; 0
    199a:	61 05       	cpc	r22, r1
    199c:	71 05       	cpc	r23, r1
    199e:	08 95       	ret
    19a0:	9b 01       	movw	r18, r22
    19a2:	ac 01       	movw	r20, r24
    19a4:	0a 2e       	mov	r0, r26
    19a6:	06 94       	lsr	r0
    19a8:	57 95       	ror	r21
    19aa:	47 95       	ror	r20
    19ac:	37 95       	ror	r19
    19ae:	27 95       	ror	r18
    19b0:	ba 95       	dec	r27
    19b2:	c9 f7       	brne	.-14     	; 0x19a6 <__ultoa_invert+0xa2>
    19b4:	62 0f       	add	r22, r18
    19b6:	73 1f       	adc	r23, r19
    19b8:	84 1f       	adc	r24, r20
    19ba:	95 1f       	adc	r25, r21
    19bc:	a0 1d       	adc	r26, r0
    19be:	08 95       	ret

000019c0 <__prologue_saves__>:
    19c0:	2f 92       	push	r2
    19c2:	3f 92       	push	r3
    19c4:	4f 92       	push	r4
    19c6:	5f 92       	push	r5
    19c8:	6f 92       	push	r6
    19ca:	7f 92       	push	r7
    19cc:	8f 92       	push	r8
    19ce:	9f 92       	push	r9
    19d0:	af 92       	push	r10
    19d2:	bf 92       	push	r11
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	ca 1b       	sub	r28, r26
    19ea:	db 0b       	sbc	r29, r27
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	09 94       	ijmp

000019f8 <__epilogue_restores__>:
    19f8:	2a 88       	ldd	r2, Y+18	; 0x12
    19fa:	39 88       	ldd	r3, Y+17	; 0x11
    19fc:	48 88       	ldd	r4, Y+16	; 0x10
    19fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a00:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a02:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a04:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a06:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a08:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a0a:	b9 84       	ldd	r11, Y+9	; 0x09
    1a0c:	c8 84       	ldd	r12, Y+8	; 0x08
    1a0e:	df 80       	ldd	r13, Y+7	; 0x07
    1a10:	ee 80       	ldd	r14, Y+6	; 0x06
    1a12:	fd 80       	ldd	r15, Y+5	; 0x05
    1a14:	0c 81       	ldd	r16, Y+4	; 0x04
    1a16:	1b 81       	ldd	r17, Y+3	; 0x03
    1a18:	aa 81       	ldd	r26, Y+2	; 0x02
    1a1a:	b9 81       	ldd	r27, Y+1	; 0x01
    1a1c:	ce 0f       	add	r28, r30
    1a1e:	d1 1d       	adc	r29, r1
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	ed 01       	movw	r28, r26
    1a2c:	08 95       	ret

00001a2e <_exit>:
    1a2e:	f8 94       	cli

00001a30 <__stop_program>:
    1a30:	ff cf       	rjmp	.-2      	; 0x1a30 <__stop_program>
