
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000018f0  00001984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b8  008000ae  008000ae  000019d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002955  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f48  00000000  00000000  00004549  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0c  00000000  00000000  00005491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  000061a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd7  00000000  00000000  000066f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c6d  00000000  00000000  000073cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	70 c0       	rjmp	.+224    	; 0xfe <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	f4 02       	muls	r31, r20

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	e0 ef       	ldi	r30, 0xF0	; 240
      3c:	f8 e1       	ldi	r31, 0x18	; 24
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	ae 3a       	cpi	r26, 0xAE	; 174
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	22 e0       	ldi	r18, 0x02	; 2
      4c:	ae ea       	ldi	r26, 0xAE	; 174
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	a6 36       	cpi	r26, 0x66	; 102
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	83 d9       	rcall	.-3322   	; 0xfffff36e <__eeprom_end+0xff7ef36e>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	04 d2       	rcall	.+1032   	; 0x478 <main>
      70:	3d cc       	rjmp	.-1926   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:
}


void checkClipping(){//manage clipping indication
	if (clipping){//if currently clipping
		clipping = 0;
      74:	8f 92       	push	r8
      76:	9f 92       	push	r9
      78:	af 92       	push	r10
      7a:	bf 92       	push	r11
      7c:	cf 92       	push	r12
      7e:	df 92       	push	r13
      80:	ef 92       	push	r14
      82:	ff 92       	push	r15
      84:	0f 93       	push	r16
      86:	1f 93       	push	r17
      88:	14 ba       	out	0x14, r1	; 20
      8a:	68 94       	set
      8c:	88 24       	eor	r8, r8
      8e:	84 f8       	bld	r8, 4
      90:	91 2c       	mov	r9, r1
      92:	68 94       	set
      94:	aa 24       	eor	r10, r10
      96:	a1 f8       	bld	r10, 1
      98:	b1 2c       	mov	r11, r1
      9a:	68 94       	set
      9c:	cc 24       	eor	r12, r12
      9e:	c2 f8       	bld	r12, 2
      a0:	d1 2c       	mov	r13, r1
      a2:	0f 2e       	mov	r0, r31
      a4:	f7 e0       	ldi	r31, 0x07	; 7
      a6:	ef 2e       	mov	r14, r31
      a8:	f1 2c       	mov	r15, r1
      aa:	f0 2d       	mov	r31, r0
      ac:	01 e1       	ldi	r16, 0x11	; 17
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	22 e1       	ldi	r18, 0x12	; 18
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	43 e1       	ldi	r20, 0x13	; 19
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	63 e0       	ldi	r22, 0x03	; 3
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	89 e0       	ldi	r24, 0x09	; 9
      be:	92 e0       	ldi	r25, 0x02	; 2
      c0:	af d2       	rcall	.+1374   	; 0x620 <_ZN7Display10initializeEiiiiiiii>
      c2:	f8 94       	cli
      c4:	16 b8       	out	0x06, r1	; 6
      c6:	3e 9a       	sbi	0x07, 6	; 7
      c8:	3d 9a       	sbi	0x07, 5	; 7
      ca:	32 9a       	sbi	0x06, 2	; 6
      cc:	35 9a       	sbi	0x06, 5	; 6
      ce:	33 9a       	sbi	0x06, 3	; 6
      d0:	37 9a       	sbi	0x06, 7	; 6
      d2:	36 9a       	sbi	0x06, 6	; 6
      d4:	78 94       	sei
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	df 90       	pop	r13
      e0:	cf 90       	pop	r12
      e2:	bf 90       	pop	r11
      e4:	af 90       	pop	r10
      e6:	9f 90       	pop	r9
      e8:	8f 90       	pop	r8
      ea:	08 95       	ret

000000ec <_Z5resetv>:
      ec:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <_ZL5index>
      f0:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
      f4:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <_ZL8maxSlope+0x1>
      f8:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <_ZL8maxSlope>
      fc:	08 95       	ret

000000fe <__vector_14>:
      fe:	1f 92       	push	r1
     100:	0f 92       	push	r0
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	0f 92       	push	r0
     106:	11 24       	eor	r1, r1
     108:	2f 93       	push	r18
     10a:	3f 93       	push	r19
     10c:	4f 93       	push	r20
     10e:	5f 93       	push	r21
     110:	6f 93       	push	r22
     112:	7f 93       	push	r23
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	af 93       	push	r26
     11a:	bf 93       	push	r27
     11c:	ef 93       	push	r30
     11e:	ff 93       	push	r31
     120:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     124:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL8prevData>
     128:	85 b1       	in	r24, 0x05	; 5
     12a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZL7newData>
     12e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZL8prevData>
     132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     136:	98 17       	cp	r25, r24
     138:	08 f0       	brcs	.+2      	; 0x13c <__vector_14+0x3e>
     13a:	d0 c0       	rjmp	.+416    	; 0x2dc <__vector_14+0x1de>
     13c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZL7newData>
     140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     144:	98 17       	cp	r25, r24
     146:	08 f0       	brcs	.+2      	; 0x14a <__vector_14+0x4c>
     148:	05 c1       	rjmp	.+522    	; 0x354 <__vector_14+0x256>
     14a:	c8 c0       	rjmp	.+400    	; 0x2dc <__vector_14+0x1de>
     14c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZL8newSlope>
     156:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	e4 52       	subi	r30, 0x24	; 36
     160:	fe 4f       	sbci	r31, 0xFE	; 254
     162:	91 83       	std	Z+1, r25	; 0x01
     164:	80 83       	st	Z, r24
     166:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZL4time>
     170:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL4time+0x1>
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	e0 51       	subi	r30, 0x10	; 16
     17a:	fe 4f       	sbci	r31, 0xFE	; 254
     17c:	91 83       	std	Z+1, r25	; 0x01
     17e:	80 83       	st	Z, r24
     180:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_ZL4time+0x1>
     184:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZL4time>
     188:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     18c:	81 11       	cpse	r24, r1
     18e:	08 c0       	rjmp	.+16     	; 0x1a0 <__vector_14+0xa2>
     190:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
     194:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL5index>
     19e:	9e c0       	rjmp	.+316    	; 0x2dc <__vector_14+0x1de>
     1a0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZL5timer>
     1a4:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <_ZL5timer+0x1>
     1a8:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	ee 0f       	add	r30, r30
     1b0:	ff 1f       	adc	r31, r31
     1b2:	e0 51       	subi	r30, 0x10	; 16
     1b4:	fe 4f       	sbci	r31, 0xFE	; 254
     1b6:	20 81       	ld	r18, Z
     1b8:	31 81       	ldd	r19, Z+1	; 0x01
     1ba:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_ZL8timerTol>
     1be:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_ZL8timerTol+0x1>
     1c2:	82 1b       	sub	r24, r18
     1c4:	93 0b       	sbc	r25, r19
     1c6:	9c 01       	movw	r18, r24
     1c8:	22 f4       	brpl	.+8      	; 0x1d2 <__vector_14+0xd4>
     1ca:	22 27       	eor	r18, r18
     1cc:	33 27       	eor	r19, r19
     1ce:	28 1b       	sub	r18, r24
     1d0:	39 0b       	sbc	r19, r25
     1d2:	24 17       	cp	r18, r20
     1d4:	35 07       	cpc	r19, r21
     1d6:	0c f0       	brlt	.+2      	; 0x1da <__vector_14+0xdc>
     1d8:	e1 c0       	rjmp	.+450    	; 0x39c <__vector_14+0x29e>
     1da:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_ZL5slope>
     1de:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <_ZL5slope+0x1>
     1e2:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <_ZL8newSlope>
     1e6:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     1ea:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     1ee:	84 1b       	sub	r24, r20
     1f0:	95 0b       	sbc	r25, r21
     1f2:	ac 01       	movw	r20, r24
     1f4:	22 f4       	brpl	.+8      	; 0x1fe <__vector_14+0x100>
     1f6:	44 27       	eor	r20, r20
     1f8:	55 27       	eor	r21, r21
     1fa:	48 1b       	sub	r20, r24
     1fc:	59 0b       	sbc	r21, r25
     1fe:	82 2f       	mov	r24, r18
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	48 17       	cp	r20, r24
     204:	59 07       	cpc	r21, r25
     206:	0c f4       	brge	.+2      	; 0x20a <__vector_14+0x10c>
     208:	d4 c0       	rjmp	.+424    	; 0x3b2 <__vector_14+0x2b4>
     20a:	c8 c0       	rjmp	.+400    	; 0x39c <__vector_14+0x29e>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	e8 2f       	mov	r30, r24
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e0 51       	subi	r30, 0x10	; 16
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	40 81       	ld	r20, Z
     21c:	51 81       	ldd	r21, Z+1	; 0x01
     21e:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <_ZL10totalTimer>
     222:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <_ZL10totalTimer+0x1>
     226:	24 0f       	add	r18, r20
     228:	35 1f       	adc	r19, r21
     22a:	30 93 db 01 	sts	0x01DB, r19	; 0x8001db <_ZL10totalTimer+0x1>
     22e:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <_ZL10totalTimer>
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_ZL5index>
     238:	89 17       	cp	r24, r25
     23a:	48 f3       	brcs	.-46     	; 0x20e <__vector_14+0x110>
     23c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_ZL10totalTimer>
     240:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <_ZL10totalTimer+0x1>
     244:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <_ZL6period+0x1>
     248:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_ZL6period>
     24c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	e0 51       	subi	r30, 0x10	; 16
     258:	fe 4f       	sbci	r31, 0xFE	; 254
     25a:	80 81       	ld	r24, Z
     25c:	91 81       	ldd	r25, Z+1	; 0x01
     25e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <_ZL5timer+0x1>
     262:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZL5timer>
     266:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ee 0f       	add	r30, r30
     26e:	ff 1f       	adc	r31, r31
     270:	e4 52       	subi	r30, 0x24	; 36
     272:	fe 4f       	sbci	r31, 0xFE	; 254
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <_ZL5slope+0x1>
     27c:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_ZL5slope>
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL5index>
     286:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
     28a:	28 c0       	rjmp	.+80     	; 0x2dc <__vector_14+0x1de>
     28c:	2f df       	rcall	.-418    	; 0xec <_Z5resetv>
     28e:	26 c0       	rjmp	.+76     	; 0x2dc <__vector_14+0x1de>
     290:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <_ZL8newSlope>
     294:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     298:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <_ZL8maxSlope>
     29c:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <_ZL8maxSlope+0x1>
     2a0:	82 17       	cp	r24, r18
     2a2:	93 07       	cpc	r25, r19
     2a4:	8c f4       	brge	.+34     	; 0x2c8 <__vector_14+0x1ca>
     2a6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZL8newSlope>
     2aa:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     2ae:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <_ZL8maxSlope+0x1>
     2b2:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <_ZL8maxSlope>
     2b6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_ZL4time+0x1>
     2ba:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZL4time>
     2be:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
     2c2:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <_ZL5index>
     2c6:	0a c0       	rjmp	.+20     	; 0x2dc <__vector_14+0x1de>
     2c8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_ZL7noMatch>
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <_ZL7noMatch>
     2d2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_ZL7noMatch>
     2d6:	8a 30       	cpi	r24, 0x0A	; 10
     2d8:	08 f0       	brcs	.+2      	; 0x2dc <__vector_14+0x1de>
     2da:	08 df       	rcall	.-496    	; 0xec <_Z5resetv>
     2dc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     2e0:	88 23       	and	r24, r24
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <__vector_14+0x1e8>
     2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <__vector_14+0x2c6>
     2e6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     2ea:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZL4time>
     2ee:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL4time+0x1>
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_ZL4time+0x1>
     2f8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZL4time>
     2fc:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <ampTimer>
     300:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <ampTimer+0x1>
     304:	2f 5f       	subi	r18, 0xFF	; 255
     306:	3f 4f       	sbci	r19, 0xFF	; 255
     308:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <ampTimer+0x1>
     30c:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <ampTimer>
     310:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     314:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <_ZL7newData>
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	84 1b       	sub	r24, r20
     31c:	91 09       	sbc	r25, r1
     31e:	ac 01       	movw	r20, r24
     320:	22 f4       	brpl	.+8      	; 0x32a <__vector_14+0x22c>
     322:	44 27       	eor	r20, r20
     324:	55 27       	eor	r21, r21
     326:	48 1b       	sub	r20, r24
     328:	59 0b       	sbc	r21, r25
     32a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_ZL6maxAmp>
     32e:	84 17       	cp	r24, r20
     330:	10 f4       	brcc	.+4      	; 0x336 <__vector_14+0x238>
     332:	40 93 cb 01 	sts	0x01CB, r20	; 0x8001cb <_ZL6maxAmp>
     336:	28 3e       	cpi	r18, 0xE8	; 232
     338:	33 40       	sbci	r19, 0x03	; 3
     33a:	09 f0       	breq	.+2      	; 0x33e <__vector_14+0x240>
     33c:	47 c0       	rjmp	.+142    	; 0x3cc <__vector_14+0x2ce>
     33e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ampTimer+0x1>
     342:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <ampTimer>
     346:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_ZL6maxAmp>
     34a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ZL11checkMaxAmp>
     34e:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZL6maxAmp>
     352:	3c c0       	rjmp	.+120    	; 0x3cc <__vector_14+0x2ce>
     354:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     358:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <_ZL8prevData>
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	82 1b       	sub	r24, r18
     360:	91 09       	sbc	r25, r1
     362:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <_ZL8newSlope+0x1>
     366:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <_ZL8newSlope>
     36a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZL8newSlope>
     36e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     372:	40 91 d1 01 	lds	r20, 0x01D1	; 0x8001d1 <_ZL8maxSlope>
     376:	50 91 d2 01 	lds	r21, 0x01D2	; 0x8001d2 <_ZL8maxSlope+0x1>
     37a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     37e:	84 1b       	sub	r24, r20
     380:	95 0b       	sbc	r25, r21
     382:	ac 01       	movw	r20, r24
     384:	22 f4       	brpl	.+8      	; 0x38e <__vector_14+0x290>
     386:	44 27       	eor	r20, r20
     388:	55 27       	eor	r21, r21
     38a:	48 1b       	sub	r20, r24
     38c:	59 0b       	sbc	r21, r25
     38e:	82 2f       	mov	r24, r18
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	48 17       	cp	r20, r24
     394:	59 07       	cpc	r21, r25
     396:	0c f4       	brge	.+2      	; 0x39a <__vector_14+0x29c>
     398:	d9 ce       	rjmp	.-590    	; 0x14c <__vector_14+0x4e>
     39a:	7a cf       	rjmp	.-268    	; 0x290 <__vector_14+0x192>
     39c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL5index>
     3a6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     3aa:	8a 30       	cpi	r24, 0x0A	; 10
     3ac:	08 f4       	brcc	.+2      	; 0x3b0 <__vector_14+0x2b2>
     3ae:	96 cf       	rjmp	.-212    	; 0x2dc <__vector_14+0x1de>
     3b0:	6d cf       	rjmp	.-294    	; 0x28c <__vector_14+0x18e>
     3b2:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <_ZL10totalTimer+0x1>
     3b6:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <_ZL10totalTimer>
     3ba:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     3be:	81 11       	cpse	r24, r1
     3c0:	25 cf       	rjmp	.-438    	; 0x20c <__vector_14+0x10e>
     3c2:	3c cf       	rjmp	.-392    	; 0x23c <__vector_14+0x13e>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZL8clipping>
     3ca:	8f cf       	rjmp	.-226    	; 0x2ea <__vector_14+0x1ec>
     3cc:	ff 91       	pop	r31
     3ce:	ef 91       	pop	r30
     3d0:	bf 91       	pop	r27
     3d2:	af 91       	pop	r26
     3d4:	9f 91       	pop	r25
     3d6:	8f 91       	pop	r24
     3d8:	7f 91       	pop	r23
     3da:	6f 91       	pop	r22
     3dc:	5f 91       	pop	r21
     3de:	4f 91       	pop	r20
     3e0:	3f 91       	pop	r19
     3e2:	2f 91       	pop	r18
     3e4:	0f 90       	pop	r0
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	0f 90       	pop	r0
     3ea:	1f 90       	pop	r1
     3ec:	18 95       	reti

000003ee <_Z6get_avPdi>:
const int SHORT_FREQ_AR_LEN = 10;
double short_last_frequencies[SHORT_FREQ_AR_LEN];
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
     3ee:	8f 92       	push	r8
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	6c 01       	movw	r12, r24
     408:	7b 01       	movw	r14, r22
	double sum = 0;
	for (int i = 0; i < len; i++) {
     40a:	16 16       	cp	r1, r22
     40c:	17 06       	cpc	r1, r23
     40e:	d4 f4       	brge	.+52     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     410:	8c 01       	movw	r16, r24
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	d0 e0       	ldi	r29, 0x00	; 0
     416:	81 2c       	mov	r8, r1
     418:	91 2c       	mov	r9, r1
     41a:	54 01       	movw	r10, r8
		if (ar > 0) {
     41c:	c1 14       	cp	r12, r1
     41e:	d1 04       	cpc	r13, r1
     420:	51 f0       	breq	.+20     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			sum += ar[i];
     422:	f8 01       	movw	r30, r16
     424:	20 81       	ld	r18, Z
     426:	31 81       	ldd	r19, Z+1	; 0x01
     428:	42 81       	ldd	r20, Z+2	; 0x02
     42a:	53 81       	ldd	r21, Z+3	; 0x03
     42c:	c5 01       	movw	r24, r10
     42e:	b4 01       	movw	r22, r8
     430:	65 d5       	rcall	.+2762   	; 0xefc <__addsf3>
     432:	4b 01       	movw	r8, r22
     434:	5c 01       	movw	r10, r24
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
	double sum = 0;
	for (int i = 0; i < len; i++) {
     436:	21 96       	adiw	r28, 0x01	; 1
     438:	0c 5f       	subi	r16, 0xFC	; 252
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	ec 16       	cp	r14, r28
     43e:	fd 06       	cpc	r15, r29
     440:	69 f7       	brne	.-38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
double short_last_frequencies[SHORT_FREQ_AR_LEN];
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
	double sum = 0;
     444:	81 2c       	mov	r8, r1
     446:	91 2c       	mov	r9, r1
     448:	54 01       	movw	r10, r8
		if (ar > 0) {
			sum += ar[i];
		}
	}

	return sum/(double)len;
     44a:	b7 01       	movw	r22, r14
     44c:	ff 0c       	add	r15, r15
     44e:	88 0b       	sbc	r24, r24
     450:	99 0b       	sbc	r25, r25
     452:	57 d6       	rcall	.+3246   	; 0x1102 <__floatsisf>
     454:	9b 01       	movw	r18, r22
     456:	ac 01       	movw	r20, r24
     458:	c5 01       	movw	r24, r10
     45a:	b4 01       	movw	r22, r8
     45c:	b7 d5       	rcall	.+2926   	; 0xfcc <__divsf3>
}
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	bf 90       	pop	r11
     470:	af 90       	pop	r10
     472:	9f 90       	pop	r9
     474:	8f 90       	pop	r8
     476:	08 95       	ret

00000478 <main>:


int main() {
	setup();
     478:	fd dd       	rcall	.-1030   	; 0x74 <_Z5setupv>
	USART_Init ( MYUBRR );
     47a:	83 e3       	ldi	r24, 0x33	; 51
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	36 d5       	rcall	.+2668   	; 0xeec <_Z10USART_Initj>
	while(1) {
		float voltage = newData * (5.0 / 1023.0);
     480:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
		if (checkMaxAmp > ampThreshold) /* && checkMaxAmp < maxAmpThreshold) */ {
     484:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <_ZL11checkMaxAmp>
     488:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     48c:	89 17       	cp	r24, r25
     48e:	08 f0       	brcs	.+2      	; 0x492 <main+0x1a>
     490:	a4 c0       	rjmp	.+328    	; 0x5da <main+0x162>
			frequency = 38462.0/float(period);//calculate frequency timer rate/period
     492:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <_ZL6period>
     496:	70 91 d9 01 	lds	r23, 0x01D9	; 0x8001d9 <_ZL6period+0x1>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	2f d6       	rcall	.+3166   	; 0x10fe <__floatunsisf>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	7e e3       	ldi	r23, 0x3E	; 62
     4a8:	86 e1       	ldi	r24, 0x16	; 22
     4aa:	97 e4       	ldi	r25, 0x47	; 71
     4ac:	8f d5       	rcall	.+2846   	; 0xfcc <__divsf3>
     4ae:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <_ZL9frequency>
     4b2:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <_ZL9frequency+0x1>
     4b6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZL9frequency+0x2>
     4ba:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <_ZL9frequency+0x3>
			
			// Ignore noise and big swings
			long_last_frequencies[long_freq_ar_i++] = frequency;
     4be:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <long_freq_ar_i>
     4c2:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <long_freq_ar_i+0x1>
     4c6:	9c 01       	movw	r18, r24
     4c8:	2f 5f       	subi	r18, 0xFF	; 255
     4ca:	3f 4f       	sbci	r19, 0xFF	; 255
     4cc:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <long_freq_ar_i+0x1>
     4d0:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <long_freq_ar_i>
     4d4:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <_ZL9frequency>
     4d8:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <_ZL9frequency+0x1>
     4dc:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <_ZL9frequency+0x2>
     4e0:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <_ZL9frequency+0x3>
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	fc 01       	movw	r30, r24
     4ee:	e6 52       	subi	r30, 0x26	; 38
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	40 83       	st	Z, r20
     4f4:	51 83       	std	Z+1, r21	; 0x01
     4f6:	62 83       	std	Z+2, r22	; 0x02
     4f8:	73 83       	std	Z+3, r23	; 0x03
			if (long_freq_ar_i >= LONG_FREQ_AR_LEN) long_freq_ar_i = 0;
     4fa:	2c 33       	cpi	r18, 0x3C	; 60
     4fc:	31 05       	cpc	r19, r1
     4fe:	24 f0       	brlt	.+8      	; 0x508 <main+0x90>
     500:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <long_freq_ar_i+0x1>
     504:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <long_freq_ar_i>
			float long_average_freq = get_av(long_last_frequencies, LONG_FREQ_AR_LEN);
     508:	6c e3       	ldi	r22, 0x3C	; 60
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	8a ed       	ldi	r24, 0xDA	; 218
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	6e df       	rcall	.-292    	; 0x3ee <_Z6get_avPdi>
     512:	6b 01       	movw	r12, r22
     514:	7c 01       	movw	r14, r24
			float diff = abs(long_average_freq - frequency);
     516:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <_ZL9frequency>
     51a:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <_ZL9frequency+0x1>
     51e:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <_ZL9frequency+0x2>
     522:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <_ZL9frequency+0x3>
			float max_diff = long_average_freq * FREQ_MAX_DIFF;

			if (diff < max_diff){
     526:	e9 d4       	rcall	.+2514   	; 0xefa <__subsf3>
     528:	b9 d5       	rcall	.+2930   	; 0x109c <__fixsfsi>
     52a:	9b 01       	movw	r18, r22
     52c:	77 23       	and	r23, r23
     52e:	24 f4       	brge	.+8      	; 0x538 <main+0xc0>
     530:	22 27       	eor	r18, r18
     532:	33 27       	eor	r19, r19
     534:	26 1b       	sub	r18, r22
     536:	37 0b       	sbc	r19, r23
     538:	b9 01       	movw	r22, r18
     53a:	33 0f       	add	r19, r19
     53c:	88 0b       	sbc	r24, r24
     53e:	99 0b       	sbc	r25, r25
     540:	e0 d5       	rcall	.+3008   	; 0x1102 <__floatsisf>
     542:	4b 01       	movw	r8, r22
     544:	5c 01       	movw	r10, r24
     546:	2d ec       	ldi	r18, 0xCD	; 205
     548:	3c ec       	ldi	r19, 0xCC	; 204
     54a:	4c e4       	ldi	r20, 0x4C	; 76
     54c:	5e e3       	ldi	r21, 0x3E	; 62
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	aa d6       	rcall	.+3412   	; 0x12a8 <__mulsf3>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	c5 01       	movw	r24, r10
     55a:	b4 01       	movw	r22, r8
     55c:	33 d5       	rcall	.+2662   	; 0xfc4 <__cmpsf2>
     55e:	88 23       	and	r24, r24
     560:	e4 f5       	brge	.+120    	; 0x5da <main+0x162>
				// get average freq
				short_last_frequencies[short_freq_ar_i++] = frequency;
     562:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     566:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
     56a:	9c 01       	movw	r18, r24
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <__data_end+0x1>
     574:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <__data_end>
     578:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <_ZL9frequency>
     57c:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <_ZL9frequency+0x1>
     580:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <_ZL9frequency+0x2>
     584:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <_ZL9frequency+0x3>
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	fc 01       	movw	r30, r24
     592:	e0 55       	subi	r30, 0x50	; 80
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	40 83       	st	Z, r20
     598:	51 83       	std	Z+1, r21	; 0x01
     59a:	62 83       	std	Z+2, r22	; 0x02
     59c:	73 83       	std	Z+3, r23	; 0x03
				if (short_freq_ar_i >= SHORT_FREQ_AR_LEN) short_freq_ar_i = 0;
     59e:	2a 30       	cpi	r18, 0x0A	; 10
     5a0:	31 05       	cpc	r19, r1
     5a2:	24 f0       	brlt	.+8      	; 0x5ac <main+0x134>
     5a4:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__data_end+0x1>
     5a8:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
				float short_average_freq = get_av(short_last_frequencies, SHORT_FREQ_AR_LEN);
     5ac:	6a e0       	ldi	r22, 0x0A	; 10
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 eb       	ldi	r24, 0xB0	; 176
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	1c df       	rcall	.-456    	; 0x3ee <_Z6get_avPdi>
     5b6:	6b 01       	movw	r12, r22
     5b8:	7c 01       	movw	r14, r24

				getNoteByFreq(&currentNote, short_average_freq); // RECOGNIZE NOTE
     5ba:	ab 01       	movw	r20, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	87 e5       	ldi	r24, 0x57	; 87
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	9e d2       	rcall	.+1340   	; 0xb00 <_Z13getNoteByFreqP4Noted>
				if (currentNote.valid) {
     5c4:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <currentNote+0xe>
     5c8:	88 23       	and	r24, r24
     5ca:	39 f0       	breq	.+14     	; 0x5da <main+0x162>
					//printFreqNote(short_average_freq, currentNote);
					//displ->displayNote(currentNote, short_average_freq); // DISPLAY NOTE
					
					displ.lightIndicator(&currentNote, short_average_freq);
     5cc:	a7 01       	movw	r20, r14
     5ce:	96 01       	movw	r18, r12
     5d0:	67 e5       	ldi	r22, 0x57	; 87
     5d2:	72 e0       	ldi	r23, 0x02	; 2
     5d4:	89 e0       	ldi	r24, 0x09	; 9
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	7b d1       	rcall	.+758    	; 0x8d0 <_ZN7Display14lightIndicatorEPK4Noted>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5da:	8f e1       	ldi	r24, 0x1F	; 31
     5dc:	9e e4       	ldi	r25, 0x4E	; 78
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <main+0x166>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x16c>
     5e4:	00 00       	nop
     5e6:	4c cf       	rjmp	.-360    	; 0x480 <main+0x8>

000005e8 <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     5e8:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     5ec:	e9 e0       	ldi	r30, 0x09	; 9
     5ee:	f2 e0       	ldi	r31, 0x02	; 2
     5f0:	17 86       	std	Z+15, r1	; 0x0f
     5f2:	16 86       	std	Z+14, r1	; 0x0e
     5f4:	12 8a       	std	Z+18, r1	; 0x12
     5f6:	12 a2       	std	Z+34, r1	; 0x22
     5f8:	13 a2       	std	Z+35, r1	; 0x23
     5fa:	14 a2       	std	Z+36, r1	; 0x24
     5fc:	15 a2       	std	Z+37, r1	; 0x25
     5fe:	08 95       	ret

00000600 <_ZN7Display14cleanIndicatorEv>:
	//}
	//this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     600:	fc 01       	movw	r30, r24
     602:	9c 01       	movw	r18, r24
     604:	21 5f       	subi	r18, 0xF1	; 241
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	13 8a       	std	Z+19, r1	; 0x13
     60a:	14 8a       	std	Z+20, r1	; 0x14
     60c:	15 8a       	std	Z+21, r1	; 0x15
     60e:	33 96       	adiw	r30, 0x03	; 3
     610:	e2 17       	cp	r30, r18
     612:	f3 07       	cpc	r31, r19
     614:	c9 f7       	brne	.-14     	; 0x608 <_ZN7Display14cleanIndicatorEv+0x8>
     616:	6f e0       	ldi	r22, 0x0F	; 15
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	43 96       	adiw	r24, 0x13	; 19
     61c:	39 d4       	rcall	.+2162   	; 0xe90 <ws2812_sendarray>
     61e:	08 95       	ret

00000620 <_ZN7Display10initializeEiiiiiiii>:
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	fc 01       	movw	r30, r24
     63e:	ba 9a       	sbi	0x17, 2	; 23
     640:	71 83       	std	Z+1, r23	; 0x01
     642:	60 83       	st	Z, r22
     644:	53 83       	std	Z+3, r21	; 0x03
     646:	42 83       	std	Z+2, r20	; 0x02
     648:	35 83       	std	Z+5, r19	; 0x05
     64a:	24 83       	std	Z+4, r18	; 0x04
     64c:	17 83       	std	Z+7, r17	; 0x07
     64e:	06 83       	std	Z+6, r16	; 0x06
     650:	f1 86       	std	Z+9, r15	; 0x09
     652:	e0 86       	std	Z+8, r14	; 0x08
     654:	d3 86       	std	Z+11, r13	; 0x0b
     656:	c2 86       	std	Z+10, r12	; 0x0a
     658:	b5 86       	std	Z+13, r11	; 0x0d
     65a:	a4 86       	std	Z+12, r10	; 0x0c
     65c:	91 8a       	std	Z+17, r9	; 0x11
     65e:	80 8a       	std	Z+16, r8	; 0x10
     660:	17 86       	std	Z+15, r1	; 0x0f
     662:	16 86       	std	Z+14, r1	; 0x0e
     664:	cd df       	rcall	.-102    	; 0x600 <_ZN7Display14cleanIndicatorEv>
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	08 95       	ret

00000680 <_ZN7Display12rebuildCacheEd>:
	//Serial.println();
}

#include "serial.h"
// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     680:	4f 92       	push	r4
     682:	5f 92       	push	r5
     684:	6f 92       	push	r6
     686:	7f 92       	push	r7
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	4a 01       	movw	r8, r20
     6a0:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     6a2:	29 e2       	ldi	r18, 0x29	; 41
     6a4:	3c e5       	ldi	r19, 0x5C	; 92
     6a6:	4f e0       	ldi	r20, 0x0F	; 15
     6a8:	5d e3       	ldi	r21, 0x3D	; 61
     6aa:	c5 01       	movw	r24, r10
     6ac:	b4 01       	movw	r22, r8
     6ae:	fc d5       	rcall	.+3064   	; 0x12a8 <__mulsf3>
     6b0:	2b 01       	movw	r4, r22
     6b2:	3c 01       	movw	r6, r24
     6b4:	fe 01       	movw	r30, r28
     6b6:	ee 5b       	subi	r30, 0xBE	; 190
     6b8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ba:	60 83       	st	Z, r22
     6bc:	71 83       	std	Z+1, r23	; 0x01
     6be:	82 83       	std	Z+2, r24	; 0x02
     6c0:	93 83       	std	Z+3, r25	; 0x03
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     6c2:	2a e9       	ldi	r18, 0x9A	; 154
     6c4:	39 e9       	ldi	r19, 0x99	; 153
     6c6:	49 e1       	ldi	r20, 0x19	; 25
     6c8:	5e e3       	ldi	r21, 0x3E	; 62
     6ca:	c5 01       	movw	r24, r10
     6cc:	b4 01       	movw	r22, r8
     6ce:	ec d5       	rcall	.+3032   	; 0x12a8 <__mulsf3>
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
     6d4:	fe 01       	movw	r30, r28
     6d6:	ea 5b       	subi	r30, 0xBA	; 186
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	60 83       	st	Z, r22
     6dc:	71 83       	std	Z+1, r23	; 0x01
     6de:	82 83       	std	Z+2, r24	; 0x02
     6e0:	93 83       	std	Z+3, r25	; 0x03
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     6e2:	23 e3       	ldi	r18, 0x33	; 51
     6e4:	33 e3       	ldi	r19, 0x33	; 51
     6e6:	43 eb       	ldi	r20, 0xB3	; 179
     6e8:	5e e3       	ldi	r21, 0x3E	; 62
     6ea:	c5 01       	movw	r24, r10
     6ec:	b4 01       	movw	r22, r8
     6ee:	dc d5       	rcall	.+3000   	; 0x12a8 <__mulsf3>
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
     6f4:	fe 01       	movw	r30, r28
     6f6:	e6 5b       	subi	r30, 0xB6	; 182
     6f8:	ff 4f       	sbci	r31, 0xFF	; 255
     6fa:	60 83       	st	Z, r22
     6fc:	71 83       	std	Z+1, r23	; 0x01
     6fe:	82 83       	std	Z+2, r24	; 0x02
     700:	93 83       	std	Z+3, r25	; 0x03
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     702:	a3 01       	movw	r20, r6
     704:	92 01       	movw	r18, r4
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 ef       	ldi	r24, 0xF0	; 240
     70c:	92 ec       	ldi	r25, 0xC2	; 194
     70e:	5e d4       	rcall	.+2236   	; 0xfcc <__divsf3>
     710:	6a a7       	std	Y+42, r22	; 0x2a
     712:	7b a7       	std	Y+43, r23	; 0x2b
     714:	8c a7       	std	Y+44, r24	; 0x2c
     716:	9d a7       	std	Y+45, r25	; 0x2d
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	a8 e4       	ldi	r26, 0x48	; 72
     71e:	b3 e4       	ldi	r27, 0x43	; 67
     720:	8e ab       	std	Y+54, r24	; 0x36
     722:	9f ab       	std	Y+55, r25	; 0x37
     724:	a8 af       	std	Y+56, r26	; 0x38
     726:	b9 af       	std	Y+57, r27	; 0x39
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     728:	a3 01       	movw	r20, r6
     72a:	92 01       	movw	r18, r4
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	e4 d3       	rcall	.+1992   	; 0xefa <__subsf3>
     732:	9b 01       	movw	r18, r22
     734:	ac 01       	movw	r20, r24
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	8c e8       	ldi	r24, 0x8C	; 140
     73c:	92 ec       	ldi	r25, 0xC2	; 194
     73e:	46 d4       	rcall	.+2188   	; 0xfcc <__divsf3>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	6e a7       	std	Y+46, r22	; 0x2e
     746:	7f a7       	std	Y+47, r23	; 0x2f
     748:	88 ab       	std	Y+48, r24	; 0x30
     74a:	99 ab       	std	Y+49, r25	; 0x31
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	ab d5       	rcall	.+2902   	; 0x12a8 <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e2       	ldi	r24, 0x20	; 32
     75c:	91 e4       	ldi	r25, 0x41	; 65
     75e:	cd d3       	rcall	.+1946   	; 0xefa <__subsf3>
     760:	6a af       	std	Y+58, r22	; 0x3a
     762:	7b af       	std	Y+59, r23	; 0x3b
     764:	8c af       	std	Y+60, r24	; 0x3c
     766:	9d af       	std	Y+61, r25	; 0x3d
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     768:	a7 01       	movw	r20, r14
     76a:	96 01       	movw	r18, r12
     76c:	c5 01       	movw	r24, r10
     76e:	b4 01       	movw	r22, r8
     770:	c4 d3       	rcall	.+1928   	; 0xefa <__subsf3>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	80 e2       	ldi	r24, 0x20	; 32
     77c:	91 ec       	ldi	r25, 0xC1	; 193
     77e:	26 d4       	rcall	.+2124   	; 0xfcc <__divsf3>
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	6a ab       	std	Y+50, r22	; 0x32
     786:	7b ab       	std	Y+51, r23	; 0x33
     788:	8c ab       	std	Y+52, r24	; 0x34
     78a:	9d ab       	std	Y+53, r25	; 0x35
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     78c:	ee 96       	adiw	r28, 0x3e	; 62
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	8a d5       	rcall	.+2836   	; 0x12a8 <__mulsf3>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	cb 01       	movw	r24, r22
     79e:	ad d3       	rcall	.+1882   	; 0xefa <__subsf3>
     7a0:	68 83       	st	Y, r22
     7a2:	79 83       	std	Y+1, r23	; 0x01
     7a4:	8a 83       	std	Y+2, r24	; 0x02
     7a6:	9b 83       	std	Y+3, r25	; 0x03
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	7f 90       	pop	r7
     7be:	6f 90       	pop	r6
     7c0:	5f 90       	pop	r5
     7c2:	4f 90       	pop	r4
     7c4:	08 95       	ret

000007c6 <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
     7e0:	6a 01       	movw	r12, r20
     7e2:	7b 01       	movw	r14, r22
     7e4:	b9 01       	movw	r22, r18
     7e6:	a8 01       	movw	r20, r16
	this->rebuildCache(max_distance); // find new functions
     7e8:	4b df       	rcall	.-362    	; 0x680 <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	a9 01       	movw	r20, r18
     7f0:	c7 01       	movw	r24, r14
     7f2:	b6 01       	movw	r22, r12
     7f4:	e7 d3       	rcall	.+1998   	; 0xfc4 <__cmpsf2>
     7f6:	88 23       	and	r24, r24
     7f8:	0c f4       	brge	.+2      	; 0x7fc <_ZN7Display25getIndicatorValByDistanceEdd+0x36>
     7fa:	58 c0       	rjmp	.+176    	; 0x8ac <_ZN7Display25getIndicatorValByDistanceEdd+0xe6>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     7fc:	fe 01       	movw	r30, r28
     7fe:	e6 5b       	subi	r30, 0xB6	; 182
     800:	ff 4f       	sbci	r31, 0xFF	; 255
     802:	80 80       	ld	r8, Z
     804:	91 80       	ldd	r9, Z+1	; 0x01
     806:	a2 80       	ldd	r10, Z+2	; 0x02
     808:	b3 80       	ldd	r11, Z+3	; 0x03
     80a:	a5 01       	movw	r20, r10
     80c:	94 01       	movw	r18, r8
     80e:	c7 01       	movw	r24, r14
     810:	b6 01       	movw	r22, r12
     812:	46 d5       	rcall	.+2700   	; 0x12a0 <__gesf2>
     814:	18 16       	cp	r1, r24
     816:	0c f4       	brge	.+2      	; 0x81a <_ZN7Display25getIndicatorValByDistanceEdd+0x54>
     818:	4c c0       	rjmp	.+152    	; 0x8b2 <_ZN7Display25getIndicatorValByDistanceEdd+0xec>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     81a:	fe 01       	movw	r30, r28
     81c:	ee 5b       	subi	r30, 0xBE	; 190
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	20 81       	ld	r18, Z
     822:	31 81       	ldd	r19, Z+1	; 0x01
     824:	42 81       	ldd	r20, Z+2	; 0x02
     826:	53 81       	ldd	r21, Z+3	; 0x03
     828:	c7 01       	movw	r24, r14
     82a:	b6 01       	movw	r22, r12
     82c:	cb d3       	rcall	.+1942   	; 0xfc4 <__cmpsf2>
     82e:	18 16       	cp	r1, r24
     830:	cc f4       	brge	.+50     	; 0x864 <_ZN7Display25getIndicatorValByDistanceEdd+0x9e>
     832:	fe 01       	movw	r30, r28
     834:	ea 5b       	subi	r30, 0xBA	; 186
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	20 81       	ld	r18, Z
     83a:	31 81       	ldd	r19, Z+1	; 0x01
     83c:	42 81       	ldd	r20, Z+2	; 0x02
     83e:	53 81       	ldd	r21, Z+3	; 0x03
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	bf d3       	rcall	.+1918   	; 0xfc4 <__cmpsf2>
     846:	18 16       	cp	r1, r24
     848:	54 f4       	brge	.+20     	; 0x85e <_ZN7Display25getIndicatorValByDistanceEdd+0x98>
     84a:	a5 01       	movw	r20, r10
     84c:	94 01       	movw	r18, r8
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	b8 d3       	rcall	.+1904   	; 0xfc4 <__cmpsf2>
     854:	18 16       	cp	r1, r24
     856:	4c f0       	brlt	.+18     	; 0x86a <_ZN7Display25getIndicatorValByDistanceEdd+0xa4>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     858:	02 e0       	ldi	r16, 0x02	; 2
     85a:	10 e0       	ldi	r17, 0x00	; 0
     85c:	08 c0       	rjmp	.+16     	; 0x86e <_ZN7Display25getIndicatorValByDistanceEdd+0xa8>
     85e:	01 e0       	ldi	r16, 0x01	; 1
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	05 c0       	rjmp	.+10     	; 0x86e <_ZN7Display25getIndicatorValByDistanceEdd+0xa8>
	if (distance <= ledFCache.xBounds[i])
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	02 c0       	rjmp	.+4      	; 0x86e <_ZN7Display25getIndicatorValByDistanceEdd+0xa8>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     86a:	03 e0       	ldi	r16, 0x03	; 3
     86c:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     86e:	f8 01       	movw	r30, r16
     870:	31 96       	adiw	r30, 0x01	; 1
     872:	ee 0f       	add	r30, r30
     874:	ff 1f       	adc	r31, r31
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ec 0f       	add	r30, r28
     87c:	fd 1f       	adc	r31, r29
     87e:	26 a1       	ldd	r18, Z+38	; 0x26
     880:	37 a1       	ldd	r19, Z+39	; 0x27
     882:	40 a5       	ldd	r20, Z+40	; 0x28
     884:	51 a5       	ldd	r21, Z+41	; 0x29
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e d5       	rcall	.+2588   	; 0x12a8 <__mulsf3>
     88c:	0c 5f       	subi	r16, 0xFC	; 252
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	00 0f       	add	r16, r16
     892:	11 1f       	adc	r17, r17
     894:	00 0f       	add	r16, r16
     896:	11 1f       	adc	r17, r17
     898:	c0 0f       	add	r28, r16
     89a:	d1 1f       	adc	r29, r17
     89c:	2e a1       	ldd	r18, Y+38	; 0x26
     89e:	3f a1       	ldd	r19, Y+39	; 0x27
     8a0:	48 a5       	ldd	r20, Y+40	; 0x28
     8a2:	59 a5       	ldd	r21, Y+41	; 0x29
     8a4:	2b d3       	rcall	.+1622   	; 0xefc <__addsf3>
     8a6:	fa d3       	rcall	.+2036   	; 0x109c <__fixsfsi>
	return val;
     8a8:	cb 01       	movw	r24, r22
     8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <_ZN7Display25getIndicatorValByDistanceEdd+0xf0>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     8ac:	88 ec       	ldi	r24, 0xC8	; 200
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <_ZN7Display25getIndicatorValByDistanceEdd+0xf0>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
	return val;
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	9f 90       	pop	r9
     8cc:	8f 90       	pop	r8
     8ce:	08 95       	ret

000008d0 <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     8d0:	2f 92       	push	r2
     8d2:	3f 92       	push	r3
     8d4:	4f 92       	push	r4
     8d6:	5f 92       	push	r5
     8d8:	6f 92       	push	r6
     8da:	7f 92       	push	r7
     8dc:	8f 92       	push	r8
     8de:	9f 92       	push	r9
     8e0:	af 92       	push	r10
     8e2:	bf 92       	push	r11
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	6c 97       	sbiw	r28, 0x1c	; 28
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	1c 01       	movw	r2, r24
     906:	8b 01       	movw	r16, r22
     908:	2d 8b       	std	Y+21, r18	; 0x15
     90a:	3e 8b       	std	Y+22, r19	; 0x16
     90c:	4f 8b       	std	Y+23, r20	; 0x17
     90e:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     910:	db 01       	movw	r26, r22
     912:	16 96       	adiw	r26, 0x06	; 6
     914:	8d 91       	ld	r24, X+
     916:	9d 91       	ld	r25, X+
     918:	0d 90       	ld	r0, X+
     91a:	bc 91       	ld	r27, X
     91c:	a0 2d       	mov	r26, r0
     91e:	89 8f       	std	Y+25, r24	; 0x19
     920:	9a 8f       	std	Y+26, r25	; 0x1a
     922:	ab 8f       	std	Y+27, r26	; 0x1b
     924:	bc 8f       	std	Y+28, r27	; 0x1c
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     926:	fb 01       	movw	r30, r22
     928:	82 84       	ldd	r8, Z+10	; 0x0a
     92a:	93 84       	ldd	r9, Z+11	; 0x0b
     92c:	a4 84       	ldd	r10, Z+12	; 0x0c
     92e:	b5 84       	ldd	r11, Z+13	; 0x0d
     930:	9c 01       	movw	r18, r24
     932:	ad 01       	movw	r20, r26
     934:	c5 01       	movw	r24, r10
     936:	b4 01       	movw	r22, r8
     938:	e0 d2       	rcall	.+1472   	; 0xefa <__subsf3>
     93a:	6b 01       	movw	r12, r22
     93c:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     93e:	d8 01       	movw	r26, r16
     940:	12 96       	adiw	r26, 0x02	; 2
     942:	4d 90       	ld	r4, X+
     944:	5d 90       	ld	r5, X+
     946:	6d 90       	ld	r6, X+
     948:	7c 90       	ld	r7, X
     94a:	15 97       	sbiw	r26, 0x05	; 5
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     94c:	29 8d       	ldd	r18, Y+25	; 0x19
     94e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     950:	4b 8d       	ldd	r20, Y+27	; 0x1b
     952:	5c 8d       	ldd	r21, Y+28	; 0x1c
     954:	6d 89       	ldd	r22, Y+21	; 0x15
     956:	7e 89       	ldd	r23, Y+22	; 0x16
     958:	8f 89       	ldd	r24, Y+23	; 0x17
     95a:	98 8d       	ldd	r25, Y+24	; 0x18
     95c:	ce d2       	rcall	.+1436   	; 0xefa <__subsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	08 d4       	rcall	.+2064   	; 0x1178 <fmin>
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     968:	69 83       	std	Y+1, r22	; 0x01
     96a:	7a 83       	std	Y+2, r23	; 0x02
     96c:	8b 83       	std	Y+3, r24	; 0x03
     96e:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
     970:	29 8d       	ldd	r18, Y+25	; 0x19
     972:	3a 8d       	ldd	r19, Y+26	; 0x1a
     974:	4b 8d       	ldd	r20, Y+27	; 0x1b
     976:	5c 8d       	ldd	r21, Y+28	; 0x1c
     978:	c3 01       	movw	r24, r6
     97a:	b2 01       	movw	r22, r4
     97c:	be d2       	rcall	.+1404   	; 0xefa <__subsf3>
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	5f e3       	ldi	r21, 0x3F	; 63
     986:	90 d4       	rcall	.+2336   	; 0x12a8 <__mulsf3>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	b4 d2       	rcall	.+1384   	; 0xefa <__subsf3>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	6d 89       	ldd	r22, Y+21	; 0x15
     998:	7e 89       	ldd	r23, Y+22	; 0x16
     99a:	8f 89       	ldd	r24, Y+23	; 0x17
     99c:	98 8d       	ldd	r25, Y+24	; 0x18
     99e:	ad d2       	rcall	.+1370   	; 0xefa <__subsf3>
     9a0:	7d d3       	rcall	.+1786   	; 0x109c <__fixsfsi>
     9a2:	9b 01       	movw	r18, r22
     9a4:	77 23       	and	r23, r23
     9a6:	24 f4       	brge	.+8      	; 0x9b0 <_ZN7Display14lightIndicatorEPK4Noted+0xe0>
     9a8:	22 27       	eor	r18, r18
     9aa:	33 27       	eor	r19, r19
     9ac:	26 1b       	sub	r18, r22
     9ae:	37 0b       	sbc	r19, r23
     9b0:	b9 01       	movw	r22, r18
     9b2:	33 0f       	add	r19, r19
     9b4:	88 0b       	sbc	r24, r24
     9b6:	99 0b       	sbc	r25, r25
     9b8:	a4 d3       	rcall	.+1864   	; 0x1102 <__floatsisf>
     9ba:	9b 01       	movw	r18, r22
     9bc:	ac 01       	movw	r20, r24
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	da d3       	rcall	.+1972   	; 0x1178 <fmin>
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     9c4:	6d 83       	std	Y+5, r22	; 0x05
     9c6:	7e 83       	std	Y+6, r23	; 0x06
     9c8:	8f 83       	std	Y+7, r24	; 0x07
     9ca:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
     9cc:	a3 01       	movw	r20, r6
     9ce:	92 01       	movw	r18, r4
     9d0:	6d 89       	ldd	r22, Y+21	; 0x15
     9d2:	7e 89       	ldd	r23, Y+22	; 0x16
     9d4:	8f 89       	ldd	r24, Y+23	; 0x17
     9d6:	98 8d       	ldd	r25, Y+24	; 0x18
     9d8:	90 d2       	rcall	.+1312   	; 0xefa <__subsf3>
     9da:	60 d3       	rcall	.+1728   	; 0x109c <__fixsfsi>
     9dc:	9b 01       	movw	r18, r22
     9de:	77 23       	and	r23, r23
     9e0:	24 f4       	brge	.+8      	; 0x9ea <_ZN7Display14lightIndicatorEPK4Noted+0x11a>
     9e2:	22 27       	eor	r18, r18
     9e4:	33 27       	eor	r19, r19
     9e6:	26 1b       	sub	r18, r22
     9e8:	37 0b       	sbc	r19, r23
     9ea:	b9 01       	movw	r22, r18
     9ec:	33 0f       	add	r19, r19
     9ee:	88 0b       	sbc	r24, r24
     9f0:	99 0b       	sbc	r25, r25
     9f2:	87 d3       	rcall	.+1806   	; 0x1102 <__floatsisf>
     9f4:	9b 01       	movw	r18, r22
     9f6:	ac 01       	movw	r20, r24
     9f8:	c7 01       	movw	r24, r14
     9fa:	b6 01       	movw	r22, r12
     9fc:	bd d3       	rcall	.+1914   	; 0x1178 <fmin>
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     9fe:	69 87       	std	Y+9, r22	; 0x09
     a00:	7a 87       	std	Y+10, r23	; 0x0a
     a02:	8b 87       	std	Y+11, r24	; 0x0b
     a04:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
     a06:	a3 01       	movw	r20, r6
     a08:	92 01       	movw	r18, r4
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	75 d2       	rcall	.+1258   	; 0xefa <__subsf3>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	47 d4       	rcall	.+2190   	; 0x12a8 <__mulsf3>
     a1a:	a3 01       	movw	r20, r6
     a1c:	92 01       	movw	r18, r4
     a1e:	6e d2       	rcall	.+1244   	; 0xefc <__addsf3>
     a20:	2d 89       	ldd	r18, Y+21	; 0x15
     a22:	3e 89       	ldd	r19, Y+22	; 0x16
     a24:	4f 89       	ldd	r20, Y+23	; 0x17
     a26:	58 8d       	ldd	r21, Y+24	; 0x18
     a28:	68 d2       	rcall	.+1232   	; 0xefa <__subsf3>
     a2a:	38 d3       	rcall	.+1648   	; 0x109c <__fixsfsi>
     a2c:	9b 01       	movw	r18, r22
     a2e:	77 23       	and	r23, r23
     a30:	24 f4       	brge	.+8      	; 0xa3a <_ZN7Display14lightIndicatorEPK4Noted+0x16a>
     a32:	22 27       	eor	r18, r18
     a34:	33 27       	eor	r19, r19
     a36:	26 1b       	sub	r18, r22
     a38:	37 0b       	sbc	r19, r23
     a3a:	b9 01       	movw	r22, r18
     a3c:	33 0f       	add	r19, r19
     a3e:	88 0b       	sbc	r24, r24
     a40:	99 0b       	sbc	r25, r25
     a42:	5f d3       	rcall	.+1726   	; 0x1102 <__floatsisf>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	95 d3       	rcall	.+1834   	; 0x1178 <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     a4e:	6d 87       	std	Y+13, r22	; 0x0d
     a50:	7e 87       	std	Y+14, r23	; 0x0e
     a52:	8f 87       	std	Y+15, r24	; 0x0f
     a54:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     a56:	2d 89       	ldd	r18, Y+21	; 0x15
     a58:	3e 89       	ldd	r19, Y+22	; 0x16
     a5a:	4f 89       	ldd	r20, Y+23	; 0x17
     a5c:	58 8d       	ldd	r21, Y+24	; 0x18
     a5e:	c5 01       	movw	r24, r10
     a60:	b4 01       	movw	r22, r8
     a62:	4b d2       	rcall	.+1174   	; 0xefa <__subsf3>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c7 01       	movw	r24, r14
     a6a:	b6 01       	movw	r22, r12
     a6c:	85 d3       	rcall	.+1802   	; 0x1178 <fmin>
	};
     a6e:	69 8b       	std	Y+17, r22	; 0x11
     a70:	7a 8b       	std	Y+18, r23	; 0x12
     a72:	8b 8b       	std	Y+19, r24	; 0x13
     a74:	9c 8b       	std	Y+20, r25	; 0x14
     a76:	fe 01       	movw	r30, r28
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	3f 01       	movw	r6, r30
     a7c:	41 01       	movw	r8, r2
     a7e:	aa 24       	eor	r10, r10
     a80:	a3 94       	inc	r10
     a82:	b1 2c       	mov	r11, r1
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <_ZN7Display14lightIndicatorEPK4Noted+0x1c2>
     a86:	ff ef       	ldi	r31, 0xFF	; 255
     a88:	af 1a       	sub	r10, r31
     a8a:	bf 0a       	sbc	r11, r31
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	88 0e       	add	r8, r24
     a90:	91 1c       	adc	r9, r1
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     a92:	d3 01       	movw	r26, r6
     a94:	4d 91       	ld	r20, X+
     a96:	5d 91       	ld	r21, X+
     a98:	6d 91       	ld	r22, X+
     a9a:	7d 91       	ld	r23, X+
     a9c:	3d 01       	movw	r6, r26
     a9e:	97 01       	movw	r18, r14
     aa0:	86 01       	movw	r16, r12
     aa2:	c1 01       	movw	r24, r2
     aa4:	90 de       	rcall	.-736    	; 0x7c6 <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     aa6:	b3 e0       	ldi	r27, 0x03	; 3
     aa8:	ab 16       	cp	r10, r27
     aaa:	b1 04       	cpc	r11, r1
     aac:	39 f0       	breq	.+14     	; 0xabc <_ZN7Display14lightIndicatorEPK4Noted+0x1ec>
			this->indicatorBar[i].r = val;
     aae:	f4 01       	movw	r30, r8
     ab0:	83 8b       	std	Z+19, r24	; 0x13
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     ab2:	f5 e0       	ldi	r31, 0x05	; 5
     ab4:	af 16       	cp	r10, r31
     ab6:	b1 04       	cpc	r11, r1
     ab8:	34 f3       	brlt	.-52     	; 0xa86 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <_ZN7Display14lightIndicatorEPK4Noted+0x1f4>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     abc:	d1 01       	movw	r26, r2
     abe:	5a 96       	adiw	r26, 0x1a	; 26
     ac0:	8c 93       	st	X, r24
     ac2:	e1 cf       	rjmp	.-62     	; 0xa86 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     ac4:	6f e0       	ldi	r22, 0x0F	; 15
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	c1 01       	movw	r24, r2
     aca:	43 96       	adiw	r24, 0x13	; 19
     acc:	e1 d1       	rcall	.+962    	; 0xe90 <ws2812_sendarray>
}
     ace:	6c 96       	adiw	r28, 0x1c	; 28
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	7f 90       	pop	r7
     af4:	6f 90       	pop	r6
     af6:	5f 90       	pop	r5
     af8:	4f 90       	pop	r4
     afa:	3f 90       	pop	r3
     afc:	2f 90       	pop	r2
     afe:	08 95       	ret

00000b00 <_Z13getNoteByFreqP4Noted>:
	}

	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
     b00:	2f 92       	push	r2
     b02:	3f 92       	push	r3
     b04:	4f 92       	push	r4
     b06:	5f 92       	push	r5
     b08:	6f 92       	push	r6
     b0a:	7f 92       	push	r7
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	2c 97       	sbiw	r28, 0x0c	; 12
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	9e 83       	std	Y+6, r25	; 0x06
     b36:	8d 83       	std	Y+5, r24	; 0x05
     b38:	49 83       	std	Y+1, r20	; 0x01
     b3a:	5a 83       	std	Y+2, r21	; 0x02
     b3c:	6b 83       	std	Y+3, r22	; 0x03
     b3e:	7c 83       	std	Y+4, r23	; 0x04

#include "freqDetect.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     b40:	2b e9       	ldi	r18, 0x9B	; 155
     b42:	38 e4       	ldi	r19, 0x48	; 72
     b44:	4e e7       	ldi	r20, 0x7E	; 126
     b46:	51 e4       	ldi	r21, 0x41	; 65
     b48:	69 81       	ldd	r22, Y+1	; 0x01
     b4a:	7a 81       	ldd	r23, Y+2	; 0x02
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	a7 d3       	rcall	.+1870   	; 0x12a0 <__gesf2>
     b52:	88 23       	and	r24, r24
     b54:	0c f4       	brge	.+2      	; 0xb58 <_Z13getNoteByFreqP4Noted+0x58>
     b56:	f9 c0       	rjmp	.+498    	; 0xd4a <_Z13getNoteByFreqP4Noted+0x24a>
     b58:	22 e5       	ldi	r18, 0x52	; 82
     b5a:	38 e4       	ldi	r19, 0x48	; 72
     b5c:	4e ef       	ldi	r20, 0xFE	; 254
     b5e:	53 e4       	ldi	r21, 0x43	; 67
     b60:	69 81       	ldd	r22, Y+1	; 0x01
     b62:	7a 81       	ldd	r23, Y+2	; 0x02
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	2d d2       	rcall	.+1114   	; 0xfc4 <__cmpsf2>
     b6a:	88 23       	and	r24, r24
     b6c:	0c f0       	brlt	.+2      	; 0xb70 <_Z13getNoteByFreqP4Noted+0x70>
     b6e:	ed c0       	rjmp	.+474    	; 0xd4a <_Z13getNoteByFreqP4Noted+0x24a>
     b70:	f0 c0       	rjmp	.+480    	; 0xd52 <_Z13getNoteByFreqP4Noted+0x252>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b72:	0f 2e       	mov	r0, r31
     b74:	c1 2c       	mov	r12, r1
     b76:	d1 2c       	mov	r13, r1
     b78:	f0 e8       	ldi	r31, 0x80	; 128
     b7a:	ef 2e       	mov	r14, r31
     b7c:	ff e3       	ldi	r31, 0x3F	; 63
     b7e:	ff 2e       	mov	r15, r31
     b80:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     b82:	a7 01       	movw	r20, r14
     b84:	96 01       	movw	r18, r12
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	b8 d1       	rcall	.+880    	; 0xefc <__addsf3>
     b8c:	6b 01       	movw	r12, r22
     b8e:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b90:	2b e9       	ldi	r18, 0x9B	; 155
     b92:	38 e4       	ldi	r19, 0x48	; 72
     b94:	4e ef       	ldi	r20, 0xFE	; 254
     b96:	51 e4       	ldi	r21, 0x41	; 65
     b98:	87 d3       	rcall	.+1806   	; 0x12a8 <__mulsf3>
     b9a:	4b 01       	movw	r8, r22
     b9c:	5c 01       	movw	r10, r24
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	69 81       	ldd	r22, Y+1	; 0x01
     ba4:	7a 81       	ldd	r23, Y+2	; 0x02
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	7a d3       	rcall	.+1780   	; 0x12a0 <__gesf2>
     bac:	18 16       	cp	r1, r24
     bae:	4c f3       	brlt	.-46     	; 0xb82 <_Z13getNoteByFreqP4Noted+0x82>
     bb0:	8f 82       	std	Y+7, r8	; 0x07
     bb2:	98 86       	std	Y+8, r9	; 0x08
     bb4:	a9 86       	std	Y+9, r10	; 0x09
     bb6:	ba 86       	std	Y+10, r11	; 0x0a
     bb8:	e8 c0       	rjmp	.+464    	; 0xd8a <_Z13getNoteByFreqP4Noted+0x28a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     bba:	1c 01       	movw	r2, r24
     bbc:	51 01       	movw	r10, r2
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	a8 1a       	sub	r10, r24
     bc2:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     bc4:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc6:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc8:	6d 91       	ld	r22, X+
     bca:	7d 91       	ld	r23, X+
     bcc:	8d 91       	ld	r24, X+
     bce:	9d 91       	ld	r25, X+
     bd0:	bc 87       	std	Y+12, r27	; 0x0c
     bd2:	ab 87       	std	Y+11, r26	; 0x0b
     bd4:	a7 01       	movw	r20, r14
     bd6:	96 01       	movw	r18, r12
     bd8:	67 d3       	rcall	.+1742   	; 0x12a8 <__mulsf3>
     bda:	9b 01       	movw	r18, r22
     bdc:	ac 01       	movw	r20, r24
     bde:	69 81       	ldd	r22, Y+1	; 0x01
     be0:	7a 81       	ldd	r23, Y+2	; 0x02
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	89 d1       	rcall	.+786    	; 0xefa <__subsf3>
     be8:	59 d2       	rcall	.+1202   	; 0x109c <__fixsfsi>
     bea:	9b 01       	movw	r18, r22
     bec:	77 23       	and	r23, r23
     bee:	24 f4       	brge	.+8      	; 0xbf8 <_Z13getNoteByFreqP4Noted+0xf8>
     bf0:	22 27       	eor	r18, r18
     bf2:	33 27       	eor	r19, r19
     bf4:	26 1b       	sub	r18, r22
     bf6:	37 0b       	sbc	r19, r23
     bf8:	b9 01       	movw	r22, r18
     bfa:	33 0f       	add	r19, r19
     bfc:	88 0b       	sbc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	80 d2       	rcall	.+1280   	; 0x1102 <__floatsisf>
     c02:	96 2e       	mov	r9, r22
     c04:	07 2f       	mov	r16, r23
     c06:	18 2f       	mov	r17, r24
     c08:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     c0a:	27 2d       	mov	r18, r7
     c0c:	34 2d       	mov	r19, r4
     c0e:	45 2d       	mov	r20, r5
     c10:	56 2d       	mov	r21, r6
     c12:	d8 d1       	rcall	.+944    	; 0xfc4 <__cmpsf2>
     c14:	88 23       	and	r24, r24
     c16:	54 f4       	brge	.+20     	; 0xc2c <_Z13getNoteByFreqP4Noted+0x12c>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c18:	c1 01       	movw	r24, r2
     c1a:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     c1c:	79 2c       	mov	r7, r9
     c1e:	40 2e       	mov	r4, r16
     c20:	51 2e       	mov	r5, r17
     c22:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c24:	8c 30       	cpi	r24, 0x0C	; 12
     c26:	91 05       	cpc	r25, r1
     c28:	41 f6       	brne	.-112    	; 0xbba <_Z13getNoteByFreqP4Noted+0xba>
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <_Z13getNoteByFreqP4Noted+0x12e>
     c2c:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     c2e:	f1 01       	movw	r30, r2
     c30:	ef 58       	subi	r30, 0x8F	; 143
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	80 81       	ld	r24, Z
     c36:	ed 81       	ldd	r30, Y+5	; 0x05
     c38:	fe 81       	ldd	r31, Y+6	; 0x06
     c3a:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     c3c:	f1 01       	movw	r30, r2
     c3e:	eb 59       	subi	r30, 0x9B	; 155
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	80 81       	ld	r24, Z
     c44:	ad 81       	ldd	r26, Y+5	; 0x05
     c46:	be 81       	ldd	r27, Y+6	; 0x06
     c48:	11 96       	adiw	r26, 0x01	; 1
     c4a:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     c4c:	f1 01       	movw	r30, r2
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	e3 58       	subi	r30, 0x83	; 131
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	20 81       	ld	r18, Z
     c5c:	31 81       	ldd	r19, Z+1	; 0x01
     c5e:	42 81       	ldd	r20, Z+2	; 0x02
     c60:	53 81       	ldd	r21, Z+3	; 0x03
     c62:	c7 01       	movw	r24, r14
     c64:	b6 01       	movw	r22, r12
     c66:	20 d3       	rcall	.+1600   	; 0x12a8 <__mulsf3>
     c68:	2b 01       	movw	r4, r22
     c6a:	3c 01       	movw	r6, r24
     c6c:	ed 81       	ldd	r30, Y+5	; 0x05
     c6e:	fe 81       	ldd	r31, Y+6	; 0x06
     c70:	62 83       	std	Z+2, r22	; 0x02
     c72:	73 83       	std	Z+3, r23	; 0x03
     c74:	84 83       	std	Z+4, r24	; 0x04
     c76:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     c7c:	fb e0       	ldi	r31, 0x0B	; 11
     c7e:	2f 16       	cp	r2, r31
     c80:	31 04       	cpc	r3, r1
     c82:	59 f4       	brne	.+22     	; 0xc9a <_Z13getNoteByFreqP4Noted+0x19a>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     c84:	8f 81       	ldd	r24, Y+7	; 0x07
     c86:	98 85       	ldd	r25, Y+8	; 0x08
     c88:	a9 85       	ldd	r26, Y+9	; 0x09
     c8a:	ba 85       	ldd	r27, Y+10	; 0x0a
     c8c:	ed 81       	ldd	r30, Y+5	; 0x05
     c8e:	fe 81       	ldd	r31, Y+6	; 0x06
     c90:	82 87       	std	Z+10, r24	; 0x0a
     c92:	93 87       	std	Z+11, r25	; 0x0b
     c94:	a4 87       	std	Z+12, r26	; 0x0c
     c96:	b5 87       	std	Z+13, r27	; 0x0d
     c98:	32 c0       	rjmp	.+100    	; 0xcfe <_Z13getNoteByFreqP4Noted+0x1fe>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     c9a:	f1 01       	movw	r30, r2
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ef 57       	subi	r30, 0x7F	; 127
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	20 81       	ld	r18, Z
     caa:	31 81       	ldd	r19, Z+1	; 0x01
     cac:	42 81       	ldd	r20, Z+2	; 0x02
     cae:	53 81       	ldd	r21, Z+3	; 0x03
     cb0:	c7 01       	movw	r24, r14
     cb2:	b6 01       	movw	r22, r12
     cb4:	f9 d2       	rcall	.+1522   	; 0x12a8 <__mulsf3>
     cb6:	a3 01       	movw	r20, r6
     cb8:	92 01       	movw	r18, r4
     cba:	1f d1       	rcall	.+574    	; 0xefa <__subsf3>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	f1 d2       	rcall	.+1506   	; 0x12a8 <__mulsf3>
     cc6:	a3 01       	movw	r20, r6
     cc8:	92 01       	movw	r18, r4
     cca:	18 d1       	rcall	.+560    	; 0xefc <__addsf3>
     ccc:	ad 81       	ldd	r26, Y+5	; 0x05
     cce:	be 81       	ldd	r27, Y+6	; 0x06
     cd0:	1a 96       	adiw	r26, 0x0a	; 10
     cd2:	6d 93       	st	X+, r22
     cd4:	7d 93       	st	X+, r23
     cd6:	8d 93       	st	X+, r24
     cd8:	9c 93       	st	X, r25
     cda:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     cdc:	21 14       	cp	r2, r1
     cde:	31 04       	cpc	r3, r1
     ce0:	71 f4       	brne	.+28     	; 0xcfe <_Z13getNoteByFreqP4Noted+0x1fe>
		note->min_freq = MIN_FREQ*multiplier;
     ce2:	2b e9       	ldi	r18, 0x9B	; 155
     ce4:	38 e4       	ldi	r19, 0x48	; 72
     ce6:	4e e7       	ldi	r20, 0x7E	; 126
     ce8:	51 e4       	ldi	r21, 0x41	; 65
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	dc d2       	rcall	.+1464   	; 0x12a8 <__mulsf3>
     cf0:	ed 81       	ldd	r30, Y+5	; 0x05
     cf2:	fe 81       	ldd	r31, Y+6	; 0x06
     cf4:	66 83       	std	Z+6, r22	; 0x06
     cf6:	77 83       	std	Z+7, r23	; 0x07
     cf8:	80 87       	std	Z+8, r24	; 0x08
     cfa:	91 87       	std	Z+9, r25	; 0x09
     cfc:	b0 c0       	rjmp	.+352    	; 0xe5e <_Z13getNoteByFreqP4Noted+0x35e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     cfe:	f1 01       	movw	r30, r2
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e7 58       	subi	r30, 0x87	; 135
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	20 81       	ld	r18, Z
     d0e:	31 81       	ldd	r19, Z+1	; 0x01
     d10:	42 81       	ldd	r20, Z+2	; 0x02
     d12:	53 81       	ldd	r21, Z+3	; 0x03
     d14:	c7 01       	movw	r24, r14
     d16:	b6 01       	movw	r22, r12
     d18:	c7 d2       	rcall	.+1422   	; 0x12a8 <__mulsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	c3 01       	movw	r24, r6
     d20:	b2 01       	movw	r22, r4
     d22:	eb d0       	rcall	.+470    	; 0xefa <__subsf3>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	5f e3       	ldi	r21, 0x3F	; 63
     d2c:	bd d2       	rcall	.+1402   	; 0x12a8 <__mulsf3>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	c3 01       	movw	r24, r6
     d34:	b2 01       	movw	r22, r4
     d36:	e1 d0       	rcall	.+450    	; 0xefa <__subsf3>
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	16 96       	adiw	r26, 0x06	; 6
     d3e:	6d 93       	st	X+, r22
     d40:	7d 93       	st	X+, r23
     d42:	8d 93       	st	X+, r24
     d44:	9c 93       	st	X, r25
     d46:	19 97       	sbiw	r26, 0x09	; 9
     d48:	8a c0       	rjmp	.+276    	; 0xe5e <_Z13getNoteByFreqP4Noted+0x35e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     d4a:	ed 81       	ldd	r30, Y+5	; 0x05
     d4c:	fe 81       	ldd	r31, Y+6	; 0x06
     d4e:	16 86       	std	Z+14, r1	; 0x0e
		return;
     d50:	86 c0       	rjmp	.+268    	; 0xe5e <_Z13getNoteByFreqP4Noted+0x35e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     d52:	2b e9       	ldi	r18, 0x9B	; 155
     d54:	38 e4       	ldi	r19, 0x48	; 72
     d56:	4e ef       	ldi	r20, 0xFE	; 254
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	69 81       	ldd	r22, Y+1	; 0x01
     d5c:	7a 81       	ldd	r23, Y+2	; 0x02
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	9e d2       	rcall	.+1340   	; 0x12a0 <__gesf2>
     d64:	18 16       	cp	r1, r24
     d66:	0c f4       	brge	.+2      	; 0xd6a <_Z13getNoteByFreqP4Noted+0x26a>
     d68:	04 cf       	rjmp	.-504    	; 0xb72 <_Z13getNoteByFreqP4Noted+0x72>
     d6a:	8b e9       	ldi	r24, 0x9B	; 155
     d6c:	98 e4       	ldi	r25, 0x48	; 72
     d6e:	ae ef       	ldi	r26, 0xFE	; 254
     d70:	b1 e4       	ldi	r27, 0x41	; 65
     d72:	8f 83       	std	Y+7, r24	; 0x07
     d74:	98 87       	std	Y+8, r25	; 0x08
     d76:	a9 87       	std	Y+9, r26	; 0x09
     d78:	ba 87       	std	Y+10, r27	; 0x0a
     d7a:	0f 2e       	mov	r0, r31
     d7c:	c1 2c       	mov	r12, r1
     d7e:	d1 2c       	mov	r13, r1
     d80:	f0 e8       	ldi	r31, 0x80	; 128
     d82:	ef 2e       	mov	r14, r31
     d84:	ff e3       	ldi	r31, 0x3F	; 63
     d86:	ff 2e       	mov	r15, r31
     d88:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     d8a:	23 e1       	ldi	r18, 0x13	; 19
     d8c:	30 ed       	ldi	r19, 0xD0	; 208
     d8e:	42 e8       	ldi	r20, 0x82	; 130
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	88 d2       	rcall	.+1296   	; 0x12a8 <__mulsf3>
     d98:	9b 01       	movw	r18, r22
     d9a:	ac 01       	movw	r20, r24
     d9c:	69 81       	ldd	r22, Y+1	; 0x01
     d9e:	7a 81       	ldd	r23, Y+2	; 0x02
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	aa d0       	rcall	.+340    	; 0xefa <__subsf3>
     da6:	7a d1       	rcall	.+756    	; 0x109c <__fixsfsi>
     da8:	9b 01       	movw	r18, r22
     daa:	77 23       	and	r23, r23
     dac:	24 f4       	brge	.+8      	; 0xdb6 <_Z13getNoteByFreqP4Noted+0x2b6>
     dae:	22 27       	eor	r18, r18
     db0:	33 27       	eor	r19, r19
     db2:	26 1b       	sub	r18, r22
     db4:	37 0b       	sbc	r19, r23
     db6:	b9 01       	movw	r22, r18
     db8:	33 0f       	add	r19, r19
     dba:	88 0b       	sbc	r24, r24
     dbc:	99 0b       	sbc	r25, r25
     dbe:	a1 d1       	rcall	.+834    	; 0x1102 <__floatsisf>
     dc0:	76 2e       	mov	r7, r22
     dc2:	47 2e       	mov	r4, r23
     dc4:	58 2e       	mov	r5, r24
     dc6:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     dc8:	22 e5       	ldi	r18, 0x52	; 82
     dca:	38 e4       	ldi	r19, 0x48	; 72
     dcc:	4e ef       	ldi	r20, 0xFE	; 254
     dce:	53 e4       	ldi	r21, 0x43	; 67
     dd0:	f9 d0       	rcall	.+498    	; 0xfc4 <__cmpsf2>
     dd2:	88 23       	and	r24, r24
     dd4:	44 f4       	brge	.+16     	; 0xde6 <_Z13getNoteByFreqP4Noted+0x2e6>
     dd6:	a1 e8       	ldi	r26, 0x81	; 129
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     dda:	22 24       	eor	r2, r2
     ddc:	23 94       	inc	r2
     dde:	31 2c       	mov	r3, r1
     de0:	bc 87       	std	Y+12, r27	; 0x0c
     de2:	ab 87       	std	Y+11, r26	; 0x0b
     de4:	eb ce       	rjmp	.-554    	; 0xbbc <_Z13getNoteByFreqP4Noted+0xbc>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     de6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZL10noteSharps+0xb>
     dea:	ed 81       	ldd	r30, Y+5	; 0x05
     dec:	fe 81       	ldd	r31, Y+6	; 0x06
     dee:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     df0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL8slopeTol>
     df4:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     df6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <_ZL9noteNames+0x8>
     dfa:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <_ZL9noteNames+0x9>
     dfe:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <_ZL9noteNames+0xa>
     e02:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <_ZL9noteNames+0xb>
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	4e d2       	rcall	.+1180   	; 0x12a8 <__mulsf3>
     e0c:	2b 01       	movw	r4, r22
     e0e:	3c 01       	movw	r6, r24
     e10:	ad 81       	ldd	r26, Y+5	; 0x05
     e12:	be 81       	ldd	r27, Y+6	; 0x06
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	6d 93       	st	X+, r22
     e18:	7d 93       	st	X+, r23
     e1a:	8d 93       	st	X+, r24
     e1c:	9c 93       	st	X, r25
     e1e:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	1e 96       	adiw	r26, 0x0e	; 14
     e24:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     e26:	23 e1       	ldi	r18, 0x13	; 19
     e28:	30 ed       	ldi	r19, 0xD0	; 208
     e2a:	42 e8       	ldi	r20, 0x82	; 130
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	c7 01       	movw	r24, r14
     e30:	b6 01       	movw	r22, r12
     e32:	3a d2       	rcall	.+1140   	; 0x12a8 <__mulsf3>
     e34:	a3 01       	movw	r20, r6
     e36:	92 01       	movw	r18, r4
     e38:	60 d0       	rcall	.+192    	; 0xefa <__subsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	32 d2       	rcall	.+1124   	; 0x12a8 <__mulsf3>
     e44:	a3 01       	movw	r20, r6
     e46:	92 01       	movw	r18, r4
     e48:	59 d0       	rcall	.+178    	; 0xefc <__addsf3>
     e4a:	ed 81       	ldd	r30, Y+5	; 0x05
     e4c:	fe 81       	ldd	r31, Y+6	; 0x06
     e4e:	62 87       	std	Z+10, r22	; 0x0a
     e50:	73 87       	std	Z+11, r23	; 0x0b
     e52:	84 87       	std	Z+12, r24	; 0x0c
     e54:	95 87       	std	Z+13, r25	; 0x0d
     e56:	22 24       	eor	r2, r2
     e58:	2a 94       	dec	r2
     e5a:	32 2c       	mov	r3, r2
     e5c:	50 cf       	rjmp	.-352    	; 0xcfe <_Z13getNoteByFreqP4Noted+0x1fe>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     e5e:	2c 96       	adiw	r28, 0x0c	; 12
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	5f 90       	pop	r5
     e88:	4f 90       	pop	r4
     e8a:	3f 90       	pop	r3
     e8c:	2f 90       	pop	r2
     e8e:	08 95       	ret

00000e90 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     e90:	ba 9a       	sbi	0x17, 2	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     e92:	28 b3       	in	r18, 0x18	; 24
     e94:	2b 7f       	andi	r18, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
     e96:	38 b3       	in	r19, 0x18	; 24
     e98:	34 60       	ori	r19, 0x04	; 4
  
  sreg_prev=SREG;
     e9a:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     e9c:	f8 94       	cli

  while (datlen--) {
     e9e:	61 15       	cp	r22, r1
     ea0:	71 05       	cpc	r23, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <ws2812_sendarray+0x16>
     ea4:	21 c0       	rjmp	.+66     	; 0xee8 <loop301+0x38>
     ea6:	fc 01       	movw	r30, r24
     ea8:	68 0f       	add	r22, r24
     eaa:	79 1f       	adc	r23, r25
    curbyte=*data++;
     eac:	91 91       	ld	r25, Z+
    
    asm volatile(
     eae:	88 e0       	ldi	r24, 0x08	; 8

00000eb0 <loop301>:
     eb0:	38 bb       	out	0x18, r19	; 24
     eb2:	97 ff       	sbrs	r25, 7
     eb4:	28 bb       	out	0x18, r18	; 24
     eb6:	99 0f       	add	r25, r25
     eb8:	00 00       	nop
     eba:	00 c0       	rjmp	.+0      	; 0xebc <loop301+0xc>
     ebc:	28 bb       	out	0x18, r18	; 24
     ebe:	00 00       	nop
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <loop301+0x12>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <loop301+0x14>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <loop301+0x16>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <loop301+0x18>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <loop301+0x1a>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <loop301+0x1c>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <loop301+0x1e>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <loop301+0x20>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <loop301+0x22>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <loop301+0x24>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <loop301+0x26>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <loop301+0x28>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <loop301+0x2a>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <loop301+0x2c>
     edc:	00 c0       	rjmp	.+0      	; 0xede <loop301+0x2e>
     ede:	8a 95       	dec	r24
     ee0:	39 f7       	brne	.-50     	; 0xeb0 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     ee2:	e6 17       	cp	r30, r22
     ee4:	f7 07       	cpc	r31, r23
     ee6:	11 f7       	brne	.-60     	; 0xeac <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     ee8:	4f bf       	out	0x3f, r20	; 63
     eea:	08 95       	ret

00000eec <_Z10USART_Initj>:
#include "serial.h"

void USART_Init (unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
     eec:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
     eee:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     ef0:	88 e1       	ldi	r24, 0x18	; 24
     ef2:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     ef4:	8e e8       	ldi	r24, 0x8E	; 142
     ef6:	80 bd       	out	0x20, r24	; 32
     ef8:	08 95       	ret

00000efa <__subsf3>:
     efa:	50 58       	subi	r21, 0x80	; 128

00000efc <__addsf3>:
     efc:	bb 27       	eor	r27, r27
     efe:	aa 27       	eor	r26, r26
     f00:	0e d0       	rcall	.+28     	; 0xf1e <__addsf3x>
     f02:	94 c1       	rjmp	.+808    	; 0x122c <__fp_round>
     f04:	85 d1       	rcall	.+778    	; 0x1210 <__fp_pscA>
     f06:	30 f0       	brcs	.+12     	; 0xf14 <__addsf3+0x18>
     f08:	8a d1       	rcall	.+788    	; 0x121e <__fp_pscB>
     f0a:	20 f0       	brcs	.+8      	; 0xf14 <__addsf3+0x18>
     f0c:	31 f4       	brne	.+12     	; 0xf1a <__addsf3+0x1e>
     f0e:	9f 3f       	cpi	r25, 0xFF	; 255
     f10:	11 f4       	brne	.+4      	; 0xf16 <__addsf3+0x1a>
     f12:	1e f4       	brtc	.+6      	; 0xf1a <__addsf3+0x1e>
     f14:	7a c1       	rjmp	.+756    	; 0x120a <__fp_nan>
     f16:	0e f4       	brtc	.+2      	; 0xf1a <__addsf3+0x1e>
     f18:	e0 95       	com	r30
     f1a:	e7 fb       	bst	r30, 7
     f1c:	70 c1       	rjmp	.+736    	; 0x11fe <__fp_inf>

00000f1e <__addsf3x>:
     f1e:	e9 2f       	mov	r30, r25
     f20:	96 d1       	rcall	.+812    	; 0x124e <__fp_split3>
     f22:	80 f3       	brcs	.-32     	; 0xf04 <__addsf3+0x8>
     f24:	ba 17       	cp	r27, r26
     f26:	62 07       	cpc	r22, r18
     f28:	73 07       	cpc	r23, r19
     f2a:	84 07       	cpc	r24, r20
     f2c:	95 07       	cpc	r25, r21
     f2e:	18 f0       	brcs	.+6      	; 0xf36 <__addsf3x+0x18>
     f30:	71 f4       	brne	.+28     	; 0xf4e <__addsf3x+0x30>
     f32:	9e f5       	brtc	.+102    	; 0xf9a <__addsf3x+0x7c>
     f34:	ae c1       	rjmp	.+860    	; 0x1292 <__fp_zero>
     f36:	0e f4       	brtc	.+2      	; 0xf3a <__addsf3x+0x1c>
     f38:	e0 95       	com	r30
     f3a:	0b 2e       	mov	r0, r27
     f3c:	ba 2f       	mov	r27, r26
     f3e:	a0 2d       	mov	r26, r0
     f40:	0b 01       	movw	r0, r22
     f42:	b9 01       	movw	r22, r18
     f44:	90 01       	movw	r18, r0
     f46:	0c 01       	movw	r0, r24
     f48:	ca 01       	movw	r24, r20
     f4a:	a0 01       	movw	r20, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	ff 27       	eor	r31, r31
     f50:	59 1b       	sub	r21, r25
     f52:	99 f0       	breq	.+38     	; 0xf7a <__addsf3x+0x5c>
     f54:	59 3f       	cpi	r21, 0xF9	; 249
     f56:	50 f4       	brcc	.+20     	; 0xf6c <__addsf3x+0x4e>
     f58:	50 3e       	cpi	r21, 0xE0	; 224
     f5a:	68 f1       	brcs	.+90     	; 0xfb6 <__addsf3x+0x98>
     f5c:	1a 16       	cp	r1, r26
     f5e:	f0 40       	sbci	r31, 0x00	; 0
     f60:	a2 2f       	mov	r26, r18
     f62:	23 2f       	mov	r18, r19
     f64:	34 2f       	mov	r19, r20
     f66:	44 27       	eor	r20, r20
     f68:	58 5f       	subi	r21, 0xF8	; 248
     f6a:	f3 cf       	rjmp	.-26     	; 0xf52 <__addsf3x+0x34>
     f6c:	46 95       	lsr	r20
     f6e:	37 95       	ror	r19
     f70:	27 95       	ror	r18
     f72:	a7 95       	ror	r26
     f74:	f0 40       	sbci	r31, 0x00	; 0
     f76:	53 95       	inc	r21
     f78:	c9 f7       	brne	.-14     	; 0xf6c <__addsf3x+0x4e>
     f7a:	7e f4       	brtc	.+30     	; 0xf9a <__addsf3x+0x7c>
     f7c:	1f 16       	cp	r1, r31
     f7e:	ba 0b       	sbc	r27, r26
     f80:	62 0b       	sbc	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	84 0b       	sbc	r24, r20
     f86:	ba f0       	brmi	.+46     	; 0xfb6 <__addsf3x+0x98>
     f88:	91 50       	subi	r25, 0x01	; 1
     f8a:	a1 f0       	breq	.+40     	; 0xfb4 <__addsf3x+0x96>
     f8c:	ff 0f       	add	r31, r31
     f8e:	bb 1f       	adc	r27, r27
     f90:	66 1f       	adc	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	c2 f7       	brpl	.-16     	; 0xf88 <__addsf3x+0x6a>
     f98:	0e c0       	rjmp	.+28     	; 0xfb6 <__addsf3x+0x98>
     f9a:	ba 0f       	add	r27, r26
     f9c:	62 1f       	adc	r22, r18
     f9e:	73 1f       	adc	r23, r19
     fa0:	84 1f       	adc	r24, r20
     fa2:	48 f4       	brcc	.+18     	; 0xfb6 <__addsf3x+0x98>
     fa4:	87 95       	ror	r24
     fa6:	77 95       	ror	r23
     fa8:	67 95       	ror	r22
     faa:	b7 95       	ror	r27
     fac:	f7 95       	ror	r31
     fae:	9e 3f       	cpi	r25, 0xFE	; 254
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <__addsf3x+0x96>
     fb2:	b3 cf       	rjmp	.-154    	; 0xf1a <__addsf3+0x1e>
     fb4:	93 95       	inc	r25
     fb6:	88 0f       	add	r24, r24
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <__addsf3x+0x9e>
     fba:	99 27       	eor	r25, r25
     fbc:	ee 0f       	add	r30, r30
     fbe:	97 95       	ror	r25
     fc0:	87 95       	ror	r24
     fc2:	08 95       	ret

00000fc4 <__cmpsf2>:
     fc4:	f8 d0       	rcall	.+496    	; 0x11b6 <__fp_cmp>
     fc6:	08 f4       	brcc	.+2      	; 0xfca <__cmpsf2+0x6>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	08 95       	ret

00000fcc <__divsf3>:
     fcc:	0c d0       	rcall	.+24     	; 0xfe6 <__divsf3x>
     fce:	2e c1       	rjmp	.+604    	; 0x122c <__fp_round>
     fd0:	26 d1       	rcall	.+588    	; 0x121e <__fp_pscB>
     fd2:	40 f0       	brcs	.+16     	; 0xfe4 <__divsf3+0x18>
     fd4:	1d d1       	rcall	.+570    	; 0x1210 <__fp_pscA>
     fd6:	30 f0       	brcs	.+12     	; 0xfe4 <__divsf3+0x18>
     fd8:	21 f4       	brne	.+8      	; 0xfe2 <__divsf3+0x16>
     fda:	5f 3f       	cpi	r21, 0xFF	; 255
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <__divsf3+0x18>
     fde:	0f c1       	rjmp	.+542    	; 0x11fe <__fp_inf>
     fe0:	51 11       	cpse	r21, r1
     fe2:	58 c1       	rjmp	.+688    	; 0x1294 <__fp_szero>
     fe4:	12 c1       	rjmp	.+548    	; 0x120a <__fp_nan>

00000fe6 <__divsf3x>:
     fe6:	33 d1       	rcall	.+614    	; 0x124e <__fp_split3>
     fe8:	98 f3       	brcs	.-26     	; 0xfd0 <__divsf3+0x4>

00000fea <__divsf3_pse>:
     fea:	99 23       	and	r25, r25
     fec:	c9 f3       	breq	.-14     	; 0xfe0 <__divsf3+0x14>
     fee:	55 23       	and	r21, r21
     ff0:	b1 f3       	breq	.-20     	; 0xfde <__divsf3+0x12>
     ff2:	95 1b       	sub	r25, r21
     ff4:	55 0b       	sbc	r21, r21
     ff6:	bb 27       	eor	r27, r27
     ff8:	aa 27       	eor	r26, r26
     ffa:	62 17       	cp	r22, r18
     ffc:	73 07       	cpc	r23, r19
     ffe:	84 07       	cpc	r24, r20
    1000:	38 f0       	brcs	.+14     	; 0x1010 <__divsf3_pse+0x26>
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	44 1f       	adc	r20, r20
    100c:	aa 1f       	adc	r26, r26
    100e:	a9 f3       	breq	.-22     	; 0xffa <__divsf3_pse+0x10>
    1010:	33 d0       	rcall	.+102    	; 0x1078 <__divsf3_pse+0x8e>
    1012:	0e 2e       	mov	r0, r30
    1014:	3a f0       	brmi	.+14     	; 0x1024 <__divsf3_pse+0x3a>
    1016:	e0 e8       	ldi	r30, 0x80	; 128
    1018:	30 d0       	rcall	.+96     	; 0x107a <__divsf3_pse+0x90>
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	e6 95       	lsr	r30
    1020:	00 1c       	adc	r0, r0
    1022:	ca f7       	brpl	.-14     	; 0x1016 <__divsf3_pse+0x2c>
    1024:	29 d0       	rcall	.+82     	; 0x1078 <__divsf3_pse+0x8e>
    1026:	fe 2f       	mov	r31, r30
    1028:	27 d0       	rcall	.+78     	; 0x1078 <__divsf3_pse+0x8e>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	bb 1f       	adc	r27, r27
    1032:	26 17       	cp	r18, r22
    1034:	37 07       	cpc	r19, r23
    1036:	48 07       	cpc	r20, r24
    1038:	ab 07       	cpc	r26, r27
    103a:	b0 e8       	ldi	r27, 0x80	; 128
    103c:	09 f0       	breq	.+2      	; 0x1040 <__divsf3_pse+0x56>
    103e:	bb 0b       	sbc	r27, r27
    1040:	80 2d       	mov	r24, r0
    1042:	bf 01       	movw	r22, r30
    1044:	ff 27       	eor	r31, r31
    1046:	93 58       	subi	r25, 0x83	; 131
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	2a f0       	brmi	.+10     	; 0x1056 <__divsf3_pse+0x6c>
    104c:	9e 3f       	cpi	r25, 0xFE	; 254
    104e:	51 05       	cpc	r21, r1
    1050:	68 f0       	brcs	.+26     	; 0x106c <__divsf3_pse+0x82>
    1052:	d5 c0       	rjmp	.+426    	; 0x11fe <__fp_inf>
    1054:	1f c1       	rjmp	.+574    	; 0x1294 <__fp_szero>
    1056:	5f 3f       	cpi	r21, 0xFF	; 255
    1058:	ec f3       	brlt	.-6      	; 0x1054 <__divsf3_pse+0x6a>
    105a:	98 3e       	cpi	r25, 0xE8	; 232
    105c:	dc f3       	brlt	.-10     	; 0x1054 <__divsf3_pse+0x6a>
    105e:	86 95       	lsr	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f7 95       	ror	r31
    1068:	9f 5f       	subi	r25, 0xFF	; 255
    106a:	c9 f7       	brne	.-14     	; 0x105e <__divsf3_pse+0x74>
    106c:	88 0f       	add	r24, r24
    106e:	91 1d       	adc	r25, r1
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	97 f9       	bld	r25, 7
    1076:	08 95       	ret
    1078:	e1 e0       	ldi	r30, 0x01	; 1
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	bb 1f       	adc	r27, r27
    1082:	62 17       	cp	r22, r18
    1084:	73 07       	cpc	r23, r19
    1086:	84 07       	cpc	r24, r20
    1088:	ba 07       	cpc	r27, r26
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__divsf3_pse+0xaa>
    108c:	62 1b       	sub	r22, r18
    108e:	73 0b       	sbc	r23, r19
    1090:	84 0b       	sbc	r24, r20
    1092:	ba 0b       	sbc	r27, r26
    1094:	ee 1f       	adc	r30, r30
    1096:	88 f7       	brcc	.-30     	; 0x107a <__divsf3_pse+0x90>
    1098:	e0 95       	com	r30
    109a:	08 95       	ret

0000109c <__fixsfsi>:
    109c:	04 d0       	rcall	.+8      	; 0x10a6 <__fixunssfsi>
    109e:	68 94       	set
    10a0:	b1 11       	cpse	r27, r1
    10a2:	f8 c0       	rjmp	.+496    	; 0x1294 <__fp_szero>
    10a4:	08 95       	ret

000010a6 <__fixunssfsi>:
    10a6:	db d0       	rcall	.+438    	; 0x125e <__fp_splitA>
    10a8:	88 f0       	brcs	.+34     	; 0x10cc <__fixunssfsi+0x26>
    10aa:	9f 57       	subi	r25, 0x7F	; 127
    10ac:	90 f0       	brcs	.+36     	; 0x10d2 <__fixunssfsi+0x2c>
    10ae:	b9 2f       	mov	r27, r25
    10b0:	99 27       	eor	r25, r25
    10b2:	b7 51       	subi	r27, 0x17	; 23
    10b4:	a0 f0       	brcs	.+40     	; 0x10de <__fixunssfsi+0x38>
    10b6:	d1 f0       	breq	.+52     	; 0x10ec <__fixunssfsi+0x46>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	1a f0       	brmi	.+6      	; 0x10c8 <__fixunssfsi+0x22>
    10c2:	ba 95       	dec	r27
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__fixunssfsi+0x12>
    10c6:	12 c0       	rjmp	.+36     	; 0x10ec <__fixunssfsi+0x46>
    10c8:	b1 30       	cpi	r27, 0x01	; 1
    10ca:	81 f0       	breq	.+32     	; 0x10ec <__fixunssfsi+0x46>
    10cc:	e2 d0       	rcall	.+452    	; 0x1292 <__fp_zero>
    10ce:	b1 e0       	ldi	r27, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	df c0       	rjmp	.+446    	; 0x1292 <__fp_zero>
    10d4:	67 2f       	mov	r22, r23
    10d6:	78 2f       	mov	r23, r24
    10d8:	88 27       	eor	r24, r24
    10da:	b8 5f       	subi	r27, 0xF8	; 248
    10dc:	39 f0       	breq	.+14     	; 0x10ec <__fixunssfsi+0x46>
    10de:	b9 3f       	cpi	r27, 0xF9	; 249
    10e0:	cc f3       	brlt	.-14     	; 0x10d4 <__fixunssfsi+0x2e>
    10e2:	86 95       	lsr	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	b3 95       	inc	r27
    10ea:	d9 f7       	brne	.-10     	; 0x10e2 <__fixunssfsi+0x3c>
    10ec:	3e f4       	brtc	.+14     	; 0x10fc <__fixunssfsi+0x56>
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__floatunsisf>:
    10fe:	e8 94       	clt
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <__floatsisf+0x12>

00001102 <__floatsisf>:
    1102:	97 fb       	bst	r25, 7
    1104:	3e f4       	brtc	.+14     	; 0x1114 <__floatsisf+0x12>
    1106:	90 95       	com	r25
    1108:	80 95       	com	r24
    110a:	70 95       	com	r23
    110c:	61 95       	neg	r22
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	99 23       	and	r25, r25
    1116:	a9 f0       	breq	.+42     	; 0x1142 <__floatsisf+0x40>
    1118:	f9 2f       	mov	r31, r25
    111a:	96 e9       	ldi	r25, 0x96	; 150
    111c:	bb 27       	eor	r27, r27
    111e:	93 95       	inc	r25
    1120:	f6 95       	lsr	r31
    1122:	87 95       	ror	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b7 95       	ror	r27
    112a:	f1 11       	cpse	r31, r1
    112c:	f8 cf       	rjmp	.-16     	; 0x111e <__floatsisf+0x1c>
    112e:	fa f4       	brpl	.+62     	; 0x116e <__floatsisf+0x6c>
    1130:	bb 0f       	add	r27, r27
    1132:	11 f4       	brne	.+4      	; 0x1138 <__floatsisf+0x36>
    1134:	60 ff       	sbrs	r22, 0
    1136:	1b c0       	rjmp	.+54     	; 0x116e <__floatsisf+0x6c>
    1138:	6f 5f       	subi	r22, 0xFF	; 255
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	8f 4f       	sbci	r24, 0xFF	; 255
    113e:	9f 4f       	sbci	r25, 0xFF	; 255
    1140:	16 c0       	rjmp	.+44     	; 0x116e <__floatsisf+0x6c>
    1142:	88 23       	and	r24, r24
    1144:	11 f0       	breq	.+4      	; 0x114a <__floatsisf+0x48>
    1146:	96 e9       	ldi	r25, 0x96	; 150
    1148:	11 c0       	rjmp	.+34     	; 0x116c <__floatsisf+0x6a>
    114a:	77 23       	and	r23, r23
    114c:	21 f0       	breq	.+8      	; 0x1156 <__floatsisf+0x54>
    114e:	9e e8       	ldi	r25, 0x8E	; 142
    1150:	87 2f       	mov	r24, r23
    1152:	76 2f       	mov	r23, r22
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <__floatsisf+0x5e>
    1156:	66 23       	and	r22, r22
    1158:	71 f0       	breq	.+28     	; 0x1176 <__floatsisf+0x74>
    115a:	96 e8       	ldi	r25, 0x86	; 134
    115c:	86 2f       	mov	r24, r22
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	2a f0       	brmi	.+10     	; 0x116e <__floatsisf+0x6c>
    1164:	9a 95       	dec	r25
    1166:	66 0f       	add	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	da f7       	brpl	.-10     	; 0x1164 <__floatsisf+0x62>
    116e:	88 0f       	add	r24, r24
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	97 f9       	bld	r25, 7
    1176:	08 95       	ret

00001178 <fmin>:
    1178:	99 0f       	add	r25, r25
    117a:	bb 0b       	sbc	r27, r27
    117c:	55 0f       	add	r21, r21
    117e:	aa 0b       	sbc	r26, r26
    1180:	e0 e8       	ldi	r30, 0x80	; 128
    1182:	fe ef       	ldi	r31, 0xFE	; 254
    1184:	16 16       	cp	r1, r22
    1186:	17 06       	cpc	r1, r23
    1188:	e8 07       	cpc	r30, r24
    118a:	f9 07       	cpc	r31, r25
    118c:	70 f0       	brcs	.+28     	; 0x11aa <fmin+0x32>
    118e:	12 16       	cp	r1, r18
    1190:	13 06       	cpc	r1, r19
    1192:	e4 07       	cpc	r30, r20
    1194:	f5 07       	cpc	r31, r21
    1196:	60 f0       	brcs	.+24     	; 0x11b0 <fmin+0x38>
    1198:	ba 17       	cp	r27, r26
    119a:	54 f0       	brlt	.+20     	; 0x11b0 <fmin+0x38>
    119c:	31 f4       	brne	.+12     	; 0x11aa <fmin+0x32>
    119e:	26 17       	cp	r18, r22
    11a0:	37 07       	cpc	r19, r23
    11a2:	48 07       	cpc	r20, r24
    11a4:	59 07       	cpc	r21, r25
    11a6:	a7 95       	ror	r26
    11a8:	1b f4       	brvc	.+6      	; 0x11b0 <fmin+0x38>
    11aa:	b9 01       	movw	r22, r18
    11ac:	ca 01       	movw	r24, r20
    11ae:	ba 2f       	mov	r27, r26
    11b0:	b6 95       	lsr	r27
    11b2:	97 95       	ror	r25
    11b4:	08 95       	ret

000011b6 <__fp_cmp>:
    11b6:	99 0f       	add	r25, r25
    11b8:	00 08       	sbc	r0, r0
    11ba:	55 0f       	add	r21, r21
    11bc:	aa 0b       	sbc	r26, r26
    11be:	e0 e8       	ldi	r30, 0x80	; 128
    11c0:	fe ef       	ldi	r31, 0xFE	; 254
    11c2:	16 16       	cp	r1, r22
    11c4:	17 06       	cpc	r1, r23
    11c6:	e8 07       	cpc	r30, r24
    11c8:	f9 07       	cpc	r31, r25
    11ca:	c0 f0       	brcs	.+48     	; 0x11fc <__fp_cmp+0x46>
    11cc:	12 16       	cp	r1, r18
    11ce:	13 06       	cpc	r1, r19
    11d0:	e4 07       	cpc	r30, r20
    11d2:	f5 07       	cpc	r31, r21
    11d4:	98 f0       	brcs	.+38     	; 0x11fc <__fp_cmp+0x46>
    11d6:	62 1b       	sub	r22, r18
    11d8:	73 0b       	sbc	r23, r19
    11da:	84 0b       	sbc	r24, r20
    11dc:	95 0b       	sbc	r25, r21
    11de:	39 f4       	brne	.+14     	; 0x11ee <__fp_cmp+0x38>
    11e0:	0a 26       	eor	r0, r26
    11e2:	61 f0       	breq	.+24     	; 0x11fc <__fp_cmp+0x46>
    11e4:	23 2b       	or	r18, r19
    11e6:	24 2b       	or	r18, r20
    11e8:	25 2b       	or	r18, r21
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <__fp_cmp+0x3e>
    11ec:	08 95       	ret
    11ee:	0a 26       	eor	r0, r26
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__fp_cmp+0x3e>
    11f2:	a1 40       	sbci	r26, 0x01	; 1
    11f4:	a6 95       	lsr	r26
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	81 1d       	adc	r24, r1
    11fa:	81 1d       	adc	r24, r1
    11fc:	08 95       	ret

000011fe <__fp_inf>:
    11fe:	97 f9       	bld	r25, 7
    1200:	9f 67       	ori	r25, 0x7F	; 127
    1202:	80 e8       	ldi	r24, 0x80	; 128
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	08 95       	ret

0000120a <__fp_nan>:
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	80 ec       	ldi	r24, 0xC0	; 192
    120e:	08 95       	ret

00001210 <__fp_pscA>:
    1210:	00 24       	eor	r0, r0
    1212:	0a 94       	dec	r0
    1214:	16 16       	cp	r1, r22
    1216:	17 06       	cpc	r1, r23
    1218:	18 06       	cpc	r1, r24
    121a:	09 06       	cpc	r0, r25
    121c:	08 95       	ret

0000121e <__fp_pscB>:
    121e:	00 24       	eor	r0, r0
    1220:	0a 94       	dec	r0
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	14 06       	cpc	r1, r20
    1228:	05 06       	cpc	r0, r21
    122a:	08 95       	ret

0000122c <__fp_round>:
    122c:	09 2e       	mov	r0, r25
    122e:	03 94       	inc	r0
    1230:	00 0c       	add	r0, r0
    1232:	11 f4       	brne	.+4      	; 0x1238 <__fp_round+0xc>
    1234:	88 23       	and	r24, r24
    1236:	52 f0       	brmi	.+20     	; 0x124c <__fp_round+0x20>
    1238:	bb 0f       	add	r27, r27
    123a:	40 f4       	brcc	.+16     	; 0x124c <__fp_round+0x20>
    123c:	bf 2b       	or	r27, r31
    123e:	11 f4       	brne	.+4      	; 0x1244 <__fp_round+0x18>
    1240:	60 ff       	sbrs	r22, 0
    1242:	04 c0       	rjmp	.+8      	; 0x124c <__fp_round+0x20>
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	08 95       	ret

0000124e <__fp_split3>:
    124e:	57 fd       	sbrc	r21, 7
    1250:	90 58       	subi	r25, 0x80	; 128
    1252:	44 0f       	add	r20, r20
    1254:	55 1f       	adc	r21, r21
    1256:	59 f0       	breq	.+22     	; 0x126e <__fp_splitA+0x10>
    1258:	5f 3f       	cpi	r21, 0xFF	; 255
    125a:	71 f0       	breq	.+28     	; 0x1278 <__fp_splitA+0x1a>
    125c:	47 95       	ror	r20

0000125e <__fp_splitA>:
    125e:	88 0f       	add	r24, r24
    1260:	97 fb       	bst	r25, 7
    1262:	99 1f       	adc	r25, r25
    1264:	61 f0       	breq	.+24     	; 0x127e <__fp_splitA+0x20>
    1266:	9f 3f       	cpi	r25, 0xFF	; 255
    1268:	79 f0       	breq	.+30     	; 0x1288 <__fp_splitA+0x2a>
    126a:	87 95       	ror	r24
    126c:	08 95       	ret
    126e:	12 16       	cp	r1, r18
    1270:	13 06       	cpc	r1, r19
    1272:	14 06       	cpc	r1, r20
    1274:	55 1f       	adc	r21, r21
    1276:	f2 cf       	rjmp	.-28     	; 0x125c <__fp_split3+0xe>
    1278:	46 95       	lsr	r20
    127a:	f1 df       	rcall	.-30     	; 0x125e <__fp_splitA>
    127c:	08 c0       	rjmp	.+16     	; 0x128e <__fp_splitA+0x30>
    127e:	16 16       	cp	r1, r22
    1280:	17 06       	cpc	r1, r23
    1282:	18 06       	cpc	r1, r24
    1284:	99 1f       	adc	r25, r25
    1286:	f1 cf       	rjmp	.-30     	; 0x126a <__fp_splitA+0xc>
    1288:	86 95       	lsr	r24
    128a:	71 05       	cpc	r23, r1
    128c:	61 05       	cpc	r22, r1
    128e:	08 94       	sec
    1290:	08 95       	ret

00001292 <__fp_zero>:
    1292:	e8 94       	clt

00001294 <__fp_szero>:
    1294:	bb 27       	eor	r27, r27
    1296:	66 27       	eor	r22, r22
    1298:	77 27       	eor	r23, r23
    129a:	cb 01       	movw	r24, r22
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret

000012a0 <__gesf2>:
    12a0:	8a df       	rcall	.-236    	; 0x11b6 <__fp_cmp>
    12a2:	08 f4       	brcc	.+2      	; 0x12a6 <__gesf2+0x6>
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	08 95       	ret

000012a8 <__mulsf3>:
    12a8:	0b d0       	rcall	.+22     	; 0x12c0 <__mulsf3x>
    12aa:	c0 cf       	rjmp	.-128    	; 0x122c <__fp_round>
    12ac:	b1 df       	rcall	.-158    	; 0x1210 <__fp_pscA>
    12ae:	28 f0       	brcs	.+10     	; 0x12ba <__mulsf3+0x12>
    12b0:	b6 df       	rcall	.-148    	; 0x121e <__fp_pscB>
    12b2:	18 f0       	brcs	.+6      	; 0x12ba <__mulsf3+0x12>
    12b4:	95 23       	and	r25, r21
    12b6:	09 f0       	breq	.+2      	; 0x12ba <__mulsf3+0x12>
    12b8:	a2 cf       	rjmp	.-188    	; 0x11fe <__fp_inf>
    12ba:	a7 cf       	rjmp	.-178    	; 0x120a <__fp_nan>
    12bc:	11 24       	eor	r1, r1
    12be:	ea cf       	rjmp	.-44     	; 0x1294 <__fp_szero>

000012c0 <__mulsf3x>:
    12c0:	c6 df       	rcall	.-116    	; 0x124e <__fp_split3>
    12c2:	a0 f3       	brcs	.-24     	; 0x12ac <__mulsf3+0x4>

000012c4 <__mulsf3_pse>:
    12c4:	95 9f       	mul	r25, r21
    12c6:	d1 f3       	breq	.-12     	; 0x12bc <__mulsf3+0x14>
    12c8:	95 0f       	add	r25, r21
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	55 1f       	adc	r21, r21
    12ce:	62 9f       	mul	r22, r18
    12d0:	f0 01       	movw	r30, r0
    12d2:	72 9f       	mul	r23, r18
    12d4:	bb 27       	eor	r27, r27
    12d6:	f0 0d       	add	r31, r0
    12d8:	b1 1d       	adc	r27, r1
    12da:	63 9f       	mul	r22, r19
    12dc:	aa 27       	eor	r26, r26
    12de:	f0 0d       	add	r31, r0
    12e0:	b1 1d       	adc	r27, r1
    12e2:	aa 1f       	adc	r26, r26
    12e4:	64 9f       	mul	r22, r20
    12e6:	66 27       	eor	r22, r22
    12e8:	b0 0d       	add	r27, r0
    12ea:	a1 1d       	adc	r26, r1
    12ec:	66 1f       	adc	r22, r22
    12ee:	82 9f       	mul	r24, r18
    12f0:	22 27       	eor	r18, r18
    12f2:	b0 0d       	add	r27, r0
    12f4:	a1 1d       	adc	r26, r1
    12f6:	62 1f       	adc	r22, r18
    12f8:	73 9f       	mul	r23, r19
    12fa:	b0 0d       	add	r27, r0
    12fc:	a1 1d       	adc	r26, r1
    12fe:	62 1f       	adc	r22, r18
    1300:	83 9f       	mul	r24, r19
    1302:	a0 0d       	add	r26, r0
    1304:	61 1d       	adc	r22, r1
    1306:	22 1f       	adc	r18, r18
    1308:	74 9f       	mul	r23, r20
    130a:	33 27       	eor	r19, r19
    130c:	a0 0d       	add	r26, r0
    130e:	61 1d       	adc	r22, r1
    1310:	23 1f       	adc	r18, r19
    1312:	84 9f       	mul	r24, r20
    1314:	60 0d       	add	r22, r0
    1316:	21 1d       	adc	r18, r1
    1318:	82 2f       	mov	r24, r18
    131a:	76 2f       	mov	r23, r22
    131c:	6a 2f       	mov	r22, r26
    131e:	11 24       	eor	r1, r1
    1320:	9f 57       	subi	r25, 0x7F	; 127
    1322:	50 40       	sbci	r21, 0x00	; 0
    1324:	8a f0       	brmi	.+34     	; 0x1348 <__mulsf3_pse+0x84>
    1326:	e1 f0       	breq	.+56     	; 0x1360 <__mulsf3_pse+0x9c>
    1328:	88 23       	and	r24, r24
    132a:	4a f0       	brmi	.+18     	; 0x133e <__mulsf3_pse+0x7a>
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	bb 1f       	adc	r27, r27
    1332:	66 1f       	adc	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	88 1f       	adc	r24, r24
    1338:	91 50       	subi	r25, 0x01	; 1
    133a:	50 40       	sbci	r21, 0x00	; 0
    133c:	a9 f7       	brne	.-22     	; 0x1328 <__mulsf3_pse+0x64>
    133e:	9e 3f       	cpi	r25, 0xFE	; 254
    1340:	51 05       	cpc	r21, r1
    1342:	70 f0       	brcs	.+28     	; 0x1360 <__mulsf3_pse+0x9c>
    1344:	5c cf       	rjmp	.-328    	; 0x11fe <__fp_inf>
    1346:	a6 cf       	rjmp	.-180    	; 0x1294 <__fp_szero>
    1348:	5f 3f       	cpi	r21, 0xFF	; 255
    134a:	ec f3       	brlt	.-6      	; 0x1346 <__mulsf3_pse+0x82>
    134c:	98 3e       	cpi	r25, 0xE8	; 232
    134e:	dc f3       	brlt	.-10     	; 0x1346 <__mulsf3_pse+0x82>
    1350:	86 95       	lsr	r24
    1352:	77 95       	ror	r23
    1354:	67 95       	ror	r22
    1356:	b7 95       	ror	r27
    1358:	f7 95       	ror	r31
    135a:	e7 95       	ror	r30
    135c:	9f 5f       	subi	r25, 0xFF	; 255
    135e:	c1 f7       	brne	.-16     	; 0x1350 <__mulsf3_pse+0x8c>
    1360:	fe 2b       	or	r31, r30
    1362:	88 0f       	add	r24, r24
    1364:	91 1d       	adc	r25, r1
    1366:	96 95       	lsr	r25
    1368:	87 95       	ror	r24
    136a:	97 f9       	bld	r25, 7
    136c:	08 95       	ret

0000136e <__tablejump2__>:
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	05 90       	lpm	r0, Z+
    1374:	f4 91       	lpm	r31, Z
    1376:	e0 2d       	mov	r30, r0
    1378:	09 94       	ijmp

0000137a <vfprintf>:
    137a:	ab e0       	ldi	r26, 0x0B	; 11
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e2 ec       	ldi	r30, 0xC2	; 194
    1380:	f9 e0       	ldi	r31, 0x09	; 9
    1382:	7d c2       	rjmp	.+1274   	; 0x187e <__prologue_saves__>
    1384:	6c 01       	movw	r12, r24
    1386:	7b 01       	movw	r14, r22
    1388:	8a 01       	movw	r16, r20
    138a:	fc 01       	movw	r30, r24
    138c:	17 82       	std	Z+7, r1	; 0x07
    138e:	16 82       	std	Z+6, r1	; 0x06
    1390:	83 81       	ldd	r24, Z+3	; 0x03
    1392:	81 ff       	sbrs	r24, 1
    1394:	bf c1       	rjmp	.+894    	; 0x1714 <vfprintf+0x39a>
    1396:	ce 01       	movw	r24, r28
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	3c 01       	movw	r6, r24
    139c:	f6 01       	movw	r30, r12
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	f7 01       	movw	r30, r14
    13a2:	93 fd       	sbrc	r25, 3
    13a4:	85 91       	lpm	r24, Z+
    13a6:	93 ff       	sbrs	r25, 3
    13a8:	81 91       	ld	r24, Z+
    13aa:	7f 01       	movw	r14, r30
    13ac:	88 23       	and	r24, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <vfprintf+0x38>
    13b0:	ad c1       	rjmp	.+858    	; 0x170c <vfprintf+0x392>
    13b2:	85 32       	cpi	r24, 0x25	; 37
    13b4:	39 f4       	brne	.+14     	; 0x13c4 <vfprintf+0x4a>
    13b6:	93 fd       	sbrc	r25, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	93 ff       	sbrs	r25, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	7f 01       	movw	r14, r30
    13c0:	85 32       	cpi	r24, 0x25	; 37
    13c2:	21 f4       	brne	.+8      	; 0x13cc <vfprintf+0x52>
    13c4:	b6 01       	movw	r22, r12
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	c0 d1       	rcall	.+896    	; 0x174a <fputc>
    13ca:	e8 cf       	rjmp	.-48     	; 0x139c <vfprintf+0x22>
    13cc:	91 2c       	mov	r9, r1
    13ce:	21 2c       	mov	r2, r1
    13d0:	31 2c       	mov	r3, r1
    13d2:	ff e1       	ldi	r31, 0x1F	; 31
    13d4:	f3 15       	cp	r31, r3
    13d6:	d8 f0       	brcs	.+54     	; 0x140e <vfprintf+0x94>
    13d8:	8b 32       	cpi	r24, 0x2B	; 43
    13da:	79 f0       	breq	.+30     	; 0x13fa <vfprintf+0x80>
    13dc:	38 f4       	brcc	.+14     	; 0x13ec <vfprintf+0x72>
    13de:	80 32       	cpi	r24, 0x20	; 32
    13e0:	79 f0       	breq	.+30     	; 0x1400 <vfprintf+0x86>
    13e2:	83 32       	cpi	r24, 0x23	; 35
    13e4:	a1 f4       	brne	.+40     	; 0x140e <vfprintf+0x94>
    13e6:	23 2d       	mov	r18, r3
    13e8:	20 61       	ori	r18, 0x10	; 16
    13ea:	1d c0       	rjmp	.+58     	; 0x1426 <vfprintf+0xac>
    13ec:	8d 32       	cpi	r24, 0x2D	; 45
    13ee:	61 f0       	breq	.+24     	; 0x1408 <vfprintf+0x8e>
    13f0:	80 33       	cpi	r24, 0x30	; 48
    13f2:	69 f4       	brne	.+26     	; 0x140e <vfprintf+0x94>
    13f4:	23 2d       	mov	r18, r3
    13f6:	21 60       	ori	r18, 0x01	; 1
    13f8:	16 c0       	rjmp	.+44     	; 0x1426 <vfprintf+0xac>
    13fa:	83 2d       	mov	r24, r3
    13fc:	82 60       	ori	r24, 0x02	; 2
    13fe:	38 2e       	mov	r3, r24
    1400:	e3 2d       	mov	r30, r3
    1402:	e4 60       	ori	r30, 0x04	; 4
    1404:	3e 2e       	mov	r3, r30
    1406:	2a c0       	rjmp	.+84     	; 0x145c <vfprintf+0xe2>
    1408:	f3 2d       	mov	r31, r3
    140a:	f8 60       	ori	r31, 0x08	; 8
    140c:	1d c0       	rjmp	.+58     	; 0x1448 <vfprintf+0xce>
    140e:	37 fc       	sbrc	r3, 7
    1410:	2d c0       	rjmp	.+90     	; 0x146c <vfprintf+0xf2>
    1412:	20 ed       	ldi	r18, 0xD0	; 208
    1414:	28 0f       	add	r18, r24
    1416:	2a 30       	cpi	r18, 0x0A	; 10
    1418:	40 f0       	brcs	.+16     	; 0x142a <vfprintf+0xb0>
    141a:	8e 32       	cpi	r24, 0x2E	; 46
    141c:	b9 f4       	brne	.+46     	; 0x144c <vfprintf+0xd2>
    141e:	36 fc       	sbrc	r3, 6
    1420:	75 c1       	rjmp	.+746    	; 0x170c <vfprintf+0x392>
    1422:	23 2d       	mov	r18, r3
    1424:	20 64       	ori	r18, 0x40	; 64
    1426:	32 2e       	mov	r3, r18
    1428:	19 c0       	rjmp	.+50     	; 0x145c <vfprintf+0xe2>
    142a:	36 fe       	sbrs	r3, 6
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0xc0>
    142e:	8a e0       	ldi	r24, 0x0A	; 10
    1430:	98 9e       	mul	r9, r24
    1432:	20 0d       	add	r18, r0
    1434:	11 24       	eor	r1, r1
    1436:	92 2e       	mov	r9, r18
    1438:	11 c0       	rjmp	.+34     	; 0x145c <vfprintf+0xe2>
    143a:	ea e0       	ldi	r30, 0x0A	; 10
    143c:	2e 9e       	mul	r2, r30
    143e:	20 0d       	add	r18, r0
    1440:	11 24       	eor	r1, r1
    1442:	22 2e       	mov	r2, r18
    1444:	f3 2d       	mov	r31, r3
    1446:	f0 62       	ori	r31, 0x20	; 32
    1448:	3f 2e       	mov	r3, r31
    144a:	08 c0       	rjmp	.+16     	; 0x145c <vfprintf+0xe2>
    144c:	8c 36       	cpi	r24, 0x6C	; 108
    144e:	21 f4       	brne	.+8      	; 0x1458 <vfprintf+0xde>
    1450:	83 2d       	mov	r24, r3
    1452:	80 68       	ori	r24, 0x80	; 128
    1454:	38 2e       	mov	r3, r24
    1456:	02 c0       	rjmp	.+4      	; 0x145c <vfprintf+0xe2>
    1458:	88 36       	cpi	r24, 0x68	; 104
    145a:	41 f4       	brne	.+16     	; 0x146c <vfprintf+0xf2>
    145c:	f7 01       	movw	r30, r14
    145e:	93 fd       	sbrc	r25, 3
    1460:	85 91       	lpm	r24, Z+
    1462:	93 ff       	sbrs	r25, 3
    1464:	81 91       	ld	r24, Z+
    1466:	7f 01       	movw	r14, r30
    1468:	81 11       	cpse	r24, r1
    146a:	b3 cf       	rjmp	.-154    	; 0x13d2 <vfprintf+0x58>
    146c:	98 2f       	mov	r25, r24
    146e:	9f 7d       	andi	r25, 0xDF	; 223
    1470:	95 54       	subi	r25, 0x45	; 69
    1472:	93 30       	cpi	r25, 0x03	; 3
    1474:	28 f4       	brcc	.+10     	; 0x1480 <vfprintf+0x106>
    1476:	0c 5f       	subi	r16, 0xFC	; 252
    1478:	1f 4f       	sbci	r17, 0xFF	; 255
    147a:	9f e3       	ldi	r25, 0x3F	; 63
    147c:	99 83       	std	Y+1, r25	; 0x01
    147e:	0d c0       	rjmp	.+26     	; 0x149a <vfprintf+0x120>
    1480:	83 36       	cpi	r24, 0x63	; 99
    1482:	31 f0       	breq	.+12     	; 0x1490 <vfprintf+0x116>
    1484:	83 37       	cpi	r24, 0x73	; 115
    1486:	71 f0       	breq	.+28     	; 0x14a4 <vfprintf+0x12a>
    1488:	83 35       	cpi	r24, 0x53	; 83
    148a:	09 f0       	breq	.+2      	; 0x148e <vfprintf+0x114>
    148c:	55 c0       	rjmp	.+170    	; 0x1538 <vfprintf+0x1be>
    148e:	20 c0       	rjmp	.+64     	; 0x14d0 <vfprintf+0x156>
    1490:	f8 01       	movw	r30, r16
    1492:	80 81       	ld	r24, Z
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	0e 5f       	subi	r16, 0xFE	; 254
    1498:	1f 4f       	sbci	r17, 0xFF	; 255
    149a:	88 24       	eor	r8, r8
    149c:	83 94       	inc	r8
    149e:	91 2c       	mov	r9, r1
    14a0:	53 01       	movw	r10, r6
    14a2:	12 c0       	rjmp	.+36     	; 0x14c8 <vfprintf+0x14e>
    14a4:	28 01       	movw	r4, r16
    14a6:	f2 e0       	ldi	r31, 0x02	; 2
    14a8:	4f 0e       	add	r4, r31
    14aa:	51 1c       	adc	r5, r1
    14ac:	f8 01       	movw	r30, r16
    14ae:	a0 80       	ld	r10, Z
    14b0:	b1 80       	ldd	r11, Z+1	; 0x01
    14b2:	36 fe       	sbrs	r3, 6
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <vfprintf+0x142>
    14b6:	69 2d       	mov	r22, r9
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x146>
    14bc:	6f ef       	ldi	r22, 0xFF	; 255
    14be:	7f ef       	ldi	r23, 0xFF	; 255
    14c0:	c5 01       	movw	r24, r10
    14c2:	38 d1       	rcall	.+624    	; 0x1734 <strnlen>
    14c4:	4c 01       	movw	r8, r24
    14c6:	82 01       	movw	r16, r4
    14c8:	f3 2d       	mov	r31, r3
    14ca:	ff 77       	andi	r31, 0x7F	; 127
    14cc:	3f 2e       	mov	r3, r31
    14ce:	15 c0       	rjmp	.+42     	; 0x14fa <vfprintf+0x180>
    14d0:	28 01       	movw	r4, r16
    14d2:	22 e0       	ldi	r18, 0x02	; 2
    14d4:	42 0e       	add	r4, r18
    14d6:	51 1c       	adc	r5, r1
    14d8:	f8 01       	movw	r30, r16
    14da:	a0 80       	ld	r10, Z
    14dc:	b1 80       	ldd	r11, Z+1	; 0x01
    14de:	36 fe       	sbrs	r3, 6
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <vfprintf+0x16e>
    14e2:	69 2d       	mov	r22, r9
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0x172>
    14e8:	6f ef       	ldi	r22, 0xFF	; 255
    14ea:	7f ef       	ldi	r23, 0xFF	; 255
    14ec:	c5 01       	movw	r24, r10
    14ee:	17 d1       	rcall	.+558    	; 0x171e <strnlen_P>
    14f0:	4c 01       	movw	r8, r24
    14f2:	f3 2d       	mov	r31, r3
    14f4:	f0 68       	ori	r31, 0x80	; 128
    14f6:	3f 2e       	mov	r3, r31
    14f8:	82 01       	movw	r16, r4
    14fa:	33 fc       	sbrc	r3, 3
    14fc:	19 c0       	rjmp	.+50     	; 0x1530 <vfprintf+0x1b6>
    14fe:	82 2d       	mov	r24, r2
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	88 16       	cp	r8, r24
    1504:	99 06       	cpc	r9, r25
    1506:	a0 f4       	brcc	.+40     	; 0x1530 <vfprintf+0x1b6>
    1508:	b6 01       	movw	r22, r12
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	1d d1       	rcall	.+570    	; 0x174a <fputc>
    1510:	2a 94       	dec	r2
    1512:	f5 cf       	rjmp	.-22     	; 0x14fe <vfprintf+0x184>
    1514:	f5 01       	movw	r30, r10
    1516:	37 fc       	sbrc	r3, 7
    1518:	85 91       	lpm	r24, Z+
    151a:	37 fe       	sbrs	r3, 7
    151c:	81 91       	ld	r24, Z+
    151e:	5f 01       	movw	r10, r30
    1520:	b6 01       	movw	r22, r12
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	12 d1       	rcall	.+548    	; 0x174a <fputc>
    1526:	21 10       	cpse	r2, r1
    1528:	2a 94       	dec	r2
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	82 1a       	sub	r8, r18
    152e:	91 08       	sbc	r9, r1
    1530:	81 14       	cp	r8, r1
    1532:	91 04       	cpc	r9, r1
    1534:	79 f7       	brne	.-34     	; 0x1514 <vfprintf+0x19a>
    1536:	e1 c0       	rjmp	.+450    	; 0x16fa <vfprintf+0x380>
    1538:	84 36       	cpi	r24, 0x64	; 100
    153a:	11 f0       	breq	.+4      	; 0x1540 <vfprintf+0x1c6>
    153c:	89 36       	cpi	r24, 0x69	; 105
    153e:	39 f5       	brne	.+78     	; 0x158e <vfprintf+0x214>
    1540:	f8 01       	movw	r30, r16
    1542:	37 fe       	sbrs	r3, 7
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <vfprintf+0x1da>
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	0c 5f       	subi	r16, 0xFC	; 252
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <vfprintf+0x1ea>
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	07 2e       	mov	r0, r23
    155a:	00 0c       	add	r0, r0
    155c:	88 0b       	sbc	r24, r24
    155e:	99 0b       	sbc	r25, r25
    1560:	0e 5f       	subi	r16, 0xFE	; 254
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	f3 2d       	mov	r31, r3
    1566:	ff 76       	andi	r31, 0x6F	; 111
    1568:	3f 2e       	mov	r3, r31
    156a:	97 ff       	sbrs	r25, 7
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <vfprintf+0x206>
    156e:	90 95       	com	r25
    1570:	80 95       	com	r24
    1572:	70 95       	com	r23
    1574:	61 95       	neg	r22
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8f 4f       	sbci	r24, 0xFF	; 255
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	f0 68       	ori	r31, 0x80	; 128
    157e:	3f 2e       	mov	r3, r31
    1580:	2a e0       	ldi	r18, 0x0A	; 10
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	a3 01       	movw	r20, r6
    1586:	1d d1       	rcall	.+570    	; 0x17c2 <__ultoa_invert>
    1588:	88 2e       	mov	r8, r24
    158a:	86 18       	sub	r8, r6
    158c:	44 c0       	rjmp	.+136    	; 0x1616 <vfprintf+0x29c>
    158e:	85 37       	cpi	r24, 0x75	; 117
    1590:	31 f4       	brne	.+12     	; 0x159e <vfprintf+0x224>
    1592:	23 2d       	mov	r18, r3
    1594:	2f 7e       	andi	r18, 0xEF	; 239
    1596:	b2 2e       	mov	r11, r18
    1598:	2a e0       	ldi	r18, 0x0A	; 10
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	25 c0       	rjmp	.+74     	; 0x15e8 <vfprintf+0x26e>
    159e:	93 2d       	mov	r25, r3
    15a0:	99 7f       	andi	r25, 0xF9	; 249
    15a2:	b9 2e       	mov	r11, r25
    15a4:	8f 36       	cpi	r24, 0x6F	; 111
    15a6:	c1 f0       	breq	.+48     	; 0x15d8 <vfprintf+0x25e>
    15a8:	18 f4       	brcc	.+6      	; 0x15b0 <vfprintf+0x236>
    15aa:	88 35       	cpi	r24, 0x58	; 88
    15ac:	79 f0       	breq	.+30     	; 0x15cc <vfprintf+0x252>
    15ae:	ae c0       	rjmp	.+348    	; 0x170c <vfprintf+0x392>
    15b0:	80 37       	cpi	r24, 0x70	; 112
    15b2:	19 f0       	breq	.+6      	; 0x15ba <vfprintf+0x240>
    15b4:	88 37       	cpi	r24, 0x78	; 120
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <vfprintf+0x246>
    15b8:	a9 c0       	rjmp	.+338    	; 0x170c <vfprintf+0x392>
    15ba:	e9 2f       	mov	r30, r25
    15bc:	e0 61       	ori	r30, 0x10	; 16
    15be:	be 2e       	mov	r11, r30
    15c0:	b4 fe       	sbrs	r11, 4
    15c2:	0d c0       	rjmp	.+26     	; 0x15de <vfprintf+0x264>
    15c4:	fb 2d       	mov	r31, r11
    15c6:	f4 60       	ori	r31, 0x04	; 4
    15c8:	bf 2e       	mov	r11, r31
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <vfprintf+0x264>
    15cc:	34 fe       	sbrs	r3, 4
    15ce:	0a c0       	rjmp	.+20     	; 0x15e4 <vfprintf+0x26a>
    15d0:	29 2f       	mov	r18, r25
    15d2:	26 60       	ori	r18, 0x06	; 6
    15d4:	b2 2e       	mov	r11, r18
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0x26a>
    15d8:	28 e0       	ldi	r18, 0x08	; 8
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <vfprintf+0x26e>
    15de:	20 e1       	ldi	r18, 0x10	; 16
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <vfprintf+0x26e>
    15e4:	20 e1       	ldi	r18, 0x10	; 16
    15e6:	32 e0       	ldi	r19, 0x02	; 2
    15e8:	f8 01       	movw	r30, r16
    15ea:	b7 fe       	sbrs	r11, 7
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <vfprintf+0x282>
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	0c 5f       	subi	r16, 0xFC	; 252
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	06 c0       	rjmp	.+12     	; 0x1608 <vfprintf+0x28e>
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 5f       	subi	r16, 0xFE	; 254
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	a3 01       	movw	r20, r6
    160a:	db d0       	rcall	.+438    	; 0x17c2 <__ultoa_invert>
    160c:	88 2e       	mov	r8, r24
    160e:	86 18       	sub	r8, r6
    1610:	fb 2d       	mov	r31, r11
    1612:	ff 77       	andi	r31, 0x7F	; 127
    1614:	3f 2e       	mov	r3, r31
    1616:	36 fe       	sbrs	r3, 6
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <vfprintf+0x2ba>
    161a:	23 2d       	mov	r18, r3
    161c:	2e 7f       	andi	r18, 0xFE	; 254
    161e:	a2 2e       	mov	r10, r18
    1620:	89 14       	cp	r8, r9
    1622:	58 f4       	brcc	.+22     	; 0x163a <vfprintf+0x2c0>
    1624:	34 fe       	sbrs	r3, 4
    1626:	0b c0       	rjmp	.+22     	; 0x163e <vfprintf+0x2c4>
    1628:	32 fc       	sbrc	r3, 2
    162a:	09 c0       	rjmp	.+18     	; 0x163e <vfprintf+0x2c4>
    162c:	83 2d       	mov	r24, r3
    162e:	8e 7e       	andi	r24, 0xEE	; 238
    1630:	a8 2e       	mov	r10, r24
    1632:	05 c0       	rjmp	.+10     	; 0x163e <vfprintf+0x2c4>
    1634:	b8 2c       	mov	r11, r8
    1636:	a3 2c       	mov	r10, r3
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <vfprintf+0x2c6>
    163a:	b8 2c       	mov	r11, r8
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <vfprintf+0x2c6>
    163e:	b9 2c       	mov	r11, r9
    1640:	a4 fe       	sbrs	r10, 4
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <vfprintf+0x2e8>
    1644:	fe 01       	movw	r30, r28
    1646:	e8 0d       	add	r30, r8
    1648:	f1 1d       	adc	r31, r1
    164a:	80 81       	ld	r24, Z
    164c:	80 33       	cpi	r24, 0x30	; 48
    164e:	21 f4       	brne	.+8      	; 0x1658 <vfprintf+0x2de>
    1650:	9a 2d       	mov	r25, r10
    1652:	99 7e       	andi	r25, 0xE9	; 233
    1654:	a9 2e       	mov	r10, r25
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x2f0>
    1658:	a2 fe       	sbrs	r10, 2
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x2ee>
    165c:	b3 94       	inc	r11
    165e:	b3 94       	inc	r11
    1660:	04 c0       	rjmp	.+8      	; 0x166a <vfprintf+0x2f0>
    1662:	8a 2d       	mov	r24, r10
    1664:	86 78       	andi	r24, 0x86	; 134
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x2f0>
    1668:	b3 94       	inc	r11
    166a:	a3 fc       	sbrc	r10, 3
    166c:	10 c0       	rjmp	.+32     	; 0x168e <vfprintf+0x314>
    166e:	a0 fe       	sbrs	r10, 0
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0x304>
    1672:	b2 14       	cp	r11, r2
    1674:	80 f4       	brcc	.+32     	; 0x1696 <vfprintf+0x31c>
    1676:	28 0c       	add	r2, r8
    1678:	92 2c       	mov	r9, r2
    167a:	9b 18       	sub	r9, r11
    167c:	0d c0       	rjmp	.+26     	; 0x1698 <vfprintf+0x31e>
    167e:	b2 14       	cp	r11, r2
    1680:	58 f4       	brcc	.+22     	; 0x1698 <vfprintf+0x31e>
    1682:	b6 01       	movw	r22, r12
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	60 d0       	rcall	.+192    	; 0x174a <fputc>
    168a:	b3 94       	inc	r11
    168c:	f8 cf       	rjmp	.-16     	; 0x167e <vfprintf+0x304>
    168e:	b2 14       	cp	r11, r2
    1690:	18 f4       	brcc	.+6      	; 0x1698 <vfprintf+0x31e>
    1692:	2b 18       	sub	r2, r11
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x320>
    1696:	98 2c       	mov	r9, r8
    1698:	21 2c       	mov	r2, r1
    169a:	a4 fe       	sbrs	r10, 4
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <vfprintf+0x342>
    169e:	b6 01       	movw	r22, r12
    16a0:	80 e3       	ldi	r24, 0x30	; 48
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	52 d0       	rcall	.+164    	; 0x174a <fputc>
    16a6:	a2 fe       	sbrs	r10, 2
    16a8:	16 c0       	rjmp	.+44     	; 0x16d6 <vfprintf+0x35c>
    16aa:	a1 fc       	sbrc	r10, 1
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <vfprintf+0x33a>
    16ae:	88 e7       	ldi	r24, 0x78	; 120
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0x33e>
    16b4:	88 e5       	ldi	r24, 0x58	; 88
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	b6 01       	movw	r22, r12
    16ba:	0c c0       	rjmp	.+24     	; 0x16d4 <vfprintf+0x35a>
    16bc:	8a 2d       	mov	r24, r10
    16be:	86 78       	andi	r24, 0x86	; 134
    16c0:	51 f0       	breq	.+20     	; 0x16d6 <vfprintf+0x35c>
    16c2:	a1 fe       	sbrs	r10, 1
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <vfprintf+0x350>
    16c6:	8b e2       	ldi	r24, 0x2B	; 43
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <vfprintf+0x352>
    16ca:	80 e2       	ldi	r24, 0x20	; 32
    16cc:	a7 fc       	sbrc	r10, 7
    16ce:	8d e2       	ldi	r24, 0x2D	; 45
    16d0:	b6 01       	movw	r22, r12
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	3a d0       	rcall	.+116    	; 0x174a <fputc>
    16d6:	89 14       	cp	r8, r9
    16d8:	30 f4       	brcc	.+12     	; 0x16e6 <vfprintf+0x36c>
    16da:	b6 01       	movw	r22, r12
    16dc:	80 e3       	ldi	r24, 0x30	; 48
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	34 d0       	rcall	.+104    	; 0x174a <fputc>
    16e2:	9a 94       	dec	r9
    16e4:	f8 cf       	rjmp	.-16     	; 0x16d6 <vfprintf+0x35c>
    16e6:	8a 94       	dec	r8
    16e8:	f3 01       	movw	r30, r6
    16ea:	e8 0d       	add	r30, r8
    16ec:	f1 1d       	adc	r31, r1
    16ee:	80 81       	ld	r24, Z
    16f0:	b6 01       	movw	r22, r12
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	2a d0       	rcall	.+84     	; 0x174a <fputc>
    16f6:	81 10       	cpse	r8, r1
    16f8:	f6 cf       	rjmp	.-20     	; 0x16e6 <vfprintf+0x36c>
    16fa:	22 20       	and	r2, r2
    16fc:	09 f4       	brne	.+2      	; 0x1700 <vfprintf+0x386>
    16fe:	4e ce       	rjmp	.-868    	; 0x139c <vfprintf+0x22>
    1700:	b6 01       	movw	r22, r12
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	21 d0       	rcall	.+66     	; 0x174a <fputc>
    1708:	2a 94       	dec	r2
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <vfprintf+0x380>
    170c:	f6 01       	movw	r30, r12
    170e:	86 81       	ldd	r24, Z+6	; 0x06
    1710:	97 81       	ldd	r25, Z+7	; 0x07
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x39e>
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	9f ef       	ldi	r25, 0xFF	; 255
    1718:	2b 96       	adiw	r28, 0x0b	; 11
    171a:	e2 e1       	ldi	r30, 0x12	; 18
    171c:	cc c0       	rjmp	.+408    	; 0x18b6 <__epilogue_restores__>

0000171e <strnlen_P>:
    171e:	fc 01       	movw	r30, r24
    1720:	05 90       	lpm	r0, Z+
    1722:	61 50       	subi	r22, 0x01	; 1
    1724:	70 40       	sbci	r23, 0x00	; 0
    1726:	01 10       	cpse	r0, r1
    1728:	d8 f7       	brcc	.-10     	; 0x1720 <strnlen_P+0x2>
    172a:	80 95       	com	r24
    172c:	90 95       	com	r25
    172e:	8e 0f       	add	r24, r30
    1730:	9f 1f       	adc	r25, r31
    1732:	08 95       	ret

00001734 <strnlen>:
    1734:	fc 01       	movw	r30, r24
    1736:	61 50       	subi	r22, 0x01	; 1
    1738:	70 40       	sbci	r23, 0x00	; 0
    173a:	01 90       	ld	r0, Z+
    173c:	01 10       	cpse	r0, r1
    173e:	d8 f7       	brcc	.-10     	; 0x1736 <strnlen+0x2>
    1740:	80 95       	com	r24
    1742:	90 95       	com	r25
    1744:	8e 0f       	add	r24, r30
    1746:	9f 1f       	adc	r25, r31
    1748:	08 95       	ret

0000174a <fputc>:
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	fb 01       	movw	r30, r22
    1754:	23 81       	ldd	r18, Z+3	; 0x03
    1756:	21 fd       	sbrc	r18, 1
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <fputc+0x16>
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	2c c0       	rjmp	.+88     	; 0x17b8 <fputc+0x6e>
    1760:	22 ff       	sbrs	r18, 2
    1762:	16 c0       	rjmp	.+44     	; 0x1790 <fputc+0x46>
    1764:	46 81       	ldd	r20, Z+6	; 0x06
    1766:	57 81       	ldd	r21, Z+7	; 0x07
    1768:	24 81       	ldd	r18, Z+4	; 0x04
    176a:	35 81       	ldd	r19, Z+5	; 0x05
    176c:	42 17       	cp	r20, r18
    176e:	53 07       	cpc	r21, r19
    1770:	44 f4       	brge	.+16     	; 0x1782 <fputc+0x38>
    1772:	a0 81       	ld	r26, Z
    1774:	b1 81       	ldd	r27, Z+1	; 0x01
    1776:	9d 01       	movw	r18, r26
    1778:	2f 5f       	subi	r18, 0xFF	; 255
    177a:	3f 4f       	sbci	r19, 0xFF	; 255
    177c:	31 83       	std	Z+1, r19	; 0x01
    177e:	20 83       	st	Z, r18
    1780:	8c 93       	st	X, r24
    1782:	26 81       	ldd	r18, Z+6	; 0x06
    1784:	37 81       	ldd	r19, Z+7	; 0x07
    1786:	2f 5f       	subi	r18, 0xFF	; 255
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	37 83       	std	Z+7, r19	; 0x07
    178c:	26 83       	std	Z+6, r18	; 0x06
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <fputc+0x6e>
    1790:	8b 01       	movw	r16, r22
    1792:	ec 01       	movw	r28, r24
    1794:	fb 01       	movw	r30, r22
    1796:	00 84       	ldd	r0, Z+8	; 0x08
    1798:	f1 85       	ldd	r31, Z+9	; 0x09
    179a:	e0 2d       	mov	r30, r0
    179c:	09 95       	icall
    179e:	89 2b       	or	r24, r25
    17a0:	e1 f6       	brne	.-72     	; 0x175a <fputc+0x10>
    17a2:	d8 01       	movw	r26, r16
    17a4:	16 96       	adiw	r26, 0x06	; 6
    17a6:	8d 91       	ld	r24, X+
    17a8:	9c 91       	ld	r25, X
    17aa:	17 97       	sbiw	r26, 0x07	; 7
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	17 96       	adiw	r26, 0x07	; 7
    17b0:	9c 93       	st	X, r25
    17b2:	8e 93       	st	-X, r24
    17b4:	16 97       	sbiw	r26, 0x06	; 6
    17b6:	ce 01       	movw	r24, r28
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <__ultoa_invert>:
    17c2:	fa 01       	movw	r30, r20
    17c4:	aa 27       	eor	r26, r26
    17c6:	28 30       	cpi	r18, 0x08	; 8
    17c8:	51 f1       	breq	.+84     	; 0x181e <__ultoa_invert+0x5c>
    17ca:	20 31       	cpi	r18, 0x10	; 16
    17cc:	81 f1       	breq	.+96     	; 0x182e <__ultoa_invert+0x6c>
    17ce:	e8 94       	clt
    17d0:	6f 93       	push	r22
    17d2:	6e 7f       	andi	r22, 0xFE	; 254
    17d4:	6e 5f       	subi	r22, 0xFE	; 254
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	8f 4f       	sbci	r24, 0xFF	; 255
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	af 4f       	sbci	r26, 0xFF	; 255
    17de:	b1 e0       	ldi	r27, 0x01	; 1
    17e0:	3e d0       	rcall	.+124    	; 0x185e <__ultoa_invert+0x9c>
    17e2:	b4 e0       	ldi	r27, 0x04	; 4
    17e4:	3c d0       	rcall	.+120    	; 0x185e <__ultoa_invert+0x9c>
    17e6:	67 0f       	add	r22, r23
    17e8:	78 1f       	adc	r23, r24
    17ea:	89 1f       	adc	r24, r25
    17ec:	9a 1f       	adc	r25, r26
    17ee:	a1 1d       	adc	r26, r1
    17f0:	68 0f       	add	r22, r24
    17f2:	79 1f       	adc	r23, r25
    17f4:	8a 1f       	adc	r24, r26
    17f6:	91 1d       	adc	r25, r1
    17f8:	a1 1d       	adc	r26, r1
    17fa:	6a 0f       	add	r22, r26
    17fc:	71 1d       	adc	r23, r1
    17fe:	81 1d       	adc	r24, r1
    1800:	91 1d       	adc	r25, r1
    1802:	a1 1d       	adc	r26, r1
    1804:	20 d0       	rcall	.+64     	; 0x1846 <__ultoa_invert+0x84>
    1806:	09 f4       	brne	.+2      	; 0x180a <__ultoa_invert+0x48>
    1808:	68 94       	set
    180a:	3f 91       	pop	r19
    180c:	2a e0       	ldi	r18, 0x0A	; 10
    180e:	26 9f       	mul	r18, r22
    1810:	11 24       	eor	r1, r1
    1812:	30 19       	sub	r19, r0
    1814:	30 5d       	subi	r19, 0xD0	; 208
    1816:	31 93       	st	Z+, r19
    1818:	de f6       	brtc	.-74     	; 0x17d0 <__ultoa_invert+0xe>
    181a:	cf 01       	movw	r24, r30
    181c:	08 95       	ret
    181e:	46 2f       	mov	r20, r22
    1820:	47 70       	andi	r20, 0x07	; 7
    1822:	40 5d       	subi	r20, 0xD0	; 208
    1824:	41 93       	st	Z+, r20
    1826:	b3 e0       	ldi	r27, 0x03	; 3
    1828:	0f d0       	rcall	.+30     	; 0x1848 <__ultoa_invert+0x86>
    182a:	c9 f7       	brne	.-14     	; 0x181e <__ultoa_invert+0x5c>
    182c:	f6 cf       	rjmp	.-20     	; 0x181a <__ultoa_invert+0x58>
    182e:	46 2f       	mov	r20, r22
    1830:	4f 70       	andi	r20, 0x0F	; 15
    1832:	40 5d       	subi	r20, 0xD0	; 208
    1834:	4a 33       	cpi	r20, 0x3A	; 58
    1836:	18 f0       	brcs	.+6      	; 0x183e <__ultoa_invert+0x7c>
    1838:	49 5d       	subi	r20, 0xD9	; 217
    183a:	31 fd       	sbrc	r19, 1
    183c:	40 52       	subi	r20, 0x20	; 32
    183e:	41 93       	st	Z+, r20
    1840:	02 d0       	rcall	.+4      	; 0x1846 <__ultoa_invert+0x84>
    1842:	a9 f7       	brne	.-22     	; 0x182e <__ultoa_invert+0x6c>
    1844:	ea cf       	rjmp	.-44     	; 0x181a <__ultoa_invert+0x58>
    1846:	b4 e0       	ldi	r27, 0x04	; 4
    1848:	a6 95       	lsr	r26
    184a:	97 95       	ror	r25
    184c:	87 95       	ror	r24
    184e:	77 95       	ror	r23
    1850:	67 95       	ror	r22
    1852:	ba 95       	dec	r27
    1854:	c9 f7       	brne	.-14     	; 0x1848 <__ultoa_invert+0x86>
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 05       	cpc	r22, r1
    185a:	71 05       	cpc	r23, r1
    185c:	08 95       	ret
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	0a 2e       	mov	r0, r26
    1864:	06 94       	lsr	r0
    1866:	57 95       	ror	r21
    1868:	47 95       	ror	r20
    186a:	37 95       	ror	r19
    186c:	27 95       	ror	r18
    186e:	ba 95       	dec	r27
    1870:	c9 f7       	brne	.-14     	; 0x1864 <__ultoa_invert+0xa2>
    1872:	62 0f       	add	r22, r18
    1874:	73 1f       	adc	r23, r19
    1876:	84 1f       	adc	r24, r20
    1878:	95 1f       	adc	r25, r21
    187a:	a0 1d       	adc	r26, r0
    187c:	08 95       	ret

0000187e <__prologue_saves__>:
    187e:	2f 92       	push	r2
    1880:	3f 92       	push	r3
    1882:	4f 92       	push	r4
    1884:	5f 92       	push	r5
    1886:	6f 92       	push	r6
    1888:	7f 92       	push	r7
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	ca 1b       	sub	r28, r26
    18a8:	db 0b       	sbc	r29, r27
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	09 94       	ijmp

000018b6 <__epilogue_restores__>:
    18b6:	2a 88       	ldd	r2, Y+18	; 0x12
    18b8:	39 88       	ldd	r3, Y+17	; 0x11
    18ba:	48 88       	ldd	r4, Y+16	; 0x10
    18bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    18be:	6e 84       	ldd	r6, Y+14	; 0x0e
    18c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    18c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    18c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    18c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    18c8:	b9 84       	ldd	r11, Y+9	; 0x09
    18ca:	c8 84       	ldd	r12, Y+8	; 0x08
    18cc:	df 80       	ldd	r13, Y+7	; 0x07
    18ce:	ee 80       	ldd	r14, Y+6	; 0x06
    18d0:	fd 80       	ldd	r15, Y+5	; 0x05
    18d2:	0c 81       	ldd	r16, Y+4	; 0x04
    18d4:	1b 81       	ldd	r17, Y+3	; 0x03
    18d6:	aa 81       	ldd	r26, Y+2	; 0x02
    18d8:	b9 81       	ldd	r27, Y+1	; 0x01
    18da:	ce 0f       	add	r28, r30
    18dc:	d1 1d       	adc	r29, r1
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	ed 01       	movw	r28, r26
    18ea:	08 95       	ret

000018ec <_exit>:
    18ec:	f8 94       	cli

000018ee <__stop_program>:
    18ee:	ff cf       	rjmp	.-2      	; 0x18ee <__stop_program>
