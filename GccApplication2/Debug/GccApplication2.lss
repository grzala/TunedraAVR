
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00001798  0000182c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  008000ac  008000ac  00001878  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002915  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8a  00000000  00000000  000043ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd4  00000000  00000000  00005337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  0000600c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000caa  00000000  00000000  00006560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c70  00000000  00000000  0000720a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00008e7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	70 c0       	rjmp	.+224    	; 0xfe <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	48 02       	muls	r20, r24

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	e8 e9       	ldi	r30, 0x98	; 152
      3c:	f7 e1       	ldi	r31, 0x17	; 23
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	ac 3a       	cpi	r26, 0xAC	; 172
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	21 e0       	ldi	r18, 0x01	; 1
      4c:	ac ea       	ldi	r26, 0xAC	; 172
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	a4 34       	cpi	r26, 0x44	; 68
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	d7 d8       	rcall	.-3666   	; 0xfffff216 <__eeprom_end+0xff7ef216>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	bf d1       	rcall	.+894    	; 0x3ee <main>
      70:	91 cb       	rjmp	.-2270   	; 0xfffff794 <__eeprom_end+0xff7ef794>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:
			sum += ar[i];
		}
	}

	return sum/(double)len;
}
      74:	8f 92       	push	r8
      76:	9f 92       	push	r9
      78:	af 92       	push	r10
      7a:	bf 92       	push	r11
      7c:	cf 92       	push	r12
      7e:	df 92       	push	r13
      80:	ef 92       	push	r14
      82:	ff 92       	push	r15
      84:	0f 93       	push	r16
      86:	1f 93       	push	r17
      88:	14 ba       	out	0x14, r1	; 20
      8a:	68 94       	set
      8c:	88 24       	eor	r8, r8
      8e:	84 f8       	bld	r8, 4
      90:	91 2c       	mov	r9, r1
      92:	68 94       	set
      94:	aa 24       	eor	r10, r10
      96:	a1 f8       	bld	r10, 1
      98:	b1 2c       	mov	r11, r1
      9a:	68 94       	set
      9c:	cc 24       	eor	r12, r12
      9e:	c2 f8       	bld	r12, 2
      a0:	d1 2c       	mov	r13, r1
      a2:	0f 2e       	mov	r0, r31
      a4:	f7 e0       	ldi	r31, 0x07	; 7
      a6:	ef 2e       	mov	r14, r31
      a8:	f1 2c       	mov	r15, r1
      aa:	f0 2d       	mov	r31, r0
      ac:	01 e1       	ldi	r16, 0x11	; 17
      ae:	10 e0       	ldi	r17, 0x00	; 0
      b0:	22 e1       	ldi	r18, 0x12	; 18
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	43 e1       	ldi	r20, 0x13	; 19
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	63 e0       	ldi	r22, 0x03	; 3
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	87 ee       	ldi	r24, 0xE7	; 231
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	03 d2       	rcall	.+1030   	; 0x4c8 <_ZN7Display10initializeEiiiiiiii>
      c2:	f8 94       	cli
      c4:	16 b8       	out	0x06, r1	; 6
      c6:	3e 9a       	sbi	0x07, 6	; 7
      c8:	3d 9a       	sbi	0x07, 5	; 7
      ca:	32 9a       	sbi	0x06, 2	; 6
      cc:	35 9a       	sbi	0x06, 5	; 6
      ce:	33 9a       	sbi	0x06, 3	; 6
      d0:	37 9a       	sbi	0x06, 7	; 6
      d2:	36 9a       	sbi	0x06, 6	; 6
      d4:	78 94       	sei
      d6:	1f 91       	pop	r17
      d8:	0f 91       	pop	r16
      da:	ff 90       	pop	r15
      dc:	ef 90       	pop	r14
      de:	df 90       	pop	r13
      e0:	cf 90       	pop	r12
      e2:	bf 90       	pop	r11
      e4:	af 90       	pop	r10
      e6:	9f 90       	pop	r9
      e8:	8f 90       	pop	r8
      ea:	08 95       	ret

000000ec <_Z5resetv>:
      ec:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <_ZL5index>
      f0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
      f4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <_ZL8maxSlope+0x1>
      f8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <_ZL8maxSlope>
      fc:	08 95       	ret

000000fe <__vector_14>:
      fe:	1f 92       	push	r1
     100:	0f 92       	push	r0
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	0f 92       	push	r0
     106:	11 24       	eor	r1, r1
     108:	2f 93       	push	r18
     10a:	3f 93       	push	r19
     10c:	4f 93       	push	r20
     10e:	5f 93       	push	r21
     110:	6f 93       	push	r22
     112:	7f 93       	push	r23
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	af 93       	push	r26
     11a:	bf 93       	push	r27
     11c:	ef 93       	push	r30
     11e:	ff 93       	push	r31
     120:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     124:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <_ZL8prevData>
     128:	85 b1       	in	r24, 0x05	; 5
     12a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <_ZL7newData>
     12e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <_ZL8prevData>
     132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     136:	98 17       	cp	r25, r24
     138:	08 f0       	brcs	.+2      	; 0x13c <__vector_14+0x3e>
     13a:	d0 c0       	rjmp	.+416    	; 0x2dc <__vector_14+0x1de>
     13c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <_ZL7newData>
     140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     144:	98 17       	cp	r25, r24
     146:	08 f0       	brcs	.+2      	; 0x14a <__vector_14+0x4c>
     148:	05 c1       	rjmp	.+522    	; 0x354 <__vector_14+0x256>
     14a:	c8 c0       	rjmp	.+400    	; 0x2dc <__vector_14+0x1de>
     14c:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     156:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	e6 54       	subi	r30, 0x46	; 70
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	91 83       	std	Z+1, r25	; 0x01
     164:	80 83       	st	Z, r24
     166:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <_ZL4time>
     170:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <_ZL4time+0x1>
     174:	ee 0f       	add	r30, r30
     176:	ff 1f       	adc	r31, r31
     178:	e2 53       	subi	r30, 0x32	; 50
     17a:	ff 4f       	sbci	r31, 0xFF	; 255
     17c:	91 83       	std	Z+1, r25	; 0x01
     17e:	80 83       	st	Z, r24
     180:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <_ZL4time+0x1>
     184:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <_ZL4time>
     188:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     18c:	81 11       	cpse	r24, r1
     18e:	08 c0       	rjmp	.+16     	; 0x1a0 <__vector_14+0xa2>
     190:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
     194:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     198:	8f 5f       	subi	r24, 0xFF	; 255
     19a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <_ZL5index>
     19e:	9e c0       	rjmp	.+316    	; 0x2dc <__vector_14+0x1de>
     1a0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <_ZL5timer>
     1a4:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <_ZL5timer+0x1>
     1a8:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	ee 0f       	add	r30, r30
     1b0:	ff 1f       	adc	r31, r31
     1b2:	e2 53       	subi	r30, 0x32	; 50
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	20 81       	ld	r18, Z
     1b8:	31 81       	ldd	r19, Z+1	; 0x01
     1ba:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <_ZL8timerTol>
     1be:	50 91 62 00 	lds	r21, 0x0062	; 0x800062 <_ZL8timerTol+0x1>
     1c2:	82 1b       	sub	r24, r18
     1c4:	93 0b       	sbc	r25, r19
     1c6:	9c 01       	movw	r18, r24
     1c8:	22 f4       	brpl	.+8      	; 0x1d2 <__vector_14+0xd4>
     1ca:	22 27       	eor	r18, r18
     1cc:	33 27       	eor	r19, r19
     1ce:	28 1b       	sub	r18, r24
     1d0:	39 0b       	sbc	r19, r25
     1d2:	24 17       	cp	r18, r20
     1d4:	35 07       	cpc	r19, r21
     1d6:	0c f0       	brlt	.+2      	; 0x1da <__vector_14+0xdc>
     1d8:	e1 c0       	rjmp	.+450    	; 0x39c <__vector_14+0x29e>
     1da:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <_ZL5slope>
     1de:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <_ZL5slope+0x1>
     1e2:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     1e6:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     1ea:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <_ZL8slopeTol>
     1ee:	84 1b       	sub	r24, r20
     1f0:	95 0b       	sbc	r25, r21
     1f2:	ac 01       	movw	r20, r24
     1f4:	22 f4       	brpl	.+8      	; 0x1fe <__vector_14+0x100>
     1f6:	44 27       	eor	r20, r20
     1f8:	55 27       	eor	r21, r21
     1fa:	48 1b       	sub	r20, r24
     1fc:	59 0b       	sbc	r21, r25
     1fe:	82 2f       	mov	r24, r18
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	48 17       	cp	r20, r24
     204:	59 07       	cpc	r21, r25
     206:	0c f4       	brge	.+2      	; 0x20a <__vector_14+0x10c>
     208:	d4 c0       	rjmp	.+424    	; 0x3b2 <__vector_14+0x2b4>
     20a:	c8 c0       	rjmp	.+400    	; 0x39c <__vector_14+0x29e>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	e8 2f       	mov	r30, r24
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e2 53       	subi	r30, 0x32	; 50
     218:	ff 4f       	sbci	r31, 0xFF	; 255
     21a:	40 81       	ld	r20, Z
     21c:	51 81       	ldd	r21, Z+1	; 0x01
     21e:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <_ZL10totalTimer>
     222:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <_ZL10totalTimer+0x1>
     226:	24 0f       	add	r18, r20
     228:	35 1f       	adc	r19, r21
     22a:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <_ZL10totalTimer+0x1>
     22e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <_ZL10totalTimer>
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <_ZL5index>
     238:	89 17       	cp	r24, r25
     23a:	48 f3       	brcs	.-46     	; 0x20e <__vector_14+0x110>
     23c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <_ZL10totalTimer>
     240:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <_ZL10totalTimer+0x1>
     244:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <_ZL6period+0x1>
     248:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <_ZL6period>
     24c:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	e2 53       	subi	r30, 0x32	; 50
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	80 81       	ld	r24, Z
     25c:	91 81       	ldd	r25, Z+1	; 0x01
     25e:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <_ZL5timer+0x1>
     262:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <_ZL5timer>
     266:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ee 0f       	add	r30, r30
     26e:	ff 1f       	adc	r31, r31
     270:	e6 54       	subi	r30, 0x46	; 70
     272:	ff 4f       	sbci	r31, 0xFF	; 255
     274:	80 81       	ld	r24, Z
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <_ZL5slope+0x1>
     27c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <_ZL5slope>
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <_ZL5index>
     286:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
     28a:	28 c0       	rjmp	.+80     	; 0x2dc <__vector_14+0x1de>
     28c:	2f df       	rcall	.-418    	; 0xec <_Z5resetv>
     28e:	26 c0       	rjmp	.+76     	; 0x2dc <__vector_14+0x1de>
     290:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     294:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     298:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <_ZL8maxSlope>
     29c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <_ZL8maxSlope+0x1>
     2a0:	82 17       	cp	r24, r18
     2a2:	93 07       	cpc	r25, r19
     2a4:	8c f4       	brge	.+34     	; 0x2c8 <__vector_14+0x1ca>
     2a6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     2aa:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     2ae:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <_ZL8maxSlope+0x1>
     2b2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <_ZL8maxSlope>
     2b6:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <_ZL4time+0x1>
     2ba:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <_ZL4time>
     2be:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
     2c2:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <_ZL5index>
     2c6:	0a c0       	rjmp	.+20     	; 0x2dc <__vector_14+0x1de>
     2c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <_ZL7noMatch>
     2cc:	8f 5f       	subi	r24, 0xFF	; 255
     2ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <_ZL7noMatch>
     2d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <_ZL7noMatch>
     2d6:	8a 30       	cpi	r24, 0x0A	; 10
     2d8:	08 f0       	brcs	.+2      	; 0x2dc <__vector_14+0x1de>
     2da:	08 df       	rcall	.-496    	; 0xec <_Z5resetv>
     2dc:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     2e0:	88 23       	and	r24, r24
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <__vector_14+0x1e8>
     2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <__vector_14+0x2c6>
     2e6:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     2ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <_ZL4time>
     2ee:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <_ZL4time+0x1>
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <_ZL4time+0x1>
     2f8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <_ZL4time>
     2fc:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <ampTimer>
     300:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <ampTimer+0x1>
     304:	2f 5f       	subi	r18, 0xFF	; 255
     306:	3f 4f       	sbci	r19, 0xFF	; 255
     308:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <ampTimer+0x1>
     30c:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <ampTimer>
     310:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     314:	40 91 e5 00 	lds	r20, 0x00E5	; 0x8000e5 <_ZL7newData>
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	84 1b       	sub	r24, r20
     31c:	91 09       	sbc	r25, r1
     31e:	ac 01       	movw	r20, r24
     320:	22 f4       	brpl	.+8      	; 0x32a <__vector_14+0x22c>
     322:	44 27       	eor	r20, r20
     324:	55 27       	eor	r21, r21
     326:	48 1b       	sub	r20, r24
     328:	59 0b       	sbc	r21, r25
     32a:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <_ZL6maxAmp>
     32e:	84 17       	cp	r24, r20
     330:	10 f4       	brcc	.+4      	; 0x336 <__vector_14+0x238>
     332:	40 93 ad 00 	sts	0x00AD, r20	; 0x8000ad <_ZL6maxAmp>
     336:	28 3e       	cpi	r18, 0xE8	; 232
     338:	33 40       	sbci	r19, 0x03	; 3
     33a:	09 f0       	breq	.+2      	; 0x33e <__vector_14+0x240>
     33c:	47 c0       	rjmp	.+142    	; 0x3cc <__vector_14+0x2ce>
     33e:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <ampTimer+0x1>
     342:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <ampTimer>
     346:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <_ZL6maxAmp>
     34a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end>
     34e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <_ZL6maxAmp>
     352:	3c c0       	rjmp	.+120    	; 0x3cc <__vector_14+0x2ce>
     354:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     358:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <_ZL8prevData>
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	82 1b       	sub	r24, r18
     360:	91 09       	sbc	r25, r1
     362:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <_ZL8newSlope+0x1>
     366:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <_ZL8newSlope>
     36a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     36e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     372:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <_ZL8maxSlope>
     376:	50 91 b4 00 	lds	r21, 0x00B4	; 0x8000b4 <_ZL8maxSlope+0x1>
     37a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <_ZL8slopeTol>
     37e:	84 1b       	sub	r24, r20
     380:	95 0b       	sbc	r25, r21
     382:	ac 01       	movw	r20, r24
     384:	22 f4       	brpl	.+8      	; 0x38e <__vector_14+0x290>
     386:	44 27       	eor	r20, r20
     388:	55 27       	eor	r21, r21
     38a:	48 1b       	sub	r20, r24
     38c:	59 0b       	sbc	r21, r25
     38e:	82 2f       	mov	r24, r18
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	48 17       	cp	r20, r24
     394:	59 07       	cpc	r21, r25
     396:	0c f4       	brge	.+2      	; 0x39a <__vector_14+0x29c>
     398:	d9 ce       	rjmp	.-590    	; 0x14c <__vector_14+0x4e>
     39a:	7a cf       	rjmp	.-268    	; 0x290 <__vector_14+0x192>
     39c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <_ZL5index>
     3a6:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     3aa:	8a 30       	cpi	r24, 0x0A	; 10
     3ac:	08 f4       	brcc	.+2      	; 0x3b0 <__vector_14+0x2b2>
     3ae:	96 cf       	rjmp	.-212    	; 0x2dc <__vector_14+0x1de>
     3b0:	6d cf       	rjmp	.-294    	; 0x28c <__vector_14+0x18e>
     3b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <_ZL10totalTimer+0x1>
     3b6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <_ZL10totalTimer>
     3ba:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     3be:	81 11       	cpse	r24, r1
     3c0:	25 cf       	rjmp	.-438    	; 0x20c <__vector_14+0x10e>
     3c2:	3c cf       	rjmp	.-392    	; 0x23c <__vector_14+0x13e>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <_ZL8clipping>
     3ca:	8f cf       	rjmp	.-226    	; 0x2ea <__vector_14+0x1ec>
     3cc:	ff 91       	pop	r31
     3ce:	ef 91       	pop	r30
     3d0:	bf 91       	pop	r27
     3d2:	af 91       	pop	r26
     3d4:	9f 91       	pop	r25
     3d6:	8f 91       	pop	r24
     3d8:	7f 91       	pop	r23
     3da:	6f 91       	pop	r22
     3dc:	5f 91       	pop	r21
     3de:	4f 91       	pop	r20
     3e0:	3f 91       	pop	r19
     3e2:	2f 91       	pop	r18
     3e4:	0f 90       	pop	r0
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	0f 90       	pop	r0
     3ea:	1f 90       	pop	r1
     3ec:	18 95       	reti

000003ee <main>:



int main(void)
{
	USART_Init ( MYUBRR );
     3ee:	83 e3       	ldi	r24, 0x33	; 51
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	d0 d4       	rcall	.+2464   	; 0xd94 <_Z10USART_Initj>
	double mockFreq = 34.1;
	setup();
     3f4:	3f de       	rcall	.-898    	; 0x74 <_Z5setupv>
	
	while(1)
	{
		getNoteByFreq(&currentNote, mockFreq);
     3f6:	46 e6       	ldi	r20, 0x66	; 102
     3f8:	56 e6       	ldi	r21, 0x66	; 102
     3fa:	68 e0       	ldi	r22, 0x08	; 8
     3fc:	72 e4       	ldi	r23, 0x42	; 66
     3fe:	85 e3       	ldi	r24, 0x35	; 53
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	d2 d2       	rcall	.+1444   	; 0x9a8 <_Z13getNoteByFreqP4Noted>
		displ.lightIndicator(&currentNote, mockFreq);
     404:	26 e6       	ldi	r18, 0x66	; 102
     406:	36 e6       	ldi	r19, 0x66	; 102
     408:	48 e0       	ldi	r20, 0x08	; 8
     40a:	52 e4       	ldi	r21, 0x42	; 66
     40c:	65 e3       	ldi	r22, 0x35	; 53
     40e:	71 e0       	ldi	r23, 0x01	; 1
     410:	87 ee       	ldi	r24, 0xE7	; 231
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	b1 d1       	rcall	.+866    	; 0x778 <_ZN7Display14lightIndicatorEPK4Noted>
		//test(v);
		mockFreq += 5;
     416:	06 e6       	ldi	r16, 0x66	; 102
     418:	16 e6       	ldi	r17, 0x66	; 102
     41a:	dc e1       	ldi	r29, 0x1C	; 28
     41c:	c2 e4       	ldi	r28, 0x42	; 66
		if (mockFreq > 250) {
			mockFreq = 16;
     41e:	d1 2c       	mov	r13, r1
     420:	c1 2c       	mov	r12, r1
     422:	68 94       	set
     424:	ee 24       	eor	r14, r14
     426:	e7 f8       	bld	r14, 7
     428:	0f 2e       	mov	r0, r31
     42a:	f1 e4       	ldi	r31, 0x41	; 65
     42c:	ff 2e       	mov	r15, r31
     42e:	f0 2d       	mov	r31, r0
     430:	04 c0       	rjmp	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     432:	0d 2d       	mov	r16, r13
     434:	1c 2d       	mov	r17, r12
     436:	de 2d       	mov	r29, r14
     438:	cf 2d       	mov	r28, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43a:	8f e3       	ldi	r24, 0x3F	; 63
     43c:	9c e9       	ldi	r25, 0x9C	; 156
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     444:	00 00       	nop
	double mockFreq = 34.1;
	setup();
	
	while(1)
	{
		getNoteByFreq(&currentNote, mockFreq);
     446:	40 2f       	mov	r20, r16
     448:	51 2f       	mov	r21, r17
     44a:	6d 2f       	mov	r22, r29
     44c:	7c 2f       	mov	r23, r28
     44e:	85 e3       	ldi	r24, 0x35	; 53
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	aa d2       	rcall	.+1364   	; 0x9a8 <_Z13getNoteByFreqP4Noted>
		displ.lightIndicator(&currentNote, mockFreq);
     454:	20 2f       	mov	r18, r16
     456:	31 2f       	mov	r19, r17
     458:	4d 2f       	mov	r20, r29
     45a:	5c 2f       	mov	r21, r28
     45c:	65 e3       	ldi	r22, 0x35	; 53
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	87 ee       	ldi	r24, 0xE7	; 231
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	89 d1       	rcall	.+786    	; 0x778 <_ZN7Display14lightIndicatorEPK4Noted>
		//test(v);
		mockFreq += 5;
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 ea       	ldi	r20, 0xA0	; 160
     46c:	50 e4       	ldi	r21, 0x40	; 64
     46e:	60 2f       	mov	r22, r16
     470:	71 2f       	mov	r23, r17
     472:	8d 2f       	mov	r24, r29
     474:	9c 2f       	mov	r25, r28
     476:	96 d4       	rcall	.+2348   	; 0xda4 <__addsf3>
     478:	06 2f       	mov	r16, r22
     47a:	17 2f       	mov	r17, r23
     47c:	d8 2f       	mov	r29, r24
     47e:	c9 2f       	mov	r28, r25
		if (mockFreq > 250) {
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	4a e7       	ldi	r20, 0x7A	; 122
     486:	53 e4       	ldi	r21, 0x43	; 67
     488:	5f d6       	rcall	.+3262   	; 0x1148 <__gesf2>
     48a:	18 16       	cp	r1, r24
     48c:	94 f2       	brlt	.-92     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     48e:	d5 cf       	rjmp	.-86     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

00000490 <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     490:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     494:	e7 ee       	ldi	r30, 0xE7	; 231
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	17 86       	std	Z+15, r1	; 0x0f
     49a:	16 86       	std	Z+14, r1	; 0x0e
     49c:	12 8a       	std	Z+18, r1	; 0x12
     49e:	12 a2       	std	Z+34, r1	; 0x22
     4a0:	13 a2       	std	Z+35, r1	; 0x23
     4a2:	14 a2       	std	Z+36, r1	; 0x24
     4a4:	15 a2       	std	Z+37, r1	; 0x25
     4a6:	08 95       	ret

000004a8 <_ZN7Display14cleanIndicatorEv>:
	//}
	//this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     4a8:	fc 01       	movw	r30, r24
     4aa:	9c 01       	movw	r18, r24
     4ac:	21 5f       	subi	r18, 0xF1	; 241
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	13 8a       	std	Z+19, r1	; 0x13
     4b2:	14 8a       	std	Z+20, r1	; 0x14
     4b4:	15 8a       	std	Z+21, r1	; 0x15
     4b6:	33 96       	adiw	r30, 0x03	; 3
     4b8:	e2 17       	cp	r30, r18
     4ba:	f3 07       	cpc	r31, r19
     4bc:	c9 f7       	brne	.-14     	; 0x4b0 <_ZN7Display14cleanIndicatorEv+0x8>
     4be:	6f e0       	ldi	r22, 0x0F	; 15
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	43 96       	adiw	r24, 0x13	; 19
     4c4:	39 d4       	rcall	.+2162   	; 0xd38 <ws2812_sendarray>
     4c6:	08 95       	ret

000004c8 <_ZN7Display10initializeEiiiiiiii>:
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	fc 01       	movw	r30, r24
     4e6:	b9 9a       	sbi	0x17, 1	; 23
     4e8:	71 83       	std	Z+1, r23	; 0x01
     4ea:	60 83       	st	Z, r22
     4ec:	53 83       	std	Z+3, r21	; 0x03
     4ee:	42 83       	std	Z+2, r20	; 0x02
     4f0:	35 83       	std	Z+5, r19	; 0x05
     4f2:	24 83       	std	Z+4, r18	; 0x04
     4f4:	17 83       	std	Z+7, r17	; 0x07
     4f6:	06 83       	std	Z+6, r16	; 0x06
     4f8:	f1 86       	std	Z+9, r15	; 0x09
     4fa:	e0 86       	std	Z+8, r14	; 0x08
     4fc:	d3 86       	std	Z+11, r13	; 0x0b
     4fe:	c2 86       	std	Z+10, r12	; 0x0a
     500:	b5 86       	std	Z+13, r11	; 0x0d
     502:	a4 86       	std	Z+12, r10	; 0x0c
     504:	91 8a       	std	Z+17, r9	; 0x11
     506:	80 8a       	std	Z+16, r8	; 0x10
     508:	17 86       	std	Z+15, r1	; 0x0f
     50a:	16 86       	std	Z+14, r1	; 0x0e
     50c:	cd df       	rcall	.-102    	; 0x4a8 <_ZN7Display14cleanIndicatorEv>
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	9f 90       	pop	r9
     524:	8f 90       	pop	r8
     526:	08 95       	ret

00000528 <_ZN7Display12rebuildCacheEd>:
	//Serial.println();
}

#include "serial.h"
// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	6f 92       	push	r6
     52e:	7f 92       	push	r7
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	ec 01       	movw	r28, r24
     546:	4a 01       	movw	r8, r20
     548:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     54a:	29 e2       	ldi	r18, 0x29	; 41
     54c:	3c e5       	ldi	r19, 0x5C	; 92
     54e:	4f e0       	ldi	r20, 0x0F	; 15
     550:	5d e3       	ldi	r21, 0x3D	; 61
     552:	c5 01       	movw	r24, r10
     554:	b4 01       	movw	r22, r8
     556:	fc d5       	rcall	.+3064   	; 0x1150 <__mulsf3>
     558:	2b 01       	movw	r4, r22
     55a:	3c 01       	movw	r6, r24
     55c:	fe 01       	movw	r30, r28
     55e:	ee 5b       	subi	r30, 0xBE	; 190
     560:	ff 4f       	sbci	r31, 0xFF	; 255
     562:	60 83       	st	Z, r22
     564:	71 83       	std	Z+1, r23	; 0x01
     566:	82 83       	std	Z+2, r24	; 0x02
     568:	93 83       	std	Z+3, r25	; 0x03
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     56a:	2a e9       	ldi	r18, 0x9A	; 154
     56c:	39 e9       	ldi	r19, 0x99	; 153
     56e:	49 e1       	ldi	r20, 0x19	; 25
     570:	5e e3       	ldi	r21, 0x3E	; 62
     572:	c5 01       	movw	r24, r10
     574:	b4 01       	movw	r22, r8
     576:	ec d5       	rcall	.+3032   	; 0x1150 <__mulsf3>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24
     57c:	fe 01       	movw	r30, r28
     57e:	ea 5b       	subi	r30, 0xBA	; 186
     580:	ff 4f       	sbci	r31, 0xFF	; 255
     582:	60 83       	st	Z, r22
     584:	71 83       	std	Z+1, r23	; 0x01
     586:	82 83       	std	Z+2, r24	; 0x02
     588:	93 83       	std	Z+3, r25	; 0x03
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     58a:	23 e3       	ldi	r18, 0x33	; 51
     58c:	33 e3       	ldi	r19, 0x33	; 51
     58e:	43 eb       	ldi	r20, 0xB3	; 179
     590:	5e e3       	ldi	r21, 0x3E	; 62
     592:	c5 01       	movw	r24, r10
     594:	b4 01       	movw	r22, r8
     596:	dc d5       	rcall	.+3000   	; 0x1150 <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	fe 01       	movw	r30, r28
     59e:	e6 5b       	subi	r30, 0xB6	; 182
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	60 83       	st	Z, r22
     5a4:	71 83       	std	Z+1, r23	; 0x01
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	93 83       	std	Z+3, r25	; 0x03
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     5aa:	a3 01       	movw	r20, r6
     5ac:	92 01       	movw	r18, r4
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 ef       	ldi	r24, 0xF0	; 240
     5b4:	92 ec       	ldi	r25, 0xC2	; 194
     5b6:	5e d4       	rcall	.+2236   	; 0xe74 <__divsf3>
     5b8:	6a a7       	std	Y+42, r22	; 0x2a
     5ba:	7b a7       	std	Y+43, r23	; 0x2b
     5bc:	8c a7       	std	Y+44, r24	; 0x2c
     5be:	9d a7       	std	Y+45, r25	; 0x2d
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	a8 e4       	ldi	r26, 0x48	; 72
     5c6:	b3 e4       	ldi	r27, 0x43	; 67
     5c8:	8e ab       	std	Y+54, r24	; 0x36
     5ca:	9f ab       	std	Y+55, r25	; 0x37
     5cc:	a8 af       	std	Y+56, r26	; 0x38
     5ce:	b9 af       	std	Y+57, r27	; 0x39
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     5d0:	a3 01       	movw	r20, r6
     5d2:	92 01       	movw	r18, r4
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	e4 d3       	rcall	.+1992   	; 0xda2 <__subsf3>
     5da:	9b 01       	movw	r18, r22
     5dc:	ac 01       	movw	r20, r24
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8c e8       	ldi	r24, 0x8C	; 140
     5e4:	92 ec       	ldi	r25, 0xC2	; 194
     5e6:	46 d4       	rcall	.+2188   	; 0xe74 <__divsf3>
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	6e a7       	std	Y+46, r22	; 0x2e
     5ee:	7f a7       	std	Y+47, r23	; 0x2f
     5f0:	88 ab       	std	Y+48, r24	; 0x30
     5f2:	99 ab       	std	Y+49, r25	; 0x31
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     5f4:	c7 01       	movw	r24, r14
     5f6:	b6 01       	movw	r22, r12
     5f8:	ab d5       	rcall	.+2902   	; 0x1150 <__mulsf3>
     5fa:	9b 01       	movw	r18, r22
     5fc:	ac 01       	movw	r20, r24
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e2       	ldi	r24, 0x20	; 32
     604:	91 e4       	ldi	r25, 0x41	; 65
     606:	cd d3       	rcall	.+1946   	; 0xda2 <__subsf3>
     608:	6a af       	std	Y+58, r22	; 0x3a
     60a:	7b af       	std	Y+59, r23	; 0x3b
     60c:	8c af       	std	Y+60, r24	; 0x3c
     60e:	9d af       	std	Y+61, r25	; 0x3d
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     610:	a7 01       	movw	r20, r14
     612:	96 01       	movw	r18, r12
     614:	c5 01       	movw	r24, r10
     616:	b4 01       	movw	r22, r8
     618:	c4 d3       	rcall	.+1928   	; 0xda2 <__subsf3>
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	80 e2       	ldi	r24, 0x20	; 32
     624:	91 ec       	ldi	r25, 0xC1	; 193
     626:	26 d4       	rcall	.+2124   	; 0xe74 <__divsf3>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	6a ab       	std	Y+50, r22	; 0x32
     62e:	7b ab       	std	Y+51, r23	; 0x33
     630:	8c ab       	std	Y+52, r24	; 0x34
     632:	9d ab       	std	Y+53, r25	; 0x35
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     634:	ee 96       	adiw	r28, 0x3e	; 62
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	8a d5       	rcall	.+2836   	; 0x1150 <__mulsf3>
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	cb 01       	movw	r24, r22
     646:	ad d3       	rcall	.+1882   	; 0xda2 <__subsf3>
     648:	68 83       	st	Y, r22
     64a:	79 83       	std	Y+1, r23	; 0x01
     64c:	8a 83       	std	Y+2, r24	; 0x02
     64e:	9b 83       	std	Y+3, r25	; 0x03
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	ff 90       	pop	r15
     656:	ef 90       	pop	r14
     658:	df 90       	pop	r13
     65a:	cf 90       	pop	r12
     65c:	bf 90       	pop	r11
     65e:	af 90       	pop	r10
     660:	9f 90       	pop	r9
     662:	8f 90       	pop	r8
     664:	7f 90       	pop	r7
     666:	6f 90       	pop	r6
     668:	5f 90       	pop	r5
     66a:	4f 90       	pop	r4
     66c:	08 95       	ret

0000066e <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     66e:	8f 92       	push	r8
     670:	9f 92       	push	r9
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
     688:	6a 01       	movw	r12, r20
     68a:	7b 01       	movw	r14, r22
     68c:	b9 01       	movw	r22, r18
     68e:	a8 01       	movw	r20, r16
	this->rebuildCache(max_distance); // find new functions
     690:	4b df       	rcall	.-362    	; 0x528 <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	a9 01       	movw	r20, r18
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	e7 d3       	rcall	.+1998   	; 0xe6c <__cmpsf2>
     69e:	88 23       	and	r24, r24
     6a0:	0c f4       	brge	.+2      	; 0x6a4 <_ZN7Display25getIndicatorValByDistanceEdd+0x36>
     6a2:	58 c0       	rjmp	.+176    	; 0x754 <_ZN7Display25getIndicatorValByDistanceEdd+0xe6>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     6a4:	fe 01       	movw	r30, r28
     6a6:	e6 5b       	subi	r30, 0xB6	; 182
     6a8:	ff 4f       	sbci	r31, 0xFF	; 255
     6aa:	80 80       	ld	r8, Z
     6ac:	91 80       	ldd	r9, Z+1	; 0x01
     6ae:	a2 80       	ldd	r10, Z+2	; 0x02
     6b0:	b3 80       	ldd	r11, Z+3	; 0x03
     6b2:	a5 01       	movw	r20, r10
     6b4:	94 01       	movw	r18, r8
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	46 d5       	rcall	.+2700   	; 0x1148 <__gesf2>
     6bc:	18 16       	cp	r1, r24
     6be:	0c f4       	brge	.+2      	; 0x6c2 <_ZN7Display25getIndicatorValByDistanceEdd+0x54>
     6c0:	4c c0       	rjmp	.+152    	; 0x75a <_ZN7Display25getIndicatorValByDistanceEdd+0xec>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     6c2:	fe 01       	movw	r30, r28
     6c4:	ee 5b       	subi	r30, 0xBE	; 190
     6c6:	ff 4f       	sbci	r31, 0xFF	; 255
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01
     6cc:	42 81       	ldd	r20, Z+2	; 0x02
     6ce:	53 81       	ldd	r21, Z+3	; 0x03
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	cb d3       	rcall	.+1942   	; 0xe6c <__cmpsf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	cc f4       	brge	.+50     	; 0x70c <_ZN7Display25getIndicatorValByDistanceEdd+0x9e>
     6da:	fe 01       	movw	r30, r28
     6dc:	ea 5b       	subi	r30, 0xBA	; 186
     6de:	ff 4f       	sbci	r31, 0xFF	; 255
     6e0:	20 81       	ld	r18, Z
     6e2:	31 81       	ldd	r19, Z+1	; 0x01
     6e4:	42 81       	ldd	r20, Z+2	; 0x02
     6e6:	53 81       	ldd	r21, Z+3	; 0x03
     6e8:	c7 01       	movw	r24, r14
     6ea:	b6 01       	movw	r22, r12
     6ec:	bf d3       	rcall	.+1918   	; 0xe6c <__cmpsf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	54 f4       	brge	.+20     	; 0x706 <_ZN7Display25getIndicatorValByDistanceEdd+0x98>
     6f2:	a5 01       	movw	r20, r10
     6f4:	94 01       	movw	r18, r8
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	b8 d3       	rcall	.+1904   	; 0xe6c <__cmpsf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	4c f0       	brlt	.+18     	; 0x712 <_ZN7Display25getIndicatorValByDistanceEdd+0xa4>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     700:	02 e0       	ldi	r16, 0x02	; 2
     702:	10 e0       	ldi	r17, 0x00	; 0
     704:	08 c0       	rjmp	.+16     	; 0x716 <_ZN7Display25getIndicatorValByDistanceEdd+0xa8>
     706:	01 e0       	ldi	r16, 0x01	; 1
     708:	10 e0       	ldi	r17, 0x00	; 0
     70a:	05 c0       	rjmp	.+10     	; 0x716 <_ZN7Display25getIndicatorValByDistanceEdd+0xa8>
	if (distance <= ledFCache.xBounds[i])
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	02 c0       	rjmp	.+4      	; 0x716 <_ZN7Display25getIndicatorValByDistanceEdd+0xa8>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     712:	03 e0       	ldi	r16, 0x03	; 3
     714:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     716:	f8 01       	movw	r30, r16
     718:	31 96       	adiw	r30, 0x01	; 1
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ec 0f       	add	r30, r28
     724:	fd 1f       	adc	r31, r29
     726:	26 a1       	ldd	r18, Z+38	; 0x26
     728:	37 a1       	ldd	r19, Z+39	; 0x27
     72a:	40 a5       	ldd	r20, Z+40	; 0x28
     72c:	51 a5       	ldd	r21, Z+41	; 0x29
     72e:	c7 01       	movw	r24, r14
     730:	b6 01       	movw	r22, r12
     732:	0e d5       	rcall	.+2588   	; 0x1150 <__mulsf3>
     734:	0c 5f       	subi	r16, 0xFC	; 252
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	00 0f       	add	r16, r16
     73a:	11 1f       	adc	r17, r17
     73c:	00 0f       	add	r16, r16
     73e:	11 1f       	adc	r17, r17
     740:	c0 0f       	add	r28, r16
     742:	d1 1f       	adc	r29, r17
     744:	2e a1       	ldd	r18, Y+38	; 0x26
     746:	3f a1       	ldd	r19, Y+39	; 0x27
     748:	48 a5       	ldd	r20, Y+40	; 0x28
     74a:	59 a5       	ldd	r21, Y+41	; 0x29
     74c:	2b d3       	rcall	.+1622   	; 0xda4 <__addsf3>
     74e:	fa d3       	rcall	.+2036   	; 0xf44 <__fixsfsi>
	return val;
     750:	cb 01       	movw	r24, r22
     752:	05 c0       	rjmp	.+10     	; 0x75e <_ZN7Display25getIndicatorValByDistanceEdd+0xf0>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     754:	88 ec       	ldi	r24, 0xC8	; 200
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	02 c0       	rjmp	.+4      	; 0x75e <_ZN7Display25getIndicatorValByDistanceEdd+0xf0>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
	return val;
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	08 95       	ret

00000778 <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     778:	2f 92       	push	r2
     77a:	3f 92       	push	r3
     77c:	4f 92       	push	r4
     77e:	5f 92       	push	r5
     780:	6f 92       	push	r6
     782:	7f 92       	push	r7
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	6c 97       	sbiw	r28, 0x1c	; 28
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	1c 01       	movw	r2, r24
     7ae:	8b 01       	movw	r16, r22
     7b0:	2d 8b       	std	Y+21, r18	; 0x15
     7b2:	3e 8b       	std	Y+22, r19	; 0x16
     7b4:	4f 8b       	std	Y+23, r20	; 0x17
     7b6:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     7b8:	db 01       	movw	r26, r22
     7ba:	16 96       	adiw	r26, 0x06	; 6
     7bc:	8d 91       	ld	r24, X+
     7be:	9d 91       	ld	r25, X+
     7c0:	0d 90       	ld	r0, X+
     7c2:	bc 91       	ld	r27, X
     7c4:	a0 2d       	mov	r26, r0
     7c6:	89 8f       	std	Y+25, r24	; 0x19
     7c8:	9a 8f       	std	Y+26, r25	; 0x1a
     7ca:	ab 8f       	std	Y+27, r26	; 0x1b
     7cc:	bc 8f       	std	Y+28, r27	; 0x1c
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     7ce:	fb 01       	movw	r30, r22
     7d0:	82 84       	ldd	r8, Z+10	; 0x0a
     7d2:	93 84       	ldd	r9, Z+11	; 0x0b
     7d4:	a4 84       	ldd	r10, Z+12	; 0x0c
     7d6:	b5 84       	ldd	r11, Z+13	; 0x0d
     7d8:	9c 01       	movw	r18, r24
     7da:	ad 01       	movw	r20, r26
     7dc:	c5 01       	movw	r24, r10
     7de:	b4 01       	movw	r22, r8
     7e0:	e0 d2       	rcall	.+1472   	; 0xda2 <__subsf3>
     7e2:	6b 01       	movw	r12, r22
     7e4:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     7e6:	d8 01       	movw	r26, r16
     7e8:	12 96       	adiw	r26, 0x02	; 2
     7ea:	4d 90       	ld	r4, X+
     7ec:	5d 90       	ld	r5, X+
     7ee:	6d 90       	ld	r6, X+
     7f0:	7c 90       	ld	r7, X
     7f2:	15 97       	sbiw	r26, 0x05	; 5
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     7f4:	29 8d       	ldd	r18, Y+25	; 0x19
     7f6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     7f8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     7fa:	5c 8d       	ldd	r21, Y+28	; 0x1c
     7fc:	6d 89       	ldd	r22, Y+21	; 0x15
     7fe:	7e 89       	ldd	r23, Y+22	; 0x16
     800:	8f 89       	ldd	r24, Y+23	; 0x17
     802:	98 8d       	ldd	r25, Y+24	; 0x18
     804:	ce d2       	rcall	.+1436   	; 0xda2 <__subsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	08 d4       	rcall	.+2064   	; 0x1020 <fmin>
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     810:	69 83       	std	Y+1, r22	; 0x01
     812:	7a 83       	std	Y+2, r23	; 0x02
     814:	8b 83       	std	Y+3, r24	; 0x03
     816:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
     818:	29 8d       	ldd	r18, Y+25	; 0x19
     81a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     81c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     81e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     820:	c3 01       	movw	r24, r6
     822:	b2 01       	movw	r22, r4
     824:	be d2       	rcall	.+1404   	; 0xda2 <__subsf3>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	5f e3       	ldi	r21, 0x3F	; 63
     82e:	90 d4       	rcall	.+2336   	; 0x1150 <__mulsf3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	c3 01       	movw	r24, r6
     836:	b2 01       	movw	r22, r4
     838:	b4 d2       	rcall	.+1384   	; 0xda2 <__subsf3>
     83a:	9b 01       	movw	r18, r22
     83c:	ac 01       	movw	r20, r24
     83e:	6d 89       	ldd	r22, Y+21	; 0x15
     840:	7e 89       	ldd	r23, Y+22	; 0x16
     842:	8f 89       	ldd	r24, Y+23	; 0x17
     844:	98 8d       	ldd	r25, Y+24	; 0x18
     846:	ad d2       	rcall	.+1370   	; 0xda2 <__subsf3>
     848:	7d d3       	rcall	.+1786   	; 0xf44 <__fixsfsi>
     84a:	9b 01       	movw	r18, r22
     84c:	77 23       	and	r23, r23
     84e:	24 f4       	brge	.+8      	; 0x858 <_ZN7Display14lightIndicatorEPK4Noted+0xe0>
     850:	22 27       	eor	r18, r18
     852:	33 27       	eor	r19, r19
     854:	26 1b       	sub	r18, r22
     856:	37 0b       	sbc	r19, r23
     858:	b9 01       	movw	r22, r18
     85a:	33 0f       	add	r19, r19
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	a4 d3       	rcall	.+1864   	; 0xfaa <__floatsisf>
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	c7 01       	movw	r24, r14
     868:	b6 01       	movw	r22, r12
     86a:	da d3       	rcall	.+1972   	; 0x1020 <fmin>
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     86c:	6d 83       	std	Y+5, r22	; 0x05
     86e:	7e 83       	std	Y+6, r23	; 0x06
     870:	8f 83       	std	Y+7, r24	; 0x07
     872:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
     874:	a3 01       	movw	r20, r6
     876:	92 01       	movw	r18, r4
     878:	6d 89       	ldd	r22, Y+21	; 0x15
     87a:	7e 89       	ldd	r23, Y+22	; 0x16
     87c:	8f 89       	ldd	r24, Y+23	; 0x17
     87e:	98 8d       	ldd	r25, Y+24	; 0x18
     880:	90 d2       	rcall	.+1312   	; 0xda2 <__subsf3>
     882:	60 d3       	rcall	.+1728   	; 0xf44 <__fixsfsi>
     884:	9b 01       	movw	r18, r22
     886:	77 23       	and	r23, r23
     888:	24 f4       	brge	.+8      	; 0x892 <_ZN7Display14lightIndicatorEPK4Noted+0x11a>
     88a:	22 27       	eor	r18, r18
     88c:	33 27       	eor	r19, r19
     88e:	26 1b       	sub	r18, r22
     890:	37 0b       	sbc	r19, r23
     892:	b9 01       	movw	r22, r18
     894:	33 0f       	add	r19, r19
     896:	88 0b       	sbc	r24, r24
     898:	99 0b       	sbc	r25, r25
     89a:	87 d3       	rcall	.+1806   	; 0xfaa <__floatsisf>
     89c:	9b 01       	movw	r18, r22
     89e:	ac 01       	movw	r20, r24
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	bd d3       	rcall	.+1914   	; 0x1020 <fmin>
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     8a6:	69 87       	std	Y+9, r22	; 0x09
     8a8:	7a 87       	std	Y+10, r23	; 0x0a
     8aa:	8b 87       	std	Y+11, r24	; 0x0b
     8ac:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
     8ae:	a3 01       	movw	r20, r6
     8b0:	92 01       	movw	r18, r4
     8b2:	c5 01       	movw	r24, r10
     8b4:	b4 01       	movw	r22, r8
     8b6:	75 d2       	rcall	.+1258   	; 0xda2 <__subsf3>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	5f e3       	ldi	r21, 0x3F	; 63
     8c0:	47 d4       	rcall	.+2190   	; 0x1150 <__mulsf3>
     8c2:	a3 01       	movw	r20, r6
     8c4:	92 01       	movw	r18, r4
     8c6:	6e d2       	rcall	.+1244   	; 0xda4 <__addsf3>
     8c8:	2d 89       	ldd	r18, Y+21	; 0x15
     8ca:	3e 89       	ldd	r19, Y+22	; 0x16
     8cc:	4f 89       	ldd	r20, Y+23	; 0x17
     8ce:	58 8d       	ldd	r21, Y+24	; 0x18
     8d0:	68 d2       	rcall	.+1232   	; 0xda2 <__subsf3>
     8d2:	38 d3       	rcall	.+1648   	; 0xf44 <__fixsfsi>
     8d4:	9b 01       	movw	r18, r22
     8d6:	77 23       	and	r23, r23
     8d8:	24 f4       	brge	.+8      	; 0x8e2 <_ZN7Display14lightIndicatorEPK4Noted+0x16a>
     8da:	22 27       	eor	r18, r18
     8dc:	33 27       	eor	r19, r19
     8de:	26 1b       	sub	r18, r22
     8e0:	37 0b       	sbc	r19, r23
     8e2:	b9 01       	movw	r22, r18
     8e4:	33 0f       	add	r19, r19
     8e6:	88 0b       	sbc	r24, r24
     8e8:	99 0b       	sbc	r25, r25
     8ea:	5f d3       	rcall	.+1726   	; 0xfaa <__floatsisf>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	95 d3       	rcall	.+1834   	; 0x1020 <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     8f6:	6d 87       	std	Y+13, r22	; 0x0d
     8f8:	7e 87       	std	Y+14, r23	; 0x0e
     8fa:	8f 87       	std	Y+15, r24	; 0x0f
     8fc:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     8fe:	2d 89       	ldd	r18, Y+21	; 0x15
     900:	3e 89       	ldd	r19, Y+22	; 0x16
     902:	4f 89       	ldd	r20, Y+23	; 0x17
     904:	58 8d       	ldd	r21, Y+24	; 0x18
     906:	c5 01       	movw	r24, r10
     908:	b4 01       	movw	r22, r8
     90a:	4b d2       	rcall	.+1174   	; 0xda2 <__subsf3>
     90c:	9b 01       	movw	r18, r22
     90e:	ac 01       	movw	r20, r24
     910:	c7 01       	movw	r24, r14
     912:	b6 01       	movw	r22, r12
     914:	85 d3       	rcall	.+1802   	; 0x1020 <fmin>
	};
     916:	69 8b       	std	Y+17, r22	; 0x11
     918:	7a 8b       	std	Y+18, r23	; 0x12
     91a:	8b 8b       	std	Y+19, r24	; 0x13
     91c:	9c 8b       	std	Y+20, r25	; 0x14
     91e:	fe 01       	movw	r30, r28
     920:	31 96       	adiw	r30, 0x01	; 1
     922:	3f 01       	movw	r6, r30
     924:	41 01       	movw	r8, r2
     926:	aa 24       	eor	r10, r10
     928:	a3 94       	inc	r10
     92a:	b1 2c       	mov	r11, r1
     92c:	06 c0       	rjmp	.+12     	; 0x93a <_ZN7Display14lightIndicatorEPK4Noted+0x1c2>
     92e:	ff ef       	ldi	r31, 0xFF	; 255
     930:	af 1a       	sub	r10, r31
     932:	bf 0a       	sbc	r11, r31
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	88 0e       	add	r8, r24
     938:	91 1c       	adc	r9, r1
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     93a:	d3 01       	movw	r26, r6
     93c:	4d 91       	ld	r20, X+
     93e:	5d 91       	ld	r21, X+
     940:	6d 91       	ld	r22, X+
     942:	7d 91       	ld	r23, X+
     944:	3d 01       	movw	r6, r26
     946:	97 01       	movw	r18, r14
     948:	86 01       	movw	r16, r12
     94a:	c1 01       	movw	r24, r2
     94c:	90 de       	rcall	.-736    	; 0x66e <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     94e:	b3 e0       	ldi	r27, 0x03	; 3
     950:	ab 16       	cp	r10, r27
     952:	b1 04       	cpc	r11, r1
     954:	39 f0       	breq	.+14     	; 0x964 <_ZN7Display14lightIndicatorEPK4Noted+0x1ec>
			this->indicatorBar[i].r = val;
     956:	f4 01       	movw	r30, r8
     958:	83 8b       	std	Z+19, r24	; 0x13
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     95a:	f5 e0       	ldi	r31, 0x05	; 5
     95c:	af 16       	cp	r10, r31
     95e:	b1 04       	cpc	r11, r1
     960:	34 f3       	brlt	.-52     	; 0x92e <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
     962:	04 c0       	rjmp	.+8      	; 0x96c <_ZN7Display14lightIndicatorEPK4Noted+0x1f4>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     964:	d1 01       	movw	r26, r2
     966:	5a 96       	adiw	r26, 0x1a	; 26
     968:	8c 93       	st	X, r24
     96a:	e1 cf       	rjmp	.-62     	; 0x92e <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     96c:	6f e0       	ldi	r22, 0x0F	; 15
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	c1 01       	movw	r24, r2
     972:	43 96       	adiw	r24, 0x13	; 19
     974:	e1 d1       	rcall	.+962    	; 0xd38 <ws2812_sendarray>
}
     976:	6c 96       	adiw	r28, 0x1c	; 28
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	3f 90       	pop	r3
     9a4:	2f 90       	pop	r2
     9a6:	08 95       	ret

000009a8 <_Z13getNoteByFreqP4Noted>:
	}

	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
     9a8:	2f 92       	push	r2
     9aa:	3f 92       	push	r3
     9ac:	4f 92       	push	r4
     9ae:	5f 92       	push	r5
     9b0:	6f 92       	push	r6
     9b2:	7f 92       	push	r7
     9b4:	8f 92       	push	r8
     9b6:	9f 92       	push	r9
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	2c 97       	sbiw	r28, 0x0c	; 12
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	9e 83       	std	Y+6, r25	; 0x06
     9de:	8d 83       	std	Y+5, r24	; 0x05
     9e0:	49 83       	std	Y+1, r20	; 0x01
     9e2:	5a 83       	std	Y+2, r21	; 0x02
     9e4:	6b 83       	std	Y+3, r22	; 0x03
     9e6:	7c 83       	std	Y+4, r23	; 0x04

#include "freqDetect.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     9e8:	2b e9       	ldi	r18, 0x9B	; 155
     9ea:	38 e4       	ldi	r19, 0x48	; 72
     9ec:	4e e7       	ldi	r20, 0x7E	; 126
     9ee:	51 e4       	ldi	r21, 0x41	; 65
     9f0:	69 81       	ldd	r22, Y+1	; 0x01
     9f2:	7a 81       	ldd	r23, Y+2	; 0x02
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	a7 d3       	rcall	.+1870   	; 0x1148 <__gesf2>
     9fa:	88 23       	and	r24, r24
     9fc:	0c f4       	brge	.+2      	; 0xa00 <_Z13getNoteByFreqP4Noted+0x58>
     9fe:	f9 c0       	rjmp	.+498    	; 0xbf2 <_Z13getNoteByFreqP4Noted+0x24a>
     a00:	22 e5       	ldi	r18, 0x52	; 82
     a02:	38 e4       	ldi	r19, 0x48	; 72
     a04:	4e ef       	ldi	r20, 0xFE	; 254
     a06:	53 e4       	ldi	r21, 0x43	; 67
     a08:	69 81       	ldd	r22, Y+1	; 0x01
     a0a:	7a 81       	ldd	r23, Y+2	; 0x02
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	2d d2       	rcall	.+1114   	; 0xe6c <__cmpsf2>
     a12:	88 23       	and	r24, r24
     a14:	0c f0       	brlt	.+2      	; 0xa18 <_Z13getNoteByFreqP4Noted+0x70>
     a16:	ed c0       	rjmp	.+474    	; 0xbf2 <_Z13getNoteByFreqP4Noted+0x24a>
     a18:	f0 c0       	rjmp	.+480    	; 0xbfa <_Z13getNoteByFreqP4Noted+0x252>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     a1a:	0f 2e       	mov	r0, r31
     a1c:	c1 2c       	mov	r12, r1
     a1e:	d1 2c       	mov	r13, r1
     a20:	f0 e8       	ldi	r31, 0x80	; 128
     a22:	ef 2e       	mov	r14, r31
     a24:	ff e3       	ldi	r31, 0x3F	; 63
     a26:	ff 2e       	mov	r15, r31
     a28:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     a2a:	a7 01       	movw	r20, r14
     a2c:	96 01       	movw	r18, r12
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	b8 d1       	rcall	.+880    	; 0xda4 <__addsf3>
     a34:	6b 01       	movw	r12, r22
     a36:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     a38:	2b e9       	ldi	r18, 0x9B	; 155
     a3a:	38 e4       	ldi	r19, 0x48	; 72
     a3c:	4e ef       	ldi	r20, 0xFE	; 254
     a3e:	51 e4       	ldi	r21, 0x41	; 65
     a40:	87 d3       	rcall	.+1806   	; 0x1150 <__mulsf3>
     a42:	4b 01       	movw	r8, r22
     a44:	5c 01       	movw	r10, r24
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	69 81       	ldd	r22, Y+1	; 0x01
     a4c:	7a 81       	ldd	r23, Y+2	; 0x02
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	7a d3       	rcall	.+1780   	; 0x1148 <__gesf2>
     a54:	18 16       	cp	r1, r24
     a56:	4c f3       	brlt	.-46     	; 0xa2a <_Z13getNoteByFreqP4Noted+0x82>
     a58:	8f 82       	std	Y+7, r8	; 0x07
     a5a:	98 86       	std	Y+8, r9	; 0x08
     a5c:	a9 86       	std	Y+9, r10	; 0x09
     a5e:	ba 86       	std	Y+10, r11	; 0x0a
     a60:	e8 c0       	rjmp	.+464    	; 0xc32 <_Z13getNoteByFreqP4Noted+0x28a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     a62:	1c 01       	movw	r2, r24
     a64:	51 01       	movw	r10, r2
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	a8 1a       	sub	r10, r24
     a6a:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     a6c:	ab 85       	ldd	r26, Y+11	; 0x0b
     a6e:	bc 85       	ldd	r27, Y+12	; 0x0c
     a70:	6d 91       	ld	r22, X+
     a72:	7d 91       	ld	r23, X+
     a74:	8d 91       	ld	r24, X+
     a76:	9d 91       	ld	r25, X+
     a78:	bc 87       	std	Y+12, r27	; 0x0c
     a7a:	ab 87       	std	Y+11, r26	; 0x0b
     a7c:	a7 01       	movw	r20, r14
     a7e:	96 01       	movw	r18, r12
     a80:	67 d3       	rcall	.+1742   	; 0x1150 <__mulsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	69 81       	ldd	r22, Y+1	; 0x01
     a88:	7a 81       	ldd	r23, Y+2	; 0x02
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	9c 81       	ldd	r25, Y+4	; 0x04
     a8e:	89 d1       	rcall	.+786    	; 0xda2 <__subsf3>
     a90:	59 d2       	rcall	.+1202   	; 0xf44 <__fixsfsi>
     a92:	9b 01       	movw	r18, r22
     a94:	77 23       	and	r23, r23
     a96:	24 f4       	brge	.+8      	; 0xaa0 <_Z13getNoteByFreqP4Noted+0xf8>
     a98:	22 27       	eor	r18, r18
     a9a:	33 27       	eor	r19, r19
     a9c:	26 1b       	sub	r18, r22
     a9e:	37 0b       	sbc	r19, r23
     aa0:	b9 01       	movw	r22, r18
     aa2:	33 0f       	add	r19, r19
     aa4:	88 0b       	sbc	r24, r24
     aa6:	99 0b       	sbc	r25, r25
     aa8:	80 d2       	rcall	.+1280   	; 0xfaa <__floatsisf>
     aaa:	96 2e       	mov	r9, r22
     aac:	07 2f       	mov	r16, r23
     aae:	18 2f       	mov	r17, r24
     ab0:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     ab2:	27 2d       	mov	r18, r7
     ab4:	34 2d       	mov	r19, r4
     ab6:	45 2d       	mov	r20, r5
     ab8:	56 2d       	mov	r21, r6
     aba:	d8 d1       	rcall	.+944    	; 0xe6c <__cmpsf2>
     abc:	88 23       	and	r24, r24
     abe:	54 f4       	brge	.+20     	; 0xad4 <_Z13getNoteByFreqP4Noted+0x12c>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     ac0:	c1 01       	movw	r24, r2
     ac2:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     ac4:	79 2c       	mov	r7, r9
     ac6:	40 2e       	mov	r4, r16
     ac8:	51 2e       	mov	r5, r17
     aca:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     acc:	8c 30       	cpi	r24, 0x0C	; 12
     ace:	91 05       	cpc	r25, r1
     ad0:	41 f6       	brne	.-112    	; 0xa62 <_Z13getNoteByFreqP4Noted+0xba>
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <_Z13getNoteByFreqP4Noted+0x12e>
     ad4:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     ad6:	f1 01       	movw	r30, r2
     ad8:	e0 59       	subi	r30, 0x90	; 144
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	80 81       	ld	r24, Z
     ade:	ed 81       	ldd	r30, Y+5	; 0x05
     ae0:	fe 81       	ldd	r31, Y+6	; 0x06
     ae2:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     ae4:	f1 01       	movw	r30, r2
     ae6:	ec 59       	subi	r30, 0x9C	; 156
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	80 81       	ld	r24, Z
     aec:	ad 81       	ldd	r26, Y+5	; 0x05
     aee:	be 81       	ldd	r27, Y+6	; 0x06
     af0:	11 96       	adiw	r26, 0x01	; 1
     af2:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     af4:	f1 01       	movw	r30, r2
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e4 58       	subi	r30, 0x84	; 132
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	20 81       	ld	r18, Z
     b04:	31 81       	ldd	r19, Z+1	; 0x01
     b06:	42 81       	ldd	r20, Z+2	; 0x02
     b08:	53 81       	ldd	r21, Z+3	; 0x03
     b0a:	c7 01       	movw	r24, r14
     b0c:	b6 01       	movw	r22, r12
     b0e:	20 d3       	rcall	.+1600   	; 0x1150 <__mulsf3>
     b10:	2b 01       	movw	r4, r22
     b12:	3c 01       	movw	r6, r24
     b14:	ed 81       	ldd	r30, Y+5	; 0x05
     b16:	fe 81       	ldd	r31, Y+6	; 0x06
     b18:	62 83       	std	Z+2, r22	; 0x02
     b1a:	73 83       	std	Z+3, r23	; 0x03
     b1c:	84 83       	std	Z+4, r24	; 0x04
     b1e:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     b24:	fb e0       	ldi	r31, 0x0B	; 11
     b26:	2f 16       	cp	r2, r31
     b28:	31 04       	cpc	r3, r1
     b2a:	59 f4       	brne	.+22     	; 0xb42 <_Z13getNoteByFreqP4Noted+0x19a>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     b2c:	8f 81       	ldd	r24, Y+7	; 0x07
     b2e:	98 85       	ldd	r25, Y+8	; 0x08
     b30:	a9 85       	ldd	r26, Y+9	; 0x09
     b32:	ba 85       	ldd	r27, Y+10	; 0x0a
     b34:	ed 81       	ldd	r30, Y+5	; 0x05
     b36:	fe 81       	ldd	r31, Y+6	; 0x06
     b38:	82 87       	std	Z+10, r24	; 0x0a
     b3a:	93 87       	std	Z+11, r25	; 0x0b
     b3c:	a4 87       	std	Z+12, r26	; 0x0c
     b3e:	b5 87       	std	Z+13, r27	; 0x0d
     b40:	32 c0       	rjmp	.+100    	; 0xba6 <_Z13getNoteByFreqP4Noted+0x1fe>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     b42:	f1 01       	movw	r30, r2
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e0 58       	subi	r30, 0x80	; 128
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	20 81       	ld	r18, Z
     b52:	31 81       	ldd	r19, Z+1	; 0x01
     b54:	42 81       	ldd	r20, Z+2	; 0x02
     b56:	53 81       	ldd	r21, Z+3	; 0x03
     b58:	c7 01       	movw	r24, r14
     b5a:	b6 01       	movw	r22, r12
     b5c:	f9 d2       	rcall	.+1522   	; 0x1150 <__mulsf3>
     b5e:	a3 01       	movw	r20, r6
     b60:	92 01       	movw	r18, r4
     b62:	1f d1       	rcall	.+574    	; 0xda2 <__subsf3>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	5f e3       	ldi	r21, 0x3F	; 63
     b6c:	f1 d2       	rcall	.+1506   	; 0x1150 <__mulsf3>
     b6e:	a3 01       	movw	r20, r6
     b70:	92 01       	movw	r18, r4
     b72:	18 d1       	rcall	.+560    	; 0xda4 <__addsf3>
     b74:	ad 81       	ldd	r26, Y+5	; 0x05
     b76:	be 81       	ldd	r27, Y+6	; 0x06
     b78:	1a 96       	adiw	r26, 0x0a	; 10
     b7a:	6d 93       	st	X+, r22
     b7c:	7d 93       	st	X+, r23
     b7e:	8d 93       	st	X+, r24
     b80:	9c 93       	st	X, r25
     b82:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     b84:	21 14       	cp	r2, r1
     b86:	31 04       	cpc	r3, r1
     b88:	71 f4       	brne	.+28     	; 0xba6 <_Z13getNoteByFreqP4Noted+0x1fe>
		note->min_freq = MIN_FREQ*multiplier;
     b8a:	2b e9       	ldi	r18, 0x9B	; 155
     b8c:	38 e4       	ldi	r19, 0x48	; 72
     b8e:	4e e7       	ldi	r20, 0x7E	; 126
     b90:	51 e4       	ldi	r21, 0x41	; 65
     b92:	c7 01       	movw	r24, r14
     b94:	b6 01       	movw	r22, r12
     b96:	dc d2       	rcall	.+1464   	; 0x1150 <__mulsf3>
     b98:	ed 81       	ldd	r30, Y+5	; 0x05
     b9a:	fe 81       	ldd	r31, Y+6	; 0x06
     b9c:	66 83       	std	Z+6, r22	; 0x06
     b9e:	77 83       	std	Z+7, r23	; 0x07
     ba0:	80 87       	std	Z+8, r24	; 0x08
     ba2:	91 87       	std	Z+9, r25	; 0x09
     ba4:	b0 c0       	rjmp	.+352    	; 0xd06 <_Z13getNoteByFreqP4Noted+0x35e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     ba6:	f1 01       	movw	r30, r2
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	e8 58       	subi	r30, 0x88	; 136
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	42 81       	ldd	r20, Z+2	; 0x02
     bba:	53 81       	ldd	r21, Z+3	; 0x03
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	c7 d2       	rcall	.+1422   	; 0x1150 <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	eb d0       	rcall	.+470    	; 0xda2 <__subsf3>
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	5f e3       	ldi	r21, 0x3F	; 63
     bd4:	bd d2       	rcall	.+1402   	; 0x1150 <__mulsf3>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	e1 d0       	rcall	.+450    	; 0xda2 <__subsf3>
     be0:	ad 81       	ldd	r26, Y+5	; 0x05
     be2:	be 81       	ldd	r27, Y+6	; 0x06
     be4:	16 96       	adiw	r26, 0x06	; 6
     be6:	6d 93       	st	X+, r22
     be8:	7d 93       	st	X+, r23
     bea:	8d 93       	st	X+, r24
     bec:	9c 93       	st	X, r25
     bee:	19 97       	sbiw	r26, 0x09	; 9
     bf0:	8a c0       	rjmp	.+276    	; 0xd06 <_Z13getNoteByFreqP4Noted+0x35e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     bf2:	ed 81       	ldd	r30, Y+5	; 0x05
     bf4:	fe 81       	ldd	r31, Y+6	; 0x06
     bf6:	16 86       	std	Z+14, r1	; 0x0e
		return;
     bf8:	86 c0       	rjmp	.+268    	; 0xd06 <_Z13getNoteByFreqP4Noted+0x35e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     bfa:	2b e9       	ldi	r18, 0x9B	; 155
     bfc:	38 e4       	ldi	r19, 0x48	; 72
     bfe:	4e ef       	ldi	r20, 0xFE	; 254
     c00:	51 e4       	ldi	r21, 0x41	; 65
     c02:	69 81       	ldd	r22, Y+1	; 0x01
     c04:	7a 81       	ldd	r23, Y+2	; 0x02
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	9e d2       	rcall	.+1340   	; 0x1148 <__gesf2>
     c0c:	18 16       	cp	r1, r24
     c0e:	0c f4       	brge	.+2      	; 0xc12 <_Z13getNoteByFreqP4Noted+0x26a>
     c10:	04 cf       	rjmp	.-504    	; 0xa1a <_Z13getNoteByFreqP4Noted+0x72>
     c12:	8b e9       	ldi	r24, 0x9B	; 155
     c14:	98 e4       	ldi	r25, 0x48	; 72
     c16:	ae ef       	ldi	r26, 0xFE	; 254
     c18:	b1 e4       	ldi	r27, 0x41	; 65
     c1a:	8f 83       	std	Y+7, r24	; 0x07
     c1c:	98 87       	std	Y+8, r25	; 0x08
     c1e:	a9 87       	std	Y+9, r26	; 0x09
     c20:	ba 87       	std	Y+10, r27	; 0x0a
     c22:	0f 2e       	mov	r0, r31
     c24:	c1 2c       	mov	r12, r1
     c26:	d1 2c       	mov	r13, r1
     c28:	f0 e8       	ldi	r31, 0x80	; 128
     c2a:	ef 2e       	mov	r14, r31
     c2c:	ff e3       	ldi	r31, 0x3F	; 63
     c2e:	ff 2e       	mov	r15, r31
     c30:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     c32:	23 e1       	ldi	r18, 0x13	; 19
     c34:	30 ed       	ldi	r19, 0xD0	; 208
     c36:	42 e8       	ldi	r20, 0x82	; 130
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	c7 01       	movw	r24, r14
     c3c:	b6 01       	movw	r22, r12
     c3e:	88 d2       	rcall	.+1296   	; 0x1150 <__mulsf3>
     c40:	9b 01       	movw	r18, r22
     c42:	ac 01       	movw	r20, r24
     c44:	69 81       	ldd	r22, Y+1	; 0x01
     c46:	7a 81       	ldd	r23, Y+2	; 0x02
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	aa d0       	rcall	.+340    	; 0xda2 <__subsf3>
     c4e:	7a d1       	rcall	.+756    	; 0xf44 <__fixsfsi>
     c50:	9b 01       	movw	r18, r22
     c52:	77 23       	and	r23, r23
     c54:	24 f4       	brge	.+8      	; 0xc5e <_Z13getNoteByFreqP4Noted+0x2b6>
     c56:	22 27       	eor	r18, r18
     c58:	33 27       	eor	r19, r19
     c5a:	26 1b       	sub	r18, r22
     c5c:	37 0b       	sbc	r19, r23
     c5e:	b9 01       	movw	r22, r18
     c60:	33 0f       	add	r19, r19
     c62:	88 0b       	sbc	r24, r24
     c64:	99 0b       	sbc	r25, r25
     c66:	a1 d1       	rcall	.+834    	; 0xfaa <__floatsisf>
     c68:	76 2e       	mov	r7, r22
     c6a:	47 2e       	mov	r4, r23
     c6c:	58 2e       	mov	r5, r24
     c6e:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     c70:	22 e5       	ldi	r18, 0x52	; 82
     c72:	38 e4       	ldi	r19, 0x48	; 72
     c74:	4e ef       	ldi	r20, 0xFE	; 254
     c76:	53 e4       	ldi	r21, 0x43	; 67
     c78:	f9 d0       	rcall	.+498    	; 0xe6c <__cmpsf2>
     c7a:	88 23       	and	r24, r24
     c7c:	44 f4       	brge	.+16     	; 0xc8e <_Z13getNoteByFreqP4Noted+0x2e6>
     c7e:	a0 e8       	ldi	r26, 0x80	; 128
     c80:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c82:	22 24       	eor	r2, r2
     c84:	23 94       	inc	r2
     c86:	31 2c       	mov	r3, r1
     c88:	bc 87       	std	Y+12, r27	; 0x0c
     c8a:	ab 87       	std	Y+11, r26	; 0x0b
     c8c:	eb ce       	rjmp	.-554    	; 0xa64 <_Z13getNoteByFreqP4Noted+0xbc>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     c8e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_ZL10noteSharps+0xb>
     c92:	ed 81       	ldd	r30, Y+5	; 0x05
     c94:	fe 81       	ldd	r31, Y+6	; 0x06
     c96:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     c98:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZL8slopeTol>
     c9c:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     c9e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <_ZL9noteNames+0x8>
     ca2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <_ZL9noteNames+0x9>
     ca6:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <_ZL9noteNames+0xa>
     caa:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <_ZL9noteNames+0xb>
     cae:	c7 01       	movw	r24, r14
     cb0:	b6 01       	movw	r22, r12
     cb2:	4e d2       	rcall	.+1180   	; 0x1150 <__mulsf3>
     cb4:	2b 01       	movw	r4, r22
     cb6:	3c 01       	movw	r6, r24
     cb8:	ad 81       	ldd	r26, Y+5	; 0x05
     cba:	be 81       	ldd	r27, Y+6	; 0x06
     cbc:	12 96       	adiw	r26, 0x02	; 2
     cbe:	6d 93       	st	X+, r22
     cc0:	7d 93       	st	X+, r23
     cc2:	8d 93       	st	X+, r24
     cc4:	9c 93       	st	X, r25
     cc6:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	1e 96       	adiw	r26, 0x0e	; 14
     ccc:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     cce:	23 e1       	ldi	r18, 0x13	; 19
     cd0:	30 ed       	ldi	r19, 0xD0	; 208
     cd2:	42 e8       	ldi	r20, 0x82	; 130
     cd4:	51 e4       	ldi	r21, 0x41	; 65
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	3a d2       	rcall	.+1140   	; 0x1150 <__mulsf3>
     cdc:	a3 01       	movw	r20, r6
     cde:	92 01       	movw	r18, r4
     ce0:	60 d0       	rcall	.+192    	; 0xda2 <__subsf3>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	5f e3       	ldi	r21, 0x3F	; 63
     cea:	32 d2       	rcall	.+1124   	; 0x1150 <__mulsf3>
     cec:	a3 01       	movw	r20, r6
     cee:	92 01       	movw	r18, r4
     cf0:	59 d0       	rcall	.+178    	; 0xda4 <__addsf3>
     cf2:	ed 81       	ldd	r30, Y+5	; 0x05
     cf4:	fe 81       	ldd	r31, Y+6	; 0x06
     cf6:	62 87       	std	Z+10, r22	; 0x0a
     cf8:	73 87       	std	Z+11, r23	; 0x0b
     cfa:	84 87       	std	Z+12, r24	; 0x0c
     cfc:	95 87       	std	Z+13, r25	; 0x0d
     cfe:	22 24       	eor	r2, r2
     d00:	2a 94       	dec	r2
     d02:	32 2c       	mov	r3, r2
     d04:	50 cf       	rjmp	.-352    	; 0xba6 <_Z13getNoteByFreqP4Noted+0x1fe>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     d06:	2c 96       	adiw	r28, 0x0c	; 12
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	7f 90       	pop	r7
     d2c:	6f 90       	pop	r6
     d2e:	5f 90       	pop	r5
     d30:	4f 90       	pop	r4
     d32:	3f 90       	pop	r3
     d34:	2f 90       	pop	r2
     d36:	08 95       	ret

00000d38 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     d38:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     d3a:	28 b3       	in	r18, 0x18	; 24
     d3c:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     d3e:	38 b3       	in	r19, 0x18	; 24
     d40:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     d42:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     d44:	f8 94       	cli

  while (datlen--) {
     d46:	61 15       	cp	r22, r1
     d48:	71 05       	cpc	r23, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <ws2812_sendarray+0x16>
     d4c:	21 c0       	rjmp	.+66     	; 0xd90 <loop301+0x38>
     d4e:	fc 01       	movw	r30, r24
     d50:	68 0f       	add	r22, r24
     d52:	79 1f       	adc	r23, r25
    curbyte=*data++;
     d54:	91 91       	ld	r25, Z+
    
    asm volatile(
     d56:	88 e0       	ldi	r24, 0x08	; 8

00000d58 <loop301>:
     d58:	38 bb       	out	0x18, r19	; 24
     d5a:	97 ff       	sbrs	r25, 7
     d5c:	28 bb       	out	0x18, r18	; 24
     d5e:	99 0f       	add	r25, r25
     d60:	00 00       	nop
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <loop301+0xc>
     d64:	28 bb       	out	0x18, r18	; 24
     d66:	00 00       	nop
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <loop301+0x12>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <loop301+0x14>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <loop301+0x16>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <loop301+0x18>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <loop301+0x1a>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <loop301+0x1c>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <loop301+0x1e>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <loop301+0x20>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <loop301+0x22>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <loop301+0x24>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <loop301+0x26>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <loop301+0x28>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <loop301+0x2a>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <loop301+0x2c>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <loop301+0x2e>
     d86:	8a 95       	dec	r24
     d88:	39 f7       	brne	.-50     	; 0xd58 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     d8a:	e6 17       	cp	r30, r22
     d8c:	f7 07       	cpc	r31, r23
     d8e:	11 f7       	brne	.-60     	; 0xd54 <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     d90:	4f bf       	out	0x3f, r20	; 63
     d92:	08 95       	ret

00000d94 <_Z10USART_Initj>:
#include "serial.h"

void USART_Init (unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
     d94:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
     d96:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     d98:	88 e1       	ldi	r24, 0x18	; 24
     d9a:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     d9c:	8e e8       	ldi	r24, 0x8E	; 142
     d9e:	80 bd       	out	0x20, r24	; 32
     da0:	08 95       	ret

00000da2 <__subsf3>:
     da2:	50 58       	subi	r21, 0x80	; 128

00000da4 <__addsf3>:
     da4:	bb 27       	eor	r27, r27
     da6:	aa 27       	eor	r26, r26
     da8:	0e d0       	rcall	.+28     	; 0xdc6 <__addsf3x>
     daa:	94 c1       	rjmp	.+808    	; 0x10d4 <__fp_round>
     dac:	85 d1       	rcall	.+778    	; 0x10b8 <__fp_pscA>
     dae:	30 f0       	brcs	.+12     	; 0xdbc <__addsf3+0x18>
     db0:	8a d1       	rcall	.+788    	; 0x10c6 <__fp_pscB>
     db2:	20 f0       	brcs	.+8      	; 0xdbc <__addsf3+0x18>
     db4:	31 f4       	brne	.+12     	; 0xdc2 <__addsf3+0x1e>
     db6:	9f 3f       	cpi	r25, 0xFF	; 255
     db8:	11 f4       	brne	.+4      	; 0xdbe <__addsf3+0x1a>
     dba:	1e f4       	brtc	.+6      	; 0xdc2 <__addsf3+0x1e>
     dbc:	7a c1       	rjmp	.+756    	; 0x10b2 <__fp_nan>
     dbe:	0e f4       	brtc	.+2      	; 0xdc2 <__addsf3+0x1e>
     dc0:	e0 95       	com	r30
     dc2:	e7 fb       	bst	r30, 7
     dc4:	70 c1       	rjmp	.+736    	; 0x10a6 <__fp_inf>

00000dc6 <__addsf3x>:
     dc6:	e9 2f       	mov	r30, r25
     dc8:	96 d1       	rcall	.+812    	; 0x10f6 <__fp_split3>
     dca:	80 f3       	brcs	.-32     	; 0xdac <__addsf3+0x8>
     dcc:	ba 17       	cp	r27, r26
     dce:	62 07       	cpc	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	95 07       	cpc	r25, r21
     dd6:	18 f0       	brcs	.+6      	; 0xdde <__addsf3x+0x18>
     dd8:	71 f4       	brne	.+28     	; 0xdf6 <__addsf3x+0x30>
     dda:	9e f5       	brtc	.+102    	; 0xe42 <__addsf3x+0x7c>
     ddc:	ae c1       	rjmp	.+860    	; 0x113a <__fp_zero>
     dde:	0e f4       	brtc	.+2      	; 0xde2 <__addsf3x+0x1c>
     de0:	e0 95       	com	r30
     de2:	0b 2e       	mov	r0, r27
     de4:	ba 2f       	mov	r27, r26
     de6:	a0 2d       	mov	r26, r0
     de8:	0b 01       	movw	r0, r22
     dea:	b9 01       	movw	r22, r18
     dec:	90 01       	movw	r18, r0
     dee:	0c 01       	movw	r0, r24
     df0:	ca 01       	movw	r24, r20
     df2:	a0 01       	movw	r20, r0
     df4:	11 24       	eor	r1, r1
     df6:	ff 27       	eor	r31, r31
     df8:	59 1b       	sub	r21, r25
     dfa:	99 f0       	breq	.+38     	; 0xe22 <__addsf3x+0x5c>
     dfc:	59 3f       	cpi	r21, 0xF9	; 249
     dfe:	50 f4       	brcc	.+20     	; 0xe14 <__addsf3x+0x4e>
     e00:	50 3e       	cpi	r21, 0xE0	; 224
     e02:	68 f1       	brcs	.+90     	; 0xe5e <__addsf3x+0x98>
     e04:	1a 16       	cp	r1, r26
     e06:	f0 40       	sbci	r31, 0x00	; 0
     e08:	a2 2f       	mov	r26, r18
     e0a:	23 2f       	mov	r18, r19
     e0c:	34 2f       	mov	r19, r20
     e0e:	44 27       	eor	r20, r20
     e10:	58 5f       	subi	r21, 0xF8	; 248
     e12:	f3 cf       	rjmp	.-26     	; 0xdfa <__addsf3x+0x34>
     e14:	46 95       	lsr	r20
     e16:	37 95       	ror	r19
     e18:	27 95       	ror	r18
     e1a:	a7 95       	ror	r26
     e1c:	f0 40       	sbci	r31, 0x00	; 0
     e1e:	53 95       	inc	r21
     e20:	c9 f7       	brne	.-14     	; 0xe14 <__addsf3x+0x4e>
     e22:	7e f4       	brtc	.+30     	; 0xe42 <__addsf3x+0x7c>
     e24:	1f 16       	cp	r1, r31
     e26:	ba 0b       	sbc	r27, r26
     e28:	62 0b       	sbc	r22, r18
     e2a:	73 0b       	sbc	r23, r19
     e2c:	84 0b       	sbc	r24, r20
     e2e:	ba f0       	brmi	.+46     	; 0xe5e <__addsf3x+0x98>
     e30:	91 50       	subi	r25, 0x01	; 1
     e32:	a1 f0       	breq	.+40     	; 0xe5c <__addsf3x+0x96>
     e34:	ff 0f       	add	r31, r31
     e36:	bb 1f       	adc	r27, r27
     e38:	66 1f       	adc	r22, r22
     e3a:	77 1f       	adc	r23, r23
     e3c:	88 1f       	adc	r24, r24
     e3e:	c2 f7       	brpl	.-16     	; 0xe30 <__addsf3x+0x6a>
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <__addsf3x+0x98>
     e42:	ba 0f       	add	r27, r26
     e44:	62 1f       	adc	r22, r18
     e46:	73 1f       	adc	r23, r19
     e48:	84 1f       	adc	r24, r20
     e4a:	48 f4       	brcc	.+18     	; 0xe5e <__addsf3x+0x98>
     e4c:	87 95       	ror	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b7 95       	ror	r27
     e54:	f7 95       	ror	r31
     e56:	9e 3f       	cpi	r25, 0xFE	; 254
     e58:	08 f0       	brcs	.+2      	; 0xe5c <__addsf3x+0x96>
     e5a:	b3 cf       	rjmp	.-154    	; 0xdc2 <__addsf3+0x1e>
     e5c:	93 95       	inc	r25
     e5e:	88 0f       	add	r24, r24
     e60:	08 f0       	brcs	.+2      	; 0xe64 <__addsf3x+0x9e>
     e62:	99 27       	eor	r25, r25
     e64:	ee 0f       	add	r30, r30
     e66:	97 95       	ror	r25
     e68:	87 95       	ror	r24
     e6a:	08 95       	ret

00000e6c <__cmpsf2>:
     e6c:	f8 d0       	rcall	.+496    	; 0x105e <__fp_cmp>
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <__cmpsf2+0x6>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	08 95       	ret

00000e74 <__divsf3>:
     e74:	0c d0       	rcall	.+24     	; 0xe8e <__divsf3x>
     e76:	2e c1       	rjmp	.+604    	; 0x10d4 <__fp_round>
     e78:	26 d1       	rcall	.+588    	; 0x10c6 <__fp_pscB>
     e7a:	40 f0       	brcs	.+16     	; 0xe8c <__divsf3+0x18>
     e7c:	1d d1       	rcall	.+570    	; 0x10b8 <__fp_pscA>
     e7e:	30 f0       	brcs	.+12     	; 0xe8c <__divsf3+0x18>
     e80:	21 f4       	brne	.+8      	; 0xe8a <__divsf3+0x16>
     e82:	5f 3f       	cpi	r21, 0xFF	; 255
     e84:	19 f0       	breq	.+6      	; 0xe8c <__divsf3+0x18>
     e86:	0f c1       	rjmp	.+542    	; 0x10a6 <__fp_inf>
     e88:	51 11       	cpse	r21, r1
     e8a:	58 c1       	rjmp	.+688    	; 0x113c <__fp_szero>
     e8c:	12 c1       	rjmp	.+548    	; 0x10b2 <__fp_nan>

00000e8e <__divsf3x>:
     e8e:	33 d1       	rcall	.+614    	; 0x10f6 <__fp_split3>
     e90:	98 f3       	brcs	.-26     	; 0xe78 <__divsf3+0x4>

00000e92 <__divsf3_pse>:
     e92:	99 23       	and	r25, r25
     e94:	c9 f3       	breq	.-14     	; 0xe88 <__divsf3+0x14>
     e96:	55 23       	and	r21, r21
     e98:	b1 f3       	breq	.-20     	; 0xe86 <__divsf3+0x12>
     e9a:	95 1b       	sub	r25, r21
     e9c:	55 0b       	sbc	r21, r21
     e9e:	bb 27       	eor	r27, r27
     ea0:	aa 27       	eor	r26, r26
     ea2:	62 17       	cp	r22, r18
     ea4:	73 07       	cpc	r23, r19
     ea6:	84 07       	cpc	r24, r20
     ea8:	38 f0       	brcs	.+14     	; 0xeb8 <__divsf3_pse+0x26>
     eaa:	9f 5f       	subi	r25, 0xFF	; 255
     eac:	5f 4f       	sbci	r21, 0xFF	; 255
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	44 1f       	adc	r20, r20
     eb4:	aa 1f       	adc	r26, r26
     eb6:	a9 f3       	breq	.-22     	; 0xea2 <__divsf3_pse+0x10>
     eb8:	33 d0       	rcall	.+102    	; 0xf20 <__divsf3_pse+0x8e>
     eba:	0e 2e       	mov	r0, r30
     ebc:	3a f0       	brmi	.+14     	; 0xecc <__divsf3_pse+0x3a>
     ebe:	e0 e8       	ldi	r30, 0x80	; 128
     ec0:	30 d0       	rcall	.+96     	; 0xf22 <__divsf3_pse+0x90>
     ec2:	91 50       	subi	r25, 0x01	; 1
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	e6 95       	lsr	r30
     ec8:	00 1c       	adc	r0, r0
     eca:	ca f7       	brpl	.-14     	; 0xebe <__divsf3_pse+0x2c>
     ecc:	29 d0       	rcall	.+82     	; 0xf20 <__divsf3_pse+0x8e>
     ece:	fe 2f       	mov	r31, r30
     ed0:	27 d0       	rcall	.+78     	; 0xf20 <__divsf3_pse+0x8e>
     ed2:	66 0f       	add	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	88 1f       	adc	r24, r24
     ed8:	bb 1f       	adc	r27, r27
     eda:	26 17       	cp	r18, r22
     edc:	37 07       	cpc	r19, r23
     ede:	48 07       	cpc	r20, r24
     ee0:	ab 07       	cpc	r26, r27
     ee2:	b0 e8       	ldi	r27, 0x80	; 128
     ee4:	09 f0       	breq	.+2      	; 0xee8 <__divsf3_pse+0x56>
     ee6:	bb 0b       	sbc	r27, r27
     ee8:	80 2d       	mov	r24, r0
     eea:	bf 01       	movw	r22, r30
     eec:	ff 27       	eor	r31, r31
     eee:	93 58       	subi	r25, 0x83	; 131
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	2a f0       	brmi	.+10     	; 0xefe <__divsf3_pse+0x6c>
     ef4:	9e 3f       	cpi	r25, 0xFE	; 254
     ef6:	51 05       	cpc	r21, r1
     ef8:	68 f0       	brcs	.+26     	; 0xf14 <__divsf3_pse+0x82>
     efa:	d5 c0       	rjmp	.+426    	; 0x10a6 <__fp_inf>
     efc:	1f c1       	rjmp	.+574    	; 0x113c <__fp_szero>
     efe:	5f 3f       	cpi	r21, 0xFF	; 255
     f00:	ec f3       	brlt	.-6      	; 0xefc <__divsf3_pse+0x6a>
     f02:	98 3e       	cpi	r25, 0xE8	; 232
     f04:	dc f3       	brlt	.-10     	; 0xefc <__divsf3_pse+0x6a>
     f06:	86 95       	lsr	r24
     f08:	77 95       	ror	r23
     f0a:	67 95       	ror	r22
     f0c:	b7 95       	ror	r27
     f0e:	f7 95       	ror	r31
     f10:	9f 5f       	subi	r25, 0xFF	; 255
     f12:	c9 f7       	brne	.-14     	; 0xf06 <__divsf3_pse+0x74>
     f14:	88 0f       	add	r24, r24
     f16:	91 1d       	adc	r25, r1
     f18:	96 95       	lsr	r25
     f1a:	87 95       	ror	r24
     f1c:	97 f9       	bld	r25, 7
     f1e:	08 95       	ret
     f20:	e1 e0       	ldi	r30, 0x01	; 1
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	bb 1f       	adc	r27, r27
     f2a:	62 17       	cp	r22, r18
     f2c:	73 07       	cpc	r23, r19
     f2e:	84 07       	cpc	r24, r20
     f30:	ba 07       	cpc	r27, r26
     f32:	20 f0       	brcs	.+8      	; 0xf3c <__divsf3_pse+0xaa>
     f34:	62 1b       	sub	r22, r18
     f36:	73 0b       	sbc	r23, r19
     f38:	84 0b       	sbc	r24, r20
     f3a:	ba 0b       	sbc	r27, r26
     f3c:	ee 1f       	adc	r30, r30
     f3e:	88 f7       	brcc	.-30     	; 0xf22 <__divsf3_pse+0x90>
     f40:	e0 95       	com	r30
     f42:	08 95       	ret

00000f44 <__fixsfsi>:
     f44:	04 d0       	rcall	.+8      	; 0xf4e <__fixunssfsi>
     f46:	68 94       	set
     f48:	b1 11       	cpse	r27, r1
     f4a:	f8 c0       	rjmp	.+496    	; 0x113c <__fp_szero>
     f4c:	08 95       	ret

00000f4e <__fixunssfsi>:
     f4e:	db d0       	rcall	.+438    	; 0x1106 <__fp_splitA>
     f50:	88 f0       	brcs	.+34     	; 0xf74 <__fixunssfsi+0x26>
     f52:	9f 57       	subi	r25, 0x7F	; 127
     f54:	90 f0       	brcs	.+36     	; 0xf7a <__fixunssfsi+0x2c>
     f56:	b9 2f       	mov	r27, r25
     f58:	99 27       	eor	r25, r25
     f5a:	b7 51       	subi	r27, 0x17	; 23
     f5c:	a0 f0       	brcs	.+40     	; 0xf86 <__fixunssfsi+0x38>
     f5e:	d1 f0       	breq	.+52     	; 0xf94 <__fixunssfsi+0x46>
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	1a f0       	brmi	.+6      	; 0xf70 <__fixunssfsi+0x22>
     f6a:	ba 95       	dec	r27
     f6c:	c9 f7       	brne	.-14     	; 0xf60 <__fixunssfsi+0x12>
     f6e:	12 c0       	rjmp	.+36     	; 0xf94 <__fixunssfsi+0x46>
     f70:	b1 30       	cpi	r27, 0x01	; 1
     f72:	81 f0       	breq	.+32     	; 0xf94 <__fixunssfsi+0x46>
     f74:	e2 d0       	rcall	.+452    	; 0x113a <__fp_zero>
     f76:	b1 e0       	ldi	r27, 0x01	; 1
     f78:	08 95       	ret
     f7a:	df c0       	rjmp	.+446    	; 0x113a <__fp_zero>
     f7c:	67 2f       	mov	r22, r23
     f7e:	78 2f       	mov	r23, r24
     f80:	88 27       	eor	r24, r24
     f82:	b8 5f       	subi	r27, 0xF8	; 248
     f84:	39 f0       	breq	.+14     	; 0xf94 <__fixunssfsi+0x46>
     f86:	b9 3f       	cpi	r27, 0xF9	; 249
     f88:	cc f3       	brlt	.-14     	; 0xf7c <__fixunssfsi+0x2e>
     f8a:	86 95       	lsr	r24
     f8c:	77 95       	ror	r23
     f8e:	67 95       	ror	r22
     f90:	b3 95       	inc	r27
     f92:	d9 f7       	brne	.-10     	; 0xf8a <__fixunssfsi+0x3c>
     f94:	3e f4       	brtc	.+14     	; 0xfa4 <__fixunssfsi+0x56>
     f96:	90 95       	com	r25
     f98:	80 95       	com	r24
     f9a:	70 95       	com	r23
     f9c:	61 95       	neg	r22
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	08 95       	ret

00000fa6 <__floatunsisf>:
     fa6:	e8 94       	clt
     fa8:	09 c0       	rjmp	.+18     	; 0xfbc <__floatsisf+0x12>

00000faa <__floatsisf>:
     faa:	97 fb       	bst	r25, 7
     fac:	3e f4       	brtc	.+14     	; 0xfbc <__floatsisf+0x12>
     fae:	90 95       	com	r25
     fb0:	80 95       	com	r24
     fb2:	70 95       	com	r23
     fb4:	61 95       	neg	r22
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	8f 4f       	sbci	r24, 0xFF	; 255
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	99 23       	and	r25, r25
     fbe:	a9 f0       	breq	.+42     	; 0xfea <__floatsisf+0x40>
     fc0:	f9 2f       	mov	r31, r25
     fc2:	96 e9       	ldi	r25, 0x96	; 150
     fc4:	bb 27       	eor	r27, r27
     fc6:	93 95       	inc	r25
     fc8:	f6 95       	lsr	r31
     fca:	87 95       	ror	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b7 95       	ror	r27
     fd2:	f1 11       	cpse	r31, r1
     fd4:	f8 cf       	rjmp	.-16     	; 0xfc6 <__floatsisf+0x1c>
     fd6:	fa f4       	brpl	.+62     	; 0x1016 <__floatsisf+0x6c>
     fd8:	bb 0f       	add	r27, r27
     fda:	11 f4       	brne	.+4      	; 0xfe0 <__floatsisf+0x36>
     fdc:	60 ff       	sbrs	r22, 0
     fde:	1b c0       	rjmp	.+54     	; 0x1016 <__floatsisf+0x6c>
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	16 c0       	rjmp	.+44     	; 0x1016 <__floatsisf+0x6c>
     fea:	88 23       	and	r24, r24
     fec:	11 f0       	breq	.+4      	; 0xff2 <__floatsisf+0x48>
     fee:	96 e9       	ldi	r25, 0x96	; 150
     ff0:	11 c0       	rjmp	.+34     	; 0x1014 <__floatsisf+0x6a>
     ff2:	77 23       	and	r23, r23
     ff4:	21 f0       	breq	.+8      	; 0xffe <__floatsisf+0x54>
     ff6:	9e e8       	ldi	r25, 0x8E	; 142
     ff8:	87 2f       	mov	r24, r23
     ffa:	76 2f       	mov	r23, r22
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <__floatsisf+0x5e>
     ffe:	66 23       	and	r22, r22
    1000:	71 f0       	breq	.+28     	; 0x101e <__floatsisf+0x74>
    1002:	96 e8       	ldi	r25, 0x86	; 134
    1004:	86 2f       	mov	r24, r22
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	2a f0       	brmi	.+10     	; 0x1016 <__floatsisf+0x6c>
    100c:	9a 95       	dec	r25
    100e:	66 0f       	add	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	da f7       	brpl	.-10     	; 0x100c <__floatsisf+0x62>
    1016:	88 0f       	add	r24, r24
    1018:	96 95       	lsr	r25
    101a:	87 95       	ror	r24
    101c:	97 f9       	bld	r25, 7
    101e:	08 95       	ret

00001020 <fmin>:
    1020:	99 0f       	add	r25, r25
    1022:	bb 0b       	sbc	r27, r27
    1024:	55 0f       	add	r21, r21
    1026:	aa 0b       	sbc	r26, r26
    1028:	e0 e8       	ldi	r30, 0x80	; 128
    102a:	fe ef       	ldi	r31, 0xFE	; 254
    102c:	16 16       	cp	r1, r22
    102e:	17 06       	cpc	r1, r23
    1030:	e8 07       	cpc	r30, r24
    1032:	f9 07       	cpc	r31, r25
    1034:	70 f0       	brcs	.+28     	; 0x1052 <fmin+0x32>
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	e4 07       	cpc	r30, r20
    103c:	f5 07       	cpc	r31, r21
    103e:	60 f0       	brcs	.+24     	; 0x1058 <fmin+0x38>
    1040:	ba 17       	cp	r27, r26
    1042:	54 f0       	brlt	.+20     	; 0x1058 <fmin+0x38>
    1044:	31 f4       	brne	.+12     	; 0x1052 <fmin+0x32>
    1046:	26 17       	cp	r18, r22
    1048:	37 07       	cpc	r19, r23
    104a:	48 07       	cpc	r20, r24
    104c:	59 07       	cpc	r21, r25
    104e:	a7 95       	ror	r26
    1050:	1b f4       	brvc	.+6      	; 0x1058 <fmin+0x38>
    1052:	b9 01       	movw	r22, r18
    1054:	ca 01       	movw	r24, r20
    1056:	ba 2f       	mov	r27, r26
    1058:	b6 95       	lsr	r27
    105a:	97 95       	ror	r25
    105c:	08 95       	ret

0000105e <__fp_cmp>:
    105e:	99 0f       	add	r25, r25
    1060:	00 08       	sbc	r0, r0
    1062:	55 0f       	add	r21, r21
    1064:	aa 0b       	sbc	r26, r26
    1066:	e0 e8       	ldi	r30, 0x80	; 128
    1068:	fe ef       	ldi	r31, 0xFE	; 254
    106a:	16 16       	cp	r1, r22
    106c:	17 06       	cpc	r1, r23
    106e:	e8 07       	cpc	r30, r24
    1070:	f9 07       	cpc	r31, r25
    1072:	c0 f0       	brcs	.+48     	; 0x10a4 <__fp_cmp+0x46>
    1074:	12 16       	cp	r1, r18
    1076:	13 06       	cpc	r1, r19
    1078:	e4 07       	cpc	r30, r20
    107a:	f5 07       	cpc	r31, r21
    107c:	98 f0       	brcs	.+38     	; 0x10a4 <__fp_cmp+0x46>
    107e:	62 1b       	sub	r22, r18
    1080:	73 0b       	sbc	r23, r19
    1082:	84 0b       	sbc	r24, r20
    1084:	95 0b       	sbc	r25, r21
    1086:	39 f4       	brne	.+14     	; 0x1096 <__fp_cmp+0x38>
    1088:	0a 26       	eor	r0, r26
    108a:	61 f0       	breq	.+24     	; 0x10a4 <__fp_cmp+0x46>
    108c:	23 2b       	or	r18, r19
    108e:	24 2b       	or	r18, r20
    1090:	25 2b       	or	r18, r21
    1092:	21 f4       	brne	.+8      	; 0x109c <__fp_cmp+0x3e>
    1094:	08 95       	ret
    1096:	0a 26       	eor	r0, r26
    1098:	09 f4       	brne	.+2      	; 0x109c <__fp_cmp+0x3e>
    109a:	a1 40       	sbci	r26, 0x01	; 1
    109c:	a6 95       	lsr	r26
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	81 1d       	adc	r24, r1
    10a2:	81 1d       	adc	r24, r1
    10a4:	08 95       	ret

000010a6 <__fp_inf>:
    10a6:	97 f9       	bld	r25, 7
    10a8:	9f 67       	ori	r25, 0x7F	; 127
    10aa:	80 e8       	ldi	r24, 0x80	; 128
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	08 95       	ret

000010b2 <__fp_nan>:
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
    10b4:	80 ec       	ldi	r24, 0xC0	; 192
    10b6:	08 95       	ret

000010b8 <__fp_pscA>:
    10b8:	00 24       	eor	r0, r0
    10ba:	0a 94       	dec	r0
    10bc:	16 16       	cp	r1, r22
    10be:	17 06       	cpc	r1, r23
    10c0:	18 06       	cpc	r1, r24
    10c2:	09 06       	cpc	r0, r25
    10c4:	08 95       	ret

000010c6 <__fp_pscB>:
    10c6:	00 24       	eor	r0, r0
    10c8:	0a 94       	dec	r0
    10ca:	12 16       	cp	r1, r18
    10cc:	13 06       	cpc	r1, r19
    10ce:	14 06       	cpc	r1, r20
    10d0:	05 06       	cpc	r0, r21
    10d2:	08 95       	ret

000010d4 <__fp_round>:
    10d4:	09 2e       	mov	r0, r25
    10d6:	03 94       	inc	r0
    10d8:	00 0c       	add	r0, r0
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__fp_round+0xc>
    10dc:	88 23       	and	r24, r24
    10de:	52 f0       	brmi	.+20     	; 0x10f4 <__fp_round+0x20>
    10e0:	bb 0f       	add	r27, r27
    10e2:	40 f4       	brcc	.+16     	; 0x10f4 <__fp_round+0x20>
    10e4:	bf 2b       	or	r27, r31
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__fp_round+0x18>
    10e8:	60 ff       	sbrs	r22, 0
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <__fp_round+0x20>
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__fp_split3>:
    10f6:	57 fd       	sbrc	r21, 7
    10f8:	90 58       	subi	r25, 0x80	; 128
    10fa:	44 0f       	add	r20, r20
    10fc:	55 1f       	adc	r21, r21
    10fe:	59 f0       	breq	.+22     	; 0x1116 <__fp_splitA+0x10>
    1100:	5f 3f       	cpi	r21, 0xFF	; 255
    1102:	71 f0       	breq	.+28     	; 0x1120 <__fp_splitA+0x1a>
    1104:	47 95       	ror	r20

00001106 <__fp_splitA>:
    1106:	88 0f       	add	r24, r24
    1108:	97 fb       	bst	r25, 7
    110a:	99 1f       	adc	r25, r25
    110c:	61 f0       	breq	.+24     	; 0x1126 <__fp_splitA+0x20>
    110e:	9f 3f       	cpi	r25, 0xFF	; 255
    1110:	79 f0       	breq	.+30     	; 0x1130 <__fp_splitA+0x2a>
    1112:	87 95       	ror	r24
    1114:	08 95       	ret
    1116:	12 16       	cp	r1, r18
    1118:	13 06       	cpc	r1, r19
    111a:	14 06       	cpc	r1, r20
    111c:	55 1f       	adc	r21, r21
    111e:	f2 cf       	rjmp	.-28     	; 0x1104 <__fp_split3+0xe>
    1120:	46 95       	lsr	r20
    1122:	f1 df       	rcall	.-30     	; 0x1106 <__fp_splitA>
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <__fp_splitA+0x30>
    1126:	16 16       	cp	r1, r22
    1128:	17 06       	cpc	r1, r23
    112a:	18 06       	cpc	r1, r24
    112c:	99 1f       	adc	r25, r25
    112e:	f1 cf       	rjmp	.-30     	; 0x1112 <__fp_splitA+0xc>
    1130:	86 95       	lsr	r24
    1132:	71 05       	cpc	r23, r1
    1134:	61 05       	cpc	r22, r1
    1136:	08 94       	sec
    1138:	08 95       	ret

0000113a <__fp_zero>:
    113a:	e8 94       	clt

0000113c <__fp_szero>:
    113c:	bb 27       	eor	r27, r27
    113e:	66 27       	eor	r22, r22
    1140:	77 27       	eor	r23, r23
    1142:	cb 01       	movw	r24, r22
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__gesf2>:
    1148:	8a df       	rcall	.-236    	; 0x105e <__fp_cmp>
    114a:	08 f4       	brcc	.+2      	; 0x114e <__gesf2+0x6>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	08 95       	ret

00001150 <__mulsf3>:
    1150:	0b d0       	rcall	.+22     	; 0x1168 <__mulsf3x>
    1152:	c0 cf       	rjmp	.-128    	; 0x10d4 <__fp_round>
    1154:	b1 df       	rcall	.-158    	; 0x10b8 <__fp_pscA>
    1156:	28 f0       	brcs	.+10     	; 0x1162 <__mulsf3+0x12>
    1158:	b6 df       	rcall	.-148    	; 0x10c6 <__fp_pscB>
    115a:	18 f0       	brcs	.+6      	; 0x1162 <__mulsf3+0x12>
    115c:	95 23       	and	r25, r21
    115e:	09 f0       	breq	.+2      	; 0x1162 <__mulsf3+0x12>
    1160:	a2 cf       	rjmp	.-188    	; 0x10a6 <__fp_inf>
    1162:	a7 cf       	rjmp	.-178    	; 0x10b2 <__fp_nan>
    1164:	11 24       	eor	r1, r1
    1166:	ea cf       	rjmp	.-44     	; 0x113c <__fp_szero>

00001168 <__mulsf3x>:
    1168:	c6 df       	rcall	.-116    	; 0x10f6 <__fp_split3>
    116a:	a0 f3       	brcs	.-24     	; 0x1154 <__mulsf3+0x4>

0000116c <__mulsf3_pse>:
    116c:	95 9f       	mul	r25, r21
    116e:	d1 f3       	breq	.-12     	; 0x1164 <__mulsf3+0x14>
    1170:	95 0f       	add	r25, r21
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	55 1f       	adc	r21, r21
    1176:	62 9f       	mul	r22, r18
    1178:	f0 01       	movw	r30, r0
    117a:	72 9f       	mul	r23, r18
    117c:	bb 27       	eor	r27, r27
    117e:	f0 0d       	add	r31, r0
    1180:	b1 1d       	adc	r27, r1
    1182:	63 9f       	mul	r22, r19
    1184:	aa 27       	eor	r26, r26
    1186:	f0 0d       	add	r31, r0
    1188:	b1 1d       	adc	r27, r1
    118a:	aa 1f       	adc	r26, r26
    118c:	64 9f       	mul	r22, r20
    118e:	66 27       	eor	r22, r22
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	66 1f       	adc	r22, r22
    1196:	82 9f       	mul	r24, r18
    1198:	22 27       	eor	r18, r18
    119a:	b0 0d       	add	r27, r0
    119c:	a1 1d       	adc	r26, r1
    119e:	62 1f       	adc	r22, r18
    11a0:	73 9f       	mul	r23, r19
    11a2:	b0 0d       	add	r27, r0
    11a4:	a1 1d       	adc	r26, r1
    11a6:	62 1f       	adc	r22, r18
    11a8:	83 9f       	mul	r24, r19
    11aa:	a0 0d       	add	r26, r0
    11ac:	61 1d       	adc	r22, r1
    11ae:	22 1f       	adc	r18, r18
    11b0:	74 9f       	mul	r23, r20
    11b2:	33 27       	eor	r19, r19
    11b4:	a0 0d       	add	r26, r0
    11b6:	61 1d       	adc	r22, r1
    11b8:	23 1f       	adc	r18, r19
    11ba:	84 9f       	mul	r24, r20
    11bc:	60 0d       	add	r22, r0
    11be:	21 1d       	adc	r18, r1
    11c0:	82 2f       	mov	r24, r18
    11c2:	76 2f       	mov	r23, r22
    11c4:	6a 2f       	mov	r22, r26
    11c6:	11 24       	eor	r1, r1
    11c8:	9f 57       	subi	r25, 0x7F	; 127
    11ca:	50 40       	sbci	r21, 0x00	; 0
    11cc:	8a f0       	brmi	.+34     	; 0x11f0 <__mulsf3_pse+0x84>
    11ce:	e1 f0       	breq	.+56     	; 0x1208 <__mulsf3_pse+0x9c>
    11d0:	88 23       	and	r24, r24
    11d2:	4a f0       	brmi	.+18     	; 0x11e6 <__mulsf3_pse+0x7a>
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	bb 1f       	adc	r27, r27
    11da:	66 1f       	adc	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	91 50       	subi	r25, 0x01	; 1
    11e2:	50 40       	sbci	r21, 0x00	; 0
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <__mulsf3_pse+0x64>
    11e6:	9e 3f       	cpi	r25, 0xFE	; 254
    11e8:	51 05       	cpc	r21, r1
    11ea:	70 f0       	brcs	.+28     	; 0x1208 <__mulsf3_pse+0x9c>
    11ec:	5c cf       	rjmp	.-328    	; 0x10a6 <__fp_inf>
    11ee:	a6 cf       	rjmp	.-180    	; 0x113c <__fp_szero>
    11f0:	5f 3f       	cpi	r21, 0xFF	; 255
    11f2:	ec f3       	brlt	.-6      	; 0x11ee <__mulsf3_pse+0x82>
    11f4:	98 3e       	cpi	r25, 0xE8	; 232
    11f6:	dc f3       	brlt	.-10     	; 0x11ee <__mulsf3_pse+0x82>
    11f8:	86 95       	lsr	r24
    11fa:	77 95       	ror	r23
    11fc:	67 95       	ror	r22
    11fe:	b7 95       	ror	r27
    1200:	f7 95       	ror	r31
    1202:	e7 95       	ror	r30
    1204:	9f 5f       	subi	r25, 0xFF	; 255
    1206:	c1 f7       	brne	.-16     	; 0x11f8 <__mulsf3_pse+0x8c>
    1208:	fe 2b       	or	r31, r30
    120a:	88 0f       	add	r24, r24
    120c:	91 1d       	adc	r25, r1
    120e:	96 95       	lsr	r25
    1210:	87 95       	ror	r24
    1212:	97 f9       	bld	r25, 7
    1214:	08 95       	ret

00001216 <__tablejump2__>:
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	05 90       	lpm	r0, Z+
    121c:	f4 91       	lpm	r31, Z
    121e:	e0 2d       	mov	r30, r0
    1220:	09 94       	ijmp

00001222 <vfprintf>:
    1222:	ab e0       	ldi	r26, 0x0B	; 11
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e6 e1       	ldi	r30, 0x16	; 22
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	7d c2       	rjmp	.+1274   	; 0x1726 <__prologue_saves__>
    122c:	6c 01       	movw	r12, r24
    122e:	7b 01       	movw	r14, r22
    1230:	8a 01       	movw	r16, r20
    1232:	fc 01       	movw	r30, r24
    1234:	17 82       	std	Z+7, r1	; 0x07
    1236:	16 82       	std	Z+6, r1	; 0x06
    1238:	83 81       	ldd	r24, Z+3	; 0x03
    123a:	81 ff       	sbrs	r24, 1
    123c:	bf c1       	rjmp	.+894    	; 0x15bc <vfprintf+0x39a>
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	3c 01       	movw	r6, r24
    1244:	f6 01       	movw	r30, r12
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	f7 01       	movw	r30, r14
    124a:	93 fd       	sbrc	r25, 3
    124c:	85 91       	lpm	r24, Z+
    124e:	93 ff       	sbrs	r25, 3
    1250:	81 91       	ld	r24, Z+
    1252:	7f 01       	movw	r14, r30
    1254:	88 23       	and	r24, r24
    1256:	09 f4       	brne	.+2      	; 0x125a <vfprintf+0x38>
    1258:	ad c1       	rjmp	.+858    	; 0x15b4 <vfprintf+0x392>
    125a:	85 32       	cpi	r24, 0x25	; 37
    125c:	39 f4       	brne	.+14     	; 0x126c <vfprintf+0x4a>
    125e:	93 fd       	sbrc	r25, 3
    1260:	85 91       	lpm	r24, Z+
    1262:	93 ff       	sbrs	r25, 3
    1264:	81 91       	ld	r24, Z+
    1266:	7f 01       	movw	r14, r30
    1268:	85 32       	cpi	r24, 0x25	; 37
    126a:	21 f4       	brne	.+8      	; 0x1274 <vfprintf+0x52>
    126c:	b6 01       	movw	r22, r12
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	c0 d1       	rcall	.+896    	; 0x15f2 <fputc>
    1272:	e8 cf       	rjmp	.-48     	; 0x1244 <vfprintf+0x22>
    1274:	91 2c       	mov	r9, r1
    1276:	21 2c       	mov	r2, r1
    1278:	31 2c       	mov	r3, r1
    127a:	ff e1       	ldi	r31, 0x1F	; 31
    127c:	f3 15       	cp	r31, r3
    127e:	d8 f0       	brcs	.+54     	; 0x12b6 <vfprintf+0x94>
    1280:	8b 32       	cpi	r24, 0x2B	; 43
    1282:	79 f0       	breq	.+30     	; 0x12a2 <vfprintf+0x80>
    1284:	38 f4       	brcc	.+14     	; 0x1294 <vfprintf+0x72>
    1286:	80 32       	cpi	r24, 0x20	; 32
    1288:	79 f0       	breq	.+30     	; 0x12a8 <vfprintf+0x86>
    128a:	83 32       	cpi	r24, 0x23	; 35
    128c:	a1 f4       	brne	.+40     	; 0x12b6 <vfprintf+0x94>
    128e:	23 2d       	mov	r18, r3
    1290:	20 61       	ori	r18, 0x10	; 16
    1292:	1d c0       	rjmp	.+58     	; 0x12ce <vfprintf+0xac>
    1294:	8d 32       	cpi	r24, 0x2D	; 45
    1296:	61 f0       	breq	.+24     	; 0x12b0 <vfprintf+0x8e>
    1298:	80 33       	cpi	r24, 0x30	; 48
    129a:	69 f4       	brne	.+26     	; 0x12b6 <vfprintf+0x94>
    129c:	23 2d       	mov	r18, r3
    129e:	21 60       	ori	r18, 0x01	; 1
    12a0:	16 c0       	rjmp	.+44     	; 0x12ce <vfprintf+0xac>
    12a2:	83 2d       	mov	r24, r3
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	38 2e       	mov	r3, r24
    12a8:	e3 2d       	mov	r30, r3
    12aa:	e4 60       	ori	r30, 0x04	; 4
    12ac:	3e 2e       	mov	r3, r30
    12ae:	2a c0       	rjmp	.+84     	; 0x1304 <vfprintf+0xe2>
    12b0:	f3 2d       	mov	r31, r3
    12b2:	f8 60       	ori	r31, 0x08	; 8
    12b4:	1d c0       	rjmp	.+58     	; 0x12f0 <vfprintf+0xce>
    12b6:	37 fc       	sbrc	r3, 7
    12b8:	2d c0       	rjmp	.+90     	; 0x1314 <vfprintf+0xf2>
    12ba:	20 ed       	ldi	r18, 0xD0	; 208
    12bc:	28 0f       	add	r18, r24
    12be:	2a 30       	cpi	r18, 0x0A	; 10
    12c0:	40 f0       	brcs	.+16     	; 0x12d2 <vfprintf+0xb0>
    12c2:	8e 32       	cpi	r24, 0x2E	; 46
    12c4:	b9 f4       	brne	.+46     	; 0x12f4 <vfprintf+0xd2>
    12c6:	36 fc       	sbrc	r3, 6
    12c8:	75 c1       	rjmp	.+746    	; 0x15b4 <vfprintf+0x392>
    12ca:	23 2d       	mov	r18, r3
    12cc:	20 64       	ori	r18, 0x40	; 64
    12ce:	32 2e       	mov	r3, r18
    12d0:	19 c0       	rjmp	.+50     	; 0x1304 <vfprintf+0xe2>
    12d2:	36 fe       	sbrs	r3, 6
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <vfprintf+0xc0>
    12d6:	8a e0       	ldi	r24, 0x0A	; 10
    12d8:	98 9e       	mul	r9, r24
    12da:	20 0d       	add	r18, r0
    12dc:	11 24       	eor	r1, r1
    12de:	92 2e       	mov	r9, r18
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <vfprintf+0xe2>
    12e2:	ea e0       	ldi	r30, 0x0A	; 10
    12e4:	2e 9e       	mul	r2, r30
    12e6:	20 0d       	add	r18, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	22 2e       	mov	r2, r18
    12ec:	f3 2d       	mov	r31, r3
    12ee:	f0 62       	ori	r31, 0x20	; 32
    12f0:	3f 2e       	mov	r3, r31
    12f2:	08 c0       	rjmp	.+16     	; 0x1304 <vfprintf+0xe2>
    12f4:	8c 36       	cpi	r24, 0x6C	; 108
    12f6:	21 f4       	brne	.+8      	; 0x1300 <vfprintf+0xde>
    12f8:	83 2d       	mov	r24, r3
    12fa:	80 68       	ori	r24, 0x80	; 128
    12fc:	38 2e       	mov	r3, r24
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <vfprintf+0xe2>
    1300:	88 36       	cpi	r24, 0x68	; 104
    1302:	41 f4       	brne	.+16     	; 0x1314 <vfprintf+0xf2>
    1304:	f7 01       	movw	r30, r14
    1306:	93 fd       	sbrc	r25, 3
    1308:	85 91       	lpm	r24, Z+
    130a:	93 ff       	sbrs	r25, 3
    130c:	81 91       	ld	r24, Z+
    130e:	7f 01       	movw	r14, r30
    1310:	81 11       	cpse	r24, r1
    1312:	b3 cf       	rjmp	.-154    	; 0x127a <vfprintf+0x58>
    1314:	98 2f       	mov	r25, r24
    1316:	9f 7d       	andi	r25, 0xDF	; 223
    1318:	95 54       	subi	r25, 0x45	; 69
    131a:	93 30       	cpi	r25, 0x03	; 3
    131c:	28 f4       	brcc	.+10     	; 0x1328 <vfprintf+0x106>
    131e:	0c 5f       	subi	r16, 0xFC	; 252
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	9f e3       	ldi	r25, 0x3F	; 63
    1324:	99 83       	std	Y+1, r25	; 0x01
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <vfprintf+0x120>
    1328:	83 36       	cpi	r24, 0x63	; 99
    132a:	31 f0       	breq	.+12     	; 0x1338 <vfprintf+0x116>
    132c:	83 37       	cpi	r24, 0x73	; 115
    132e:	71 f0       	breq	.+28     	; 0x134c <vfprintf+0x12a>
    1330:	83 35       	cpi	r24, 0x53	; 83
    1332:	09 f0       	breq	.+2      	; 0x1336 <vfprintf+0x114>
    1334:	55 c0       	rjmp	.+170    	; 0x13e0 <vfprintf+0x1be>
    1336:	20 c0       	rjmp	.+64     	; 0x1378 <vfprintf+0x156>
    1338:	f8 01       	movw	r30, r16
    133a:	80 81       	ld	r24, Z
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	0e 5f       	subi	r16, 0xFE	; 254
    1340:	1f 4f       	sbci	r17, 0xFF	; 255
    1342:	88 24       	eor	r8, r8
    1344:	83 94       	inc	r8
    1346:	91 2c       	mov	r9, r1
    1348:	53 01       	movw	r10, r6
    134a:	12 c0       	rjmp	.+36     	; 0x1370 <vfprintf+0x14e>
    134c:	28 01       	movw	r4, r16
    134e:	f2 e0       	ldi	r31, 0x02	; 2
    1350:	4f 0e       	add	r4, r31
    1352:	51 1c       	adc	r5, r1
    1354:	f8 01       	movw	r30, r16
    1356:	a0 80       	ld	r10, Z
    1358:	b1 80       	ldd	r11, Z+1	; 0x01
    135a:	36 fe       	sbrs	r3, 6
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <vfprintf+0x142>
    135e:	69 2d       	mov	r22, r9
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x146>
    1364:	6f ef       	ldi	r22, 0xFF	; 255
    1366:	7f ef       	ldi	r23, 0xFF	; 255
    1368:	c5 01       	movw	r24, r10
    136a:	38 d1       	rcall	.+624    	; 0x15dc <strnlen>
    136c:	4c 01       	movw	r8, r24
    136e:	82 01       	movw	r16, r4
    1370:	f3 2d       	mov	r31, r3
    1372:	ff 77       	andi	r31, 0x7F	; 127
    1374:	3f 2e       	mov	r3, r31
    1376:	15 c0       	rjmp	.+42     	; 0x13a2 <vfprintf+0x180>
    1378:	28 01       	movw	r4, r16
    137a:	22 e0       	ldi	r18, 0x02	; 2
    137c:	42 0e       	add	r4, r18
    137e:	51 1c       	adc	r5, r1
    1380:	f8 01       	movw	r30, r16
    1382:	a0 80       	ld	r10, Z
    1384:	b1 80       	ldd	r11, Z+1	; 0x01
    1386:	36 fe       	sbrs	r3, 6
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfprintf+0x16e>
    138a:	69 2d       	mov	r22, r9
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x172>
    1390:	6f ef       	ldi	r22, 0xFF	; 255
    1392:	7f ef       	ldi	r23, 0xFF	; 255
    1394:	c5 01       	movw	r24, r10
    1396:	17 d1       	rcall	.+558    	; 0x15c6 <strnlen_P>
    1398:	4c 01       	movw	r8, r24
    139a:	f3 2d       	mov	r31, r3
    139c:	f0 68       	ori	r31, 0x80	; 128
    139e:	3f 2e       	mov	r3, r31
    13a0:	82 01       	movw	r16, r4
    13a2:	33 fc       	sbrc	r3, 3
    13a4:	19 c0       	rjmp	.+50     	; 0x13d8 <vfprintf+0x1b6>
    13a6:	82 2d       	mov	r24, r2
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	88 16       	cp	r8, r24
    13ac:	99 06       	cpc	r9, r25
    13ae:	a0 f4       	brcc	.+40     	; 0x13d8 <vfprintf+0x1b6>
    13b0:	b6 01       	movw	r22, r12
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	1d d1       	rcall	.+570    	; 0x15f2 <fputc>
    13b8:	2a 94       	dec	r2
    13ba:	f5 cf       	rjmp	.-22     	; 0x13a6 <vfprintf+0x184>
    13bc:	f5 01       	movw	r30, r10
    13be:	37 fc       	sbrc	r3, 7
    13c0:	85 91       	lpm	r24, Z+
    13c2:	37 fe       	sbrs	r3, 7
    13c4:	81 91       	ld	r24, Z+
    13c6:	5f 01       	movw	r10, r30
    13c8:	b6 01       	movw	r22, r12
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	12 d1       	rcall	.+548    	; 0x15f2 <fputc>
    13ce:	21 10       	cpse	r2, r1
    13d0:	2a 94       	dec	r2
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	82 1a       	sub	r8, r18
    13d6:	91 08       	sbc	r9, r1
    13d8:	81 14       	cp	r8, r1
    13da:	91 04       	cpc	r9, r1
    13dc:	79 f7       	brne	.-34     	; 0x13bc <vfprintf+0x19a>
    13de:	e1 c0       	rjmp	.+450    	; 0x15a2 <vfprintf+0x380>
    13e0:	84 36       	cpi	r24, 0x64	; 100
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <vfprintf+0x1c6>
    13e4:	89 36       	cpi	r24, 0x69	; 105
    13e6:	39 f5       	brne	.+78     	; 0x1436 <vfprintf+0x214>
    13e8:	f8 01       	movw	r30, r16
    13ea:	37 fe       	sbrs	r3, 7
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <vfprintf+0x1da>
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	0c 5f       	subi	r16, 0xFC	; 252
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	08 c0       	rjmp	.+16     	; 0x140c <vfprintf+0x1ea>
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	07 2e       	mov	r0, r23
    1402:	00 0c       	add	r0, r0
    1404:	88 0b       	sbc	r24, r24
    1406:	99 0b       	sbc	r25, r25
    1408:	0e 5f       	subi	r16, 0xFE	; 254
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	f3 2d       	mov	r31, r3
    140e:	ff 76       	andi	r31, 0x6F	; 111
    1410:	3f 2e       	mov	r3, r31
    1412:	97 ff       	sbrs	r25, 7
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <vfprintf+0x206>
    1416:	90 95       	com	r25
    1418:	80 95       	com	r24
    141a:	70 95       	com	r23
    141c:	61 95       	neg	r22
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	f0 68       	ori	r31, 0x80	; 128
    1426:	3f 2e       	mov	r3, r31
    1428:	2a e0       	ldi	r18, 0x0A	; 10
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	a3 01       	movw	r20, r6
    142e:	1d d1       	rcall	.+570    	; 0x166a <__ultoa_invert>
    1430:	88 2e       	mov	r8, r24
    1432:	86 18       	sub	r8, r6
    1434:	44 c0       	rjmp	.+136    	; 0x14be <vfprintf+0x29c>
    1436:	85 37       	cpi	r24, 0x75	; 117
    1438:	31 f4       	brne	.+12     	; 0x1446 <vfprintf+0x224>
    143a:	23 2d       	mov	r18, r3
    143c:	2f 7e       	andi	r18, 0xEF	; 239
    143e:	b2 2e       	mov	r11, r18
    1440:	2a e0       	ldi	r18, 0x0A	; 10
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	25 c0       	rjmp	.+74     	; 0x1490 <vfprintf+0x26e>
    1446:	93 2d       	mov	r25, r3
    1448:	99 7f       	andi	r25, 0xF9	; 249
    144a:	b9 2e       	mov	r11, r25
    144c:	8f 36       	cpi	r24, 0x6F	; 111
    144e:	c1 f0       	breq	.+48     	; 0x1480 <vfprintf+0x25e>
    1450:	18 f4       	brcc	.+6      	; 0x1458 <vfprintf+0x236>
    1452:	88 35       	cpi	r24, 0x58	; 88
    1454:	79 f0       	breq	.+30     	; 0x1474 <vfprintf+0x252>
    1456:	ae c0       	rjmp	.+348    	; 0x15b4 <vfprintf+0x392>
    1458:	80 37       	cpi	r24, 0x70	; 112
    145a:	19 f0       	breq	.+6      	; 0x1462 <vfprintf+0x240>
    145c:	88 37       	cpi	r24, 0x78	; 120
    145e:	21 f0       	breq	.+8      	; 0x1468 <vfprintf+0x246>
    1460:	a9 c0       	rjmp	.+338    	; 0x15b4 <vfprintf+0x392>
    1462:	e9 2f       	mov	r30, r25
    1464:	e0 61       	ori	r30, 0x10	; 16
    1466:	be 2e       	mov	r11, r30
    1468:	b4 fe       	sbrs	r11, 4
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <vfprintf+0x264>
    146c:	fb 2d       	mov	r31, r11
    146e:	f4 60       	ori	r31, 0x04	; 4
    1470:	bf 2e       	mov	r11, r31
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <vfprintf+0x264>
    1474:	34 fe       	sbrs	r3, 4
    1476:	0a c0       	rjmp	.+20     	; 0x148c <vfprintf+0x26a>
    1478:	29 2f       	mov	r18, r25
    147a:	26 60       	ori	r18, 0x06	; 6
    147c:	b2 2e       	mov	r11, r18
    147e:	06 c0       	rjmp	.+12     	; 0x148c <vfprintf+0x26a>
    1480:	28 e0       	ldi	r18, 0x08	; 8
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <vfprintf+0x26e>
    1486:	20 e1       	ldi	r18, 0x10	; 16
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <vfprintf+0x26e>
    148c:	20 e1       	ldi	r18, 0x10	; 16
    148e:	32 e0       	ldi	r19, 0x02	; 2
    1490:	f8 01       	movw	r30, r16
    1492:	b7 fe       	sbrs	r11, 7
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <vfprintf+0x282>
    1496:	60 81       	ld	r22, Z
    1498:	71 81       	ldd	r23, Z+1	; 0x01
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	0c 5f       	subi	r16, 0xFC	; 252
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <vfprintf+0x28e>
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 5f       	subi	r16, 0xFE	; 254
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	a3 01       	movw	r20, r6
    14b2:	db d0       	rcall	.+438    	; 0x166a <__ultoa_invert>
    14b4:	88 2e       	mov	r8, r24
    14b6:	86 18       	sub	r8, r6
    14b8:	fb 2d       	mov	r31, r11
    14ba:	ff 77       	andi	r31, 0x7F	; 127
    14bc:	3f 2e       	mov	r3, r31
    14be:	36 fe       	sbrs	r3, 6
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <vfprintf+0x2ba>
    14c2:	23 2d       	mov	r18, r3
    14c4:	2e 7f       	andi	r18, 0xFE	; 254
    14c6:	a2 2e       	mov	r10, r18
    14c8:	89 14       	cp	r8, r9
    14ca:	58 f4       	brcc	.+22     	; 0x14e2 <vfprintf+0x2c0>
    14cc:	34 fe       	sbrs	r3, 4
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <vfprintf+0x2c4>
    14d0:	32 fc       	sbrc	r3, 2
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <vfprintf+0x2c4>
    14d4:	83 2d       	mov	r24, r3
    14d6:	8e 7e       	andi	r24, 0xEE	; 238
    14d8:	a8 2e       	mov	r10, r24
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <vfprintf+0x2c4>
    14dc:	b8 2c       	mov	r11, r8
    14de:	a3 2c       	mov	r10, r3
    14e0:	03 c0       	rjmp	.+6      	; 0x14e8 <vfprintf+0x2c6>
    14e2:	b8 2c       	mov	r11, r8
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x2c6>
    14e6:	b9 2c       	mov	r11, r9
    14e8:	a4 fe       	sbrs	r10, 4
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <vfprintf+0x2e8>
    14ec:	fe 01       	movw	r30, r28
    14ee:	e8 0d       	add	r30, r8
    14f0:	f1 1d       	adc	r31, r1
    14f2:	80 81       	ld	r24, Z
    14f4:	80 33       	cpi	r24, 0x30	; 48
    14f6:	21 f4       	brne	.+8      	; 0x1500 <vfprintf+0x2de>
    14f8:	9a 2d       	mov	r25, r10
    14fa:	99 7e       	andi	r25, 0xE9	; 233
    14fc:	a9 2e       	mov	r10, r25
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <vfprintf+0x2f0>
    1500:	a2 fe       	sbrs	r10, 2
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <vfprintf+0x2ee>
    1504:	b3 94       	inc	r11
    1506:	b3 94       	inc	r11
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <vfprintf+0x2f0>
    150a:	8a 2d       	mov	r24, r10
    150c:	86 78       	andi	r24, 0x86	; 134
    150e:	09 f0       	breq	.+2      	; 0x1512 <vfprintf+0x2f0>
    1510:	b3 94       	inc	r11
    1512:	a3 fc       	sbrc	r10, 3
    1514:	10 c0       	rjmp	.+32     	; 0x1536 <vfprintf+0x314>
    1516:	a0 fe       	sbrs	r10, 0
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <vfprintf+0x304>
    151a:	b2 14       	cp	r11, r2
    151c:	80 f4       	brcc	.+32     	; 0x153e <vfprintf+0x31c>
    151e:	28 0c       	add	r2, r8
    1520:	92 2c       	mov	r9, r2
    1522:	9b 18       	sub	r9, r11
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <vfprintf+0x31e>
    1526:	b2 14       	cp	r11, r2
    1528:	58 f4       	brcc	.+22     	; 0x1540 <vfprintf+0x31e>
    152a:	b6 01       	movw	r22, r12
    152c:	80 e2       	ldi	r24, 0x20	; 32
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	60 d0       	rcall	.+192    	; 0x15f2 <fputc>
    1532:	b3 94       	inc	r11
    1534:	f8 cf       	rjmp	.-16     	; 0x1526 <vfprintf+0x304>
    1536:	b2 14       	cp	r11, r2
    1538:	18 f4       	brcc	.+6      	; 0x1540 <vfprintf+0x31e>
    153a:	2b 18       	sub	r2, r11
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x320>
    153e:	98 2c       	mov	r9, r8
    1540:	21 2c       	mov	r2, r1
    1542:	a4 fe       	sbrs	r10, 4
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <vfprintf+0x342>
    1546:	b6 01       	movw	r22, r12
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	52 d0       	rcall	.+164    	; 0x15f2 <fputc>
    154e:	a2 fe       	sbrs	r10, 2
    1550:	16 c0       	rjmp	.+44     	; 0x157e <vfprintf+0x35c>
    1552:	a1 fc       	sbrc	r10, 1
    1554:	03 c0       	rjmp	.+6      	; 0x155c <vfprintf+0x33a>
    1556:	88 e7       	ldi	r24, 0x78	; 120
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <vfprintf+0x33e>
    155c:	88 e5       	ldi	r24, 0x58	; 88
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	b6 01       	movw	r22, r12
    1562:	0c c0       	rjmp	.+24     	; 0x157c <vfprintf+0x35a>
    1564:	8a 2d       	mov	r24, r10
    1566:	86 78       	andi	r24, 0x86	; 134
    1568:	51 f0       	breq	.+20     	; 0x157e <vfprintf+0x35c>
    156a:	a1 fe       	sbrs	r10, 1
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x350>
    156e:	8b e2       	ldi	r24, 0x2B	; 43
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <vfprintf+0x352>
    1572:	80 e2       	ldi	r24, 0x20	; 32
    1574:	a7 fc       	sbrc	r10, 7
    1576:	8d e2       	ldi	r24, 0x2D	; 45
    1578:	b6 01       	movw	r22, r12
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	3a d0       	rcall	.+116    	; 0x15f2 <fputc>
    157e:	89 14       	cp	r8, r9
    1580:	30 f4       	brcc	.+12     	; 0x158e <vfprintf+0x36c>
    1582:	b6 01       	movw	r22, r12
    1584:	80 e3       	ldi	r24, 0x30	; 48
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	34 d0       	rcall	.+104    	; 0x15f2 <fputc>
    158a:	9a 94       	dec	r9
    158c:	f8 cf       	rjmp	.-16     	; 0x157e <vfprintf+0x35c>
    158e:	8a 94       	dec	r8
    1590:	f3 01       	movw	r30, r6
    1592:	e8 0d       	add	r30, r8
    1594:	f1 1d       	adc	r31, r1
    1596:	80 81       	ld	r24, Z
    1598:	b6 01       	movw	r22, r12
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	2a d0       	rcall	.+84     	; 0x15f2 <fputc>
    159e:	81 10       	cpse	r8, r1
    15a0:	f6 cf       	rjmp	.-20     	; 0x158e <vfprintf+0x36c>
    15a2:	22 20       	and	r2, r2
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <vfprintf+0x386>
    15a6:	4e ce       	rjmp	.-868    	; 0x1244 <vfprintf+0x22>
    15a8:	b6 01       	movw	r22, r12
    15aa:	80 e2       	ldi	r24, 0x20	; 32
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	21 d0       	rcall	.+66     	; 0x15f2 <fputc>
    15b0:	2a 94       	dec	r2
    15b2:	f7 cf       	rjmp	.-18     	; 0x15a2 <vfprintf+0x380>
    15b4:	f6 01       	movw	r30, r12
    15b6:	86 81       	ldd	r24, Z+6	; 0x06
    15b8:	97 81       	ldd	r25, Z+7	; 0x07
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x39e>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	2b 96       	adiw	r28, 0x0b	; 11
    15c2:	e2 e1       	ldi	r30, 0x12	; 18
    15c4:	cc c0       	rjmp	.+408    	; 0x175e <__epilogue_restores__>

000015c6 <strnlen_P>:
    15c6:	fc 01       	movw	r30, r24
    15c8:	05 90       	lpm	r0, Z+
    15ca:	61 50       	subi	r22, 0x01	; 1
    15cc:	70 40       	sbci	r23, 0x00	; 0
    15ce:	01 10       	cpse	r0, r1
    15d0:	d8 f7       	brcc	.-10     	; 0x15c8 <strnlen_P+0x2>
    15d2:	80 95       	com	r24
    15d4:	90 95       	com	r25
    15d6:	8e 0f       	add	r24, r30
    15d8:	9f 1f       	adc	r25, r31
    15da:	08 95       	ret

000015dc <strnlen>:
    15dc:	fc 01       	movw	r30, r24
    15de:	61 50       	subi	r22, 0x01	; 1
    15e0:	70 40       	sbci	r23, 0x00	; 0
    15e2:	01 90       	ld	r0, Z+
    15e4:	01 10       	cpse	r0, r1
    15e6:	d8 f7       	brcc	.-10     	; 0x15de <strnlen+0x2>
    15e8:	80 95       	com	r24
    15ea:	90 95       	com	r25
    15ec:	8e 0f       	add	r24, r30
    15ee:	9f 1f       	adc	r25, r31
    15f0:	08 95       	ret

000015f2 <fputc>:
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	fb 01       	movw	r30, r22
    15fc:	23 81       	ldd	r18, Z+3	; 0x03
    15fe:	21 fd       	sbrc	r18, 1
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <fputc+0x16>
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	2c c0       	rjmp	.+88     	; 0x1660 <fputc+0x6e>
    1608:	22 ff       	sbrs	r18, 2
    160a:	16 c0       	rjmp	.+44     	; 0x1638 <fputc+0x46>
    160c:	46 81       	ldd	r20, Z+6	; 0x06
    160e:	57 81       	ldd	r21, Z+7	; 0x07
    1610:	24 81       	ldd	r18, Z+4	; 0x04
    1612:	35 81       	ldd	r19, Z+5	; 0x05
    1614:	42 17       	cp	r20, r18
    1616:	53 07       	cpc	r21, r19
    1618:	44 f4       	brge	.+16     	; 0x162a <fputc+0x38>
    161a:	a0 81       	ld	r26, Z
    161c:	b1 81       	ldd	r27, Z+1	; 0x01
    161e:	9d 01       	movw	r18, r26
    1620:	2f 5f       	subi	r18, 0xFF	; 255
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	31 83       	std	Z+1, r19	; 0x01
    1626:	20 83       	st	Z, r18
    1628:	8c 93       	st	X, r24
    162a:	26 81       	ldd	r18, Z+6	; 0x06
    162c:	37 81       	ldd	r19, Z+7	; 0x07
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	37 83       	std	Z+7, r19	; 0x07
    1634:	26 83       	std	Z+6, r18	; 0x06
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <fputc+0x6e>
    1638:	8b 01       	movw	r16, r22
    163a:	ec 01       	movw	r28, r24
    163c:	fb 01       	movw	r30, r22
    163e:	00 84       	ldd	r0, Z+8	; 0x08
    1640:	f1 85       	ldd	r31, Z+9	; 0x09
    1642:	e0 2d       	mov	r30, r0
    1644:	09 95       	icall
    1646:	89 2b       	or	r24, r25
    1648:	e1 f6       	brne	.-72     	; 0x1602 <fputc+0x10>
    164a:	d8 01       	movw	r26, r16
    164c:	16 96       	adiw	r26, 0x06	; 6
    164e:	8d 91       	ld	r24, X+
    1650:	9c 91       	ld	r25, X
    1652:	17 97       	sbiw	r26, 0x07	; 7
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	17 96       	adiw	r26, 0x07	; 7
    1658:	9c 93       	st	X, r25
    165a:	8e 93       	st	-X, r24
    165c:	16 97       	sbiw	r26, 0x06	; 6
    165e:	ce 01       	movw	r24, r28
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <__ultoa_invert>:
    166a:	fa 01       	movw	r30, r20
    166c:	aa 27       	eor	r26, r26
    166e:	28 30       	cpi	r18, 0x08	; 8
    1670:	51 f1       	breq	.+84     	; 0x16c6 <__ultoa_invert+0x5c>
    1672:	20 31       	cpi	r18, 0x10	; 16
    1674:	81 f1       	breq	.+96     	; 0x16d6 <__ultoa_invert+0x6c>
    1676:	e8 94       	clt
    1678:	6f 93       	push	r22
    167a:	6e 7f       	andi	r22, 0xFE	; 254
    167c:	6e 5f       	subi	r22, 0xFE	; 254
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	af 4f       	sbci	r26, 0xFF	; 255
    1686:	b1 e0       	ldi	r27, 0x01	; 1
    1688:	3e d0       	rcall	.+124    	; 0x1706 <__ultoa_invert+0x9c>
    168a:	b4 e0       	ldi	r27, 0x04	; 4
    168c:	3c d0       	rcall	.+120    	; 0x1706 <__ultoa_invert+0x9c>
    168e:	67 0f       	add	r22, r23
    1690:	78 1f       	adc	r23, r24
    1692:	89 1f       	adc	r24, r25
    1694:	9a 1f       	adc	r25, r26
    1696:	a1 1d       	adc	r26, r1
    1698:	68 0f       	add	r22, r24
    169a:	79 1f       	adc	r23, r25
    169c:	8a 1f       	adc	r24, r26
    169e:	91 1d       	adc	r25, r1
    16a0:	a1 1d       	adc	r26, r1
    16a2:	6a 0f       	add	r22, r26
    16a4:	71 1d       	adc	r23, r1
    16a6:	81 1d       	adc	r24, r1
    16a8:	91 1d       	adc	r25, r1
    16aa:	a1 1d       	adc	r26, r1
    16ac:	20 d0       	rcall	.+64     	; 0x16ee <__ultoa_invert+0x84>
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <__ultoa_invert+0x48>
    16b0:	68 94       	set
    16b2:	3f 91       	pop	r19
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	26 9f       	mul	r18, r22
    16b8:	11 24       	eor	r1, r1
    16ba:	30 19       	sub	r19, r0
    16bc:	30 5d       	subi	r19, 0xD0	; 208
    16be:	31 93       	st	Z+, r19
    16c0:	de f6       	brtc	.-74     	; 0x1678 <__ultoa_invert+0xe>
    16c2:	cf 01       	movw	r24, r30
    16c4:	08 95       	ret
    16c6:	46 2f       	mov	r20, r22
    16c8:	47 70       	andi	r20, 0x07	; 7
    16ca:	40 5d       	subi	r20, 0xD0	; 208
    16cc:	41 93       	st	Z+, r20
    16ce:	b3 e0       	ldi	r27, 0x03	; 3
    16d0:	0f d0       	rcall	.+30     	; 0x16f0 <__ultoa_invert+0x86>
    16d2:	c9 f7       	brne	.-14     	; 0x16c6 <__ultoa_invert+0x5c>
    16d4:	f6 cf       	rjmp	.-20     	; 0x16c2 <__ultoa_invert+0x58>
    16d6:	46 2f       	mov	r20, r22
    16d8:	4f 70       	andi	r20, 0x0F	; 15
    16da:	40 5d       	subi	r20, 0xD0	; 208
    16dc:	4a 33       	cpi	r20, 0x3A	; 58
    16de:	18 f0       	brcs	.+6      	; 0x16e6 <__ultoa_invert+0x7c>
    16e0:	49 5d       	subi	r20, 0xD9	; 217
    16e2:	31 fd       	sbrc	r19, 1
    16e4:	40 52       	subi	r20, 0x20	; 32
    16e6:	41 93       	st	Z+, r20
    16e8:	02 d0       	rcall	.+4      	; 0x16ee <__ultoa_invert+0x84>
    16ea:	a9 f7       	brne	.-22     	; 0x16d6 <__ultoa_invert+0x6c>
    16ec:	ea cf       	rjmp	.-44     	; 0x16c2 <__ultoa_invert+0x58>
    16ee:	b4 e0       	ldi	r27, 0x04	; 4
    16f0:	a6 95       	lsr	r26
    16f2:	97 95       	ror	r25
    16f4:	87 95       	ror	r24
    16f6:	77 95       	ror	r23
    16f8:	67 95       	ror	r22
    16fa:	ba 95       	dec	r27
    16fc:	c9 f7       	brne	.-14     	; 0x16f0 <__ultoa_invert+0x86>
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	61 05       	cpc	r22, r1
    1702:	71 05       	cpc	r23, r1
    1704:	08 95       	ret
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	0a 2e       	mov	r0, r26
    170c:	06 94       	lsr	r0
    170e:	57 95       	ror	r21
    1710:	47 95       	ror	r20
    1712:	37 95       	ror	r19
    1714:	27 95       	ror	r18
    1716:	ba 95       	dec	r27
    1718:	c9 f7       	brne	.-14     	; 0x170c <__ultoa_invert+0xa2>
    171a:	62 0f       	add	r22, r18
    171c:	73 1f       	adc	r23, r19
    171e:	84 1f       	adc	r24, r20
    1720:	95 1f       	adc	r25, r21
    1722:	a0 1d       	adc	r26, r0
    1724:	08 95       	ret

00001726 <__prologue_saves__>:
    1726:	2f 92       	push	r2
    1728:	3f 92       	push	r3
    172a:	4f 92       	push	r4
    172c:	5f 92       	push	r5
    172e:	6f 92       	push	r6
    1730:	7f 92       	push	r7
    1732:	8f 92       	push	r8
    1734:	9f 92       	push	r9
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	ca 1b       	sub	r28, r26
    1750:	db 0b       	sbc	r29, r27
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	09 94       	ijmp

0000175e <__epilogue_restores__>:
    175e:	2a 88       	ldd	r2, Y+18	; 0x12
    1760:	39 88       	ldd	r3, Y+17	; 0x11
    1762:	48 88       	ldd	r4, Y+16	; 0x10
    1764:	5f 84       	ldd	r5, Y+15	; 0x0f
    1766:	6e 84       	ldd	r6, Y+14	; 0x0e
    1768:	7d 84       	ldd	r7, Y+13	; 0x0d
    176a:	8c 84       	ldd	r8, Y+12	; 0x0c
    176c:	9b 84       	ldd	r9, Y+11	; 0x0b
    176e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1770:	b9 84       	ldd	r11, Y+9	; 0x09
    1772:	c8 84       	ldd	r12, Y+8	; 0x08
    1774:	df 80       	ldd	r13, Y+7	; 0x07
    1776:	ee 80       	ldd	r14, Y+6	; 0x06
    1778:	fd 80       	ldd	r15, Y+5	; 0x05
    177a:	0c 81       	ldd	r16, Y+4	; 0x04
    177c:	1b 81       	ldd	r17, Y+3	; 0x03
    177e:	aa 81       	ldd	r26, Y+2	; 0x02
    1780:	b9 81       	ldd	r27, Y+1	; 0x01
    1782:	ce 0f       	add	r28, r30
    1784:	d1 1d       	adc	r29, r1
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	ed 01       	movw	r28, r26
    1792:	08 95       	ret

00001794 <_exit>:
    1794:	f8 94       	cli

00001796 <__stop_program>:
    1796:	ff cf       	rjmp	.-2      	; 0x1796 <__stop_program>
