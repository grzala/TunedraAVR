
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000018e0  00001974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a8  008000ae  008000ae  000019c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002642  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e49  00000000  00000000  000041de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4b  00000000  00000000  00005027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b98  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a13  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00008667  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	43 c0       	rjmp	.+134    	; 0xa4 <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	c4 02       	muls	r28, r20

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	e0 ee       	ldi	r30, 0xE0	; 224
      3c:	f8 e1       	ldi	r31, 0x18	; 24
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	ae 3a       	cpi	r26, 0xAE	; 174
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	22 e0       	ldi	r18, 0x02	; 2
      4c:	ae ea       	ldi	r26, 0xAE	; 174
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	a6 35       	cpi	r26, 0x56	; 86
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	7b d9       	rcall	.-3338   	; 0xfffff35e <__eeprom_end+0xff7ef35e>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	d7 d1       	rcall	.+942    	; 0x41e <main>
      70:	35 cc       	rjmp	.-1942   	; 0xfffff8dc <__eeprom_end+0xff7ef8dc>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:
}


void checkClipping(){//manage clipping indication
	if (clipping){//if currently clipping
		clipping = 0;
      74:	14 ba       	out	0x14, r1	; 20
      76:	89 e0       	ldi	r24, 0x09	; 9
      78:	92 e0       	ldi	r25, 0x02	; 2
      7a:	c4 d2       	rcall	.+1416   	; 0x604 <_ZN7Display10initializeEv>
      7c:	f8 94       	cli
      7e:	16 b8       	out	0x06, r1	; 6
      80:	3e 9a       	sbi	0x07, 6	; 7
      82:	3d 9a       	sbi	0x07, 5	; 7
      84:	32 9a       	sbi	0x06, 2	; 6
      86:	35 9a       	sbi	0x06, 5	; 6
      88:	33 9a       	sbi	0x06, 3	; 6
      8a:	37 9a       	sbi	0x06, 7	; 6
      8c:	36 9a       	sbi	0x06, 6	; 6
      8e:	78 94       	sei
      90:	08 95       	ret

00000092 <_Z5resetv>:
      92:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <_ZL5index>
      96:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
      9a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <_ZL8maxSlope+0x1>
      9e:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <_ZL8maxSlope>
      a2:	08 95       	ret

000000a4 <__vector_14>:
      a4:	1f 92       	push	r1
      a6:	0f 92       	push	r0
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	0f 92       	push	r0
      ac:	11 24       	eor	r1, r1
      ae:	2f 93       	push	r18
      b0:	3f 93       	push	r19
      b2:	4f 93       	push	r20
      b4:	5f 93       	push	r21
      b6:	6f 93       	push	r22
      b8:	7f 93       	push	r23
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
      ca:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL8prevData>
      ce:	85 b1       	in	r24, 0x05	; 5
      d0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZL7newData>
      d4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <_ZL8prevData>
      d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      dc:	98 17       	cp	r25, r24
      de:	08 f0       	brcs	.+2      	; 0xe2 <__vector_14+0x3e>
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__vector_14+0x1de>
      e2:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZL7newData>
      e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      ea:	98 17       	cp	r25, r24
      ec:	08 f0       	brcs	.+2      	; 0xf0 <__vector_14+0x4c>
      ee:	05 c1       	rjmp	.+522    	; 0x2fa <__vector_14+0x256>
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__vector_14+0x1de>
      f2:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZL8newSlope>
      fc:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     100:	ee 0f       	add	r30, r30
     102:	ff 1f       	adc	r31, r31
     104:	e4 52       	subi	r30, 0x24	; 36
     106:	fe 4f       	sbci	r31, 0xFE	; 254
     108:	91 83       	std	Z+1, r25	; 0x01
     10a:	80 83       	st	Z, r24
     10c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZL4time>
     116:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL4time+0x1>
     11a:	ee 0f       	add	r30, r30
     11c:	ff 1f       	adc	r31, r31
     11e:	e0 51       	subi	r30, 0x10	; 16
     120:	fe 4f       	sbci	r31, 0xFE	; 254
     122:	91 83       	std	Z+1, r25	; 0x01
     124:	80 83       	st	Z, r24
     126:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_ZL4time+0x1>
     12a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZL4time>
     12e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     132:	81 11       	cpse	r24, r1
     134:	08 c0       	rjmp	.+16     	; 0x146 <__vector_14+0xa2>
     136:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
     13a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     13e:	8f 5f       	subi	r24, 0xFF	; 255
     140:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL5index>
     144:	9e c0       	rjmp	.+316    	; 0x282 <__vector_14+0x1de>
     146:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZL5timer>
     14a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <_ZL5timer+0x1>
     14e:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	ee 0f       	add	r30, r30
     156:	ff 1f       	adc	r31, r31
     158:	e0 51       	subi	r30, 0x10	; 16
     15a:	fe 4f       	sbci	r31, 0xFE	; 254
     15c:	20 81       	ld	r18, Z
     15e:	31 81       	ldd	r19, Z+1	; 0x01
     160:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_ZL8timerTol>
     164:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_ZL8timerTol+0x1>
     168:	82 1b       	sub	r24, r18
     16a:	93 0b       	sbc	r25, r19
     16c:	9c 01       	movw	r18, r24
     16e:	22 f4       	brpl	.+8      	; 0x178 <__vector_14+0xd4>
     170:	22 27       	eor	r18, r18
     172:	33 27       	eor	r19, r19
     174:	28 1b       	sub	r18, r24
     176:	39 0b       	sbc	r19, r25
     178:	24 17       	cp	r18, r20
     17a:	35 07       	cpc	r19, r21
     17c:	0c f0       	brlt	.+2      	; 0x180 <__vector_14+0xdc>
     17e:	e1 c0       	rjmp	.+450    	; 0x342 <__vector_14+0x29e>
     180:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_ZL5slope>
     184:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <_ZL5slope+0x1>
     188:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <_ZL8newSlope>
     18c:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     190:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     194:	84 1b       	sub	r24, r20
     196:	95 0b       	sbc	r25, r21
     198:	ac 01       	movw	r20, r24
     19a:	22 f4       	brpl	.+8      	; 0x1a4 <__vector_14+0x100>
     19c:	44 27       	eor	r20, r20
     19e:	55 27       	eor	r21, r21
     1a0:	48 1b       	sub	r20, r24
     1a2:	59 0b       	sbc	r21, r25
     1a4:	82 2f       	mov	r24, r18
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	48 17       	cp	r20, r24
     1aa:	59 07       	cpc	r21, r25
     1ac:	0c f4       	brge	.+2      	; 0x1b0 <__vector_14+0x10c>
     1ae:	d4 c0       	rjmp	.+424    	; 0x358 <__vector_14+0x2b4>
     1b0:	c8 c0       	rjmp	.+400    	; 0x342 <__vector_14+0x29e>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	e8 2f       	mov	r30, r24
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e0 51       	subi	r30, 0x10	; 16
     1be:	fe 4f       	sbci	r31, 0xFE	; 254
     1c0:	40 81       	ld	r20, Z
     1c2:	51 81       	ldd	r21, Z+1	; 0x01
     1c4:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <_ZL10totalTimer>
     1c8:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <_ZL10totalTimer+0x1>
     1cc:	24 0f       	add	r18, r20
     1ce:	35 1f       	adc	r19, r21
     1d0:	30 93 db 01 	sts	0x01DB, r19	; 0x8001db <_ZL10totalTimer+0x1>
     1d4:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <_ZL10totalTimer>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <_ZL5index>
     1de:	89 17       	cp	r24, r25
     1e0:	48 f3       	brcs	.-46     	; 0x1b4 <__vector_14+0x110>
     1e2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <_ZL10totalTimer>
     1e6:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <_ZL10totalTimer+0x1>
     1ea:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <_ZL6period+0x1>
     1ee:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_ZL6period>
     1f2:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	e0 51       	subi	r30, 0x10	; 16
     1fe:	fe 4f       	sbci	r31, 0xFE	; 254
     200:	80 81       	ld	r24, Z
     202:	91 81       	ldd	r25, Z+1	; 0x01
     204:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <_ZL5timer+0x1>
     208:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZL5timer>
     20c:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <_ZL5index>
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e4 52       	subi	r30, 0x24	; 36
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <_ZL5slope+0x1>
     222:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_ZL5slope>
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL5index>
     22c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
     230:	28 c0       	rjmp	.+80     	; 0x282 <__vector_14+0x1de>
     232:	2f df       	rcall	.-418    	; 0x92 <_Z5resetv>
     234:	26 c0       	rjmp	.+76     	; 0x282 <__vector_14+0x1de>
     236:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <_ZL8newSlope>
     23a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     23e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <_ZL8maxSlope>
     242:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <_ZL8maxSlope+0x1>
     246:	82 17       	cp	r24, r18
     248:	93 07       	cpc	r25, r19
     24a:	8c f4       	brge	.+34     	; 0x26e <__vector_14+0x1ca>
     24c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZL8newSlope>
     250:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     254:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <_ZL8maxSlope+0x1>
     258:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <_ZL8maxSlope>
     25c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_ZL4time+0x1>
     260:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZL4time>
     264:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZL7noMatch>
     268:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <_ZL5index>
     26c:	0a c0       	rjmp	.+20     	; 0x282 <__vector_14+0x1de>
     26e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_ZL7noMatch>
     272:	8f 5f       	subi	r24, 0xFF	; 255
     274:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <_ZL7noMatch>
     278:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_ZL7noMatch>
     27c:	8a 30       	cpi	r24, 0x0A	; 10
     27e:	08 f0       	brcs	.+2      	; 0x282 <__vector_14+0x1de>
     280:	08 df       	rcall	.-496    	; 0x92 <_Z5resetv>
     282:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     286:	88 23       	and	r24, r24
     288:	09 f4       	brne	.+2      	; 0x28c <__vector_14+0x1e8>
     28a:	6f c0       	rjmp	.+222    	; 0x36a <__vector_14+0x2c6>
     28c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     290:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZL4time>
     294:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL4time+0x1>
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_ZL4time+0x1>
     29e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZL4time>
     2a2:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <ampTimer>
     2a6:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <ampTimer+0x1>
     2aa:	2f 5f       	subi	r18, 0xFF	; 255
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <ampTimer+0x1>
     2b2:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <ampTimer>
     2b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2ba:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <_ZL7newData>
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	84 1b       	sub	r24, r20
     2c2:	91 09       	sbc	r25, r1
     2c4:	ac 01       	movw	r20, r24
     2c6:	22 f4       	brpl	.+8      	; 0x2d0 <__vector_14+0x22c>
     2c8:	44 27       	eor	r20, r20
     2ca:	55 27       	eor	r21, r21
     2cc:	48 1b       	sub	r20, r24
     2ce:	59 0b       	sbc	r21, r25
     2d0:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_ZL6maxAmp>
     2d4:	84 17       	cp	r24, r20
     2d6:	10 f4       	brcc	.+4      	; 0x2dc <__vector_14+0x238>
     2d8:	40 93 cb 01 	sts	0x01CB, r20	; 0x8001cb <_ZL6maxAmp>
     2dc:	28 3e       	cpi	r18, 0xE8	; 232
     2de:	33 40       	sbci	r19, 0x03	; 3
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_14+0x240>
     2e2:	47 c0       	rjmp	.+142    	; 0x372 <__vector_14+0x2ce>
     2e4:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <ampTimer+0x1>
     2e8:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <ampTimer>
     2ec:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_ZL6maxAmp>
     2f0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <_ZL11checkMaxAmp>
     2f4:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZL6maxAmp>
     2f8:	3c c0       	rjmp	.+120    	; 0x372 <__vector_14+0x2ce>
     2fa:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
     2fe:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <_ZL8prevData>
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	82 1b       	sub	r24, r18
     306:	91 09       	sbc	r25, r1
     308:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <_ZL8newSlope+0x1>
     30c:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <_ZL8newSlope>
     310:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZL8newSlope>
     314:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZL8newSlope+0x1>
     318:	40 91 d1 01 	lds	r20, 0x01D1	; 0x8001d1 <_ZL8maxSlope>
     31c:	50 91 d2 01 	lds	r21, 0x01D2	; 0x8001d2 <_ZL8maxSlope+0x1>
     320:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     324:	84 1b       	sub	r24, r20
     326:	95 0b       	sbc	r25, r21
     328:	ac 01       	movw	r20, r24
     32a:	22 f4       	brpl	.+8      	; 0x334 <__vector_14+0x290>
     32c:	44 27       	eor	r20, r20
     32e:	55 27       	eor	r21, r21
     330:	48 1b       	sub	r20, r24
     332:	59 0b       	sbc	r21, r25
     334:	82 2f       	mov	r24, r18
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	48 17       	cp	r20, r24
     33a:	59 07       	cpc	r21, r25
     33c:	0c f4       	brge	.+2      	; 0x340 <__vector_14+0x29c>
     33e:	d9 ce       	rjmp	.-590    	; 0xf2 <__vector_14+0x4e>
     340:	7a cf       	rjmp	.-268    	; 0x236 <__vector_14+0x192>
     342:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZL5index>
     34c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     350:	8a 30       	cpi	r24, 0x0A	; 10
     352:	08 f4       	brcc	.+2      	; 0x356 <__vector_14+0x2b2>
     354:	96 cf       	rjmp	.-212    	; 0x282 <__vector_14+0x1de>
     356:	6d cf       	rjmp	.-294    	; 0x232 <__vector_14+0x18e>
     358:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <_ZL10totalTimer+0x1>
     35c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <_ZL10totalTimer>
     360:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZL5index>
     364:	81 11       	cpse	r24, r1
     366:	25 cf       	rjmp	.-438    	; 0x1b2 <__vector_14+0x10e>
     368:	3c cf       	rjmp	.-392    	; 0x1e2 <__vector_14+0x13e>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZL8clipping>
     370:	8f cf       	rjmp	.-226    	; 0x290 <__vector_14+0x1ec>
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <_Z6get_avPdi>:
const int SHORT_FREQ_AR_LEN = 10;
double short_last_frequencies[SHORT_FREQ_AR_LEN];
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	6c 01       	movw	r12, r24
     3ae:	7b 01       	movw	r14, r22
	double sum = 0;
	for (int i = 0; i < len; i++) {
     3b0:	16 16       	cp	r1, r22
     3b2:	17 06       	cpc	r1, r23
     3b4:	d4 f4       	brge	.+52     	; 0x3ea <_Z6get_avPdi+0x56>
     3b6:	8c 01       	movw	r16, r24
     3b8:	c0 e0       	ldi	r28, 0x00	; 0
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
     3bc:	81 2c       	mov	r8, r1
     3be:	91 2c       	mov	r9, r1
     3c0:	54 01       	movw	r10, r8
		if (ar > 0) {
     3c2:	c1 14       	cp	r12, r1
     3c4:	d1 04       	cpc	r13, r1
     3c6:	51 f0       	breq	.+20     	; 0x3dc <_Z6get_avPdi+0x48>
			sum += ar[i];
     3c8:	f8 01       	movw	r30, r16
     3ca:	20 81       	ld	r18, Z
     3cc:	31 81       	ldd	r19, Z+1	; 0x01
     3ce:	42 81       	ldd	r20, Z+2	; 0x02
     3d0:	53 81       	ldd	r21, Z+3	; 0x03
     3d2:	c5 01       	movw	r24, r10
     3d4:	b4 01       	movw	r22, r8
     3d6:	8a d5       	rcall	.+2836   	; 0xeec <__addsf3>
     3d8:	4b 01       	movw	r8, r22
     3da:	5c 01       	movw	r10, r24
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
	double sum = 0;
	for (int i = 0; i < len; i++) {
     3dc:	21 96       	adiw	r28, 0x01	; 1
     3de:	0c 5f       	subi	r16, 0xFC	; 252
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	ec 16       	cp	r14, r28
     3e4:	fd 06       	cpc	r15, r29
     3e6:	69 f7       	brne	.-38     	; 0x3c2 <_Z6get_avPdi+0x2e>
     3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <_Z6get_avPdi+0x5c>
double short_last_frequencies[SHORT_FREQ_AR_LEN];
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
	double sum = 0;
     3ea:	81 2c       	mov	r8, r1
     3ec:	91 2c       	mov	r9, r1
     3ee:	54 01       	movw	r10, r8
		if (ar > 0) {
			sum += ar[i];
		}
	}

	return sum/(double)len;
     3f0:	b7 01       	movw	r22, r14
     3f2:	ff 0c       	add	r15, r15
     3f4:	88 0b       	sbc	r24, r24
     3f6:	99 0b       	sbc	r25, r25
     3f8:	7c d6       	rcall	.+3320   	; 0x10f2 <__floatsisf>
     3fa:	9b 01       	movw	r18, r22
     3fc:	ac 01       	movw	r20, r24
     3fe:	c5 01       	movw	r24, r10
     400:	b4 01       	movw	r22, r8
     402:	dc d5       	rcall	.+3000   	; 0xfbc <__divsf3>
}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <main>:


int main() {
	setup();
     41e:	2a de       	rcall	.-940    	; 0x74 <_Z5setupv>
	//USART_Init ( MYUBRR );
	while(1) {
		float voltage = newData * (5.0 / 1023.0);
     420:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL7newData>
		if (checkMaxAmp > ampThreshold) /* && checkMaxAmp < maxAmpThreshold) */ {
     424:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <_ZL11checkMaxAmp>
     428:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     42c:	89 17       	cp	r24, r25
     42e:	08 f0       	brcs	.+2      	; 0x432 <main+0x14>
     430:	a4 c0       	rjmp	.+328    	; 0x57a <__stack+0x11b>
			frequency = 38462.0/float(period);//calculate frequency timer rate/period
     432:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <_ZL6period>
     436:	70 91 d9 01 	lds	r23, 0x01D9	; 0x8001d9 <_ZL6period+0x1>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	57 d6       	rcall	.+3246   	; 0x10ee <__floatunsisf>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	7e e3       	ldi	r23, 0x3E	; 62
     448:	86 e1       	ldi	r24, 0x16	; 22
     44a:	97 e4       	ldi	r25, 0x47	; 71
     44c:	b7 d5       	rcall	.+2926   	; 0xfbc <__divsf3>
     44e:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <_ZL9frequency>
     452:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <_ZL9frequency+0x1>
     456:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZL9frequency+0x2>
     45a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <_ZL9frequency+0x3>
			
			// Ignore noise and big swings
			long_last_frequencies[long_freq_ar_i++] = frequency;
     45e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <long_freq_ar_i>
     462:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <long_freq_ar_i+0x1>
     466:	9c 01       	movw	r18, r24
     468:	2f 5f       	subi	r18, 0xFF	; 255
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <long_freq_ar_i+0x1>
     470:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <long_freq_ar_i>
     474:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <_ZL9frequency>
     478:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <_ZL9frequency+0x1>
     47c:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <_ZL9frequency+0x2>
     480:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <_ZL9frequency+0x3>
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	fc 01       	movw	r30, r24
     48e:	e6 52       	subi	r30, 0x26	; 38
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	40 83       	st	Z, r20
     494:	51 83       	std	Z+1, r21	; 0x01
     496:	62 83       	std	Z+2, r22	; 0x02
     498:	73 83       	std	Z+3, r23	; 0x03
			if (long_freq_ar_i >= LONG_FREQ_AR_LEN) long_freq_ar_i = 0;
     49a:	2c 33       	cpi	r18, 0x3C	; 60
     49c:	31 05       	cpc	r19, r1
     49e:	24 f0       	brlt	.+8      	; 0x4a8 <__stack+0x49>
     4a0:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <long_freq_ar_i+0x1>
     4a4:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <long_freq_ar_i>
			float long_average_freq = get_av(long_last_frequencies, LONG_FREQ_AR_LEN);
     4a8:	6c e3       	ldi	r22, 0x3C	; 60
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	8a ed       	ldi	r24, 0xDA	; 218
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	71 df       	rcall	.-286    	; 0x394 <_Z6get_avPdi>
     4b2:	6b 01       	movw	r12, r22
     4b4:	7c 01       	movw	r14, r24
			float diff = abs(long_average_freq - frequency);
     4b6:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <_ZL9frequency>
     4ba:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <_ZL9frequency+0x1>
     4be:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <_ZL9frequency+0x2>
     4c2:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <_ZL9frequency+0x3>
			float max_diff = long_average_freq * FREQ_MAX_DIFF;

			if (diff < max_diff){
     4c6:	11 d5       	rcall	.+2594   	; 0xeea <__subsf3>
     4c8:	e1 d5       	rcall	.+3010   	; 0x108c <__fixsfsi>
     4ca:	9b 01       	movw	r18, r22
     4cc:	77 23       	and	r23, r23
     4ce:	24 f4       	brge	.+8      	; 0x4d8 <__stack+0x79>
     4d0:	22 27       	eor	r18, r18
     4d2:	33 27       	eor	r19, r19
     4d4:	26 1b       	sub	r18, r22
     4d6:	37 0b       	sbc	r19, r23
     4d8:	b9 01       	movw	r22, r18
     4da:	33 0f       	add	r19, r19
     4dc:	88 0b       	sbc	r24, r24
     4de:	99 0b       	sbc	r25, r25
     4e0:	08 d6       	rcall	.+3088   	; 0x10f2 <__floatsisf>
     4e2:	4b 01       	movw	r8, r22
     4e4:	5c 01       	movw	r10, r24
     4e6:	2d ec       	ldi	r18, 0xCD	; 205
     4e8:	3c ec       	ldi	r19, 0xCC	; 204
     4ea:	4c e4       	ldi	r20, 0x4C	; 76
     4ec:	5e e3       	ldi	r21, 0x3E	; 62
     4ee:	c7 01       	movw	r24, r14
     4f0:	b6 01       	movw	r22, r12
     4f2:	d2 d6       	rcall	.+3492   	; 0x1298 <__mulsf3>
     4f4:	9b 01       	movw	r18, r22
     4f6:	ac 01       	movw	r20, r24
     4f8:	c5 01       	movw	r24, r10
     4fa:	b4 01       	movw	r22, r8
     4fc:	5b d5       	rcall	.+2742   	; 0xfb4 <__cmpsf2>
     4fe:	88 23       	and	r24, r24
     500:	e4 f5       	brge	.+120    	; 0x57a <__stack+0x11b>
				// get average freq
				short_last_frequencies[short_freq_ar_i++] = frequency;
     502:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     506:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
     50a:	9c 01       	movw	r18, r24
     50c:	2f 5f       	subi	r18, 0xFF	; 255
     50e:	3f 4f       	sbci	r19, 0xFF	; 255
     510:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <__data_end+0x1>
     514:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <__data_end>
     518:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <_ZL9frequency>
     51c:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <_ZL9frequency+0x1>
     520:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <_ZL9frequency+0x2>
     524:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <_ZL9frequency+0x3>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	fc 01       	movw	r30, r24
     532:	e0 55       	subi	r30, 0x50	; 80
     534:	ff 4f       	sbci	r31, 0xFF	; 255
     536:	40 83       	st	Z, r20
     538:	51 83       	std	Z+1, r21	; 0x01
     53a:	62 83       	std	Z+2, r22	; 0x02
     53c:	73 83       	std	Z+3, r23	; 0x03
				if (short_freq_ar_i >= SHORT_FREQ_AR_LEN) short_freq_ar_i = 0;
     53e:	2a 30       	cpi	r18, 0x0A	; 10
     540:	31 05       	cpc	r19, r1
     542:	24 f0       	brlt	.+8      	; 0x54c <__stack+0xed>
     544:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__data_end+0x1>
     548:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
				float short_average_freq = get_av(short_last_frequencies, SHORT_FREQ_AR_LEN);
     54c:	6a e0       	ldi	r22, 0x0A	; 10
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	80 eb       	ldi	r24, 0xB0	; 176
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	1f df       	rcall	.-450    	; 0x394 <_Z6get_avPdi>
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24

				getNoteByFreq(&currentNote, short_average_freq); // RECOGNIZE NOTE
     55a:	ab 01       	movw	r20, r22
     55c:	bc 01       	movw	r22, r24
     55e:	87 e4       	ldi	r24, 0x47	; 71
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	cd d2       	rcall	.+1434   	; 0xafe <_Z13getNoteByFreqP4Noted>
				if (currentNote.valid) {
     564:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <currentNote+0xe>
     568:	88 23       	and	r24, r24
     56a:	39 f0       	breq	.+14     	; 0x57a <__stack+0x11b>
					displ.displayNote(&currentNote, short_average_freq); // DISPLAY NOTE
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	67 e4       	ldi	r22, 0x47	; 71
     572:	72 e0       	ldi	r23, 0x02	; 2
     574:	89 e0       	ldi	r24, 0x09	; 9
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	84 d2       	rcall	.+1288   	; 0xa82 <_ZN7Display11displayNoteEPK4Noted>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57a:	8f e1       	ldi	r24, 0x1F	; 31
     57c:	9e e4       	ldi	r25, 0x4E	; 78
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <__stack+0x11f>
     582:	00 c0       	rjmp	.+0      	; 0x584 <__stack+0x125>
     584:	00 00       	nop
     586:	4c cf       	rjmp	.-360    	; 0x420 <main+0x2>

00000588 <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     588:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     58c:	e9 e0       	ldi	r30, 0x09	; 9
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	11 82       	std	Z+1, r1	; 0x01
     592:	10 82       	st	Z, r1
     594:	12 82       	std	Z+2, r1	; 0x02
     596:	12 8a       	std	Z+18, r1	; 0x12
     598:	13 8a       	std	Z+19, r1	; 0x13
     59a:	14 8a       	std	Z+20, r1	; 0x14
     59c:	15 8a       	std	Z+21, r1	; 0x15
     59e:	08 95       	ret

000005a0 <_ZN7Display14cleanIndicatorEv>:
	}
	this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     5a0:	fc 01       	movw	r30, r24
     5a2:	9c 01       	movw	r18, r24
     5a4:	21 5f       	subi	r18, 0xF1	; 241
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
     5a8:	13 82       	std	Z+3, r1	; 0x03
     5aa:	14 82       	std	Z+4, r1	; 0x04
     5ac:	15 82       	std	Z+5, r1	; 0x05
     5ae:	33 96       	adiw	r30, 0x03	; 3
     5b0:	e2 17       	cp	r30, r18
     5b2:	f3 07       	cpc	r31, r19
     5b4:	c9 f7       	brne	.-14     	; 0x5a8 <_ZN7Display14cleanIndicatorEv+0x8>
     5b6:	6f e0       	ldi	r22, 0x0F	; 15
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	03 96       	adiw	r24, 0x03	; 3
     5bc:	68 d4       	rcall	.+2256   	; 0xe8e <ws2812_sendarray>
     5be:	08 95       	ret

000005c0 <_ZN7Display5lightEj>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	91 81       	ldd	r25, Z+1	; 0x01
     5c6:	86 17       	cp	r24, r22
     5c8:	97 07       	cpc	r25, r23
     5ca:	99 f0       	breq	.+38     	; 0x5f2 <_ZN7Display5lightEj+0x32>
     5cc:	12 ba       	out	0x12, r1	; 18
     5ce:	11 82       	std	Z+1, r1	; 0x01
     5d0:	10 82       	st	Z, r1
     5d2:	60 fd       	sbrc	r22, 0
     5d4:	91 9a       	sbi	0x12, 1	; 18
     5d6:	61 fd       	sbrc	r22, 1
     5d8:	94 9a       	sbi	0x12, 4	; 18
     5da:	62 fd       	sbrc	r22, 2
     5dc:	95 9a       	sbi	0x12, 5	; 18
     5de:	63 fd       	sbrc	r22, 3
     5e0:	96 9a       	sbi	0x12, 6	; 18
     5e2:	64 fd       	sbrc	r22, 4
     5e4:	92 9a       	sbi	0x12, 2	; 18
     5e6:	65 fd       	sbrc	r22, 5
     5e8:	93 9a       	sbi	0x12, 3	; 18
     5ea:	66 fd       	sbrc	r22, 6
     5ec:	90 9a       	sbi	0x12, 0	; 18
     5ee:	71 83       	std	Z+1, r23	; 0x01
     5f0:	60 83       	st	Z, r22
     5f2:	08 95       	ret

000005f4 <_ZN7Display10lightSharpEb>:
     5f4:	66 23       	and	r22, r22
     5f6:	11 f0       	breq	.+4      	; 0x5fc <_ZN7Display10lightSharpEb+0x8>
     5f8:	97 9a       	sbi	0x12, 7	; 18
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <_ZN7Display10lightSharpEb+0xa>
     5fc:	97 98       	cbi	0x12, 7	; 18
     5fe:	fc 01       	movw	r30, r24
     600:	62 83       	std	Z+2, r22	; 0x02
     602:	08 95       	ret

00000604 <_ZN7Display10initializeEv>:
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	ec 01       	movw	r28, r24
     60a:	b9 9a       	sbi	0x17, 1	; 23
     60c:	81 b3       	in	r24, 0x11	; 17
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	81 bb       	out	0x11, r24	; 17
     612:	12 ba       	out	0x12, r1	; 18
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	18 82       	st	Y, r1
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	ce 01       	movw	r24, r28
     61c:	eb df       	rcall	.-42     	; 0x5f4 <_ZN7Display10lightSharpEb>
     61e:	ce 01       	movw	r24, r28
     620:	bf df       	rcall	.-130    	; 0x5a0 <_ZN7Display14cleanIndicatorEv>
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <_ZN7Display12rebuildCacheEd>:
	//Serial.print(ledFCache.Bs[2]);
	//Serial.println();
}

// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     628:	4f 92       	push	r4
     62a:	5f 92       	push	r5
     62c:	6f 92       	push	r6
     62e:	7f 92       	push	r7
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	4a 01       	movw	r8, r20
     648:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     64a:	29 e2       	ldi	r18, 0x29	; 41
     64c:	3c e5       	ldi	r19, 0x5C	; 92
     64e:	4f e0       	ldi	r20, 0x0F	; 15
     650:	5d e3       	ldi	r21, 0x3D	; 61
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	20 d6       	rcall	.+3136   	; 0x1298 <__mulsf3>
     658:	2b 01       	movw	r4, r22
     65a:	3c 01       	movw	r6, r24
     65c:	6a ab       	std	Y+50, r22	; 0x32
     65e:	7b ab       	std	Y+51, r23	; 0x33
     660:	8c ab       	std	Y+52, r24	; 0x34
     662:	9d ab       	std	Y+53, r25	; 0x35
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     664:	2a e9       	ldi	r18, 0x9A	; 154
     666:	39 e9       	ldi	r19, 0x99	; 153
     668:	49 e1       	ldi	r20, 0x19	; 25
     66a:	5e e3       	ldi	r21, 0x3E	; 62
     66c:	c5 01       	movw	r24, r10
     66e:	b4 01       	movw	r22, r8
     670:	13 d6       	rcall	.+3110   	; 0x1298 <__mulsf3>
     672:	6b 01       	movw	r12, r22
     674:	7c 01       	movw	r14, r24
     676:	6e ab       	std	Y+54, r22	; 0x36
     678:	7f ab       	std	Y+55, r23	; 0x37
     67a:	88 af       	std	Y+56, r24	; 0x38
     67c:	99 af       	std	Y+57, r25	; 0x39
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     67e:	23 e3       	ldi	r18, 0x33	; 51
     680:	33 e3       	ldi	r19, 0x33	; 51
     682:	43 eb       	ldi	r20, 0xB3	; 179
     684:	5e e3       	ldi	r21, 0x3E	; 62
     686:	c5 01       	movw	r24, r10
     688:	b4 01       	movw	r22, r8
     68a:	06 d6       	rcall	.+3084   	; 0x1298 <__mulsf3>
     68c:	4b 01       	movw	r8, r22
     68e:	5c 01       	movw	r10, r24
     690:	6a af       	std	Y+58, r22	; 0x3a
     692:	7b af       	std	Y+59, r23	; 0x3b
     694:	8c af       	std	Y+60, r24	; 0x3c
     696:	9d af       	std	Y+61, r25	; 0x3d
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     698:	a3 01       	movw	r20, r6
     69a:	92 01       	movw	r18, r4
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e1       	ldi	r24, 0x10	; 16
     6a2:	92 ec       	ldi	r25, 0xC2	; 194
     6a4:	8b d4       	rcall	.+2326   	; 0xfbc <__divsf3>
     6a6:	6a 8f       	std	Y+26, r22	; 0x1a
     6a8:	7b 8f       	std	Y+27, r23	; 0x1b
     6aa:	8c 8f       	std	Y+28, r24	; 0x1c
     6ac:	9d 8f       	std	Y+29, r25	; 0x1d
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a0 e7       	ldi	r26, 0x70	; 112
     6b4:	b2 e4       	ldi	r27, 0x42	; 66
     6b6:	8e a3       	std	Y+38, r24	; 0x26
     6b8:	9f a3       	std	Y+39, r25	; 0x27
     6ba:	a8 a7       	std	Y+40, r26	; 0x28
     6bc:	b9 a7       	std	Y+41, r27	; 0x29
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     6be:	a3 01       	movw	r20, r6
     6c0:	92 01       	movw	r18, r4
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	11 d4       	rcall	.+2082   	; 0xeea <__subsf3>
     6c8:	9b 01       	movw	r18, r22
     6ca:	ac 01       	movw	r20, r24
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	88 ea       	ldi	r24, 0xA8	; 168
     6d2:	91 ec       	ldi	r25, 0xC1	; 193
     6d4:	73 d4       	rcall	.+2278   	; 0xfbc <__divsf3>
     6d6:	9b 01       	movw	r18, r22
     6d8:	ac 01       	movw	r20, r24
     6da:	6e 8f       	std	Y+30, r22	; 0x1e
     6dc:	7f 8f       	std	Y+31, r23	; 0x1f
     6de:	88 a3       	std	Y+32, r24	; 0x20
     6e0:	99 a3       	std	Y+33, r25	; 0x21
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	d8 d5       	rcall	.+2992   	; 0x1298 <__mulsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	90 e4       	ldi	r25, 0x40	; 64
     6f4:	fa d3       	rcall	.+2036   	; 0xeea <__subsf3>
     6f6:	6a a7       	std	Y+42, r22	; 0x2a
     6f8:	7b a7       	std	Y+43, r23	; 0x2b
     6fa:	8c a7       	std	Y+44, r24	; 0x2c
     6fc:	9d a7       	std	Y+45, r25	; 0x2d
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     6fe:	a7 01       	movw	r20, r14
     700:	96 01       	movw	r18, r12
     702:	c5 01       	movw	r24, r10
     704:	b4 01       	movw	r22, r8
     706:	f1 d3       	rcall	.+2018   	; 0xeea <__subsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e4       	ldi	r24, 0x40	; 64
     712:	90 ec       	ldi	r25, 0xC0	; 192
     714:	53 d4       	rcall	.+2214   	; 0xfbc <__divsf3>
     716:	9b 01       	movw	r18, r22
     718:	ac 01       	movw	r20, r24
     71a:	6a a3       	std	Y+34, r22	; 0x22
     71c:	7b a3       	std	Y+35, r23	; 0x23
     71e:	8c a3       	std	Y+36, r24	; 0x24
     720:	9d a3       	std	Y+37, r25	; 0x25
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     722:	c5 01       	movw	r24, r10
     724:	b4 01       	movw	r22, r8
     726:	b8 d5       	rcall	.+2928   	; 0x1298 <__mulsf3>
     728:	9b 01       	movw	r18, r22
     72a:	ac 01       	movw	r20, r24
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	cb 01       	movw	r24, r22
     732:	db d3       	rcall	.+1974   	; 0xeea <__subsf3>
     734:	6e a7       	std	Y+46, r22	; 0x2e
     736:	7f a7       	std	Y+47, r23	; 0x2f
     738:	88 ab       	std	Y+48, r24	; 0x30
     73a:	99 ab       	std	Y+49, r25	; 0x31
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	08 95       	ret

0000075a <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	6a 01       	movw	r12, r20
     776:	7b 01       	movw	r14, r22
     778:	b9 01       	movw	r22, r18
     77a:	a8 01       	movw	r20, r16
	this->rebuildCache(max_distance); // find new functions
     77c:	55 df       	rcall	.-342    	; 0x628 <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	a9 01       	movw	r20, r18
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	15 d4       	rcall	.+2090   	; 0xfb4 <__cmpsf2>
     78a:	88 23       	and	r24, r24
     78c:	0c f4       	brge	.+2      	; 0x790 <_ZN7Display25getIndicatorValByDistanceEdd+0x36>
     78e:	4f c0       	rjmp	.+158    	; 0x82e <_ZN7Display25getIndicatorValByDistanceEdd+0xd4>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     790:	8a ac       	ldd	r8, Y+58	; 0x3a
     792:	9b ac       	ldd	r9, Y+59	; 0x3b
     794:	ac ac       	ldd	r10, Y+60	; 0x3c
     796:	bd ac       	ldd	r11, Y+61	; 0x3d
     798:	a5 01       	movw	r20, r10
     79a:	94 01       	movw	r18, r8
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	77 d5       	rcall	.+2798   	; 0x1290 <__gesf2>
     7a2:	18 16       	cp	r1, r24
     7a4:	0c f4       	brge	.+2      	; 0x7a8 <_ZN7Display25getIndicatorValByDistanceEdd+0x4e>
     7a6:	46 c0       	rjmp	.+140    	; 0x834 <_ZN7Display25getIndicatorValByDistanceEdd+0xda>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     7a8:	2a a9       	ldd	r18, Y+50	; 0x32
     7aa:	3b a9       	ldd	r19, Y+51	; 0x33
     7ac:	4c a9       	ldd	r20, Y+52	; 0x34
     7ae:	5d a9       	ldd	r21, Y+53	; 0x35
     7b0:	c7 01       	movw	r24, r14
     7b2:	b6 01       	movw	r22, r12
     7b4:	ff d3       	rcall	.+2046   	; 0xfb4 <__cmpsf2>
     7b6:	18 16       	cp	r1, r24
     7b8:	b4 f4       	brge	.+44     	; 0x7e6 <_ZN7Display25getIndicatorValByDistanceEdd+0x8c>
     7ba:	2e a9       	ldd	r18, Y+54	; 0x36
     7bc:	3f a9       	ldd	r19, Y+55	; 0x37
     7be:	48 ad       	ldd	r20, Y+56	; 0x38
     7c0:	59 ad       	ldd	r21, Y+57	; 0x39
     7c2:	c7 01       	movw	r24, r14
     7c4:	b6 01       	movw	r22, r12
     7c6:	f6 d3       	rcall	.+2028   	; 0xfb4 <__cmpsf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	54 f4       	brge	.+20     	; 0x7e0 <_ZN7Display25getIndicatorValByDistanceEdd+0x86>
     7cc:	a5 01       	movw	r20, r10
     7ce:	94 01       	movw	r18, r8
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	ef d3       	rcall	.+2014   	; 0xfb4 <__cmpsf2>
     7d6:	18 16       	cp	r1, r24
     7d8:	4c f0       	brlt	.+18     	; 0x7ec <_ZN7Display25getIndicatorValByDistanceEdd+0x92>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     7da:	02 e0       	ldi	r16, 0x02	; 2
     7dc:	10 e0       	ldi	r17, 0x00	; 0
     7de:	08 c0       	rjmp	.+16     	; 0x7f0 <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
     7e0:	01 e0       	ldi	r16, 0x01	; 1
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance <= ledFCache.xBounds[i])
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     7ec:	03 e0       	ldi	r16, 0x03	; 3
     7ee:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     7f0:	f8 01       	movw	r30, r16
     7f2:	31 96       	adiw	r30, 0x01	; 1
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	ec 0f       	add	r30, r28
     7fe:	fd 1f       	adc	r31, r29
     800:	26 89       	ldd	r18, Z+22	; 0x16
     802:	37 89       	ldd	r19, Z+23	; 0x17
     804:	40 8d       	ldd	r20, Z+24	; 0x18
     806:	51 8d       	ldd	r21, Z+25	; 0x19
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	45 d5       	rcall	.+2698   	; 0x1298 <__mulsf3>
     80e:	0c 5f       	subi	r16, 0xFC	; 252
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	00 0f       	add	r16, r16
     814:	11 1f       	adc	r17, r17
     816:	00 0f       	add	r16, r16
     818:	11 1f       	adc	r17, r17
     81a:	c0 0f       	add	r28, r16
     81c:	d1 1f       	adc	r29, r17
     81e:	2e 89       	ldd	r18, Y+22	; 0x16
     820:	3f 89       	ldd	r19, Y+23	; 0x17
     822:	48 8d       	ldd	r20, Y+24	; 0x18
     824:	59 8d       	ldd	r21, Y+25	; 0x19
     826:	62 d3       	rcall	.+1732   	; 0xeec <__addsf3>
     828:	31 d4       	rcall	.+2146   	; 0x108c <__fixsfsi>
	return val;
     82a:	cb 01       	movw	r24, r22
     82c:	05 c0       	rjmp	.+10     	; 0x838 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     82e:	8c e3       	ldi	r24, 0x3C	; 60
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
	return val;
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	9f 90       	pop	r9
     84e:	8f 90       	pop	r8
     850:	08 95       	ret

00000852 <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     852:	2f 92       	push	r2
     854:	3f 92       	push	r3
     856:	4f 92       	push	r4
     858:	5f 92       	push	r5
     85a:	6f 92       	push	r6
     85c:	7f 92       	push	r7
     85e:	8f 92       	push	r8
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	6c 97       	sbiw	r28, 0x1c	; 28
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	1c 01       	movw	r2, r24
     888:	8b 01       	movw	r16, r22
     88a:	2d 8b       	std	Y+21, r18	; 0x15
     88c:	3e 8b       	std	Y+22, r19	; 0x16
     88e:	4f 8b       	std	Y+23, r20	; 0x17
     890:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     892:	db 01       	movw	r26, r22
     894:	16 96       	adiw	r26, 0x06	; 6
     896:	8d 91       	ld	r24, X+
     898:	9d 91       	ld	r25, X+
     89a:	0d 90       	ld	r0, X+
     89c:	bc 91       	ld	r27, X
     89e:	a0 2d       	mov	r26, r0
     8a0:	89 8f       	std	Y+25, r24	; 0x19
     8a2:	9a 8f       	std	Y+26, r25	; 0x1a
     8a4:	ab 8f       	std	Y+27, r26	; 0x1b
     8a6:	bc 8f       	std	Y+28, r27	; 0x1c
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     8a8:	fb 01       	movw	r30, r22
     8aa:	82 84       	ldd	r8, Z+10	; 0x0a
     8ac:	93 84       	ldd	r9, Z+11	; 0x0b
     8ae:	a4 84       	ldd	r10, Z+12	; 0x0c
     8b0:	b5 84       	ldd	r11, Z+13	; 0x0d
     8b2:	9c 01       	movw	r18, r24
     8b4:	ad 01       	movw	r20, r26
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	17 d3       	rcall	.+1582   	; 0xeea <__subsf3>
     8bc:	6b 01       	movw	r12, r22
     8be:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     8c0:	d8 01       	movw	r26, r16
     8c2:	12 96       	adiw	r26, 0x02	; 2
     8c4:	4d 90       	ld	r4, X+
     8c6:	5d 90       	ld	r5, X+
     8c8:	6d 90       	ld	r6, X+
     8ca:	7c 90       	ld	r7, X
     8cc:	15 97       	sbiw	r26, 0x05	; 5
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     8ce:	29 8d       	ldd	r18, Y+25	; 0x19
     8d0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8d2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8d4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8d6:	6d 89       	ldd	r22, Y+21	; 0x15
     8d8:	7e 89       	ldd	r23, Y+22	; 0x16
     8da:	8f 89       	ldd	r24, Y+23	; 0x17
     8dc:	98 8d       	ldd	r25, Y+24	; 0x18
     8de:	05 d3       	rcall	.+1546   	; 0xeea <__subsf3>
     8e0:	9b 01       	movw	r18, r22
     8e2:	ac 01       	movw	r20, r24
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	3f d4       	rcall	.+2174   	; 0x1168 <fmin>
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     8ea:	69 83       	std	Y+1, r22	; 0x01
     8ec:	7a 83       	std	Y+2, r23	; 0x02
     8ee:	8b 83       	std	Y+3, r24	; 0x03
     8f0:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
     8f2:	29 8d       	ldd	r18, Y+25	; 0x19
     8f4:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8f6:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8f8:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8fa:	c3 01       	movw	r24, r6
     8fc:	b2 01       	movw	r22, r4
     8fe:	f5 d2       	rcall	.+1514   	; 0xeea <__subsf3>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	5f e3       	ldi	r21, 0x3F	; 63
     908:	c7 d4       	rcall	.+2446   	; 0x1298 <__mulsf3>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	c3 01       	movw	r24, r6
     910:	b2 01       	movw	r22, r4
     912:	eb d2       	rcall	.+1494   	; 0xeea <__subsf3>
     914:	9b 01       	movw	r18, r22
     916:	ac 01       	movw	r20, r24
     918:	6d 89       	ldd	r22, Y+21	; 0x15
     91a:	7e 89       	ldd	r23, Y+22	; 0x16
     91c:	8f 89       	ldd	r24, Y+23	; 0x17
     91e:	98 8d       	ldd	r25, Y+24	; 0x18
     920:	e4 d2       	rcall	.+1480   	; 0xeea <__subsf3>
     922:	b4 d3       	rcall	.+1896   	; 0x108c <__fixsfsi>
     924:	9b 01       	movw	r18, r22
     926:	77 23       	and	r23, r23
     928:	24 f4       	brge	.+8      	; 0x932 <_ZN7Display14lightIndicatorEPK4Noted+0xe0>
     92a:	22 27       	eor	r18, r18
     92c:	33 27       	eor	r19, r19
     92e:	26 1b       	sub	r18, r22
     930:	37 0b       	sbc	r19, r23
     932:	b9 01       	movw	r22, r18
     934:	33 0f       	add	r19, r19
     936:	88 0b       	sbc	r24, r24
     938:	99 0b       	sbc	r25, r25
     93a:	db d3       	rcall	.+1974   	; 0x10f2 <__floatsisf>
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	11 d4       	rcall	.+2082   	; 0x1168 <fmin>
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     946:	6d 83       	std	Y+5, r22	; 0x05
     948:	7e 83       	std	Y+6, r23	; 0x06
     94a:	8f 83       	std	Y+7, r24	; 0x07
     94c:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
     94e:	a3 01       	movw	r20, r6
     950:	92 01       	movw	r18, r4
     952:	6d 89       	ldd	r22, Y+21	; 0x15
     954:	7e 89       	ldd	r23, Y+22	; 0x16
     956:	8f 89       	ldd	r24, Y+23	; 0x17
     958:	98 8d       	ldd	r25, Y+24	; 0x18
     95a:	c7 d2       	rcall	.+1422   	; 0xeea <__subsf3>
     95c:	97 d3       	rcall	.+1838   	; 0x108c <__fixsfsi>
     95e:	9b 01       	movw	r18, r22
     960:	77 23       	and	r23, r23
     962:	24 f4       	brge	.+8      	; 0x96c <_ZN7Display14lightIndicatorEPK4Noted+0x11a>
     964:	22 27       	eor	r18, r18
     966:	33 27       	eor	r19, r19
     968:	26 1b       	sub	r18, r22
     96a:	37 0b       	sbc	r19, r23
     96c:	b9 01       	movw	r22, r18
     96e:	33 0f       	add	r19, r19
     970:	88 0b       	sbc	r24, r24
     972:	99 0b       	sbc	r25, r25
     974:	be d3       	rcall	.+1916   	; 0x10f2 <__floatsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	c7 01       	movw	r24, r14
     97c:	b6 01       	movw	r22, r12
     97e:	f4 d3       	rcall	.+2024   	; 0x1168 <fmin>
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     980:	69 87       	std	Y+9, r22	; 0x09
     982:	7a 87       	std	Y+10, r23	; 0x0a
     984:	8b 87       	std	Y+11, r24	; 0x0b
     986:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
     988:	a3 01       	movw	r20, r6
     98a:	92 01       	movw	r18, r4
     98c:	c5 01       	movw	r24, r10
     98e:	b4 01       	movw	r22, r8
     990:	ac d2       	rcall	.+1368   	; 0xeea <__subsf3>
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	5f e3       	ldi	r21, 0x3F	; 63
     99a:	7e d4       	rcall	.+2300   	; 0x1298 <__mulsf3>
     99c:	a3 01       	movw	r20, r6
     99e:	92 01       	movw	r18, r4
     9a0:	a5 d2       	rcall	.+1354   	; 0xeec <__addsf3>
     9a2:	2d 89       	ldd	r18, Y+21	; 0x15
     9a4:	3e 89       	ldd	r19, Y+22	; 0x16
     9a6:	4f 89       	ldd	r20, Y+23	; 0x17
     9a8:	58 8d       	ldd	r21, Y+24	; 0x18
     9aa:	9f d2       	rcall	.+1342   	; 0xeea <__subsf3>
     9ac:	6f d3       	rcall	.+1758   	; 0x108c <__fixsfsi>
     9ae:	9b 01       	movw	r18, r22
     9b0:	77 23       	and	r23, r23
     9b2:	24 f4       	brge	.+8      	; 0x9bc <_ZN7Display14lightIndicatorEPK4Noted+0x16a>
     9b4:	22 27       	eor	r18, r18
     9b6:	33 27       	eor	r19, r19
     9b8:	26 1b       	sub	r18, r22
     9ba:	37 0b       	sbc	r19, r23
     9bc:	b9 01       	movw	r22, r18
     9be:	33 0f       	add	r19, r19
     9c0:	88 0b       	sbc	r24, r24
     9c2:	99 0b       	sbc	r25, r25
     9c4:	96 d3       	rcall	.+1836   	; 0x10f2 <__floatsisf>
     9c6:	9b 01       	movw	r18, r22
     9c8:	ac 01       	movw	r20, r24
     9ca:	c7 01       	movw	r24, r14
     9cc:	b6 01       	movw	r22, r12
     9ce:	cc d3       	rcall	.+1944   	; 0x1168 <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     9d0:	6d 87       	std	Y+13, r22	; 0x0d
     9d2:	7e 87       	std	Y+14, r23	; 0x0e
     9d4:	8f 87       	std	Y+15, r24	; 0x0f
     9d6:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     9d8:	2d 89       	ldd	r18, Y+21	; 0x15
     9da:	3e 89       	ldd	r19, Y+22	; 0x16
     9dc:	4f 89       	ldd	r20, Y+23	; 0x17
     9de:	58 8d       	ldd	r21, Y+24	; 0x18
     9e0:	c5 01       	movw	r24, r10
     9e2:	b4 01       	movw	r22, r8
     9e4:	82 d2       	rcall	.+1284   	; 0xeea <__subsf3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	bc d3       	rcall	.+1912   	; 0x1168 <fmin>
	};
     9f0:	69 8b       	std	Y+17, r22	; 0x11
     9f2:	7a 8b       	std	Y+18, r23	; 0x12
     9f4:	8b 8b       	std	Y+19, r24	; 0x13
     9f6:	9c 8b       	std	Y+20, r25	; 0x14
     9f8:	fe 01       	movw	r30, r28
     9fa:	31 96       	adiw	r30, 0x01	; 1
     9fc:	3f 01       	movw	r6, r30
     9fe:	41 01       	movw	r8, r2
     a00:	aa 24       	eor	r10, r10
     a02:	a3 94       	inc	r10
     a04:	b1 2c       	mov	r11, r1
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <_ZN7Display14lightIndicatorEPK4Noted+0x1c2>
     a08:	ff ef       	ldi	r31, 0xFF	; 255
     a0a:	af 1a       	sub	r10, r31
     a0c:	bf 0a       	sbc	r11, r31
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	88 0e       	add	r8, r24
     a12:	91 1c       	adc	r9, r1
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     a14:	d3 01       	movw	r26, r6
     a16:	4d 91       	ld	r20, X+
     a18:	5d 91       	ld	r21, X+
     a1a:	6d 91       	ld	r22, X+
     a1c:	7d 91       	ld	r23, X+
     a1e:	3d 01       	movw	r6, r26
     a20:	97 01       	movw	r18, r14
     a22:	86 01       	movw	r16, r12
     a24:	c1 01       	movw	r24, r2
     a26:	99 de       	rcall	.-718    	; 0x75a <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     a28:	b3 e0       	ldi	r27, 0x03	; 3
     a2a:	ab 16       	cp	r10, r27
     a2c:	b1 04       	cpc	r11, r1
     a2e:	39 f0       	breq	.+14     	; 0xa3e <_ZN7Display14lightIndicatorEPK4Noted+0x1ec>
			this->indicatorBar[i].r = val;
     a30:	f4 01       	movw	r30, r8
     a32:	83 83       	std	Z+3, r24	; 0x03
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     a34:	f5 e0       	ldi	r31, 0x05	; 5
     a36:	af 16       	cp	r10, r31
     a38:	b1 04       	cpc	r11, r1
     a3a:	34 f3       	brlt	.-52     	; 0xa08 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <_ZN7Display14lightIndicatorEPK4Noted+0x1f4>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     a3e:	d1 01       	movw	r26, r2
     a40:	1a 96       	adiw	r26, 0x0a	; 10
     a42:	8c 93       	st	X, r24
     a44:	e1 cf       	rjmp	.-62     	; 0xa08 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     a46:	6f e0       	ldi	r22, 0x0F	; 15
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	c1 01       	movw	r24, r2
     a4c:	03 96       	adiw	r24, 0x03	; 3
     a4e:	1f d2       	rcall	.+1086   	; 0xe8e <ws2812_sendarray>
}
     a50:	6c 96       	adiw	r28, 0x1c	; 28
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	9f 90       	pop	r9
     a72:	8f 90       	pop	r8
     a74:	7f 90       	pop	r7
     a76:	6f 90       	pop	r6
     a78:	5f 90       	pop	r5
     a7a:	4f 90       	pop	r4
     a7c:	3f 90       	pop	r3
     a7e:	2f 90       	pop	r2
     a80:	08 95       	ret

00000a82 <_ZN7Display11displayNoteEPK4Noted>:

void Display::displayNote(const Note* note, double frequency) {
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
     a94:	8b 01       	movw	r16, r22
     a96:	69 01       	movw	r12, r18
     a98:	7a 01       	movw	r14, r20
	DI di = DI::A;
	switch(note->note) {
     a9a:	fb 01       	movw	r30, r22
     a9c:	80 81       	ld	r24, Z
     a9e:	84 34       	cpi	r24, 0x44	; 68
     aa0:	81 f0       	breq	.+32     	; 0xac2 <_ZN7Display11displayNoteEPK4Noted+0x40>
     aa2:	28 f4       	brcc	.+10     	; 0xaae <_ZN7Display11displayNoteEPK4Noted+0x2c>
     aa4:	82 34       	cpi	r24, 0x42	; 66
     aa6:	49 f0       	breq	.+18     	; 0xaba <_ZN7Display11displayNoteEPK4Noted+0x38>
     aa8:	83 34       	cpi	r24, 0x43	; 67
     aaa:	49 f0       	breq	.+18     	; 0xabe <_ZN7Display11displayNoteEPK4Noted+0x3c>
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <_ZN7Display11displayNoteEPK4Noted+0x50>
     aae:	86 34       	cpi	r24, 0x46	; 70
     ab0:	61 f0       	breq	.+24     	; 0xaca <_ZN7Display11displayNoteEPK4Noted+0x48>
     ab2:	48 f0       	brcs	.+18     	; 0xac6 <_ZN7Display11displayNoteEPK4Noted+0x44>
     ab4:	87 34       	cpi	r24, 0x47	; 71
     ab6:	59 f0       	breq	.+22     	; 0xace <_ZN7Display11displayNoteEPK4Noted+0x4c>
     ab8:	0c c0       	rjmp	.+24     	; 0xad2 <_ZN7Display11displayNoteEPK4Noted+0x50>
		case 'A':
		di = DI::A;
		break;
		case 'B':
		di = DI::B;
     aba:	69 e7       	ldi	r22, 0x79	; 121
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <_ZN7Display11displayNoteEPK4Noted+0x52>
		break;
		case 'C':
		di = DI::C;
     abe:	62 e7       	ldi	r22, 0x72	; 114
		break;
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'D':
		di = DI::D;
     ac2:	6d e3       	ldi	r22, 0x3D	; 61
		break;
     ac4:	07 c0       	rjmp	.+14     	; 0xad4 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'E':
		di = DI::E;
     ac6:	63 e7       	ldi	r22, 0x73	; 115
		break;
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'F':
		di = DI::F;
     aca:	63 e6       	ldi	r22, 0x63	; 99
		break;
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'G':
		di = DI::G;
     ace:	6a e7       	ldi	r22, 0x7A	; 122
		break;
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <_ZN7Display11displayNoteEPK4Noted+0x52>

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::displayNote(const Note* note, double frequency) {
	DI di = DI::A;
     ad2:	6f e6       	ldi	r22, 0x6F	; 111
void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
}

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	ce 01       	movw	r24, r28
     ad8:	73 dd       	rcall	.-1306   	; 0x5c0 <_ZN7Display5lightEj>
		di = DI::G;
		break;
	}
	
	this->light(di);
	this->lightSharp(note->sharp);
     ada:	f8 01       	movw	r30, r16
     adc:	61 81       	ldd	r22, Z+1	; 0x01
     ade:	ce 01       	movw	r24, r28
     ae0:	89 dd       	rcall	.-1262   	; 0x5f4 <_ZN7Display10lightSharpEb>
	this->lightIndicator(note, frequency);
     ae2:	a7 01       	movw	r20, r14
     ae4:	96 01       	movw	r18, r12
     ae6:	b8 01       	movw	r22, r16
     ae8:	ce 01       	movw	r24, r28
     aea:	b3 de       	rcall	.-666    	; 0x852 <_ZN7Display14lightIndicatorEPK4Noted>
	//this->time_at_last_display = millis();
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	cf 90       	pop	r12
     afc:	08 95       	ret

00000afe <_Z13getNoteByFreqP4Noted>:
	}

	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
     afe:	2f 92       	push	r2
     b00:	3f 92       	push	r3
     b02:	4f 92       	push	r4
     b04:	5f 92       	push	r5
     b06:	6f 92       	push	r6
     b08:	7f 92       	push	r7
     b0a:	8f 92       	push	r8
     b0c:	9f 92       	push	r9
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	2c 97       	sbiw	r28, 0x0c	; 12
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	9e 83       	std	Y+6, r25	; 0x06
     b34:	8d 83       	std	Y+5, r24	; 0x05
     b36:	49 83       	std	Y+1, r20	; 0x01
     b38:	5a 83       	std	Y+2, r21	; 0x02
     b3a:	6b 83       	std	Y+3, r22	; 0x03
     b3c:	7c 83       	std	Y+4, r23	; 0x04

#include "noteDetection.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     b3e:	2b e9       	ldi	r18, 0x9B	; 155
     b40:	38 e4       	ldi	r19, 0x48	; 72
     b42:	4e e7       	ldi	r20, 0x7E	; 126
     b44:	51 e4       	ldi	r21, 0x41	; 65
     b46:	69 81       	ldd	r22, Y+1	; 0x01
     b48:	7a 81       	ldd	r23, Y+2	; 0x02
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	9c 81       	ldd	r25, Y+4	; 0x04
     b4e:	a0 d3       	rcall	.+1856   	; 0x1290 <__gesf2>
     b50:	88 23       	and	r24, r24
     b52:	0c f4       	brge	.+2      	; 0xb56 <_Z13getNoteByFreqP4Noted+0x58>
     b54:	f9 c0       	rjmp	.+498    	; 0xd48 <_Z13getNoteByFreqP4Noted+0x24a>
     b56:	22 e5       	ldi	r18, 0x52	; 82
     b58:	38 e4       	ldi	r19, 0x48	; 72
     b5a:	4e ef       	ldi	r20, 0xFE	; 254
     b5c:	53 e4       	ldi	r21, 0x43	; 67
     b5e:	69 81       	ldd	r22, Y+1	; 0x01
     b60:	7a 81       	ldd	r23, Y+2	; 0x02
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	26 d2       	rcall	.+1100   	; 0xfb4 <__cmpsf2>
     b68:	88 23       	and	r24, r24
     b6a:	0c f0       	brlt	.+2      	; 0xb6e <_Z13getNoteByFreqP4Noted+0x70>
     b6c:	ed c0       	rjmp	.+474    	; 0xd48 <_Z13getNoteByFreqP4Noted+0x24a>
     b6e:	f0 c0       	rjmp	.+480    	; 0xd50 <_Z13getNoteByFreqP4Noted+0x252>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b70:	0f 2e       	mov	r0, r31
     b72:	c1 2c       	mov	r12, r1
     b74:	d1 2c       	mov	r13, r1
     b76:	f0 e8       	ldi	r31, 0x80	; 128
     b78:	ef 2e       	mov	r14, r31
     b7a:	ff e3       	ldi	r31, 0x3F	; 63
     b7c:	ff 2e       	mov	r15, r31
     b7e:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     b80:	a7 01       	movw	r20, r14
     b82:	96 01       	movw	r18, r12
     b84:	c7 01       	movw	r24, r14
     b86:	b6 01       	movw	r22, r12
     b88:	b1 d1       	rcall	.+866    	; 0xeec <__addsf3>
     b8a:	6b 01       	movw	r12, r22
     b8c:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b8e:	2b e9       	ldi	r18, 0x9B	; 155
     b90:	38 e4       	ldi	r19, 0x48	; 72
     b92:	4e ef       	ldi	r20, 0xFE	; 254
     b94:	51 e4       	ldi	r21, 0x41	; 65
     b96:	80 d3       	rcall	.+1792   	; 0x1298 <__mulsf3>
     b98:	4b 01       	movw	r8, r22
     b9a:	5c 01       	movw	r10, r24
     b9c:	9b 01       	movw	r18, r22
     b9e:	ac 01       	movw	r20, r24
     ba0:	69 81       	ldd	r22, Y+1	; 0x01
     ba2:	7a 81       	ldd	r23, Y+2	; 0x02
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	73 d3       	rcall	.+1766   	; 0x1290 <__gesf2>
     baa:	18 16       	cp	r1, r24
     bac:	4c f3       	brlt	.-46     	; 0xb80 <_Z13getNoteByFreqP4Noted+0x82>
     bae:	8f 82       	std	Y+7, r8	; 0x07
     bb0:	98 86       	std	Y+8, r9	; 0x08
     bb2:	a9 86       	std	Y+9, r10	; 0x09
     bb4:	ba 86       	std	Y+10, r11	; 0x0a
     bb6:	e8 c0       	rjmp	.+464    	; 0xd88 <_Z13getNoteByFreqP4Noted+0x28a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     bb8:	1c 01       	movw	r2, r24
     bba:	51 01       	movw	r10, r2
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	a8 1a       	sub	r10, r24
     bc0:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     bc2:	ab 85       	ldd	r26, Y+11	; 0x0b
     bc4:	bc 85       	ldd	r27, Y+12	; 0x0c
     bc6:	6d 91       	ld	r22, X+
     bc8:	7d 91       	ld	r23, X+
     bca:	8d 91       	ld	r24, X+
     bcc:	9d 91       	ld	r25, X+
     bce:	bc 87       	std	Y+12, r27	; 0x0c
     bd0:	ab 87       	std	Y+11, r26	; 0x0b
     bd2:	a7 01       	movw	r20, r14
     bd4:	96 01       	movw	r18, r12
     bd6:	60 d3       	rcall	.+1728   	; 0x1298 <__mulsf3>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	69 81       	ldd	r22, Y+1	; 0x01
     bde:	7a 81       	ldd	r23, Y+2	; 0x02
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	82 d1       	rcall	.+772    	; 0xeea <__subsf3>
     be6:	52 d2       	rcall	.+1188   	; 0x108c <__fixsfsi>
     be8:	9b 01       	movw	r18, r22
     bea:	77 23       	and	r23, r23
     bec:	24 f4       	brge	.+8      	; 0xbf6 <_Z13getNoteByFreqP4Noted+0xf8>
     bee:	22 27       	eor	r18, r18
     bf0:	33 27       	eor	r19, r19
     bf2:	26 1b       	sub	r18, r22
     bf4:	37 0b       	sbc	r19, r23
     bf6:	b9 01       	movw	r22, r18
     bf8:	33 0f       	add	r19, r19
     bfa:	88 0b       	sbc	r24, r24
     bfc:	99 0b       	sbc	r25, r25
     bfe:	79 d2       	rcall	.+1266   	; 0x10f2 <__floatsisf>
     c00:	96 2e       	mov	r9, r22
     c02:	07 2f       	mov	r16, r23
     c04:	18 2f       	mov	r17, r24
     c06:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     c08:	27 2d       	mov	r18, r7
     c0a:	34 2d       	mov	r19, r4
     c0c:	45 2d       	mov	r20, r5
     c0e:	56 2d       	mov	r21, r6
     c10:	d1 d1       	rcall	.+930    	; 0xfb4 <__cmpsf2>
     c12:	88 23       	and	r24, r24
     c14:	54 f4       	brge	.+20     	; 0xc2a <_Z13getNoteByFreqP4Noted+0x12c>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c16:	c1 01       	movw	r24, r2
     c18:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     c1a:	79 2c       	mov	r7, r9
     c1c:	40 2e       	mov	r4, r16
     c1e:	51 2e       	mov	r5, r17
     c20:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c22:	8c 30       	cpi	r24, 0x0C	; 12
     c24:	91 05       	cpc	r25, r1
     c26:	41 f6       	brne	.-112    	; 0xbb8 <_Z13getNoteByFreqP4Noted+0xba>
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <_Z13getNoteByFreqP4Noted+0x12e>
     c2a:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     c2c:	f1 01       	movw	r30, r2
     c2e:	ef 58       	subi	r30, 0x8F	; 143
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	80 81       	ld	r24, Z
     c34:	ed 81       	ldd	r30, Y+5	; 0x05
     c36:	fe 81       	ldd	r31, Y+6	; 0x06
     c38:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     c3a:	f1 01       	movw	r30, r2
     c3c:	eb 59       	subi	r30, 0x9B	; 155
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	80 81       	ld	r24, Z
     c42:	ad 81       	ldd	r26, Y+5	; 0x05
     c44:	be 81       	ldd	r27, Y+6	; 0x06
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     c4a:	f1 01       	movw	r30, r2
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e3 58       	subi	r30, 0x83	; 131
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	42 81       	ldd	r20, Z+2	; 0x02
     c5e:	53 81       	ldd	r21, Z+3	; 0x03
     c60:	c7 01       	movw	r24, r14
     c62:	b6 01       	movw	r22, r12
     c64:	19 d3       	rcall	.+1586   	; 0x1298 <__mulsf3>
     c66:	2b 01       	movw	r4, r22
     c68:	3c 01       	movw	r6, r24
     c6a:	ed 81       	ldd	r30, Y+5	; 0x05
     c6c:	fe 81       	ldd	r31, Y+6	; 0x06
     c6e:	62 83       	std	Z+2, r22	; 0x02
     c70:	73 83       	std	Z+3, r23	; 0x03
     c72:	84 83       	std	Z+4, r24	; 0x04
     c74:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     c7a:	fb e0       	ldi	r31, 0x0B	; 11
     c7c:	2f 16       	cp	r2, r31
     c7e:	31 04       	cpc	r3, r1
     c80:	59 f4       	brne	.+22     	; 0xc98 <_Z13getNoteByFreqP4Noted+0x19a>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     c82:	8f 81       	ldd	r24, Y+7	; 0x07
     c84:	98 85       	ldd	r25, Y+8	; 0x08
     c86:	a9 85       	ldd	r26, Y+9	; 0x09
     c88:	ba 85       	ldd	r27, Y+10	; 0x0a
     c8a:	ed 81       	ldd	r30, Y+5	; 0x05
     c8c:	fe 81       	ldd	r31, Y+6	; 0x06
     c8e:	82 87       	std	Z+10, r24	; 0x0a
     c90:	93 87       	std	Z+11, r25	; 0x0b
     c92:	a4 87       	std	Z+12, r26	; 0x0c
     c94:	b5 87       	std	Z+13, r27	; 0x0d
     c96:	32 c0       	rjmp	.+100    	; 0xcfc <_Z13getNoteByFreqP4Noted+0x1fe>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     c98:	f1 01       	movw	r30, r2
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ef 57       	subi	r30, 0x7F	; 127
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255
     ca6:	20 81       	ld	r18, Z
     ca8:	31 81       	ldd	r19, Z+1	; 0x01
     caa:	42 81       	ldd	r20, Z+2	; 0x02
     cac:	53 81       	ldd	r21, Z+3	; 0x03
     cae:	c7 01       	movw	r24, r14
     cb0:	b6 01       	movw	r22, r12
     cb2:	f2 d2       	rcall	.+1508   	; 0x1298 <__mulsf3>
     cb4:	a3 01       	movw	r20, r6
     cb6:	92 01       	movw	r18, r4
     cb8:	18 d1       	rcall	.+560    	; 0xeea <__subsf3>
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	ea d2       	rcall	.+1492   	; 0x1298 <__mulsf3>
     cc4:	a3 01       	movw	r20, r6
     cc6:	92 01       	movw	r18, r4
     cc8:	11 d1       	rcall	.+546    	; 0xeec <__addsf3>
     cca:	ad 81       	ldd	r26, Y+5	; 0x05
     ccc:	be 81       	ldd	r27, Y+6	; 0x06
     cce:	1a 96       	adiw	r26, 0x0a	; 10
     cd0:	6d 93       	st	X+, r22
     cd2:	7d 93       	st	X+, r23
     cd4:	8d 93       	st	X+, r24
     cd6:	9c 93       	st	X, r25
     cd8:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     cda:	21 14       	cp	r2, r1
     cdc:	31 04       	cpc	r3, r1
     cde:	71 f4       	brne	.+28     	; 0xcfc <_Z13getNoteByFreqP4Noted+0x1fe>
		note->min_freq = MIN_FREQ*multiplier;
     ce0:	2b e9       	ldi	r18, 0x9B	; 155
     ce2:	38 e4       	ldi	r19, 0x48	; 72
     ce4:	4e e7       	ldi	r20, 0x7E	; 126
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	c7 01       	movw	r24, r14
     cea:	b6 01       	movw	r22, r12
     cec:	d5 d2       	rcall	.+1450   	; 0x1298 <__mulsf3>
     cee:	ed 81       	ldd	r30, Y+5	; 0x05
     cf0:	fe 81       	ldd	r31, Y+6	; 0x06
     cf2:	66 83       	std	Z+6, r22	; 0x06
     cf4:	77 83       	std	Z+7, r23	; 0x07
     cf6:	80 87       	std	Z+8, r24	; 0x08
     cf8:	91 87       	std	Z+9, r25	; 0x09
     cfa:	b0 c0       	rjmp	.+352    	; 0xe5c <_Z13getNoteByFreqP4Noted+0x35e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     cfc:	f1 01       	movw	r30, r2
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	e7 58       	subi	r30, 0x87	; 135
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	20 81       	ld	r18, Z
     d0c:	31 81       	ldd	r19, Z+1	; 0x01
     d0e:	42 81       	ldd	r20, Z+2	; 0x02
     d10:	53 81       	ldd	r21, Z+3	; 0x03
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	c0 d2       	rcall	.+1408   	; 0x1298 <__mulsf3>
     d18:	9b 01       	movw	r18, r22
     d1a:	ac 01       	movw	r20, r24
     d1c:	c3 01       	movw	r24, r6
     d1e:	b2 01       	movw	r22, r4
     d20:	e4 d0       	rcall	.+456    	; 0xeea <__subsf3>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	b6 d2       	rcall	.+1388   	; 0x1298 <__mulsf3>
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	c3 01       	movw	r24, r6
     d32:	b2 01       	movw	r22, r4
     d34:	da d0       	rcall	.+436    	; 0xeea <__subsf3>
     d36:	ad 81       	ldd	r26, Y+5	; 0x05
     d38:	be 81       	ldd	r27, Y+6	; 0x06
     d3a:	16 96       	adiw	r26, 0x06	; 6
     d3c:	6d 93       	st	X+, r22
     d3e:	7d 93       	st	X+, r23
     d40:	8d 93       	st	X+, r24
     d42:	9c 93       	st	X, r25
     d44:	19 97       	sbiw	r26, 0x09	; 9
     d46:	8a c0       	rjmp	.+276    	; 0xe5c <_Z13getNoteByFreqP4Noted+0x35e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     d48:	ed 81       	ldd	r30, Y+5	; 0x05
     d4a:	fe 81       	ldd	r31, Y+6	; 0x06
     d4c:	16 86       	std	Z+14, r1	; 0x0e
		return;
     d4e:	86 c0       	rjmp	.+268    	; 0xe5c <_Z13getNoteByFreqP4Noted+0x35e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     d50:	2b e9       	ldi	r18, 0x9B	; 155
     d52:	38 e4       	ldi	r19, 0x48	; 72
     d54:	4e ef       	ldi	r20, 0xFE	; 254
     d56:	51 e4       	ldi	r21, 0x41	; 65
     d58:	69 81       	ldd	r22, Y+1	; 0x01
     d5a:	7a 81       	ldd	r23, Y+2	; 0x02
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	97 d2       	rcall	.+1326   	; 0x1290 <__gesf2>
     d62:	18 16       	cp	r1, r24
     d64:	0c f4       	brge	.+2      	; 0xd68 <_Z13getNoteByFreqP4Noted+0x26a>
     d66:	04 cf       	rjmp	.-504    	; 0xb70 <_Z13getNoteByFreqP4Noted+0x72>
     d68:	8b e9       	ldi	r24, 0x9B	; 155
     d6a:	98 e4       	ldi	r25, 0x48	; 72
     d6c:	ae ef       	ldi	r26, 0xFE	; 254
     d6e:	b1 e4       	ldi	r27, 0x41	; 65
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	a9 87       	std	Y+9, r26	; 0x09
     d76:	ba 87       	std	Y+10, r27	; 0x0a
     d78:	0f 2e       	mov	r0, r31
     d7a:	c1 2c       	mov	r12, r1
     d7c:	d1 2c       	mov	r13, r1
     d7e:	f0 e8       	ldi	r31, 0x80	; 128
     d80:	ef 2e       	mov	r14, r31
     d82:	ff e3       	ldi	r31, 0x3F	; 63
     d84:	ff 2e       	mov	r15, r31
     d86:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     d88:	23 e1       	ldi	r18, 0x13	; 19
     d8a:	30 ed       	ldi	r19, 0xD0	; 208
     d8c:	42 e8       	ldi	r20, 0x82	; 130
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	81 d2       	rcall	.+1282   	; 0x1298 <__mulsf3>
     d96:	9b 01       	movw	r18, r22
     d98:	ac 01       	movw	r20, r24
     d9a:	69 81       	ldd	r22, Y+1	; 0x01
     d9c:	7a 81       	ldd	r23, Y+2	; 0x02
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	9c 81       	ldd	r25, Y+4	; 0x04
     da2:	a3 d0       	rcall	.+326    	; 0xeea <__subsf3>
     da4:	73 d1       	rcall	.+742    	; 0x108c <__fixsfsi>
     da6:	9b 01       	movw	r18, r22
     da8:	77 23       	and	r23, r23
     daa:	24 f4       	brge	.+8      	; 0xdb4 <_Z13getNoteByFreqP4Noted+0x2b6>
     dac:	22 27       	eor	r18, r18
     dae:	33 27       	eor	r19, r19
     db0:	26 1b       	sub	r18, r22
     db2:	37 0b       	sbc	r19, r23
     db4:	b9 01       	movw	r22, r18
     db6:	33 0f       	add	r19, r19
     db8:	88 0b       	sbc	r24, r24
     dba:	99 0b       	sbc	r25, r25
     dbc:	9a d1       	rcall	.+820    	; 0x10f2 <__floatsisf>
     dbe:	76 2e       	mov	r7, r22
     dc0:	47 2e       	mov	r4, r23
     dc2:	58 2e       	mov	r5, r24
     dc4:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     dc6:	22 e5       	ldi	r18, 0x52	; 82
     dc8:	38 e4       	ldi	r19, 0x48	; 72
     dca:	4e ef       	ldi	r20, 0xFE	; 254
     dcc:	53 e4       	ldi	r21, 0x43	; 67
     dce:	f2 d0       	rcall	.+484    	; 0xfb4 <__cmpsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	44 f4       	brge	.+16     	; 0xde4 <_Z13getNoteByFreqP4Noted+0x2e6>
     dd4:	a1 e8       	ldi	r26, 0x81	; 129
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     dd8:	22 24       	eor	r2, r2
     dda:	23 94       	inc	r2
     ddc:	31 2c       	mov	r3, r1
     dde:	bc 87       	std	Y+12, r27	; 0x0c
     de0:	ab 87       	std	Y+11, r26	; 0x0b
     de2:	eb ce       	rjmp	.-554    	; 0xbba <_Z13getNoteByFreqP4Noted+0xbc>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     de4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZL10noteSharps+0xb>
     de8:	ed 81       	ldd	r30, Y+5	; 0x05
     dea:	fe 81       	ldd	r31, Y+6	; 0x06
     dec:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     dee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL8slopeTol>
     df2:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     df4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <_ZL9noteNames+0x8>
     df8:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <_ZL9noteNames+0x9>
     dfc:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <_ZL9noteNames+0xa>
     e00:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <_ZL9noteNames+0xb>
     e04:	c7 01       	movw	r24, r14
     e06:	b6 01       	movw	r22, r12
     e08:	47 d2       	rcall	.+1166   	; 0x1298 <__mulsf3>
     e0a:	2b 01       	movw	r4, r22
     e0c:	3c 01       	movw	r6, r24
     e0e:	ad 81       	ldd	r26, Y+5	; 0x05
     e10:	be 81       	ldd	r27, Y+6	; 0x06
     e12:	12 96       	adiw	r26, 0x02	; 2
     e14:	6d 93       	st	X+, r22
     e16:	7d 93       	st	X+, r23
     e18:	8d 93       	st	X+, r24
     e1a:	9c 93       	st	X, r25
     e1c:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	1e 96       	adiw	r26, 0x0e	; 14
     e22:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     e24:	23 e1       	ldi	r18, 0x13	; 19
     e26:	30 ed       	ldi	r19, 0xD0	; 208
     e28:	42 e8       	ldi	r20, 0x82	; 130
     e2a:	51 e4       	ldi	r21, 0x41	; 65
     e2c:	c7 01       	movw	r24, r14
     e2e:	b6 01       	movw	r22, r12
     e30:	33 d2       	rcall	.+1126   	; 0x1298 <__mulsf3>
     e32:	a3 01       	movw	r20, r6
     e34:	92 01       	movw	r18, r4
     e36:	59 d0       	rcall	.+178    	; 0xeea <__subsf3>
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	2b d2       	rcall	.+1110   	; 0x1298 <__mulsf3>
     e42:	a3 01       	movw	r20, r6
     e44:	92 01       	movw	r18, r4
     e46:	52 d0       	rcall	.+164    	; 0xeec <__addsf3>
     e48:	ed 81       	ldd	r30, Y+5	; 0x05
     e4a:	fe 81       	ldd	r31, Y+6	; 0x06
     e4c:	62 87       	std	Z+10, r22	; 0x0a
     e4e:	73 87       	std	Z+11, r23	; 0x0b
     e50:	84 87       	std	Z+12, r24	; 0x0c
     e52:	95 87       	std	Z+13, r25	; 0x0d
     e54:	22 24       	eor	r2, r2
     e56:	2a 94       	dec	r2
     e58:	32 2c       	mov	r3, r2
     e5a:	50 cf       	rjmp	.-352    	; 0xcfc <_Z13getNoteByFreqP4Noted+0x1fe>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     e5c:	2c 96       	adiw	r28, 0x0c	; 12
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	5f 90       	pop	r5
     e86:	4f 90       	pop	r4
     e88:	3f 90       	pop	r3
     e8a:	2f 90       	pop	r2
     e8c:	08 95       	ret

00000e8e <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     e8e:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     e90:	28 b3       	in	r18, 0x18	; 24
     e92:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     e94:	38 b3       	in	r19, 0x18	; 24
     e96:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     e98:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     e9a:	f8 94       	cli

  while (datlen--) {
     e9c:	61 15       	cp	r22, r1
     e9e:	71 05       	cpc	r23, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <ws2812_sendarray+0x16>
     ea2:	21 c0       	rjmp	.+66     	; 0xee6 <loop301+0x38>
     ea4:	fc 01       	movw	r30, r24
     ea6:	68 0f       	add	r22, r24
     ea8:	79 1f       	adc	r23, r25
    curbyte=*data++;
     eaa:	91 91       	ld	r25, Z+
    
    asm volatile(
     eac:	88 e0       	ldi	r24, 0x08	; 8

00000eae <loop301>:
     eae:	38 bb       	out	0x18, r19	; 24
     eb0:	97 ff       	sbrs	r25, 7
     eb2:	28 bb       	out	0x18, r18	; 24
     eb4:	99 0f       	add	r25, r25
     eb6:	00 00       	nop
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <loop301+0xc>
     eba:	28 bb       	out	0x18, r18	; 24
     ebc:	00 00       	nop
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <loop301+0x12>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <loop301+0x14>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <loop301+0x16>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <loop301+0x18>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <loop301+0x1a>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <loop301+0x1c>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <loop301+0x1e>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <loop301+0x20>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <loop301+0x22>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <loop301+0x24>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <loop301+0x26>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <loop301+0x28>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <loop301+0x2a>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <loop301+0x2c>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <loop301+0x2e>
     edc:	8a 95       	dec	r24
     ede:	39 f7       	brne	.-50     	; 0xeae <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     ee0:	e6 17       	cp	r30, r22
     ee2:	f7 07       	cpc	r31, r23
     ee4:	11 f7       	brne	.-60     	; 0xeaa <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     ee6:	4f bf       	out	0x3f, r20	; 63
     ee8:	08 95       	ret

00000eea <__subsf3>:
     eea:	50 58       	subi	r21, 0x80	; 128

00000eec <__addsf3>:
     eec:	bb 27       	eor	r27, r27
     eee:	aa 27       	eor	r26, r26
     ef0:	0e d0       	rcall	.+28     	; 0xf0e <__addsf3x>
     ef2:	94 c1       	rjmp	.+808    	; 0x121c <__fp_round>
     ef4:	85 d1       	rcall	.+778    	; 0x1200 <__fp_pscA>
     ef6:	30 f0       	brcs	.+12     	; 0xf04 <__addsf3+0x18>
     ef8:	8a d1       	rcall	.+788    	; 0x120e <__fp_pscB>
     efa:	20 f0       	brcs	.+8      	; 0xf04 <__addsf3+0x18>
     efc:	31 f4       	brne	.+12     	; 0xf0a <__addsf3+0x1e>
     efe:	9f 3f       	cpi	r25, 0xFF	; 255
     f00:	11 f4       	brne	.+4      	; 0xf06 <__addsf3+0x1a>
     f02:	1e f4       	brtc	.+6      	; 0xf0a <__addsf3+0x1e>
     f04:	7a c1       	rjmp	.+756    	; 0x11fa <__fp_nan>
     f06:	0e f4       	brtc	.+2      	; 0xf0a <__addsf3+0x1e>
     f08:	e0 95       	com	r30
     f0a:	e7 fb       	bst	r30, 7
     f0c:	70 c1       	rjmp	.+736    	; 0x11ee <__fp_inf>

00000f0e <__addsf3x>:
     f0e:	e9 2f       	mov	r30, r25
     f10:	96 d1       	rcall	.+812    	; 0x123e <__fp_split3>
     f12:	80 f3       	brcs	.-32     	; 0xef4 <__addsf3+0x8>
     f14:	ba 17       	cp	r27, r26
     f16:	62 07       	cpc	r22, r18
     f18:	73 07       	cpc	r23, r19
     f1a:	84 07       	cpc	r24, r20
     f1c:	95 07       	cpc	r25, r21
     f1e:	18 f0       	brcs	.+6      	; 0xf26 <__addsf3x+0x18>
     f20:	71 f4       	brne	.+28     	; 0xf3e <__addsf3x+0x30>
     f22:	9e f5       	brtc	.+102    	; 0xf8a <__addsf3x+0x7c>
     f24:	ae c1       	rjmp	.+860    	; 0x1282 <__fp_zero>
     f26:	0e f4       	brtc	.+2      	; 0xf2a <__addsf3x+0x1c>
     f28:	e0 95       	com	r30
     f2a:	0b 2e       	mov	r0, r27
     f2c:	ba 2f       	mov	r27, r26
     f2e:	a0 2d       	mov	r26, r0
     f30:	0b 01       	movw	r0, r22
     f32:	b9 01       	movw	r22, r18
     f34:	90 01       	movw	r18, r0
     f36:	0c 01       	movw	r0, r24
     f38:	ca 01       	movw	r24, r20
     f3a:	a0 01       	movw	r20, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	ff 27       	eor	r31, r31
     f40:	59 1b       	sub	r21, r25
     f42:	99 f0       	breq	.+38     	; 0xf6a <__addsf3x+0x5c>
     f44:	59 3f       	cpi	r21, 0xF9	; 249
     f46:	50 f4       	brcc	.+20     	; 0xf5c <__addsf3x+0x4e>
     f48:	50 3e       	cpi	r21, 0xE0	; 224
     f4a:	68 f1       	brcs	.+90     	; 0xfa6 <__addsf3x+0x98>
     f4c:	1a 16       	cp	r1, r26
     f4e:	f0 40       	sbci	r31, 0x00	; 0
     f50:	a2 2f       	mov	r26, r18
     f52:	23 2f       	mov	r18, r19
     f54:	34 2f       	mov	r19, r20
     f56:	44 27       	eor	r20, r20
     f58:	58 5f       	subi	r21, 0xF8	; 248
     f5a:	f3 cf       	rjmp	.-26     	; 0xf42 <__addsf3x+0x34>
     f5c:	46 95       	lsr	r20
     f5e:	37 95       	ror	r19
     f60:	27 95       	ror	r18
     f62:	a7 95       	ror	r26
     f64:	f0 40       	sbci	r31, 0x00	; 0
     f66:	53 95       	inc	r21
     f68:	c9 f7       	brne	.-14     	; 0xf5c <__addsf3x+0x4e>
     f6a:	7e f4       	brtc	.+30     	; 0xf8a <__addsf3x+0x7c>
     f6c:	1f 16       	cp	r1, r31
     f6e:	ba 0b       	sbc	r27, r26
     f70:	62 0b       	sbc	r22, r18
     f72:	73 0b       	sbc	r23, r19
     f74:	84 0b       	sbc	r24, r20
     f76:	ba f0       	brmi	.+46     	; 0xfa6 <__addsf3x+0x98>
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	a1 f0       	breq	.+40     	; 0xfa4 <__addsf3x+0x96>
     f7c:	ff 0f       	add	r31, r31
     f7e:	bb 1f       	adc	r27, r27
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	c2 f7       	brpl	.-16     	; 0xf78 <__addsf3x+0x6a>
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <__addsf3x+0x98>
     f8a:	ba 0f       	add	r27, r26
     f8c:	62 1f       	adc	r22, r18
     f8e:	73 1f       	adc	r23, r19
     f90:	84 1f       	adc	r24, r20
     f92:	48 f4       	brcc	.+18     	; 0xfa6 <__addsf3x+0x98>
     f94:	87 95       	ror	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	9e 3f       	cpi	r25, 0xFE	; 254
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <__addsf3x+0x96>
     fa2:	b3 cf       	rjmp	.-154    	; 0xf0a <__addsf3+0x1e>
     fa4:	93 95       	inc	r25
     fa6:	88 0f       	add	r24, r24
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__addsf3x+0x9e>
     faa:	99 27       	eor	r25, r25
     fac:	ee 0f       	add	r30, r30
     fae:	97 95       	ror	r25
     fb0:	87 95       	ror	r24
     fb2:	08 95       	ret

00000fb4 <__cmpsf2>:
     fb4:	f8 d0       	rcall	.+496    	; 0x11a6 <__fp_cmp>
     fb6:	08 f4       	brcc	.+2      	; 0xfba <__cmpsf2+0x6>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 95       	ret

00000fbc <__divsf3>:
     fbc:	0c d0       	rcall	.+24     	; 0xfd6 <__divsf3x>
     fbe:	2e c1       	rjmp	.+604    	; 0x121c <__fp_round>
     fc0:	26 d1       	rcall	.+588    	; 0x120e <__fp_pscB>
     fc2:	40 f0       	brcs	.+16     	; 0xfd4 <__divsf3+0x18>
     fc4:	1d d1       	rcall	.+570    	; 0x1200 <__fp_pscA>
     fc6:	30 f0       	brcs	.+12     	; 0xfd4 <__divsf3+0x18>
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <__divsf3+0x16>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__divsf3+0x18>
     fce:	0f c1       	rjmp	.+542    	; 0x11ee <__fp_inf>
     fd0:	51 11       	cpse	r21, r1
     fd2:	58 c1       	rjmp	.+688    	; 0x1284 <__fp_szero>
     fd4:	12 c1       	rjmp	.+548    	; 0x11fa <__fp_nan>

00000fd6 <__divsf3x>:
     fd6:	33 d1       	rcall	.+614    	; 0x123e <__fp_split3>
     fd8:	98 f3       	brcs	.-26     	; 0xfc0 <__divsf3+0x4>

00000fda <__divsf3_pse>:
     fda:	99 23       	and	r25, r25
     fdc:	c9 f3       	breq	.-14     	; 0xfd0 <__divsf3+0x14>
     fde:	55 23       	and	r21, r21
     fe0:	b1 f3       	breq	.-20     	; 0xfce <__divsf3+0x12>
     fe2:	95 1b       	sub	r25, r21
     fe4:	55 0b       	sbc	r21, r21
     fe6:	bb 27       	eor	r27, r27
     fe8:	aa 27       	eor	r26, r26
     fea:	62 17       	cp	r22, r18
     fec:	73 07       	cpc	r23, r19
     fee:	84 07       	cpc	r24, r20
     ff0:	38 f0       	brcs	.+14     	; 0x1000 <__divsf3_pse+0x26>
     ff2:	9f 5f       	subi	r25, 0xFF	; 255
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	22 0f       	add	r18, r18
     ff8:	33 1f       	adc	r19, r19
     ffa:	44 1f       	adc	r20, r20
     ffc:	aa 1f       	adc	r26, r26
     ffe:	a9 f3       	breq	.-22     	; 0xfea <__divsf3_pse+0x10>
    1000:	33 d0       	rcall	.+102    	; 0x1068 <__divsf3_pse+0x8e>
    1002:	0e 2e       	mov	r0, r30
    1004:	3a f0       	brmi	.+14     	; 0x1014 <__divsf3_pse+0x3a>
    1006:	e0 e8       	ldi	r30, 0x80	; 128
    1008:	30 d0       	rcall	.+96     	; 0x106a <__divsf3_pse+0x90>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	50 40       	sbci	r21, 0x00	; 0
    100e:	e6 95       	lsr	r30
    1010:	00 1c       	adc	r0, r0
    1012:	ca f7       	brpl	.-14     	; 0x1006 <__divsf3_pse+0x2c>
    1014:	29 d0       	rcall	.+82     	; 0x1068 <__divsf3_pse+0x8e>
    1016:	fe 2f       	mov	r31, r30
    1018:	27 d0       	rcall	.+78     	; 0x1068 <__divsf3_pse+0x8e>
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	bb 1f       	adc	r27, r27
    1022:	26 17       	cp	r18, r22
    1024:	37 07       	cpc	r19, r23
    1026:	48 07       	cpc	r20, r24
    1028:	ab 07       	cpc	r26, r27
    102a:	b0 e8       	ldi	r27, 0x80	; 128
    102c:	09 f0       	breq	.+2      	; 0x1030 <__divsf3_pse+0x56>
    102e:	bb 0b       	sbc	r27, r27
    1030:	80 2d       	mov	r24, r0
    1032:	bf 01       	movw	r22, r30
    1034:	ff 27       	eor	r31, r31
    1036:	93 58       	subi	r25, 0x83	; 131
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	2a f0       	brmi	.+10     	; 0x1046 <__divsf3_pse+0x6c>
    103c:	9e 3f       	cpi	r25, 0xFE	; 254
    103e:	51 05       	cpc	r21, r1
    1040:	68 f0       	brcs	.+26     	; 0x105c <__divsf3_pse+0x82>
    1042:	d5 c0       	rjmp	.+426    	; 0x11ee <__fp_inf>
    1044:	1f c1       	rjmp	.+574    	; 0x1284 <__fp_szero>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	ec f3       	brlt	.-6      	; 0x1044 <__divsf3_pse+0x6a>
    104a:	98 3e       	cpi	r25, 0xE8	; 232
    104c:	dc f3       	brlt	.-10     	; 0x1044 <__divsf3_pse+0x6a>
    104e:	86 95       	lsr	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b7 95       	ror	r27
    1056:	f7 95       	ror	r31
    1058:	9f 5f       	subi	r25, 0xFF	; 255
    105a:	c9 f7       	brne	.-14     	; 0x104e <__divsf3_pse+0x74>
    105c:	88 0f       	add	r24, r24
    105e:	91 1d       	adc	r25, r1
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret
    1068:	e1 e0       	ldi	r30, 0x01	; 1
    106a:	66 0f       	add	r22, r22
    106c:	77 1f       	adc	r23, r23
    106e:	88 1f       	adc	r24, r24
    1070:	bb 1f       	adc	r27, r27
    1072:	62 17       	cp	r22, r18
    1074:	73 07       	cpc	r23, r19
    1076:	84 07       	cpc	r24, r20
    1078:	ba 07       	cpc	r27, r26
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__divsf3_pse+0xaa>
    107c:	62 1b       	sub	r22, r18
    107e:	73 0b       	sbc	r23, r19
    1080:	84 0b       	sbc	r24, r20
    1082:	ba 0b       	sbc	r27, r26
    1084:	ee 1f       	adc	r30, r30
    1086:	88 f7       	brcc	.-30     	; 0x106a <__divsf3_pse+0x90>
    1088:	e0 95       	com	r30
    108a:	08 95       	ret

0000108c <__fixsfsi>:
    108c:	04 d0       	rcall	.+8      	; 0x1096 <__fixunssfsi>
    108e:	68 94       	set
    1090:	b1 11       	cpse	r27, r1
    1092:	f8 c0       	rjmp	.+496    	; 0x1284 <__fp_szero>
    1094:	08 95       	ret

00001096 <__fixunssfsi>:
    1096:	db d0       	rcall	.+438    	; 0x124e <__fp_splitA>
    1098:	88 f0       	brcs	.+34     	; 0x10bc <__fixunssfsi+0x26>
    109a:	9f 57       	subi	r25, 0x7F	; 127
    109c:	90 f0       	brcs	.+36     	; 0x10c2 <__fixunssfsi+0x2c>
    109e:	b9 2f       	mov	r27, r25
    10a0:	99 27       	eor	r25, r25
    10a2:	b7 51       	subi	r27, 0x17	; 23
    10a4:	a0 f0       	brcs	.+40     	; 0x10ce <__fixunssfsi+0x38>
    10a6:	d1 f0       	breq	.+52     	; 0x10dc <__fixunssfsi+0x46>
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	1a f0       	brmi	.+6      	; 0x10b8 <__fixunssfsi+0x22>
    10b2:	ba 95       	dec	r27
    10b4:	c9 f7       	brne	.-14     	; 0x10a8 <__fixunssfsi+0x12>
    10b6:	12 c0       	rjmp	.+36     	; 0x10dc <__fixunssfsi+0x46>
    10b8:	b1 30       	cpi	r27, 0x01	; 1
    10ba:	81 f0       	breq	.+32     	; 0x10dc <__fixunssfsi+0x46>
    10bc:	e2 d0       	rcall	.+452    	; 0x1282 <__fp_zero>
    10be:	b1 e0       	ldi	r27, 0x01	; 1
    10c0:	08 95       	ret
    10c2:	df c0       	rjmp	.+446    	; 0x1282 <__fp_zero>
    10c4:	67 2f       	mov	r22, r23
    10c6:	78 2f       	mov	r23, r24
    10c8:	88 27       	eor	r24, r24
    10ca:	b8 5f       	subi	r27, 0xF8	; 248
    10cc:	39 f0       	breq	.+14     	; 0x10dc <__fixunssfsi+0x46>
    10ce:	b9 3f       	cpi	r27, 0xF9	; 249
    10d0:	cc f3       	brlt	.-14     	; 0x10c4 <__fixunssfsi+0x2e>
    10d2:	86 95       	lsr	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	b3 95       	inc	r27
    10da:	d9 f7       	brne	.-10     	; 0x10d2 <__fixunssfsi+0x3c>
    10dc:	3e f4       	brtc	.+14     	; 0x10ec <__fixunssfsi+0x56>
    10de:	90 95       	com	r25
    10e0:	80 95       	com	r24
    10e2:	70 95       	com	r23
    10e4:	61 95       	neg	r22
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	08 95       	ret

000010ee <__floatunsisf>:
    10ee:	e8 94       	clt
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <__floatsisf+0x12>

000010f2 <__floatsisf>:
    10f2:	97 fb       	bst	r25, 7
    10f4:	3e f4       	brtc	.+14     	; 0x1104 <__floatsisf+0x12>
    10f6:	90 95       	com	r25
    10f8:	80 95       	com	r24
    10fa:	70 95       	com	r23
    10fc:	61 95       	neg	r22
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	99 23       	and	r25, r25
    1106:	a9 f0       	breq	.+42     	; 0x1132 <__floatsisf+0x40>
    1108:	f9 2f       	mov	r31, r25
    110a:	96 e9       	ldi	r25, 0x96	; 150
    110c:	bb 27       	eor	r27, r27
    110e:	93 95       	inc	r25
    1110:	f6 95       	lsr	r31
    1112:	87 95       	ror	r24
    1114:	77 95       	ror	r23
    1116:	67 95       	ror	r22
    1118:	b7 95       	ror	r27
    111a:	f1 11       	cpse	r31, r1
    111c:	f8 cf       	rjmp	.-16     	; 0x110e <__floatsisf+0x1c>
    111e:	fa f4       	brpl	.+62     	; 0x115e <__floatsisf+0x6c>
    1120:	bb 0f       	add	r27, r27
    1122:	11 f4       	brne	.+4      	; 0x1128 <__floatsisf+0x36>
    1124:	60 ff       	sbrs	r22, 0
    1126:	1b c0       	rjmp	.+54     	; 0x115e <__floatsisf+0x6c>
    1128:	6f 5f       	subi	r22, 0xFF	; 255
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	8f 4f       	sbci	r24, 0xFF	; 255
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	16 c0       	rjmp	.+44     	; 0x115e <__floatsisf+0x6c>
    1132:	88 23       	and	r24, r24
    1134:	11 f0       	breq	.+4      	; 0x113a <__floatsisf+0x48>
    1136:	96 e9       	ldi	r25, 0x96	; 150
    1138:	11 c0       	rjmp	.+34     	; 0x115c <__floatsisf+0x6a>
    113a:	77 23       	and	r23, r23
    113c:	21 f0       	breq	.+8      	; 0x1146 <__floatsisf+0x54>
    113e:	9e e8       	ldi	r25, 0x8E	; 142
    1140:	87 2f       	mov	r24, r23
    1142:	76 2f       	mov	r23, r22
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <__floatsisf+0x5e>
    1146:	66 23       	and	r22, r22
    1148:	71 f0       	breq	.+28     	; 0x1166 <__floatsisf+0x74>
    114a:	96 e8       	ldi	r25, 0x86	; 134
    114c:	86 2f       	mov	r24, r22
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	2a f0       	brmi	.+10     	; 0x115e <__floatsisf+0x6c>
    1154:	9a 95       	dec	r25
    1156:	66 0f       	add	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	da f7       	brpl	.-10     	; 0x1154 <__floatsisf+0x62>
    115e:	88 0f       	add	r24, r24
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	97 f9       	bld	r25, 7
    1166:	08 95       	ret

00001168 <fmin>:
    1168:	99 0f       	add	r25, r25
    116a:	bb 0b       	sbc	r27, r27
    116c:	55 0f       	add	r21, r21
    116e:	aa 0b       	sbc	r26, r26
    1170:	e0 e8       	ldi	r30, 0x80	; 128
    1172:	fe ef       	ldi	r31, 0xFE	; 254
    1174:	16 16       	cp	r1, r22
    1176:	17 06       	cpc	r1, r23
    1178:	e8 07       	cpc	r30, r24
    117a:	f9 07       	cpc	r31, r25
    117c:	70 f0       	brcs	.+28     	; 0x119a <fmin+0x32>
    117e:	12 16       	cp	r1, r18
    1180:	13 06       	cpc	r1, r19
    1182:	e4 07       	cpc	r30, r20
    1184:	f5 07       	cpc	r31, r21
    1186:	60 f0       	brcs	.+24     	; 0x11a0 <fmin+0x38>
    1188:	ba 17       	cp	r27, r26
    118a:	54 f0       	brlt	.+20     	; 0x11a0 <fmin+0x38>
    118c:	31 f4       	brne	.+12     	; 0x119a <fmin+0x32>
    118e:	26 17       	cp	r18, r22
    1190:	37 07       	cpc	r19, r23
    1192:	48 07       	cpc	r20, r24
    1194:	59 07       	cpc	r21, r25
    1196:	a7 95       	ror	r26
    1198:	1b f4       	brvc	.+6      	; 0x11a0 <fmin+0x38>
    119a:	b9 01       	movw	r22, r18
    119c:	ca 01       	movw	r24, r20
    119e:	ba 2f       	mov	r27, r26
    11a0:	b6 95       	lsr	r27
    11a2:	97 95       	ror	r25
    11a4:	08 95       	ret

000011a6 <__fp_cmp>:
    11a6:	99 0f       	add	r25, r25
    11a8:	00 08       	sbc	r0, r0
    11aa:	55 0f       	add	r21, r21
    11ac:	aa 0b       	sbc	r26, r26
    11ae:	e0 e8       	ldi	r30, 0x80	; 128
    11b0:	fe ef       	ldi	r31, 0xFE	; 254
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	e8 07       	cpc	r30, r24
    11b8:	f9 07       	cpc	r31, r25
    11ba:	c0 f0       	brcs	.+48     	; 0x11ec <__fp_cmp+0x46>
    11bc:	12 16       	cp	r1, r18
    11be:	13 06       	cpc	r1, r19
    11c0:	e4 07       	cpc	r30, r20
    11c2:	f5 07       	cpc	r31, r21
    11c4:	98 f0       	brcs	.+38     	; 0x11ec <__fp_cmp+0x46>
    11c6:	62 1b       	sub	r22, r18
    11c8:	73 0b       	sbc	r23, r19
    11ca:	84 0b       	sbc	r24, r20
    11cc:	95 0b       	sbc	r25, r21
    11ce:	39 f4       	brne	.+14     	; 0x11de <__fp_cmp+0x38>
    11d0:	0a 26       	eor	r0, r26
    11d2:	61 f0       	breq	.+24     	; 0x11ec <__fp_cmp+0x46>
    11d4:	23 2b       	or	r18, r19
    11d6:	24 2b       	or	r18, r20
    11d8:	25 2b       	or	r18, r21
    11da:	21 f4       	brne	.+8      	; 0x11e4 <__fp_cmp+0x3e>
    11dc:	08 95       	ret
    11de:	0a 26       	eor	r0, r26
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <__fp_cmp+0x3e>
    11e2:	a1 40       	sbci	r26, 0x01	; 1
    11e4:	a6 95       	lsr	r26
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	81 1d       	adc	r24, r1
    11ea:	81 1d       	adc	r24, r1
    11ec:	08 95       	ret

000011ee <__fp_inf>:
    11ee:	97 f9       	bld	r25, 7
    11f0:	9f 67       	ori	r25, 0x7F	; 127
    11f2:	80 e8       	ldi	r24, 0x80	; 128
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	08 95       	ret

000011fa <__fp_nan>:
    11fa:	9f ef       	ldi	r25, 0xFF	; 255
    11fc:	80 ec       	ldi	r24, 0xC0	; 192
    11fe:	08 95       	ret

00001200 <__fp_pscA>:
    1200:	00 24       	eor	r0, r0
    1202:	0a 94       	dec	r0
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	18 06       	cpc	r1, r24
    120a:	09 06       	cpc	r0, r25
    120c:	08 95       	ret

0000120e <__fp_pscB>:
    120e:	00 24       	eor	r0, r0
    1210:	0a 94       	dec	r0
    1212:	12 16       	cp	r1, r18
    1214:	13 06       	cpc	r1, r19
    1216:	14 06       	cpc	r1, r20
    1218:	05 06       	cpc	r0, r21
    121a:	08 95       	ret

0000121c <__fp_round>:
    121c:	09 2e       	mov	r0, r25
    121e:	03 94       	inc	r0
    1220:	00 0c       	add	r0, r0
    1222:	11 f4       	brne	.+4      	; 0x1228 <__fp_round+0xc>
    1224:	88 23       	and	r24, r24
    1226:	52 f0       	brmi	.+20     	; 0x123c <__fp_round+0x20>
    1228:	bb 0f       	add	r27, r27
    122a:	40 f4       	brcc	.+16     	; 0x123c <__fp_round+0x20>
    122c:	bf 2b       	or	r27, r31
    122e:	11 f4       	brne	.+4      	; 0x1234 <__fp_round+0x18>
    1230:	60 ff       	sbrs	r22, 0
    1232:	04 c0       	rjmp	.+8      	; 0x123c <__fp_round+0x20>
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__fp_split3>:
    123e:	57 fd       	sbrc	r21, 7
    1240:	90 58       	subi	r25, 0x80	; 128
    1242:	44 0f       	add	r20, r20
    1244:	55 1f       	adc	r21, r21
    1246:	59 f0       	breq	.+22     	; 0x125e <__fp_splitA+0x10>
    1248:	5f 3f       	cpi	r21, 0xFF	; 255
    124a:	71 f0       	breq	.+28     	; 0x1268 <__fp_splitA+0x1a>
    124c:	47 95       	ror	r20

0000124e <__fp_splitA>:
    124e:	88 0f       	add	r24, r24
    1250:	97 fb       	bst	r25, 7
    1252:	99 1f       	adc	r25, r25
    1254:	61 f0       	breq	.+24     	; 0x126e <__fp_splitA+0x20>
    1256:	9f 3f       	cpi	r25, 0xFF	; 255
    1258:	79 f0       	breq	.+30     	; 0x1278 <__fp_splitA+0x2a>
    125a:	87 95       	ror	r24
    125c:	08 95       	ret
    125e:	12 16       	cp	r1, r18
    1260:	13 06       	cpc	r1, r19
    1262:	14 06       	cpc	r1, r20
    1264:	55 1f       	adc	r21, r21
    1266:	f2 cf       	rjmp	.-28     	; 0x124c <__fp_split3+0xe>
    1268:	46 95       	lsr	r20
    126a:	f1 df       	rcall	.-30     	; 0x124e <__fp_splitA>
    126c:	08 c0       	rjmp	.+16     	; 0x127e <__fp_splitA+0x30>
    126e:	16 16       	cp	r1, r22
    1270:	17 06       	cpc	r1, r23
    1272:	18 06       	cpc	r1, r24
    1274:	99 1f       	adc	r25, r25
    1276:	f1 cf       	rjmp	.-30     	; 0x125a <__fp_splitA+0xc>
    1278:	86 95       	lsr	r24
    127a:	71 05       	cpc	r23, r1
    127c:	61 05       	cpc	r22, r1
    127e:	08 94       	sec
    1280:	08 95       	ret

00001282 <__fp_zero>:
    1282:	e8 94       	clt

00001284 <__fp_szero>:
    1284:	bb 27       	eor	r27, r27
    1286:	66 27       	eor	r22, r22
    1288:	77 27       	eor	r23, r23
    128a:	cb 01       	movw	r24, r22
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret

00001290 <__gesf2>:
    1290:	8a df       	rcall	.-236    	; 0x11a6 <__fp_cmp>
    1292:	08 f4       	brcc	.+2      	; 0x1296 <__gesf2+0x6>
    1294:	8f ef       	ldi	r24, 0xFF	; 255
    1296:	08 95       	ret

00001298 <__mulsf3>:
    1298:	0b d0       	rcall	.+22     	; 0x12b0 <__mulsf3x>
    129a:	c0 cf       	rjmp	.-128    	; 0x121c <__fp_round>
    129c:	b1 df       	rcall	.-158    	; 0x1200 <__fp_pscA>
    129e:	28 f0       	brcs	.+10     	; 0x12aa <__mulsf3+0x12>
    12a0:	b6 df       	rcall	.-148    	; 0x120e <__fp_pscB>
    12a2:	18 f0       	brcs	.+6      	; 0x12aa <__mulsf3+0x12>
    12a4:	95 23       	and	r25, r21
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__mulsf3+0x12>
    12a8:	a2 cf       	rjmp	.-188    	; 0x11ee <__fp_inf>
    12aa:	a7 cf       	rjmp	.-178    	; 0x11fa <__fp_nan>
    12ac:	11 24       	eor	r1, r1
    12ae:	ea cf       	rjmp	.-44     	; 0x1284 <__fp_szero>

000012b0 <__mulsf3x>:
    12b0:	c6 df       	rcall	.-116    	; 0x123e <__fp_split3>
    12b2:	a0 f3       	brcs	.-24     	; 0x129c <__mulsf3+0x4>

000012b4 <__mulsf3_pse>:
    12b4:	95 9f       	mul	r25, r21
    12b6:	d1 f3       	breq	.-12     	; 0x12ac <__mulsf3+0x14>
    12b8:	95 0f       	add	r25, r21
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	55 1f       	adc	r21, r21
    12be:	62 9f       	mul	r22, r18
    12c0:	f0 01       	movw	r30, r0
    12c2:	72 9f       	mul	r23, r18
    12c4:	bb 27       	eor	r27, r27
    12c6:	f0 0d       	add	r31, r0
    12c8:	b1 1d       	adc	r27, r1
    12ca:	63 9f       	mul	r22, r19
    12cc:	aa 27       	eor	r26, r26
    12ce:	f0 0d       	add	r31, r0
    12d0:	b1 1d       	adc	r27, r1
    12d2:	aa 1f       	adc	r26, r26
    12d4:	64 9f       	mul	r22, r20
    12d6:	66 27       	eor	r22, r22
    12d8:	b0 0d       	add	r27, r0
    12da:	a1 1d       	adc	r26, r1
    12dc:	66 1f       	adc	r22, r22
    12de:	82 9f       	mul	r24, r18
    12e0:	22 27       	eor	r18, r18
    12e2:	b0 0d       	add	r27, r0
    12e4:	a1 1d       	adc	r26, r1
    12e6:	62 1f       	adc	r22, r18
    12e8:	73 9f       	mul	r23, r19
    12ea:	b0 0d       	add	r27, r0
    12ec:	a1 1d       	adc	r26, r1
    12ee:	62 1f       	adc	r22, r18
    12f0:	83 9f       	mul	r24, r19
    12f2:	a0 0d       	add	r26, r0
    12f4:	61 1d       	adc	r22, r1
    12f6:	22 1f       	adc	r18, r18
    12f8:	74 9f       	mul	r23, r20
    12fa:	33 27       	eor	r19, r19
    12fc:	a0 0d       	add	r26, r0
    12fe:	61 1d       	adc	r22, r1
    1300:	23 1f       	adc	r18, r19
    1302:	84 9f       	mul	r24, r20
    1304:	60 0d       	add	r22, r0
    1306:	21 1d       	adc	r18, r1
    1308:	82 2f       	mov	r24, r18
    130a:	76 2f       	mov	r23, r22
    130c:	6a 2f       	mov	r22, r26
    130e:	11 24       	eor	r1, r1
    1310:	9f 57       	subi	r25, 0x7F	; 127
    1312:	50 40       	sbci	r21, 0x00	; 0
    1314:	8a f0       	brmi	.+34     	; 0x1338 <__mulsf3_pse+0x84>
    1316:	e1 f0       	breq	.+56     	; 0x1350 <__mulsf3_pse+0x9c>
    1318:	88 23       	and	r24, r24
    131a:	4a f0       	brmi	.+18     	; 0x132e <__mulsf3_pse+0x7a>
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	bb 1f       	adc	r27, r27
    1322:	66 1f       	adc	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	91 50       	subi	r25, 0x01	; 1
    132a:	50 40       	sbci	r21, 0x00	; 0
    132c:	a9 f7       	brne	.-22     	; 0x1318 <__mulsf3_pse+0x64>
    132e:	9e 3f       	cpi	r25, 0xFE	; 254
    1330:	51 05       	cpc	r21, r1
    1332:	70 f0       	brcs	.+28     	; 0x1350 <__mulsf3_pse+0x9c>
    1334:	5c cf       	rjmp	.-328    	; 0x11ee <__fp_inf>
    1336:	a6 cf       	rjmp	.-180    	; 0x1284 <__fp_szero>
    1338:	5f 3f       	cpi	r21, 0xFF	; 255
    133a:	ec f3       	brlt	.-6      	; 0x1336 <__mulsf3_pse+0x82>
    133c:	98 3e       	cpi	r25, 0xE8	; 232
    133e:	dc f3       	brlt	.-10     	; 0x1336 <__mulsf3_pse+0x82>
    1340:	86 95       	lsr	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	b7 95       	ror	r27
    1348:	f7 95       	ror	r31
    134a:	e7 95       	ror	r30
    134c:	9f 5f       	subi	r25, 0xFF	; 255
    134e:	c1 f7       	brne	.-16     	; 0x1340 <__mulsf3_pse+0x8c>
    1350:	fe 2b       	or	r31, r30
    1352:	88 0f       	add	r24, r24
    1354:	91 1d       	adc	r25, r1
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__tablejump2__>:
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	05 90       	lpm	r0, Z+
    1364:	f4 91       	lpm	r31, Z
    1366:	e0 2d       	mov	r30, r0
    1368:	09 94       	ijmp

0000136a <vfprintf>:
    136a:	ab e0       	ldi	r26, 0x0B	; 11
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ea eb       	ldi	r30, 0xBA	; 186
    1370:	f9 e0       	ldi	r31, 0x09	; 9
    1372:	7d c2       	rjmp	.+1274   	; 0x186e <__prologue_saves__>
    1374:	6c 01       	movw	r12, r24
    1376:	7b 01       	movw	r14, r22
    1378:	8a 01       	movw	r16, r20
    137a:	fc 01       	movw	r30, r24
    137c:	17 82       	std	Z+7, r1	; 0x07
    137e:	16 82       	std	Z+6, r1	; 0x06
    1380:	83 81       	ldd	r24, Z+3	; 0x03
    1382:	81 ff       	sbrs	r24, 1
    1384:	bf c1       	rjmp	.+894    	; 0x1704 <vfprintf+0x39a>
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	3c 01       	movw	r6, r24
    138c:	f6 01       	movw	r30, r12
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	f7 01       	movw	r30, r14
    1392:	93 fd       	sbrc	r25, 3
    1394:	85 91       	lpm	r24, Z+
    1396:	93 ff       	sbrs	r25, 3
    1398:	81 91       	ld	r24, Z+
    139a:	7f 01       	movw	r14, r30
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <vfprintf+0x38>
    13a0:	ad c1       	rjmp	.+858    	; 0x16fc <vfprintf+0x392>
    13a2:	85 32       	cpi	r24, 0x25	; 37
    13a4:	39 f4       	brne	.+14     	; 0x13b4 <vfprintf+0x4a>
    13a6:	93 fd       	sbrc	r25, 3
    13a8:	85 91       	lpm	r24, Z+
    13aa:	93 ff       	sbrs	r25, 3
    13ac:	81 91       	ld	r24, Z+
    13ae:	7f 01       	movw	r14, r30
    13b0:	85 32       	cpi	r24, 0x25	; 37
    13b2:	21 f4       	brne	.+8      	; 0x13bc <vfprintf+0x52>
    13b4:	b6 01       	movw	r22, r12
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	c0 d1       	rcall	.+896    	; 0x173a <fputc>
    13ba:	e8 cf       	rjmp	.-48     	; 0x138c <vfprintf+0x22>
    13bc:	91 2c       	mov	r9, r1
    13be:	21 2c       	mov	r2, r1
    13c0:	31 2c       	mov	r3, r1
    13c2:	ff e1       	ldi	r31, 0x1F	; 31
    13c4:	f3 15       	cp	r31, r3
    13c6:	d8 f0       	brcs	.+54     	; 0x13fe <vfprintf+0x94>
    13c8:	8b 32       	cpi	r24, 0x2B	; 43
    13ca:	79 f0       	breq	.+30     	; 0x13ea <vfprintf+0x80>
    13cc:	38 f4       	brcc	.+14     	; 0x13dc <vfprintf+0x72>
    13ce:	80 32       	cpi	r24, 0x20	; 32
    13d0:	79 f0       	breq	.+30     	; 0x13f0 <vfprintf+0x86>
    13d2:	83 32       	cpi	r24, 0x23	; 35
    13d4:	a1 f4       	brne	.+40     	; 0x13fe <vfprintf+0x94>
    13d6:	23 2d       	mov	r18, r3
    13d8:	20 61       	ori	r18, 0x10	; 16
    13da:	1d c0       	rjmp	.+58     	; 0x1416 <vfprintf+0xac>
    13dc:	8d 32       	cpi	r24, 0x2D	; 45
    13de:	61 f0       	breq	.+24     	; 0x13f8 <vfprintf+0x8e>
    13e0:	80 33       	cpi	r24, 0x30	; 48
    13e2:	69 f4       	brne	.+26     	; 0x13fe <vfprintf+0x94>
    13e4:	23 2d       	mov	r18, r3
    13e6:	21 60       	ori	r18, 0x01	; 1
    13e8:	16 c0       	rjmp	.+44     	; 0x1416 <vfprintf+0xac>
    13ea:	83 2d       	mov	r24, r3
    13ec:	82 60       	ori	r24, 0x02	; 2
    13ee:	38 2e       	mov	r3, r24
    13f0:	e3 2d       	mov	r30, r3
    13f2:	e4 60       	ori	r30, 0x04	; 4
    13f4:	3e 2e       	mov	r3, r30
    13f6:	2a c0       	rjmp	.+84     	; 0x144c <vfprintf+0xe2>
    13f8:	f3 2d       	mov	r31, r3
    13fa:	f8 60       	ori	r31, 0x08	; 8
    13fc:	1d c0       	rjmp	.+58     	; 0x1438 <vfprintf+0xce>
    13fe:	37 fc       	sbrc	r3, 7
    1400:	2d c0       	rjmp	.+90     	; 0x145c <vfprintf+0xf2>
    1402:	20 ed       	ldi	r18, 0xD0	; 208
    1404:	28 0f       	add	r18, r24
    1406:	2a 30       	cpi	r18, 0x0A	; 10
    1408:	40 f0       	brcs	.+16     	; 0x141a <vfprintf+0xb0>
    140a:	8e 32       	cpi	r24, 0x2E	; 46
    140c:	b9 f4       	brne	.+46     	; 0x143c <vfprintf+0xd2>
    140e:	36 fc       	sbrc	r3, 6
    1410:	75 c1       	rjmp	.+746    	; 0x16fc <vfprintf+0x392>
    1412:	23 2d       	mov	r18, r3
    1414:	20 64       	ori	r18, 0x40	; 64
    1416:	32 2e       	mov	r3, r18
    1418:	19 c0       	rjmp	.+50     	; 0x144c <vfprintf+0xe2>
    141a:	36 fe       	sbrs	r3, 6
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0xc0>
    141e:	8a e0       	ldi	r24, 0x0A	; 10
    1420:	98 9e       	mul	r9, r24
    1422:	20 0d       	add	r18, r0
    1424:	11 24       	eor	r1, r1
    1426:	92 2e       	mov	r9, r18
    1428:	11 c0       	rjmp	.+34     	; 0x144c <vfprintf+0xe2>
    142a:	ea e0       	ldi	r30, 0x0A	; 10
    142c:	2e 9e       	mul	r2, r30
    142e:	20 0d       	add	r18, r0
    1430:	11 24       	eor	r1, r1
    1432:	22 2e       	mov	r2, r18
    1434:	f3 2d       	mov	r31, r3
    1436:	f0 62       	ori	r31, 0x20	; 32
    1438:	3f 2e       	mov	r3, r31
    143a:	08 c0       	rjmp	.+16     	; 0x144c <vfprintf+0xe2>
    143c:	8c 36       	cpi	r24, 0x6C	; 108
    143e:	21 f4       	brne	.+8      	; 0x1448 <vfprintf+0xde>
    1440:	83 2d       	mov	r24, r3
    1442:	80 68       	ori	r24, 0x80	; 128
    1444:	38 2e       	mov	r3, r24
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0xe2>
    1448:	88 36       	cpi	r24, 0x68	; 104
    144a:	41 f4       	brne	.+16     	; 0x145c <vfprintf+0xf2>
    144c:	f7 01       	movw	r30, r14
    144e:	93 fd       	sbrc	r25, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	93 ff       	sbrs	r25, 3
    1454:	81 91       	ld	r24, Z+
    1456:	7f 01       	movw	r14, r30
    1458:	81 11       	cpse	r24, r1
    145a:	b3 cf       	rjmp	.-154    	; 0x13c2 <vfprintf+0x58>
    145c:	98 2f       	mov	r25, r24
    145e:	9f 7d       	andi	r25, 0xDF	; 223
    1460:	95 54       	subi	r25, 0x45	; 69
    1462:	93 30       	cpi	r25, 0x03	; 3
    1464:	28 f4       	brcc	.+10     	; 0x1470 <vfprintf+0x106>
    1466:	0c 5f       	subi	r16, 0xFC	; 252
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	9f e3       	ldi	r25, 0x3F	; 63
    146c:	99 83       	std	Y+1, r25	; 0x01
    146e:	0d c0       	rjmp	.+26     	; 0x148a <vfprintf+0x120>
    1470:	83 36       	cpi	r24, 0x63	; 99
    1472:	31 f0       	breq	.+12     	; 0x1480 <vfprintf+0x116>
    1474:	83 37       	cpi	r24, 0x73	; 115
    1476:	71 f0       	breq	.+28     	; 0x1494 <vfprintf+0x12a>
    1478:	83 35       	cpi	r24, 0x53	; 83
    147a:	09 f0       	breq	.+2      	; 0x147e <vfprintf+0x114>
    147c:	55 c0       	rjmp	.+170    	; 0x1528 <vfprintf+0x1be>
    147e:	20 c0       	rjmp	.+64     	; 0x14c0 <vfprintf+0x156>
    1480:	f8 01       	movw	r30, r16
    1482:	80 81       	ld	r24, Z
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	0e 5f       	subi	r16, 0xFE	; 254
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	88 24       	eor	r8, r8
    148c:	83 94       	inc	r8
    148e:	91 2c       	mov	r9, r1
    1490:	53 01       	movw	r10, r6
    1492:	12 c0       	rjmp	.+36     	; 0x14b8 <vfprintf+0x14e>
    1494:	28 01       	movw	r4, r16
    1496:	f2 e0       	ldi	r31, 0x02	; 2
    1498:	4f 0e       	add	r4, r31
    149a:	51 1c       	adc	r5, r1
    149c:	f8 01       	movw	r30, r16
    149e:	a0 80       	ld	r10, Z
    14a0:	b1 80       	ldd	r11, Z+1	; 0x01
    14a2:	36 fe       	sbrs	r3, 6
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <vfprintf+0x142>
    14a6:	69 2d       	mov	r22, r9
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <vfprintf+0x146>
    14ac:	6f ef       	ldi	r22, 0xFF	; 255
    14ae:	7f ef       	ldi	r23, 0xFF	; 255
    14b0:	c5 01       	movw	r24, r10
    14b2:	38 d1       	rcall	.+624    	; 0x1724 <strnlen>
    14b4:	4c 01       	movw	r8, r24
    14b6:	82 01       	movw	r16, r4
    14b8:	f3 2d       	mov	r31, r3
    14ba:	ff 77       	andi	r31, 0x7F	; 127
    14bc:	3f 2e       	mov	r3, r31
    14be:	15 c0       	rjmp	.+42     	; 0x14ea <vfprintf+0x180>
    14c0:	28 01       	movw	r4, r16
    14c2:	22 e0       	ldi	r18, 0x02	; 2
    14c4:	42 0e       	add	r4, r18
    14c6:	51 1c       	adc	r5, r1
    14c8:	f8 01       	movw	r30, r16
    14ca:	a0 80       	ld	r10, Z
    14cc:	b1 80       	ldd	r11, Z+1	; 0x01
    14ce:	36 fe       	sbrs	r3, 6
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <vfprintf+0x16e>
    14d2:	69 2d       	mov	r22, r9
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <vfprintf+0x172>
    14d8:	6f ef       	ldi	r22, 0xFF	; 255
    14da:	7f ef       	ldi	r23, 0xFF	; 255
    14dc:	c5 01       	movw	r24, r10
    14de:	17 d1       	rcall	.+558    	; 0x170e <strnlen_P>
    14e0:	4c 01       	movw	r8, r24
    14e2:	f3 2d       	mov	r31, r3
    14e4:	f0 68       	ori	r31, 0x80	; 128
    14e6:	3f 2e       	mov	r3, r31
    14e8:	82 01       	movw	r16, r4
    14ea:	33 fc       	sbrc	r3, 3
    14ec:	19 c0       	rjmp	.+50     	; 0x1520 <vfprintf+0x1b6>
    14ee:	82 2d       	mov	r24, r2
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	88 16       	cp	r8, r24
    14f4:	99 06       	cpc	r9, r25
    14f6:	a0 f4       	brcc	.+40     	; 0x1520 <vfprintf+0x1b6>
    14f8:	b6 01       	movw	r22, r12
    14fa:	80 e2       	ldi	r24, 0x20	; 32
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	1d d1       	rcall	.+570    	; 0x173a <fputc>
    1500:	2a 94       	dec	r2
    1502:	f5 cf       	rjmp	.-22     	; 0x14ee <vfprintf+0x184>
    1504:	f5 01       	movw	r30, r10
    1506:	37 fc       	sbrc	r3, 7
    1508:	85 91       	lpm	r24, Z+
    150a:	37 fe       	sbrs	r3, 7
    150c:	81 91       	ld	r24, Z+
    150e:	5f 01       	movw	r10, r30
    1510:	b6 01       	movw	r22, r12
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	12 d1       	rcall	.+548    	; 0x173a <fputc>
    1516:	21 10       	cpse	r2, r1
    1518:	2a 94       	dec	r2
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	82 1a       	sub	r8, r18
    151e:	91 08       	sbc	r9, r1
    1520:	81 14       	cp	r8, r1
    1522:	91 04       	cpc	r9, r1
    1524:	79 f7       	brne	.-34     	; 0x1504 <vfprintf+0x19a>
    1526:	e1 c0       	rjmp	.+450    	; 0x16ea <vfprintf+0x380>
    1528:	84 36       	cpi	r24, 0x64	; 100
    152a:	11 f0       	breq	.+4      	; 0x1530 <vfprintf+0x1c6>
    152c:	89 36       	cpi	r24, 0x69	; 105
    152e:	39 f5       	brne	.+78     	; 0x157e <vfprintf+0x214>
    1530:	f8 01       	movw	r30, r16
    1532:	37 fe       	sbrs	r3, 7
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <vfprintf+0x1da>
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	0c 5f       	subi	r16, 0xFC	; 252
    1540:	1f 4f       	sbci	r17, 0xFF	; 255
    1542:	08 c0       	rjmp	.+16     	; 0x1554 <vfprintf+0x1ea>
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	07 2e       	mov	r0, r23
    154a:	00 0c       	add	r0, r0
    154c:	88 0b       	sbc	r24, r24
    154e:	99 0b       	sbc	r25, r25
    1550:	0e 5f       	subi	r16, 0xFE	; 254
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	f3 2d       	mov	r31, r3
    1556:	ff 76       	andi	r31, 0x6F	; 111
    1558:	3f 2e       	mov	r3, r31
    155a:	97 ff       	sbrs	r25, 7
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <vfprintf+0x206>
    155e:	90 95       	com	r25
    1560:	80 95       	com	r24
    1562:	70 95       	com	r23
    1564:	61 95       	neg	r22
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	8f 4f       	sbci	r24, 0xFF	; 255
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	f0 68       	ori	r31, 0x80	; 128
    156e:	3f 2e       	mov	r3, r31
    1570:	2a e0       	ldi	r18, 0x0A	; 10
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	a3 01       	movw	r20, r6
    1576:	1d d1       	rcall	.+570    	; 0x17b2 <__ultoa_invert>
    1578:	88 2e       	mov	r8, r24
    157a:	86 18       	sub	r8, r6
    157c:	44 c0       	rjmp	.+136    	; 0x1606 <vfprintf+0x29c>
    157e:	85 37       	cpi	r24, 0x75	; 117
    1580:	31 f4       	brne	.+12     	; 0x158e <vfprintf+0x224>
    1582:	23 2d       	mov	r18, r3
    1584:	2f 7e       	andi	r18, 0xEF	; 239
    1586:	b2 2e       	mov	r11, r18
    1588:	2a e0       	ldi	r18, 0x0A	; 10
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	25 c0       	rjmp	.+74     	; 0x15d8 <vfprintf+0x26e>
    158e:	93 2d       	mov	r25, r3
    1590:	99 7f       	andi	r25, 0xF9	; 249
    1592:	b9 2e       	mov	r11, r25
    1594:	8f 36       	cpi	r24, 0x6F	; 111
    1596:	c1 f0       	breq	.+48     	; 0x15c8 <vfprintf+0x25e>
    1598:	18 f4       	brcc	.+6      	; 0x15a0 <vfprintf+0x236>
    159a:	88 35       	cpi	r24, 0x58	; 88
    159c:	79 f0       	breq	.+30     	; 0x15bc <vfprintf+0x252>
    159e:	ae c0       	rjmp	.+348    	; 0x16fc <vfprintf+0x392>
    15a0:	80 37       	cpi	r24, 0x70	; 112
    15a2:	19 f0       	breq	.+6      	; 0x15aa <vfprintf+0x240>
    15a4:	88 37       	cpi	r24, 0x78	; 120
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <vfprintf+0x246>
    15a8:	a9 c0       	rjmp	.+338    	; 0x16fc <vfprintf+0x392>
    15aa:	e9 2f       	mov	r30, r25
    15ac:	e0 61       	ori	r30, 0x10	; 16
    15ae:	be 2e       	mov	r11, r30
    15b0:	b4 fe       	sbrs	r11, 4
    15b2:	0d c0       	rjmp	.+26     	; 0x15ce <vfprintf+0x264>
    15b4:	fb 2d       	mov	r31, r11
    15b6:	f4 60       	ori	r31, 0x04	; 4
    15b8:	bf 2e       	mov	r11, r31
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <vfprintf+0x264>
    15bc:	34 fe       	sbrs	r3, 4
    15be:	0a c0       	rjmp	.+20     	; 0x15d4 <vfprintf+0x26a>
    15c0:	29 2f       	mov	r18, r25
    15c2:	26 60       	ori	r18, 0x06	; 6
    15c4:	b2 2e       	mov	r11, r18
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x26a>
    15c8:	28 e0       	ldi	r18, 0x08	; 8
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <vfprintf+0x26e>
    15ce:	20 e1       	ldi	r18, 0x10	; 16
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x26e>
    15d4:	20 e1       	ldi	r18, 0x10	; 16
    15d6:	32 e0       	ldi	r19, 0x02	; 2
    15d8:	f8 01       	movw	r30, r16
    15da:	b7 fe       	sbrs	r11, 7
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <vfprintf+0x282>
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	0c 5f       	subi	r16, 0xFC	; 252
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <vfprintf+0x28e>
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 5f       	subi	r16, 0xFE	; 254
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	a3 01       	movw	r20, r6
    15fa:	db d0       	rcall	.+438    	; 0x17b2 <__ultoa_invert>
    15fc:	88 2e       	mov	r8, r24
    15fe:	86 18       	sub	r8, r6
    1600:	fb 2d       	mov	r31, r11
    1602:	ff 77       	andi	r31, 0x7F	; 127
    1604:	3f 2e       	mov	r3, r31
    1606:	36 fe       	sbrs	r3, 6
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <vfprintf+0x2ba>
    160a:	23 2d       	mov	r18, r3
    160c:	2e 7f       	andi	r18, 0xFE	; 254
    160e:	a2 2e       	mov	r10, r18
    1610:	89 14       	cp	r8, r9
    1612:	58 f4       	brcc	.+22     	; 0x162a <vfprintf+0x2c0>
    1614:	34 fe       	sbrs	r3, 4
    1616:	0b c0       	rjmp	.+22     	; 0x162e <vfprintf+0x2c4>
    1618:	32 fc       	sbrc	r3, 2
    161a:	09 c0       	rjmp	.+18     	; 0x162e <vfprintf+0x2c4>
    161c:	83 2d       	mov	r24, r3
    161e:	8e 7e       	andi	r24, 0xEE	; 238
    1620:	a8 2e       	mov	r10, r24
    1622:	05 c0       	rjmp	.+10     	; 0x162e <vfprintf+0x2c4>
    1624:	b8 2c       	mov	r11, r8
    1626:	a3 2c       	mov	r10, r3
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <vfprintf+0x2c6>
    162a:	b8 2c       	mov	r11, r8
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <vfprintf+0x2c6>
    162e:	b9 2c       	mov	r11, r9
    1630:	a4 fe       	sbrs	r10, 4
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <vfprintf+0x2e8>
    1634:	fe 01       	movw	r30, r28
    1636:	e8 0d       	add	r30, r8
    1638:	f1 1d       	adc	r31, r1
    163a:	80 81       	ld	r24, Z
    163c:	80 33       	cpi	r24, 0x30	; 48
    163e:	21 f4       	brne	.+8      	; 0x1648 <vfprintf+0x2de>
    1640:	9a 2d       	mov	r25, r10
    1642:	99 7e       	andi	r25, 0xE9	; 233
    1644:	a9 2e       	mov	r10, r25
    1646:	09 c0       	rjmp	.+18     	; 0x165a <vfprintf+0x2f0>
    1648:	a2 fe       	sbrs	r10, 2
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <vfprintf+0x2ee>
    164c:	b3 94       	inc	r11
    164e:	b3 94       	inc	r11
    1650:	04 c0       	rjmp	.+8      	; 0x165a <vfprintf+0x2f0>
    1652:	8a 2d       	mov	r24, r10
    1654:	86 78       	andi	r24, 0x86	; 134
    1656:	09 f0       	breq	.+2      	; 0x165a <vfprintf+0x2f0>
    1658:	b3 94       	inc	r11
    165a:	a3 fc       	sbrc	r10, 3
    165c:	10 c0       	rjmp	.+32     	; 0x167e <vfprintf+0x314>
    165e:	a0 fe       	sbrs	r10, 0
    1660:	06 c0       	rjmp	.+12     	; 0x166e <vfprintf+0x304>
    1662:	b2 14       	cp	r11, r2
    1664:	80 f4       	brcc	.+32     	; 0x1686 <vfprintf+0x31c>
    1666:	28 0c       	add	r2, r8
    1668:	92 2c       	mov	r9, r2
    166a:	9b 18       	sub	r9, r11
    166c:	0d c0       	rjmp	.+26     	; 0x1688 <vfprintf+0x31e>
    166e:	b2 14       	cp	r11, r2
    1670:	58 f4       	brcc	.+22     	; 0x1688 <vfprintf+0x31e>
    1672:	b6 01       	movw	r22, r12
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	60 d0       	rcall	.+192    	; 0x173a <fputc>
    167a:	b3 94       	inc	r11
    167c:	f8 cf       	rjmp	.-16     	; 0x166e <vfprintf+0x304>
    167e:	b2 14       	cp	r11, r2
    1680:	18 f4       	brcc	.+6      	; 0x1688 <vfprintf+0x31e>
    1682:	2b 18       	sub	r2, r11
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vfprintf+0x320>
    1686:	98 2c       	mov	r9, r8
    1688:	21 2c       	mov	r2, r1
    168a:	a4 fe       	sbrs	r10, 4
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <vfprintf+0x342>
    168e:	b6 01       	movw	r22, r12
    1690:	80 e3       	ldi	r24, 0x30	; 48
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	52 d0       	rcall	.+164    	; 0x173a <fputc>
    1696:	a2 fe       	sbrs	r10, 2
    1698:	16 c0       	rjmp	.+44     	; 0x16c6 <vfprintf+0x35c>
    169a:	a1 fc       	sbrc	r10, 1
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <vfprintf+0x33a>
    169e:	88 e7       	ldi	r24, 0x78	; 120
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x33e>
    16a4:	88 e5       	ldi	r24, 0x58	; 88
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b6 01       	movw	r22, r12
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <vfprintf+0x35a>
    16ac:	8a 2d       	mov	r24, r10
    16ae:	86 78       	andi	r24, 0x86	; 134
    16b0:	51 f0       	breq	.+20     	; 0x16c6 <vfprintf+0x35c>
    16b2:	a1 fe       	sbrs	r10, 1
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x350>
    16b6:	8b e2       	ldi	r24, 0x2B	; 43
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <vfprintf+0x352>
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	a7 fc       	sbrc	r10, 7
    16be:	8d e2       	ldi	r24, 0x2D	; 45
    16c0:	b6 01       	movw	r22, r12
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	3a d0       	rcall	.+116    	; 0x173a <fputc>
    16c6:	89 14       	cp	r8, r9
    16c8:	30 f4       	brcc	.+12     	; 0x16d6 <vfprintf+0x36c>
    16ca:	b6 01       	movw	r22, r12
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	34 d0       	rcall	.+104    	; 0x173a <fputc>
    16d2:	9a 94       	dec	r9
    16d4:	f8 cf       	rjmp	.-16     	; 0x16c6 <vfprintf+0x35c>
    16d6:	8a 94       	dec	r8
    16d8:	f3 01       	movw	r30, r6
    16da:	e8 0d       	add	r30, r8
    16dc:	f1 1d       	adc	r31, r1
    16de:	80 81       	ld	r24, Z
    16e0:	b6 01       	movw	r22, r12
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2a d0       	rcall	.+84     	; 0x173a <fputc>
    16e6:	81 10       	cpse	r8, r1
    16e8:	f6 cf       	rjmp	.-20     	; 0x16d6 <vfprintf+0x36c>
    16ea:	22 20       	and	r2, r2
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <vfprintf+0x386>
    16ee:	4e ce       	rjmp	.-868    	; 0x138c <vfprintf+0x22>
    16f0:	b6 01       	movw	r22, r12
    16f2:	80 e2       	ldi	r24, 0x20	; 32
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	21 d0       	rcall	.+66     	; 0x173a <fputc>
    16f8:	2a 94       	dec	r2
    16fa:	f7 cf       	rjmp	.-18     	; 0x16ea <vfprintf+0x380>
    16fc:	f6 01       	movw	r30, r12
    16fe:	86 81       	ldd	r24, Z+6	; 0x06
    1700:	97 81       	ldd	r25, Z+7	; 0x07
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x39e>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	2b 96       	adiw	r28, 0x0b	; 11
    170a:	e2 e1       	ldi	r30, 0x12	; 18
    170c:	cc c0       	rjmp	.+408    	; 0x18a6 <__epilogue_restores__>

0000170e <strnlen_P>:
    170e:	fc 01       	movw	r30, r24
    1710:	05 90       	lpm	r0, Z+
    1712:	61 50       	subi	r22, 0x01	; 1
    1714:	70 40       	sbci	r23, 0x00	; 0
    1716:	01 10       	cpse	r0, r1
    1718:	d8 f7       	brcc	.-10     	; 0x1710 <strnlen_P+0x2>
    171a:	80 95       	com	r24
    171c:	90 95       	com	r25
    171e:	8e 0f       	add	r24, r30
    1720:	9f 1f       	adc	r25, r31
    1722:	08 95       	ret

00001724 <strnlen>:
    1724:	fc 01       	movw	r30, r24
    1726:	61 50       	subi	r22, 0x01	; 1
    1728:	70 40       	sbci	r23, 0x00	; 0
    172a:	01 90       	ld	r0, Z+
    172c:	01 10       	cpse	r0, r1
    172e:	d8 f7       	brcc	.-10     	; 0x1726 <strnlen+0x2>
    1730:	80 95       	com	r24
    1732:	90 95       	com	r25
    1734:	8e 0f       	add	r24, r30
    1736:	9f 1f       	adc	r25, r31
    1738:	08 95       	ret

0000173a <fputc>:
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	fb 01       	movw	r30, r22
    1744:	23 81       	ldd	r18, Z+3	; 0x03
    1746:	21 fd       	sbrc	r18, 1
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <fputc+0x16>
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	9f ef       	ldi	r25, 0xFF	; 255
    174e:	2c c0       	rjmp	.+88     	; 0x17a8 <fputc+0x6e>
    1750:	22 ff       	sbrs	r18, 2
    1752:	16 c0       	rjmp	.+44     	; 0x1780 <fputc+0x46>
    1754:	46 81       	ldd	r20, Z+6	; 0x06
    1756:	57 81       	ldd	r21, Z+7	; 0x07
    1758:	24 81       	ldd	r18, Z+4	; 0x04
    175a:	35 81       	ldd	r19, Z+5	; 0x05
    175c:	42 17       	cp	r20, r18
    175e:	53 07       	cpc	r21, r19
    1760:	44 f4       	brge	.+16     	; 0x1772 <fputc+0x38>
    1762:	a0 81       	ld	r26, Z
    1764:	b1 81       	ldd	r27, Z+1	; 0x01
    1766:	9d 01       	movw	r18, r26
    1768:	2f 5f       	subi	r18, 0xFF	; 255
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	31 83       	std	Z+1, r19	; 0x01
    176e:	20 83       	st	Z, r18
    1770:	8c 93       	st	X, r24
    1772:	26 81       	ldd	r18, Z+6	; 0x06
    1774:	37 81       	ldd	r19, Z+7	; 0x07
    1776:	2f 5f       	subi	r18, 0xFF	; 255
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	37 83       	std	Z+7, r19	; 0x07
    177c:	26 83       	std	Z+6, r18	; 0x06
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <fputc+0x6e>
    1780:	8b 01       	movw	r16, r22
    1782:	ec 01       	movw	r28, r24
    1784:	fb 01       	movw	r30, r22
    1786:	00 84       	ldd	r0, Z+8	; 0x08
    1788:	f1 85       	ldd	r31, Z+9	; 0x09
    178a:	e0 2d       	mov	r30, r0
    178c:	09 95       	icall
    178e:	89 2b       	or	r24, r25
    1790:	e1 f6       	brne	.-72     	; 0x174a <fputc+0x10>
    1792:	d8 01       	movw	r26, r16
    1794:	16 96       	adiw	r26, 0x06	; 6
    1796:	8d 91       	ld	r24, X+
    1798:	9c 91       	ld	r25, X
    179a:	17 97       	sbiw	r26, 0x07	; 7
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	17 96       	adiw	r26, 0x07	; 7
    17a0:	9c 93       	st	X, r25
    17a2:	8e 93       	st	-X, r24
    17a4:	16 97       	sbiw	r26, 0x06	; 6
    17a6:	ce 01       	movw	r24, r28
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <__ultoa_invert>:
    17b2:	fa 01       	movw	r30, r20
    17b4:	aa 27       	eor	r26, r26
    17b6:	28 30       	cpi	r18, 0x08	; 8
    17b8:	51 f1       	breq	.+84     	; 0x180e <__ultoa_invert+0x5c>
    17ba:	20 31       	cpi	r18, 0x10	; 16
    17bc:	81 f1       	breq	.+96     	; 0x181e <__ultoa_invert+0x6c>
    17be:	e8 94       	clt
    17c0:	6f 93       	push	r22
    17c2:	6e 7f       	andi	r22, 0xFE	; 254
    17c4:	6e 5f       	subi	r22, 0xFE	; 254
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	af 4f       	sbci	r26, 0xFF	; 255
    17ce:	b1 e0       	ldi	r27, 0x01	; 1
    17d0:	3e d0       	rcall	.+124    	; 0x184e <__ultoa_invert+0x9c>
    17d2:	b4 e0       	ldi	r27, 0x04	; 4
    17d4:	3c d0       	rcall	.+120    	; 0x184e <__ultoa_invert+0x9c>
    17d6:	67 0f       	add	r22, r23
    17d8:	78 1f       	adc	r23, r24
    17da:	89 1f       	adc	r24, r25
    17dc:	9a 1f       	adc	r25, r26
    17de:	a1 1d       	adc	r26, r1
    17e0:	68 0f       	add	r22, r24
    17e2:	79 1f       	adc	r23, r25
    17e4:	8a 1f       	adc	r24, r26
    17e6:	91 1d       	adc	r25, r1
    17e8:	a1 1d       	adc	r26, r1
    17ea:	6a 0f       	add	r22, r26
    17ec:	71 1d       	adc	r23, r1
    17ee:	81 1d       	adc	r24, r1
    17f0:	91 1d       	adc	r25, r1
    17f2:	a1 1d       	adc	r26, r1
    17f4:	20 d0       	rcall	.+64     	; 0x1836 <__ultoa_invert+0x84>
    17f6:	09 f4       	brne	.+2      	; 0x17fa <__ultoa_invert+0x48>
    17f8:	68 94       	set
    17fa:	3f 91       	pop	r19
    17fc:	2a e0       	ldi	r18, 0x0A	; 10
    17fe:	26 9f       	mul	r18, r22
    1800:	11 24       	eor	r1, r1
    1802:	30 19       	sub	r19, r0
    1804:	30 5d       	subi	r19, 0xD0	; 208
    1806:	31 93       	st	Z+, r19
    1808:	de f6       	brtc	.-74     	; 0x17c0 <__ultoa_invert+0xe>
    180a:	cf 01       	movw	r24, r30
    180c:	08 95       	ret
    180e:	46 2f       	mov	r20, r22
    1810:	47 70       	andi	r20, 0x07	; 7
    1812:	40 5d       	subi	r20, 0xD0	; 208
    1814:	41 93       	st	Z+, r20
    1816:	b3 e0       	ldi	r27, 0x03	; 3
    1818:	0f d0       	rcall	.+30     	; 0x1838 <__ultoa_invert+0x86>
    181a:	c9 f7       	brne	.-14     	; 0x180e <__ultoa_invert+0x5c>
    181c:	f6 cf       	rjmp	.-20     	; 0x180a <__ultoa_invert+0x58>
    181e:	46 2f       	mov	r20, r22
    1820:	4f 70       	andi	r20, 0x0F	; 15
    1822:	40 5d       	subi	r20, 0xD0	; 208
    1824:	4a 33       	cpi	r20, 0x3A	; 58
    1826:	18 f0       	brcs	.+6      	; 0x182e <__ultoa_invert+0x7c>
    1828:	49 5d       	subi	r20, 0xD9	; 217
    182a:	31 fd       	sbrc	r19, 1
    182c:	40 52       	subi	r20, 0x20	; 32
    182e:	41 93       	st	Z+, r20
    1830:	02 d0       	rcall	.+4      	; 0x1836 <__ultoa_invert+0x84>
    1832:	a9 f7       	brne	.-22     	; 0x181e <__ultoa_invert+0x6c>
    1834:	ea cf       	rjmp	.-44     	; 0x180a <__ultoa_invert+0x58>
    1836:	b4 e0       	ldi	r27, 0x04	; 4
    1838:	a6 95       	lsr	r26
    183a:	97 95       	ror	r25
    183c:	87 95       	ror	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	ba 95       	dec	r27
    1844:	c9 f7       	brne	.-14     	; 0x1838 <__ultoa_invert+0x86>
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	61 05       	cpc	r22, r1
    184a:	71 05       	cpc	r23, r1
    184c:	08 95       	ret
    184e:	9b 01       	movw	r18, r22
    1850:	ac 01       	movw	r20, r24
    1852:	0a 2e       	mov	r0, r26
    1854:	06 94       	lsr	r0
    1856:	57 95       	ror	r21
    1858:	47 95       	ror	r20
    185a:	37 95       	ror	r19
    185c:	27 95       	ror	r18
    185e:	ba 95       	dec	r27
    1860:	c9 f7       	brne	.-14     	; 0x1854 <__ultoa_invert+0xa2>
    1862:	62 0f       	add	r22, r18
    1864:	73 1f       	adc	r23, r19
    1866:	84 1f       	adc	r24, r20
    1868:	95 1f       	adc	r25, r21
    186a:	a0 1d       	adc	r26, r0
    186c:	08 95       	ret

0000186e <__prologue_saves__>:
    186e:	2f 92       	push	r2
    1870:	3f 92       	push	r3
    1872:	4f 92       	push	r4
    1874:	5f 92       	push	r5
    1876:	6f 92       	push	r6
    1878:	7f 92       	push	r7
    187a:	8f 92       	push	r8
    187c:	9f 92       	push	r9
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	ca 1b       	sub	r28, r26
    1898:	db 0b       	sbc	r29, r27
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	09 94       	ijmp

000018a6 <__epilogue_restores__>:
    18a6:	2a 88       	ldd	r2, Y+18	; 0x12
    18a8:	39 88       	ldd	r3, Y+17	; 0x11
    18aa:	48 88       	ldd	r4, Y+16	; 0x10
    18ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    18ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    18b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    18b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    18b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    18b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    18b8:	b9 84       	ldd	r11, Y+9	; 0x09
    18ba:	c8 84       	ldd	r12, Y+8	; 0x08
    18bc:	df 80       	ldd	r13, Y+7	; 0x07
    18be:	ee 80       	ldd	r14, Y+6	; 0x06
    18c0:	fd 80       	ldd	r15, Y+5	; 0x05
    18c2:	0c 81       	ldd	r16, Y+4	; 0x04
    18c4:	1b 81       	ldd	r17, Y+3	; 0x03
    18c6:	aa 81       	ldd	r26, Y+2	; 0x02
    18c8:	b9 81       	ldd	r27, Y+1	; 0x01
    18ca:	ce 0f       	add	r28, r30
    18cc:	d1 1d       	adc	r29, r1
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
    18d8:	ed 01       	movw	r28, r26
    18da:	08 95       	ret

000018dc <_exit>:
    18dc:	f8 94       	cli

000018de <__stop_program>:
    18de:	ff cf       	rjmp	.-2      	; 0x18de <__stop_program>
