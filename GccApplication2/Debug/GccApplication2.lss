
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001c10  00001ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000137  008000b6  008000b6  00001cfa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cfa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b13  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f74  00000000  00000000  00004a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e97  00000000  00000000  000059b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000058c  00000000  00000000  0000684c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d16  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fde  00000000  00000000  00007aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00009acc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	40 c0       	rjmp	.+128    	; 0x9e <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	97 03       	fmuls	r17, r23

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	e0 e1       	ldi	r30, 0x10	; 16
      3c:	fc e1       	ldi	r31, 0x1C	; 28
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	a6 3b       	cpi	r26, 0xB6	; 182
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	21 e0       	ldi	r18, 0x01	; 1
      4c:	a6 eb       	ldi	r26, 0xB6	; 182
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	ad 3e       	cpi	r26, 0xED	; 237
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	f4 da       	rcall	.-2584   	; 0xfffff650 <__eeprom_end+0xff7ef650>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	55 d2       	rcall	.+1194   	; 0x51a <main>
      70:	cd cd       	rjmp	.-1126   	; 0xfffffc0c <__eeprom_end+0xff7efc0c>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:
}


void checkClipping(){//manage clipping indication
	if (clipping){//if currently clipping
		clipping = 0;
      74:	14 ba       	out	0x14, r1	; 20
      76:	f8 94       	cli
      78:	16 b8       	out	0x06, r1	; 6
      7a:	3e 9a       	sbi	0x07, 6	; 7
      7c:	3d 9a       	sbi	0x07, 5	; 7
      7e:	32 9a       	sbi	0x06, 2	; 6
      80:	35 9a       	sbi	0x06, 5	; 6
      82:	33 9a       	sbi	0x06, 3	; 6
      84:	37 9a       	sbi	0x06, 7	; 6
      86:	36 9a       	sbi	0x06, 6	; 6
      88:	78 94       	sei
      8a:	08 95       	ret

0000008c <_Z5resetv>:
      8c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <_ZL5index>
      90:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <_ZL7noMatch>
      94:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <_ZL8maxSlope+0x1>
      98:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <_ZL8maxSlope>
      9c:	08 95       	ret

0000009e <__vector_14>:
      9e:	1f 92       	push	r1
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	0f 92       	push	r0
      a6:	11 24       	eor	r1, r1
      a8:	2f 93       	push	r18
      aa:	3f 93       	push	r19
      ac:	4f 93       	push	r20
      ae:	5f 93       	push	r21
      b0:	6f 93       	push	r22
      b2:	7f 93       	push	r23
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
      b8:	af 93       	push	r26
      ba:	bf 93       	push	r27
      bc:	ef 93       	push	r30
      be:	ff 93       	push	r31
      c0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZL7newData>
      c4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <_ZL8prevData>
      c8:	85 b1       	in	r24, 0x05	; 5
      ca:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <_ZL7newData>
      ce:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZL8prevData>
      d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      d6:	98 17       	cp	r25, r24
      d8:	08 f0       	brcs	.+2      	; 0xdc <__vector_14+0x3e>
      da:	d2 c0       	rjmp	.+420    	; 0x280 <__vector_14+0x1e2>
      dc:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <_ZL7newData>
      e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      e4:	98 17       	cp	r25, r24
      e6:	08 f0       	brcs	.+2      	; 0xea <__vector_14+0x4c>
      e8:	07 c1       	rjmp	.+526    	; 0x2f8 <__vector_14+0x25a>
      ea:	ca c0       	rjmp	.+404    	; 0x280 <__vector_14+0x1e2>
      ec:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <_ZL5index>
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL8newSlope>
      f6:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL8newSlope+0x1>
      fa:	ee 0f       	add	r30, r30
      fc:	ff 1f       	adc	r31, r31
      fe:	e9 58       	subi	r30, 0x89	; 137
     100:	fe 4f       	sbci	r31, 0xFE	; 254
     102:	91 83       	std	Z+1, r25	; 0x01
     104:	80 83       	st	Z, r24
     106:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <_ZL5index>
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZL4time>
     110:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <_ZL4time+0x1>
     114:	ee 0f       	add	r30, r30
     116:	ff 1f       	adc	r31, r31
     118:	e5 57       	subi	r30, 0x75	; 117
     11a:	fe 4f       	sbci	r31, 0xFE	; 254
     11c:	91 83       	std	Z+1, r25	; 0x01
     11e:	80 83       	st	Z, r24
     120:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <_ZL4time+0x1>
     124:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <_ZL4time>
     128:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL5index>
     12c:	81 11       	cpse	r24, r1
     12e:	08 c0       	rjmp	.+16     	; 0x140 <__vector_14+0xa2>
     130:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <_ZL7noMatch>
     134:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL5index>
     138:	8f 5f       	subi	r24, 0xFF	; 255
     13a:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL5index>
     13e:	a0 c0       	rjmp	.+320    	; 0x280 <__vector_14+0x1e2>
     140:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <_ZL5timer>
     144:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <_ZL5timer+0x1>
     148:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <_ZL5index>
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	e5 57       	subi	r30, 0x75	; 117
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	20 81       	ld	r18, Z
     158:	31 81       	ldd	r19, Z+1	; 0x01
     15a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_ZL8timerTol>
     15e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_ZL8timerTol+0x1>
     162:	82 1b       	sub	r24, r18
     164:	93 0b       	sbc	r25, r19
     166:	9c 01       	movw	r18, r24
     168:	22 f4       	brpl	.+8      	; 0x172 <__vector_14+0xd4>
     16a:	22 27       	eor	r18, r18
     16c:	33 27       	eor	r19, r19
     16e:	28 1b       	sub	r18, r24
     170:	39 0b       	sbc	r19, r25
     172:	24 17       	cp	r18, r20
     174:	35 07       	cpc	r19, r21
     176:	0c f0       	brlt	.+2      	; 0x17a <__vector_14+0xdc>
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__vector_14+0x2a2>
     17a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_ZL5slope>
     17e:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <_ZL5slope+0x1>
     182:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <_ZL8newSlope>
     186:	50 91 6a 01 	lds	r21, 0x016A	; 0x80016a <_ZL8newSlope+0x1>
     18a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <_ZL8slopeTol>
     18e:	84 1b       	sub	r24, r20
     190:	95 0b       	sbc	r25, r21
     192:	ac 01       	movw	r20, r24
     194:	22 f4       	brpl	.+8      	; 0x19e <__vector_14+0x100>
     196:	44 27       	eor	r20, r20
     198:	55 27       	eor	r21, r21
     19a:	48 1b       	sub	r20, r24
     19c:	59 0b       	sbc	r21, r25
     19e:	82 2f       	mov	r24, r18
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	48 17       	cp	r20, r24
     1a4:	59 07       	cpc	r21, r25
     1a6:	0c f4       	brge	.+2      	; 0x1aa <__vector_14+0x10c>
     1a8:	dc c0       	rjmp	.+440    	; 0x362 <__vector_14+0x2c4>
     1aa:	ca c0       	rjmp	.+404    	; 0x340 <__vector_14+0x2a2>
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	e8 2f       	mov	r30, r24
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	e5 57       	subi	r30, 0x75	; 117
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	40 81       	ld	r20, Z
     1bc:	51 81       	ldd	r21, Z+1	; 0x01
     1be:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <_ZL10totalTimer>
     1c2:	30 91 76 01 	lds	r19, 0x0176	; 0x800176 <_ZL10totalTimer+0x1>
     1c6:	24 0f       	add	r18, r20
     1c8:	35 1f       	adc	r19, r21
     1ca:	30 93 76 01 	sts	0x0176, r19	; 0x800176 <_ZL10totalTimer+0x1>
     1ce:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <_ZL10totalTimer>
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <_ZL5index>
     1d8:	89 17       	cp	r24, r25
     1da:	48 f3       	brcs	.-46     	; 0x1ae <__vector_14+0x110>
     1dc:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <_ZL10totalTimer>
     1e0:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <_ZL10totalTimer+0x1>
     1e4:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <_ZL6period+0x1>
     1e8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <_ZL6period>
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <_ZL11periodReady>
     1f2:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <_ZL5index>
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	e5 57       	subi	r30, 0x75	; 117
     1fe:	fe 4f       	sbci	r31, 0xFE	; 254
     200:	20 81       	ld	r18, Z
     202:	31 81       	ldd	r19, Z+1	; 0x01
     204:	30 93 8c 01 	sts	0x018C, r19	; 0x80018c <_ZL5timer+0x1>
     208:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <_ZL5timer>
     20c:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <_ZL5index>
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e9 58       	subi	r30, 0x89	; 137
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	20 81       	ld	r18, Z
     21c:	31 81       	ldd	r19, Z+1	; 0x01
     21e:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <_ZL5slope+0x1>
     222:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <_ZL5slope>
     226:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL5index>
     22a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <_ZL7noMatch>
     22e:	28 c0       	rjmp	.+80     	; 0x280 <__vector_14+0x1e2>
     230:	2d df       	rcall	.-422    	; 0x8c <_Z5resetv>
     232:	26 c0       	rjmp	.+76     	; 0x280 <__vector_14+0x1e2>
     234:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <_ZL8newSlope>
     238:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <_ZL8newSlope+0x1>
     23c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL8maxSlope>
     240:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_ZL8maxSlope+0x1>
     244:	82 17       	cp	r24, r18
     246:	93 07       	cpc	r25, r19
     248:	8c f4       	brge	.+34     	; 0x26c <__vector_14+0x1ce>
     24a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL8newSlope>
     24e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL8newSlope+0x1>
     252:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <_ZL8maxSlope+0x1>
     256:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_ZL8maxSlope>
     25a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <_ZL4time+0x1>
     25e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <_ZL4time>
     262:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <_ZL7noMatch>
     266:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <_ZL5index>
     26a:	0a c0       	rjmp	.+20     	; 0x280 <__vector_14+0x1e2>
     26c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL7noMatch>
     270:	8f 5f       	subi	r24, 0xFF	; 255
     272:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <_ZL7noMatch>
     276:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL7noMatch>
     27a:	8a 30       	cpi	r24, 0x0A	; 10
     27c:	08 f0       	brcs	.+2      	; 0x280 <__vector_14+0x1e2>
     27e:	06 df       	rcall	.-500    	; 0x8c <_Z5resetv>
     280:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZL7newData>
     284:	88 23       	and	r24, r24
     286:	09 f4       	brne	.+2      	; 0x28a <__vector_14+0x1ec>
     288:	75 c0       	rjmp	.+234    	; 0x374 <__vector_14+0x2d6>
     28a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZL7newData>
     28e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZL4time>
     292:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <_ZL4time+0x1>
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <_ZL4time+0x1>
     29c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_ZL4time>
     2a0:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <ampTimer>
     2a4:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <ampTimer+0x1>
     2a8:	2f 5f       	subi	r18, 0xFF	; 255
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <ampTimer+0x1>
     2b0:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <ampTimer>
     2b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2b8:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <_ZL7newData>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	84 1b       	sub	r24, r20
     2c0:	91 09       	sbc	r25, r1
     2c2:	ac 01       	movw	r20, r24
     2c4:	22 f4       	brpl	.+8      	; 0x2ce <__vector_14+0x230>
     2c6:	44 27       	eor	r20, r20
     2c8:	55 27       	eor	r21, r21
     2ca:	48 1b       	sub	r20, r24
     2cc:	59 0b       	sbc	r21, r25
     2ce:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL6maxAmp>
     2d2:	84 17       	cp	r24, r20
     2d4:	10 f4       	brcc	.+4      	; 0x2da <__vector_14+0x23c>
     2d6:	40 93 65 01 	sts	0x0165, r20	; 0x800165 <_ZL6maxAmp>
     2da:	28 3e       	cpi	r18, 0xE8	; 232
     2dc:	33 40       	sbci	r19, 0x03	; 3
     2de:	09 f0       	breq	.+2      	; 0x2e2 <__vector_14+0x244>
     2e0:	4d c0       	rjmp	.+154    	; 0x37c <__vector_14+0x2de>
     2e2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ampTimer+0x1>
     2e6:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <ampTimer>
     2ea:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL6maxAmp>
     2ee:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <_ZL11checkMaxAmp>
     2f2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL6maxAmp>
     2f6:	42 c0       	rjmp	.+132    	; 0x37c <__vector_14+0x2de>
     2f8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <_ZL7newData>
     2fc:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <_ZL8prevData>
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	82 1b       	sub	r24, r18
     304:	91 09       	sbc	r25, r1
     306:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <_ZL8newSlope+0x1>
     30a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_ZL8newSlope>
     30e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL8newSlope>
     312:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL8newSlope+0x1>
     316:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <_ZL8maxSlope>
     31a:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <_ZL8maxSlope+0x1>
     31e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <_ZL8slopeTol>
     322:	84 1b       	sub	r24, r20
     324:	95 0b       	sbc	r25, r21
     326:	ac 01       	movw	r20, r24
     328:	22 f4       	brpl	.+8      	; 0x332 <__vector_14+0x294>
     32a:	44 27       	eor	r20, r20
     32c:	55 27       	eor	r21, r21
     32e:	48 1b       	sub	r20, r24
     330:	59 0b       	sbc	r21, r25
     332:	82 2f       	mov	r24, r18
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	48 17       	cp	r20, r24
     338:	59 07       	cpc	r21, r25
     33a:	0c f4       	brge	.+2      	; 0x33e <__vector_14+0x2a0>
     33c:	d7 ce       	rjmp	.-594    	; 0xec <__vector_14+0x4e>
     33e:	7a cf       	rjmp	.-268    	; 0x234 <__vector_14+0x196>
     340:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL5index>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL5index>
     34a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL5index>
     34e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <_ZL12noMatchLimit>
     352:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <_ZL12noMatchLimit+0x1>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 17       	cp	r18, r24
     35a:	39 07       	cpc	r19, r25
     35c:	0c f0       	brlt	.+2      	; 0x360 <__vector_14+0x2c2>
     35e:	90 cf       	rjmp	.-224    	; 0x280 <__vector_14+0x1e2>
     360:	67 cf       	rjmp	.-306    	; 0x230 <__vector_14+0x192>
     362:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZL10totalTimer+0x1>
     366:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZL10totalTimer>
     36a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL5index>
     36e:	81 11       	cpse	r24, r1
     370:	1d cf       	rjmp	.-454    	; 0x1ac <__vector_14+0x10e>
     372:	34 cf       	rjmp	.-408    	; 0x1dc <__vector_14+0x13e>
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZL8clipping>
     37a:	89 cf       	rjmp	.-238    	; 0x28e <__vector_14+0x1f0>
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <_Z6get_avPdi>:
const int SHORT_FREQ_AR_LEN = 12;
double short_last_frequencies[SHORT_FREQ_AR_LEN];
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
     39e:	8f 92       	push	r8
     3a0:	9f 92       	push	r9
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	6c 01       	movw	r12, r24
     3b8:	7b 01       	movw	r14, r22
	double sum = 0;
	for (int i = 0; i < len; i++) {
     3ba:	16 16       	cp	r1, r22
     3bc:	17 06       	cpc	r1, r23
     3be:	d4 f4       	brge	.+52     	; 0x3f4 <_Z6get_avPdi+0x56>
     3c0:	8c 01       	movw	r16, r24
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	81 2c       	mov	r8, r1
     3c8:	91 2c       	mov	r9, r1
     3ca:	54 01       	movw	r10, r8
		if (ar > 0) {
     3cc:	c1 14       	cp	r12, r1
     3ce:	d1 04       	cpc	r13, r1
     3d0:	51 f0       	breq	.+20     	; 0x3e6 <_Z6get_avPdi+0x48>
			sum += ar[i];
     3d2:	f8 01       	movw	r30, r16
     3d4:	20 81       	ld	r18, Z
     3d6:	31 81       	ldd	r19, Z+1	; 0x01
     3d8:	42 81       	ldd	r20, Z+2	; 0x02
     3da:	53 81       	ldd	r21, Z+3	; 0x03
     3dc:	c5 01       	movw	r24, r10
     3de:	b4 01       	movw	r22, r8
     3e0:	a7 d6       	rcall	.+3406   	; 0x1130 <__addsf3>
     3e2:	4b 01       	movw	r8, r22
     3e4:	5c 01       	movw	r10, r24
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
	double sum = 0;
	for (int i = 0; i < len; i++) {
     3e6:	21 96       	adiw	r28, 0x01	; 1
     3e8:	0c 5f       	subi	r16, 0xFC	; 252
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	ec 16       	cp	r14, r28
     3ee:	fd 06       	cpc	r15, r29
     3f0:	69 f7       	brne	.-38     	; 0x3cc <_Z6get_avPdi+0x2e>
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <_Z6get_avPdi+0x5c>
double short_last_frequencies[SHORT_FREQ_AR_LEN];
int short_freq_ar_i = 0;

// Get average from double array
double get_av(double* ar, int len) {
	double sum = 0;
     3f4:	81 2c       	mov	r8, r1
     3f6:	91 2c       	mov	r9, r1
     3f8:	54 01       	movw	r10, r8
		if (ar > 0) {
			sum += ar[i];
		}
	}

	return sum/(double)len;
     3fa:	b7 01       	movw	r22, r14
     3fc:	ff 0c       	add	r15, r15
     3fe:	88 0b       	sbc	r24, r24
     400:	99 0b       	sbc	r25, r25
     402:	99 d7       	rcall	.+3890   	; 0x1336 <__floatsisf>
     404:	9b 01       	movw	r18, r22
     406:	ac 01       	movw	r20, r24
     408:	c5 01       	movw	r24, r10
     40a:	b4 01       	movw	r22, r8
     40c:	f9 d6       	rcall	.+3570   	; 0x1200 <__divsf3>
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	bf 90       	pop	r11
     420:	af 90       	pop	r10
     422:	9f 90       	pop	r9
     424:	8f 90       	pop	r8
     426:	08 95       	ret

00000428 <_Z11calculateSDPdi>:

double calculateSD(double* ar, int len)
{
     428:	4f 92       	push	r4
     42a:	5f 92       	push	r5
     42c:	6f 92       	push	r6
     42e:	7f 92       	push	r7
     430:	8f 92       	push	r8
     432:	9f 92       	push	r9
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	6b 01       	movw	r12, r22
	double sum = 0.0, mean, standardDeviation = 0.0;

	int i;

	for(i = 0; i < len; ++i)
     44a:	16 16       	cp	r1, r22
     44c:	17 06       	cpc	r1, r23
     44e:	0c f0       	brlt	.+2      	; 0x452 <_Z11calculateSDPdi+0x2a>
     450:	48 c0       	rjmp	.+144    	; 0x4e2 <__stack+0x83>
     452:	ec 01       	movw	r28, r24
     454:	8b 01       	movw	r16, r22
     456:	00 0f       	add	r16, r16
     458:	11 1f       	adc	r17, r17
     45a:	00 0f       	add	r16, r16
     45c:	11 1f       	adc	r17, r17
     45e:	08 0f       	add	r16, r24
     460:	19 1f       	adc	r17, r25
     462:	7c 01       	movw	r14, r24
     464:	41 2c       	mov	r4, r1
     466:	51 2c       	mov	r5, r1
     468:	32 01       	movw	r6, r4
	{
		sum += ar[i];
     46a:	f7 01       	movw	r30, r14
     46c:	21 91       	ld	r18, Z+
     46e:	31 91       	ld	r19, Z+
     470:	41 91       	ld	r20, Z+
     472:	51 91       	ld	r21, Z+
     474:	7f 01       	movw	r14, r30
     476:	c3 01       	movw	r24, r6
     478:	b2 01       	movw	r22, r4
     47a:	5a d6       	rcall	.+3252   	; 0x1130 <__addsf3>
     47c:	2b 01       	movw	r4, r22
     47e:	3c 01       	movw	r6, r24
{
	double sum = 0.0, mean, standardDeviation = 0.0;

	int i;

	for(i = 0; i < len; ++i)
     480:	e0 16       	cp	r14, r16
     482:	f1 06       	cpc	r15, r17
     484:	91 f7       	brne	.-28     	; 0x46a <__stack+0xb>
     486:	1b c0       	rjmp	.+54     	; 0x4be <__stack+0x5f>
	}

	mean = sum/len;

	for(i = 0; i < len; ++i)
	standardDeviation += pow(ar[i] - mean, 2);
     488:	69 91       	ld	r22, Y+
     48a:	79 91       	ld	r23, Y+
     48c:	89 91       	ld	r24, Y+
     48e:	99 91       	ld	r25, Y+
     490:	a3 01       	movw	r20, r6
     492:	92 01       	movw	r18, r4
     494:	4c d6       	rcall	.+3224   	; 0x112e <__subsf3>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	20 d8       	rcall	.-4032   	; 0xfffff4dc <__eeprom_end+0xff7ef4dc>
     49c:	9b 01       	movw	r18, r22
     49e:	ac 01       	movw	r20, r24
     4a0:	c7 01       	movw	r24, r14
     4a2:	b6 01       	movw	r22, r12
     4a4:	45 d6       	rcall	.+3210   	; 0x1130 <__addsf3>
     4a6:	6b 01       	movw	r12, r22
     4a8:	7c 01       	movw	r14, r24
		sum += ar[i];
	}

	mean = sum/len;

	for(i = 0; i < len; ++i)
     4aa:	c0 17       	cp	r28, r16
     4ac:	d1 07       	cpc	r29, r17
     4ae:	61 f7       	brne	.-40     	; 0x488 <__stack+0x29>
	standardDeviation += pow(ar[i] - mean, 2);

	return sqrt(standardDeviation / len);
     4b0:	a5 01       	movw	r20, r10
     4b2:	94 01       	movw	r18, r8
     4b4:	c7 01       	movw	r24, r14
     4b6:	b6 01       	movw	r22, r12
     4b8:	a3 d6       	rcall	.+3398   	; 0x1200 <__divsf3>
     4ba:	77 d8       	rcall	.-3858   	; 0xfffff5aa <__eeprom_end+0xff7ef5aa>
     4bc:	1d c0       	rjmp	.+58     	; 0x4f8 <__stack+0x99>
	for(i = 0; i < len; ++i)
	{
		sum += ar[i];
	}

	mean = sum/len;
     4be:	b6 01       	movw	r22, r12
     4c0:	dd 0c       	add	r13, r13
     4c2:	88 0b       	sbc	r24, r24
     4c4:	99 0b       	sbc	r25, r25
     4c6:	37 d7       	rcall	.+3694   	; 0x1336 <__floatsisf>
     4c8:	4b 01       	movw	r8, r22
     4ca:	5c 01       	movw	r10, r24
     4cc:	9b 01       	movw	r18, r22
     4ce:	ac 01       	movw	r20, r24
     4d0:	c3 01       	movw	r24, r6
     4d2:	b2 01       	movw	r22, r4
     4d4:	95 d6       	rcall	.+3370   	; 0x1200 <__divsf3>
     4d6:	2b 01       	movw	r4, r22
     4d8:	3c 01       	movw	r6, r24
     4da:	c1 2c       	mov	r12, r1
     4dc:	d1 2c       	mov	r13, r1
     4de:	76 01       	movw	r14, r12
     4e0:	d3 cf       	rjmp	.-90     	; 0x488 <__stack+0x29>
     4e2:	07 2e       	mov	r0, r23
     4e4:	00 0c       	add	r0, r0
     4e6:	88 0b       	sbc	r24, r24
     4e8:	99 0b       	sbc	r25, r25
     4ea:	25 d7       	rcall	.+3658   	; 0x1336 <__floatsisf>
     4ec:	4b 01       	movw	r8, r22
     4ee:	5c 01       	movw	r10, r24
	return sum/(double)len;
}

double calculateSD(double* ar, int len)
{
	double sum = 0.0, mean, standardDeviation = 0.0;
     4f0:	c1 2c       	mov	r12, r1
     4f2:	d1 2c       	mov	r13, r1
     4f4:	76 01       	movw	r14, r12
     4f6:	dc cf       	rjmp	.-72     	; 0x4b0 <__stack+0x51>

	for(i = 0; i < len; ++i)
	standardDeviation += pow(ar[i] - mean, 2);

	return sqrt(standardDeviation / len);
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	bf 90       	pop	r11
     50a:	af 90       	pop	r10
     50c:	9f 90       	pop	r9
     50e:	8f 90       	pop	r8
     510:	7f 90       	pop	r7
     512:	6f 90       	pop	r6
     514:	5f 90       	pop	r5
     516:	4f 90       	pop	r4
     518:	08 95       	ret

0000051a <main>:

int main() {
	setup();
     51a:	ac dd       	rcall	.-1192   	; 0x74 <_Z5setupv>
	USART_Init ( MYUBRR );
     51c:	83 e3       	ldi	r24, 0x33	; 51
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	af d5       	rcall	.+2910   	; 0x1080 <_Z10USART_Initj>
	USART_Transmit('a');
     522:	81 e6       	ldi	r24, 0x61	; 97
     524:	b4 d5       	rcall	.+2920   	; 0x108e <_Z14USART_Transmith>
	while(1) {
		
		USART_Transmit_int((int)checkMaxAmp);
     526:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_ZL11checkMaxAmp>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	d0 d5       	rcall	.+2976   	; 0x10ce <_Z18USART_Transmit_inti>
		USART_Transmit(' ');
     52e:	80 e2       	ldi	r24, 0x20	; 32
     530:	ae d5       	rcall	.+2908   	; 0x108e <_Z14USART_Transmith>
		if (checkMaxAmp > ampThreshold) /* && checkMaxAmp < maxAmpThreshold) */ {
     532:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL11checkMaxAmp>
     536:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     53a:	89 17       	cp	r24, r25
     53c:	08 f0       	brcs	.+2      	; 0x540 <main+0x26>
     53e:	f0 c0       	rjmp	.+480    	; 0x720 <main+0x206>
			if (periodReady) { // prevent working twice with the same reading
     540:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <_ZL11periodReady>
     544:	88 23       	and	r24, r24
     546:	09 f4       	brne	.+2      	; 0x54a <main+0x30>
     548:	eb c0       	rjmp	.+470    	; 0x720 <main+0x206>
				periodReady = false;
     54a:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <_ZL11periodReady>
				
				frequency = FREQ_SAMPLING_RATE/float(period);//calculate frequency timer rate/period
     54e:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <_ZL6period>
     552:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <_ZL6period+0x1>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	eb d6       	rcall	.+3542   	; 0x1332 <__floatunsisf>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	76 e9       	ldi	r23, 0x96	; 150
     564:	88 e1       	ldi	r24, 0x18	; 24
     566:	97 e4       	ldi	r25, 0x47	; 71
     568:	4b d6       	rcall	.+3222   	; 0x1200 <__divsf3>
     56a:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <_ZL9frequency>
     56e:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <_ZL9frequency+0x1>
     572:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_ZL9frequency+0x2>
     576:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <_ZL9frequency+0x3>
				
				//USART_Transmit_int((int)frequency);
				//USART_Println();
			
				if (isFreqLegal(frequency)) {
     57a:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <_ZL9frequency>
     57e:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <_ZL9frequency+0x1>
     582:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_ZL9frequency+0x2>
     586:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_ZL9frequency+0x3>
     58a:	66 d3       	rcall	.+1740   	; 0xc58 <_Z11isFreqLegald>
     58c:	88 23       	and	r24, r24
     58e:	09 f4       	brne	.+2      	; 0x592 <main+0x78>
     590:	c7 c0       	rjmp	.+398    	; 0x720 <main+0x206>
			
					// Ignore noise and big swings
					long_last_frequencies[long_freq_ar_i++] = frequency;
     592:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <long_freq_ar_i>
     596:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <long_freq_ar_i+0x1>
     59a:	9c 01       	movw	r18, r24
     59c:	2f 5f       	subi	r18, 0xFF	; 255
     59e:	3f 4f       	sbci	r19, 0xFF	; 255
     5a0:	30 93 e9 00 	sts	0x00E9, r19	; 0x8000e9 <long_freq_ar_i+0x1>
     5a4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <long_freq_ar_i>
     5a8:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <_ZL9frequency>
     5ac:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <_ZL9frequency+0x1>
     5b0:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <_ZL9frequency+0x2>
     5b4:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <_ZL9frequency+0x3>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	fc 01       	movw	r30, r24
     5c2:	e6 51       	subi	r30, 0x16	; 22
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	40 83       	st	Z, r20
     5c8:	51 83       	std	Z+1, r21	; 0x01
     5ca:	62 83       	std	Z+2, r22	; 0x02
     5cc:	73 83       	std	Z+3, r23	; 0x03
					if (long_freq_ar_i >= LONG_FREQ_AR_LEN) long_freq_ar_i = 0;
     5ce:	2e 31       	cpi	r18, 0x1E	; 30
     5d0:	31 05       	cpc	r19, r1
     5d2:	24 f0       	brlt	.+8      	; 0x5dc <main+0xc2>
     5d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <long_freq_ar_i+0x1>
     5d8:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <long_freq_ar_i>
					float long_average_freq = get_av(long_last_frequencies, LONG_FREQ_AR_LEN);
     5dc:	6e e1       	ldi	r22, 0x1E	; 30
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	8a ee       	ldi	r24, 0xEA	; 234
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	dc de       	rcall	.-584    	; 0x39e <_Z6get_avPdi>
     5e6:	6b 01       	movw	r12, r22
     5e8:	7c 01       	movw	r14, r24
					float diff = abs(long_average_freq - frequency);
     5ea:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <_ZL9frequency>
     5ee:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <_ZL9frequency+0x1>
     5f2:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <_ZL9frequency+0x2>
     5f6:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <_ZL9frequency+0x3>
					float max_diff = long_average_freq * FREQ_MAX_DIFF;

					if (diff < max_diff){
     5fa:	99 d5       	rcall	.+2866   	; 0x112e <__subsf3>
     5fc:	69 d6       	rcall	.+3282   	; 0x12d0 <__fixsfsi>
     5fe:	9b 01       	movw	r18, r22
     600:	77 23       	and	r23, r23
     602:	24 f4       	brge	.+8      	; 0x60c <main+0xf2>
     604:	22 27       	eor	r18, r18
     606:	33 27       	eor	r19, r19
     608:	26 1b       	sub	r18, r22
     60a:	37 0b       	sbc	r19, r23
     60c:	b9 01       	movw	r22, r18
     60e:	33 0f       	add	r19, r19
     610:	88 0b       	sbc	r24, r24
     612:	99 0b       	sbc	r25, r25
     614:	90 d6       	rcall	.+3360   	; 0x1336 <__floatsisf>
     616:	4b 01       	movw	r8, r22
     618:	5c 01       	movw	r10, r24
     61a:	2d ec       	ldi	r18, 0xCD	; 205
     61c:	3c ec       	ldi	r19, 0xCC	; 204
     61e:	4c e4       	ldi	r20, 0x4C	; 76
     620:	5e e3       	ldi	r21, 0x3E	; 62
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	5a d7       	rcall	.+3764   	; 0x14dc <__mulsf3>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	e3 d5       	rcall	.+3014   	; 0x11f8 <__cmpsf2>
     632:	88 23       	and	r24, r24
     634:	2c f5       	brge	.+74     	; 0x680 <main+0x166>
						// get average freq
						short_last_frequencies[short_freq_ar_i++] = frequency;
     636:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
     63a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x1>
     63e:	9c 01       	movw	r18, r24
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	3f 4f       	sbci	r19, 0xFF	; 255
     644:	30 93 b7 00 	sts	0x00B7, r19	; 0x8000b7 <__data_end+0x1>
     648:	20 93 b6 00 	sts	0x00B6, r18	; 0x8000b6 <__data_end>
     64c:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <_ZL9frequency>
     650:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <_ZL9frequency+0x1>
     654:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <_ZL9frequency+0x2>
     658:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <_ZL9frequency+0x3>
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	fc 01       	movw	r30, r24
     666:	e8 54       	subi	r30, 0x48	; 72
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	40 83       	st	Z, r20
     66c:	51 83       	std	Z+1, r21	; 0x01
     66e:	62 83       	std	Z+2, r22	; 0x02
     670:	73 83       	std	Z+3, r23	; 0x03
						if (short_freq_ar_i >= SHORT_FREQ_AR_LEN) short_freq_ar_i = 0;
     672:	2c 30       	cpi	r18, 0x0C	; 12
     674:	31 05       	cpc	r19, r1
     676:	24 f0       	brlt	.+8      	; 0x680 <main+0x166>
     678:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <__data_end+0x1>
     67c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__data_end>
					}
			
					float short_average_freq = get_av(short_last_frequencies, SHORT_FREQ_AR_LEN);
     680:	6c e0       	ldi	r22, 0x0C	; 12
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	88 eb       	ldi	r24, 0xB8	; 184
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	8a de       	rcall	.-748    	; 0x39e <_Z6get_avPdi>
     68a:	6b 01       	movw	r12, r22
     68c:	7c 01       	movw	r14, r24
					getNoteByFreq(&currentNote, short_average_freq); // RECOGNIZE NOTE
     68e:	ab 01       	movw	r20, r22
     690:	bc 01       	movw	r22, r24
     692:	8e ed       	ldi	r24, 0xDE	; 222
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	fe d2       	rcall	.+1532   	; 0xc94 <_Z13getNoteByFreqP4Noted>
					if (currentNote.valid) {
     698:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <currentNote+0xe>
     69c:	88 23       	and	r24, r24
     69e:	39 f0       	breq	.+14     	; 0x6ae <main+0x194>
						//USART_Transmit_int((int)short_average_freq);
						//USART_Println();
						//USART_Println();
						displ.displayNote(&currentNote, short_average_freq); // DISPLAY NOTE
     6a0:	a7 01       	movw	r20, r14
     6a2:	96 01       	movw	r18, r12
     6a4:	6e ed       	ldi	r22, 0xDE	; 222
     6a6:	71 e0       	ldi	r23, 0x01	; 1
     6a8:	84 ea       	ldi	r24, 0xA4	; 164
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	97 d2       	rcall	.+1326   	; 0xbdc <_ZN7Display11displayNoteEPK4Noted>
						//USART_Transmit(currentNote.note);
						//USART_Println();
					}
				
				
					double sd = calculateSD(long_last_frequencies, LONG_FREQ_AR_LEN);
     6ae:	6e e1       	ldi	r22, 0x1E	; 30
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	8a ee       	ldi	r24, 0xEA	; 234
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	b8 de       	rcall	.-656    	; 0x428 <_Z11calculateSDPdi>
					USART_Transmit_int((int)(sd*100.0));
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	48 ec       	ldi	r20, 0xC8	; 200
     6be:	52 e4       	ldi	r21, 0x42	; 66
     6c0:	0d d7       	rcall	.+3610   	; 0x14dc <__mulsf3>
     6c2:	06 d6       	rcall	.+3084   	; 0x12d0 <__fixsfsi>
     6c4:	cb 01       	movw	r24, r22
     6c6:	03 d5       	rcall	.+2566   	; 0x10ce <_Z18USART_Transmit_inti>
					USART_Transmit(' ');
     6c8:	80 e2       	ldi	r24, 0x20	; 32
     6ca:	e1 d4       	rcall	.+2498   	; 0x108e <_Z14USART_Transmith>
					USART_Transmit_int((int)(frequency*100.0));
     6cc:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <_ZL9frequency>
     6d0:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <_ZL9frequency+0x1>
     6d4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_ZL9frequency+0x2>
     6d8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_ZL9frequency+0x3>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	48 ec       	ldi	r20, 0xC8	; 200
     6e2:	52 e4       	ldi	r21, 0x42	; 66
     6e4:	fb d6       	rcall	.+3574   	; 0x14dc <__mulsf3>
     6e6:	f4 d5       	rcall	.+3048   	; 0x12d0 <__fixsfsi>
     6e8:	cb 01       	movw	r24, r22
     6ea:	f1 d4       	rcall	.+2530   	; 0x10ce <_Z18USART_Transmit_inti>
					USART_Transmit(' ');
     6ec:	80 e2       	ldi	r24, 0x20	; 32
     6ee:	cf d4       	rcall	.+2462   	; 0x108e <_Z14USART_Transmith>
					USART_Transmit_int((int)(short_average_freq*100.0));
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	48 ec       	ldi	r20, 0xC8	; 200
     6f6:	52 e4       	ldi	r21, 0x42	; 66
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	ef d6       	rcall	.+3550   	; 0x14dc <__mulsf3>
     6fe:	e8 d5       	rcall	.+3024   	; 0x12d0 <__fixsfsi>
     700:	cb 01       	movw	r24, r22
     702:	e5 d4       	rcall	.+2506   	; 0x10ce <_Z18USART_Transmit_inti>
					USART_Transmit(' ');
     704:	80 e2       	ldi	r24, 0x20	; 32
     706:	c3 d4       	rcall	.+2438   	; 0x108e <_Z14USART_Transmith>
					USART_Transmit_int((int)(ticks));
     708:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL5ticks>
     70c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_ZL5ticks+0x1>
     710:	de d4       	rcall	.+2492   	; 0x10ce <_Z18USART_Transmit_inti>
					USART_Transmit(' ');
     712:	80 e2       	ldi	r24, 0x20	; 32
     714:	bc d4       	rcall	.+2424   	; 0x108e <_Z14USART_Transmith>
					USART_Println();
     716:	06 d5       	rcall	.+2572   	; 0x1124 <_Z13USART_Printlnv>
					
					ticks = 0;
     718:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <_ZL5ticks+0x1>
     71c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_ZL5ticks>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     720:	8f e4       	ldi	r24, 0x4F	; 79
     722:	93 ec       	ldi	r25, 0xC3	; 195
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <main+0x20a>
     728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x210>
     72a:	00 00       	nop
     72c:	fc ce       	rjmp	.-520    	; 0x526 <main+0xc>

0000072e <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     72e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     732:	e4 ea       	ldi	r30, 0xA4	; 164
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	11 82       	std	Z+1, r1	; 0x01
     738:	10 82       	st	Z, r1
     73a:	12 82       	std	Z+2, r1	; 0x02
     73c:	08 95       	ret

0000073e <_ZN7Display5lightEj>:
	}
	this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     73e:	fc 01       	movw	r30, r24
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	86 17       	cp	r24, r22
     746:	97 07       	cpc	r25, r23
     748:	99 f0       	breq	.+38     	; 0x770 <_ZN7Display5lightEj+0x32>
     74a:	12 ba       	out	0x12, r1	; 18
     74c:	11 82       	std	Z+1, r1	; 0x01
     74e:	10 82       	st	Z, r1
     750:	60 fd       	sbrc	r22, 0
     752:	91 9a       	sbi	0x12, 1	; 18
     754:	61 fd       	sbrc	r22, 1
     756:	94 9a       	sbi	0x12, 4	; 18
     758:	62 fd       	sbrc	r22, 2
     75a:	95 9a       	sbi	0x12, 5	; 18
     75c:	63 fd       	sbrc	r22, 3
     75e:	96 9a       	sbi	0x12, 6	; 18
     760:	64 fd       	sbrc	r22, 4
     762:	92 9a       	sbi	0x12, 2	; 18
     764:	65 fd       	sbrc	r22, 5
     766:	93 9a       	sbi	0x12, 3	; 18
     768:	66 fd       	sbrc	r22, 6
     76a:	90 9a       	sbi	0x12, 0	; 18
     76c:	71 83       	std	Z+1, r23	; 0x01
     76e:	60 83       	st	Z, r22
     770:	08 95       	ret

00000772 <_ZN7Display10lightSharpEb>:
     772:	66 23       	and	r22, r22
     774:	11 f0       	breq	.+4      	; 0x77a <_ZN7Display10lightSharpEb+0x8>
     776:	97 9a       	sbi	0x12, 7	; 18
     778:	01 c0       	rjmp	.+2      	; 0x77c <_ZN7Display10lightSharpEb+0xa>
     77a:	97 98       	cbi	0x12, 7	; 18
     77c:	fc 01       	movw	r30, r24
     77e:	62 83       	std	Z+2, r22	; 0x02
     780:	08 95       	ret

00000782 <_ZN7Display12rebuildCacheEd>:
	//Serial.print(ledFCache.Bs[2]);
	//Serial.println();
}

// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     782:	4f 92       	push	r4
     784:	5f 92       	push	r5
     786:	6f 92       	push	r6
     788:	7f 92       	push	r7
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
     7a0:	4a 01       	movw	r8, r20
     7a2:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     7a4:	2a e0       	ldi	r18, 0x0A	; 10
     7a6:	37 ed       	ldi	r19, 0xD7	; 215
     7a8:	43 ea       	ldi	r20, 0xA3	; 163
     7aa:	5d e3       	ldi	r21, 0x3D	; 61
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	95 d6       	rcall	.+3370   	; 0x14dc <__mulsf3>
     7b2:	2b 01       	movw	r4, r22
     7b4:	3c 01       	movw	r6, r24
     7b6:	6e a7       	std	Y+46, r22	; 0x2e
     7b8:	7f a7       	std	Y+47, r23	; 0x2f
     7ba:	88 ab       	std	Y+48, r24	; 0x30
     7bc:	99 ab       	std	Y+49, r25	; 0x31
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     7be:	2a e9       	ldi	r18, 0x9A	; 154
     7c0:	39 e9       	ldi	r19, 0x99	; 153
     7c2:	49 e1       	ldi	r20, 0x19	; 25
     7c4:	5e e3       	ldi	r21, 0x3E	; 62
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	88 d6       	rcall	.+3344   	; 0x14dc <__mulsf3>
     7cc:	6b 01       	movw	r12, r22
     7ce:	7c 01       	movw	r14, r24
     7d0:	6a ab       	std	Y+50, r22	; 0x32
     7d2:	7b ab       	std	Y+51, r23	; 0x33
     7d4:	8c ab       	std	Y+52, r24	; 0x34
     7d6:	9d ab       	std	Y+53, r25	; 0x35
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     7d8:	23 e3       	ldi	r18, 0x33	; 51
     7da:	33 e3       	ldi	r19, 0x33	; 51
     7dc:	43 eb       	ldi	r20, 0xB3	; 179
     7de:	5e e3       	ldi	r21, 0x3E	; 62
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	7b d6       	rcall	.+3318   	; 0x14dc <__mulsf3>
     7e6:	4b 01       	movw	r8, r22
     7e8:	5c 01       	movw	r10, r24
     7ea:	6e ab       	std	Y+54, r22	; 0x36
     7ec:	7f ab       	std	Y+55, r23	; 0x37
     7ee:	88 af       	std	Y+56, r24	; 0x38
     7f0:	99 af       	std	Y+57, r25	; 0x39
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     7f2:	a3 01       	movw	r20, r6
     7f4:	92 01       	movw	r18, r4
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	84 e8       	ldi	r24, 0x84	; 132
     7fc:	92 ec       	ldi	r25, 0xC2	; 194
     7fe:	00 d5       	rcall	.+2560   	; 0x1200 <__divsf3>
     800:	6e 8b       	std	Y+22, r22	; 0x16
     802:	7f 8b       	std	Y+23, r23	; 0x17
     804:	88 8f       	std	Y+24, r24	; 0x18
     806:	99 8f       	std	Y+25, r25	; 0x19
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	a0 ef       	ldi	r26, 0xF0	; 240
     80e:	b2 e4       	ldi	r27, 0x42	; 66
     810:	8a a3       	std	Y+34, r24	; 0x22
     812:	9b a3       	std	Y+35, r25	; 0x23
     814:	ac a3       	std	Y+36, r26	; 0x24
     816:	bd a3       	std	Y+37, r27	; 0x25
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     818:	a3 01       	movw	r20, r6
     81a:	92 01       	movw	r18, r4
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	86 d4       	rcall	.+2316   	; 0x112e <__subsf3>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	92 ec       	ldi	r25, 0xC2	; 194
     82e:	e8 d4       	rcall	.+2512   	; 0x1200 <__divsf3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	6a 8f       	std	Y+26, r22	; 0x1a
     836:	7b 8f       	std	Y+27, r23	; 0x1b
     838:	8c 8f       	std	Y+28, r24	; 0x1c
     83a:	9d 8f       	std	Y+29, r25	; 0x1d
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	4d d6       	rcall	.+3226   	; 0x14dc <__mulsf3>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e9       	ldi	r24, 0x90	; 144
     84c:	91 e4       	ldi	r25, 0x41	; 65
     84e:	6f d4       	rcall	.+2270   	; 0x112e <__subsf3>
     850:	6e a3       	std	Y+38, r22	; 0x26
     852:	7f a3       	std	Y+39, r23	; 0x27
     854:	88 a7       	std	Y+40, r24	; 0x28
     856:	99 a7       	std	Y+41, r25	; 0x29
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     858:	a7 01       	movw	r20, r14
     85a:	96 01       	movw	r18, r12
     85c:	c5 01       	movw	r24, r10
     85e:	b4 01       	movw	r22, r8
     860:	66 d4       	rcall	.+2252   	; 0x112e <__subsf3>
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e9       	ldi	r24, 0x90	; 144
     86c:	91 ec       	ldi	r25, 0xC1	; 193
     86e:	c8 d4       	rcall	.+2448   	; 0x1200 <__divsf3>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	6e 8f       	std	Y+30, r22	; 0x1e
     876:	7f 8f       	std	Y+31, r23	; 0x1f
     878:	88 a3       	std	Y+32, r24	; 0x20
     87a:	99 a3       	std	Y+33, r25	; 0x21
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     87c:	c5 01       	movw	r24, r10
     87e:	b4 01       	movw	r22, r8
     880:	2d d6       	rcall	.+3162   	; 0x14dc <__mulsf3>
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	cb 01       	movw	r24, r22
     88c:	50 d4       	rcall	.+2208   	; 0x112e <__subsf3>
     88e:	6a a7       	std	Y+42, r22	; 0x2a
     890:	7b a7       	std	Y+43, r23	; 0x2b
     892:	8c a7       	std	Y+44, r24	; 0x2c
     894:	9d a7       	std	Y+45, r25	; 0x2d
}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	8f 90       	pop	r8
     8aa:	7f 90       	pop	r7
     8ac:	6f 90       	pop	r6
     8ae:	5f 90       	pop	r5
     8b0:	4f 90       	pop	r4
     8b2:	08 95       	ret

000008b4 <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     8b4:	8f 92       	push	r8
     8b6:	9f 92       	push	r9
     8b8:	af 92       	push	r10
     8ba:	bf 92       	push	r11
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
     8ce:	6a 01       	movw	r12, r20
     8d0:	7b 01       	movw	r14, r22
     8d2:	b9 01       	movw	r22, r18
     8d4:	a8 01       	movw	r20, r16
	this->rebuildCache(max_distance); // find new functions
     8d6:	55 df       	rcall	.-342    	; 0x782 <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	a9 01       	movw	r20, r18
     8de:	c7 01       	movw	r24, r14
     8e0:	b6 01       	movw	r22, r12
     8e2:	8a d4       	rcall	.+2324   	; 0x11f8 <__cmpsf2>
     8e4:	88 23       	and	r24, r24
     8e6:	0c f4       	brge	.+2      	; 0x8ea <_ZN7Display25getIndicatorValByDistanceEdd+0x36>
     8e8:	4f c0       	rjmp	.+158    	; 0x988 <_ZN7Display25getIndicatorValByDistanceEdd+0xd4>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     8ea:	8e a8       	ldd	r8, Y+54	; 0x36
     8ec:	9f a8       	ldd	r9, Y+55	; 0x37
     8ee:	a8 ac       	ldd	r10, Y+56	; 0x38
     8f0:	b9 ac       	ldd	r11, Y+57	; 0x39
     8f2:	a5 01       	movw	r20, r10
     8f4:	94 01       	movw	r18, r8
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	ec d5       	rcall	.+3032   	; 0x14d4 <__gesf2>
     8fc:	18 16       	cp	r1, r24
     8fe:	0c f4       	brge	.+2      	; 0x902 <_ZN7Display25getIndicatorValByDistanceEdd+0x4e>
     900:	46 c0       	rjmp	.+140    	; 0x98e <_ZN7Display25getIndicatorValByDistanceEdd+0xda>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     902:	2e a5       	ldd	r18, Y+46	; 0x2e
     904:	3f a5       	ldd	r19, Y+47	; 0x2f
     906:	48 a9       	ldd	r20, Y+48	; 0x30
     908:	59 a9       	ldd	r21, Y+49	; 0x31
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	74 d4       	rcall	.+2280   	; 0x11f8 <__cmpsf2>
     910:	18 16       	cp	r1, r24
     912:	b4 f4       	brge	.+44     	; 0x940 <_ZN7Display25getIndicatorValByDistanceEdd+0x8c>
     914:	2a a9       	ldd	r18, Y+50	; 0x32
     916:	3b a9       	ldd	r19, Y+51	; 0x33
     918:	4c a9       	ldd	r20, Y+52	; 0x34
     91a:	5d a9       	ldd	r21, Y+53	; 0x35
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	6b d4       	rcall	.+2262   	; 0x11f8 <__cmpsf2>
     922:	18 16       	cp	r1, r24
     924:	54 f4       	brge	.+20     	; 0x93a <_ZN7Display25getIndicatorValByDistanceEdd+0x86>
     926:	a5 01       	movw	r20, r10
     928:	94 01       	movw	r18, r8
     92a:	c7 01       	movw	r24, r14
     92c:	b6 01       	movw	r22, r12
     92e:	64 d4       	rcall	.+2248   	; 0x11f8 <__cmpsf2>
     930:	18 16       	cp	r1, r24
     932:	4c f0       	brlt	.+18     	; 0x946 <_ZN7Display25getIndicatorValByDistanceEdd+0x92>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     934:	02 e0       	ldi	r16, 0x02	; 2
     936:	10 e0       	ldi	r17, 0x00	; 0
     938:	08 c0       	rjmp	.+16     	; 0x94a <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
     93a:	01 e0       	ldi	r16, 0x01	; 1
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	05 c0       	rjmp	.+10     	; 0x94a <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance <= ledFCache.xBounds[i])
     940:	00 e0       	ldi	r16, 0x00	; 0
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     946:	03 e0       	ldi	r16, 0x03	; 3
     948:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     94a:	f8 01       	movw	r30, r16
     94c:	31 96       	adiw	r30, 0x01	; 1
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	ec 0f       	add	r30, r28
     958:	fd 1f       	adc	r31, r29
     95a:	22 89       	ldd	r18, Z+18	; 0x12
     95c:	33 89       	ldd	r19, Z+19	; 0x13
     95e:	44 89       	ldd	r20, Z+20	; 0x14
     960:	55 89       	ldd	r21, Z+21	; 0x15
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	ba d5       	rcall	.+2932   	; 0x14dc <__mulsf3>
     968:	0c 5f       	subi	r16, 0xFC	; 252
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	00 0f       	add	r16, r16
     96e:	11 1f       	adc	r17, r17
     970:	00 0f       	add	r16, r16
     972:	11 1f       	adc	r17, r17
     974:	c0 0f       	add	r28, r16
     976:	d1 1f       	adc	r29, r17
     978:	2a 89       	ldd	r18, Y+18	; 0x12
     97a:	3b 89       	ldd	r19, Y+19	; 0x13
     97c:	4c 89       	ldd	r20, Y+20	; 0x14
     97e:	5d 89       	ldd	r21, Y+21	; 0x15
     980:	d7 d3       	rcall	.+1966   	; 0x1130 <__addsf3>
     982:	a6 d4       	rcall	.+2380   	; 0x12d0 <__fixsfsi>
	return val;
     984:	cb 01       	movw	r24, r22
     986:	05 c0       	rjmp	.+10     	; 0x992 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     988:	88 e7       	ldi	r24, 0x78	; 120
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
	return val;
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	08 95       	ret

000009ac <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     9ac:	2f 92       	push	r2
     9ae:	3f 92       	push	r3
     9b0:	4f 92       	push	r4
     9b2:	5f 92       	push	r5
     9b4:	6f 92       	push	r6
     9b6:	7f 92       	push	r7
     9b8:	8f 92       	push	r8
     9ba:	9f 92       	push	r9
     9bc:	af 92       	push	r10
     9be:	bf 92       	push	r11
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	6c 97       	sbiw	r28, 0x1c	; 28
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	1c 01       	movw	r2, r24
     9e2:	8b 01       	movw	r16, r22
     9e4:	2d 8b       	std	Y+21, r18	; 0x15
     9e6:	3e 8b       	std	Y+22, r19	; 0x16
     9e8:	4f 8b       	std	Y+23, r20	; 0x17
     9ea:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     9ec:	db 01       	movw	r26, r22
     9ee:	16 96       	adiw	r26, 0x06	; 6
     9f0:	8d 91       	ld	r24, X+
     9f2:	9d 91       	ld	r25, X+
     9f4:	0d 90       	ld	r0, X+
     9f6:	bc 91       	ld	r27, X
     9f8:	a0 2d       	mov	r26, r0
     9fa:	89 8f       	std	Y+25, r24	; 0x19
     9fc:	9a 8f       	std	Y+26, r25	; 0x1a
     9fe:	ab 8f       	std	Y+27, r26	; 0x1b
     a00:	bc 8f       	std	Y+28, r27	; 0x1c
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     a02:	fb 01       	movw	r30, r22
     a04:	82 84       	ldd	r8, Z+10	; 0x0a
     a06:	93 84       	ldd	r9, Z+11	; 0x0b
     a08:	a4 84       	ldd	r10, Z+12	; 0x0c
     a0a:	b5 84       	ldd	r11, Z+13	; 0x0d
     a0c:	9c 01       	movw	r18, r24
     a0e:	ad 01       	movw	r20, r26
     a10:	c5 01       	movw	r24, r10
     a12:	b4 01       	movw	r22, r8
     a14:	8c d3       	rcall	.+1816   	; 0x112e <__subsf3>
     a16:	6b 01       	movw	r12, r22
     a18:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     a1a:	d8 01       	movw	r26, r16
     a1c:	12 96       	adiw	r26, 0x02	; 2
     a1e:	4d 90       	ld	r4, X+
     a20:	5d 90       	ld	r5, X+
     a22:	6d 90       	ld	r6, X+
     a24:	7c 90       	ld	r7, X
     a26:	15 97       	sbiw	r26, 0x05	; 5
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     a28:	29 8d       	ldd	r18, Y+25	; 0x19
     a2a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a2c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a2e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a30:	6d 89       	ldd	r22, Y+21	; 0x15
     a32:	7e 89       	ldd	r23, Y+22	; 0x16
     a34:	8f 89       	ldd	r24, Y+23	; 0x17
     a36:	98 8d       	ldd	r25, Y+24	; 0x18
     a38:	7a d3       	rcall	.+1780   	; 0x112e <__subsf3>
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	b4 d4       	rcall	.+2408   	; 0x13ac <fmin>
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     a44:	69 83       	std	Y+1, r22	; 0x01
     a46:	7a 83       	std	Y+2, r23	; 0x02
     a48:	8b 83       	std	Y+3, r24	; 0x03
     a4a:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
     a4c:	29 8d       	ldd	r18, Y+25	; 0x19
     a4e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a50:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a52:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a54:	c3 01       	movw	r24, r6
     a56:	b2 01       	movw	r22, r4
     a58:	6a d3       	rcall	.+1748   	; 0x112e <__subsf3>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	5f e3       	ldi	r21, 0x3F	; 63
     a62:	3c d5       	rcall	.+2680   	; 0x14dc <__mulsf3>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c3 01       	movw	r24, r6
     a6a:	b2 01       	movw	r22, r4
     a6c:	60 d3       	rcall	.+1728   	; 0x112e <__subsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	6d 89       	ldd	r22, Y+21	; 0x15
     a74:	7e 89       	ldd	r23, Y+22	; 0x16
     a76:	8f 89       	ldd	r24, Y+23	; 0x17
     a78:	98 8d       	ldd	r25, Y+24	; 0x18
     a7a:	59 d3       	rcall	.+1714   	; 0x112e <__subsf3>
     a7c:	29 d4       	rcall	.+2130   	; 0x12d0 <__fixsfsi>
     a7e:	9b 01       	movw	r18, r22
     a80:	77 23       	and	r23, r23
     a82:	24 f4       	brge	.+8      	; 0xa8c <_ZN7Display14lightIndicatorEPK4Noted+0xe0>
     a84:	22 27       	eor	r18, r18
     a86:	33 27       	eor	r19, r19
     a88:	26 1b       	sub	r18, r22
     a8a:	37 0b       	sbc	r19, r23
     a8c:	b9 01       	movw	r22, r18
     a8e:	33 0f       	add	r19, r19
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	50 d4       	rcall	.+2208   	; 0x1336 <__floatsisf>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	c7 01       	movw	r24, r14
     a9c:	b6 01       	movw	r22, r12
     a9e:	86 d4       	rcall	.+2316   	; 0x13ac <fmin>
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     aa0:	6d 83       	std	Y+5, r22	; 0x05
     aa2:	7e 83       	std	Y+6, r23	; 0x06
     aa4:	8f 83       	std	Y+7, r24	; 0x07
     aa6:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
     aa8:	a3 01       	movw	r20, r6
     aaa:	92 01       	movw	r18, r4
     aac:	6d 89       	ldd	r22, Y+21	; 0x15
     aae:	7e 89       	ldd	r23, Y+22	; 0x16
     ab0:	8f 89       	ldd	r24, Y+23	; 0x17
     ab2:	98 8d       	ldd	r25, Y+24	; 0x18
     ab4:	3c d3       	rcall	.+1656   	; 0x112e <__subsf3>
     ab6:	0c d4       	rcall	.+2072   	; 0x12d0 <__fixsfsi>
     ab8:	9b 01       	movw	r18, r22
     aba:	77 23       	and	r23, r23
     abc:	24 f4       	brge	.+8      	; 0xac6 <_ZN7Display14lightIndicatorEPK4Noted+0x11a>
     abe:	22 27       	eor	r18, r18
     ac0:	33 27       	eor	r19, r19
     ac2:	26 1b       	sub	r18, r22
     ac4:	37 0b       	sbc	r19, r23
     ac6:	b9 01       	movw	r22, r18
     ac8:	33 0f       	add	r19, r19
     aca:	88 0b       	sbc	r24, r24
     acc:	99 0b       	sbc	r25, r25
     ace:	33 d4       	rcall	.+2150   	; 0x1336 <__floatsisf>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 01       	movw	r22, r12
     ad8:	69 d4       	rcall	.+2258   	; 0x13ac <fmin>
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     ada:	69 87       	std	Y+9, r22	; 0x09
     adc:	7a 87       	std	Y+10, r23	; 0x0a
     ade:	8b 87       	std	Y+11, r24	; 0x0b
     ae0:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
     ae2:	a3 01       	movw	r20, r6
     ae4:	92 01       	movw	r18, r4
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	21 d3       	rcall	.+1602   	; 0x112e <__subsf3>
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	5f e3       	ldi	r21, 0x3F	; 63
     af4:	f3 d4       	rcall	.+2534   	; 0x14dc <__mulsf3>
     af6:	a3 01       	movw	r20, r6
     af8:	92 01       	movw	r18, r4
     afa:	1a d3       	rcall	.+1588   	; 0x1130 <__addsf3>
     afc:	2d 89       	ldd	r18, Y+21	; 0x15
     afe:	3e 89       	ldd	r19, Y+22	; 0x16
     b00:	4f 89       	ldd	r20, Y+23	; 0x17
     b02:	58 8d       	ldd	r21, Y+24	; 0x18
     b04:	14 d3       	rcall	.+1576   	; 0x112e <__subsf3>
     b06:	e4 d3       	rcall	.+1992   	; 0x12d0 <__fixsfsi>
     b08:	9b 01       	movw	r18, r22
     b0a:	77 23       	and	r23, r23
     b0c:	24 f4       	brge	.+8      	; 0xb16 <_ZN7Display14lightIndicatorEPK4Noted+0x16a>
     b0e:	22 27       	eor	r18, r18
     b10:	33 27       	eor	r19, r19
     b12:	26 1b       	sub	r18, r22
     b14:	37 0b       	sbc	r19, r23
     b16:	b9 01       	movw	r22, r18
     b18:	33 0f       	add	r19, r19
     b1a:	88 0b       	sbc	r24, r24
     b1c:	99 0b       	sbc	r25, r25
     b1e:	0b d4       	rcall	.+2070   	; 0x1336 <__floatsisf>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c7 01       	movw	r24, r14
     b26:	b6 01       	movw	r22, r12
     b28:	41 d4       	rcall	.+2178   	; 0x13ac <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     b2a:	6d 87       	std	Y+13, r22	; 0x0d
     b2c:	7e 87       	std	Y+14, r23	; 0x0e
     b2e:	8f 87       	std	Y+15, r24	; 0x0f
     b30:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     b32:	2d 89       	ldd	r18, Y+21	; 0x15
     b34:	3e 89       	ldd	r19, Y+22	; 0x16
     b36:	4f 89       	ldd	r20, Y+23	; 0x17
     b38:	58 8d       	ldd	r21, Y+24	; 0x18
     b3a:	c5 01       	movw	r24, r10
     b3c:	b4 01       	movw	r22, r8
     b3e:	f7 d2       	rcall	.+1518   	; 0x112e <__subsf3>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	c7 01       	movw	r24, r14
     b46:	b6 01       	movw	r22, r12
     b48:	31 d4       	rcall	.+2146   	; 0x13ac <fmin>
	};
     b4a:	69 8b       	std	Y+17, r22	; 0x11
     b4c:	7a 8b       	std	Y+18, r23	; 0x12
     b4e:	8b 8b       	std	Y+19, r24	; 0x13
     b50:	9c 8b       	std	Y+20, r25	; 0x14
     b52:	fe 01       	movw	r30, r28
     b54:	31 96       	adiw	r30, 0x01	; 1
     b56:	3f 01       	movw	r6, r30
     b58:	41 01       	movw	r8, r2
     b5a:	aa 24       	eor	r10, r10
     b5c:	a3 94       	inc	r10
     b5e:	b1 2c       	mov	r11, r1
     b60:	06 c0       	rjmp	.+12     	; 0xb6e <_ZN7Display14lightIndicatorEPK4Noted+0x1c2>
     b62:	ff ef       	ldi	r31, 0xFF	; 255
     b64:	af 1a       	sub	r10, r31
     b66:	bf 0a       	sbc	r11, r31
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	88 0e       	add	r8, r24
     b6c:	91 1c       	adc	r9, r1
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     b6e:	d3 01       	movw	r26, r6
     b70:	4d 91       	ld	r20, X+
     b72:	5d 91       	ld	r21, X+
     b74:	6d 91       	ld	r22, X+
     b76:	7d 91       	ld	r23, X+
     b78:	3d 01       	movw	r6, r26
     b7a:	97 01       	movw	r18, r14
     b7c:	86 01       	movw	r16, r12
     b7e:	c1 01       	movw	r24, r2
     b80:	99 de       	rcall	.-718    	; 0x8b4 <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     b82:	b3 e0       	ldi	r27, 0x03	; 3
     b84:	ab 16       	cp	r10, r27
     b86:	b1 04       	cpc	r11, r1
     b88:	39 f0       	breq	.+14     	; 0xb98 <_ZN7Display14lightIndicatorEPK4Noted+0x1ec>
			this->indicatorBar[i].r = val;
     b8a:	f4 01       	movw	r30, r8
     b8c:	83 83       	std	Z+3, r24	; 0x03
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     b8e:	f5 e0       	ldi	r31, 0x05	; 5
     b90:	af 16       	cp	r10, r31
     b92:	b1 04       	cpc	r11, r1
     b94:	34 f3       	brlt	.-52     	; 0xb62 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <_ZN7Display14lightIndicatorEPK4Noted+0x1f4>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     b98:	d1 01       	movw	r26, r2
     b9a:	1a 96       	adiw	r26, 0x0a	; 10
     b9c:	8c 93       	st	X, r24
     b9e:	e1 cf       	rjmp	.-62     	; 0xb62 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     ba0:	6f e0       	ldi	r22, 0x0F	; 15
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	c1 01       	movw	r24, r2
     ba6:	03 96       	adiw	r24, 0x03	; 3
     ba8:	3d d2       	rcall	.+1146   	; 0x1024 <ws2812_sendarray>
}
     baa:	6c 96       	adiw	r28, 0x1c	; 28
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	8f 90       	pop	r8
     bce:	7f 90       	pop	r7
     bd0:	6f 90       	pop	r6
     bd2:	5f 90       	pop	r5
     bd4:	4f 90       	pop	r4
     bd6:	3f 90       	pop	r3
     bd8:	2f 90       	pop	r2
     bda:	08 95       	ret

00000bdc <_ZN7Display11displayNoteEPK4Noted>:

void Display::displayNote(const Note* note, double frequency) {
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	ec 01       	movw	r28, r24
     bee:	8b 01       	movw	r16, r22
     bf0:	69 01       	movw	r12, r18
     bf2:	7a 01       	movw	r14, r20
	DI di = DI::A;
	switch(note->note) {
     bf4:	fb 01       	movw	r30, r22
     bf6:	80 81       	ld	r24, Z
     bf8:	84 34       	cpi	r24, 0x44	; 68
     bfa:	81 f0       	breq	.+32     	; 0xc1c <_ZN7Display11displayNoteEPK4Noted+0x40>
     bfc:	28 f4       	brcc	.+10     	; 0xc08 <_ZN7Display11displayNoteEPK4Noted+0x2c>
     bfe:	82 34       	cpi	r24, 0x42	; 66
     c00:	49 f0       	breq	.+18     	; 0xc14 <_ZN7Display11displayNoteEPK4Noted+0x38>
     c02:	83 34       	cpi	r24, 0x43	; 67
     c04:	49 f0       	breq	.+18     	; 0xc18 <_ZN7Display11displayNoteEPK4Noted+0x3c>
     c06:	12 c0       	rjmp	.+36     	; 0xc2c <_ZN7Display11displayNoteEPK4Noted+0x50>
     c08:	86 34       	cpi	r24, 0x46	; 70
     c0a:	61 f0       	breq	.+24     	; 0xc24 <_ZN7Display11displayNoteEPK4Noted+0x48>
     c0c:	48 f0       	brcs	.+18     	; 0xc20 <_ZN7Display11displayNoteEPK4Noted+0x44>
     c0e:	87 34       	cpi	r24, 0x47	; 71
     c10:	59 f0       	breq	.+22     	; 0xc28 <_ZN7Display11displayNoteEPK4Noted+0x4c>
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <_ZN7Display11displayNoteEPK4Noted+0x50>
		case 'A':
		di = DI::A;
		break;
		case 'B':
		di = DI::B;
     c14:	69 e7       	ldi	r22, 0x79	; 121
     c16:	0b c0       	rjmp	.+22     	; 0xc2e <_ZN7Display11displayNoteEPK4Noted+0x52>
		break;
		case 'C':
		di = DI::C;
     c18:	62 e7       	ldi	r22, 0x72	; 114
		break;
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'D':
		di = DI::D;
     c1c:	6d e3       	ldi	r22, 0x3D	; 61
		break;
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'E':
		di = DI::E;
     c20:	63 e7       	ldi	r22, 0x73	; 115
		break;
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'F':
		di = DI::F;
     c24:	63 e6       	ldi	r22, 0x63	; 99
		break;
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'G':
		di = DI::G;
     c28:	6a e7       	ldi	r22, 0x7A	; 122
		break;
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <_ZN7Display11displayNoteEPK4Noted+0x52>

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::displayNote(const Note* note, double frequency) {
	DI di = DI::A;
     c2c:	6f e6       	ldi	r22, 0x6F	; 111
void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
}

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	ce 01       	movw	r24, r28
     c32:	85 dd       	rcall	.-1270   	; 0x73e <_ZN7Display5lightEj>
		di = DI::G;
		break;
	}
	
	this->light(di);
	this->lightSharp(note->sharp);
     c34:	f8 01       	movw	r30, r16
     c36:	61 81       	ldd	r22, Z+1	; 0x01
     c38:	ce 01       	movw	r24, r28
     c3a:	9b dd       	rcall	.-1226   	; 0x772 <_ZN7Display10lightSharpEb>
	this->lightIndicator(note, frequency);
     c3c:	a7 01       	movw	r20, r14
     c3e:	96 01       	movw	r18, r12
     c40:	b8 01       	movw	r22, r16
     c42:	ce 01       	movw	r24, r28
     c44:	b3 de       	rcall	.-666    	; 0x9ac <_ZN7Display14lightIndicatorEPK4Noted>
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	08 95       	ret

00000c58 <_Z11isFreqLegald>:
		multiplier *= 2.0;
		// last_octave_freq = FIRST_OCT_MAX_FREQ * multiplier;
	}

	return multiplier;
}
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
     c64:	2b e9       	ldi	r18, 0x9B	; 155
     c66:	38 e4       	ldi	r19, 0x48	; 72
     c68:	4e e7       	ldi	r20, 0x7E	; 126
     c6a:	51 e4       	ldi	r21, 0x41	; 65
     c6c:	33 d4       	rcall	.+2150   	; 0x14d4 <__gesf2>
     c6e:	88 23       	and	r24, r24
     c70:	5c f0       	brlt	.+22     	; 0xc88 <_Z11isFreqLegald+0x30>
     c72:	22 e5       	ldi	r18, 0x52	; 82
     c74:	38 e4       	ldi	r19, 0x48	; 72
     c76:	4e ef       	ldi	r20, 0xFE	; 254
     c78:	53 e4       	ldi	r21, 0x43	; 67
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	bc d2       	rcall	.+1400   	; 0x11f8 <__cmpsf2>
     c80:	88 1f       	adc	r24, r24
     c82:	88 27       	eor	r24, r24
     c84:	88 1f       	adc	r24, r24
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <_Z11isFreqLegald+0x32>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	08 95       	ret

00000c94 <_Z13getNoteByFreqP4Noted>:

void getNoteByFreq(Note* note, double freq) {
     c94:	2f 92       	push	r2
     c96:	3f 92       	push	r3
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	2c 97       	sbiw	r28, 0x0c	; 12
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	9e 83       	std	Y+6, r25	; 0x06
     cca:	8d 83       	std	Y+5, r24	; 0x05
     ccc:	49 83       	std	Y+1, r20	; 0x01
     cce:	5a 83       	std	Y+2, r21	; 0x02
     cd0:	6b 83       	std	Y+3, r22	; 0x03
     cd2:	7c 83       	std	Y+4, r23	; 0x04

#include "noteDetection.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     cd4:	2b e9       	ldi	r18, 0x9B	; 155
     cd6:	38 e4       	ldi	r19, 0x48	; 72
     cd8:	4e e7       	ldi	r20, 0x7E	; 126
     cda:	51 e4       	ldi	r21, 0x41	; 65
     cdc:	69 81       	ldd	r22, Y+1	; 0x01
     cde:	7a 81       	ldd	r23, Y+2	; 0x02
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	f7 d3       	rcall	.+2030   	; 0x14d4 <__gesf2>
     ce6:	88 23       	and	r24, r24
     ce8:	0c f4       	brge	.+2      	; 0xcec <_Z13getNoteByFreqP4Noted+0x58>
     cea:	f9 c0       	rjmp	.+498    	; 0xede <_Z13getNoteByFreqP4Noted+0x24a>
     cec:	22 e5       	ldi	r18, 0x52	; 82
     cee:	38 e4       	ldi	r19, 0x48	; 72
     cf0:	4e ef       	ldi	r20, 0xFE	; 254
     cf2:	53 e4       	ldi	r21, 0x43	; 67
     cf4:	69 81       	ldd	r22, Y+1	; 0x01
     cf6:	7a 81       	ldd	r23, Y+2	; 0x02
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	9c 81       	ldd	r25, Y+4	; 0x04
     cfc:	7d d2       	rcall	.+1274   	; 0x11f8 <__cmpsf2>
     cfe:	88 23       	and	r24, r24
     d00:	0c f0       	brlt	.+2      	; 0xd04 <_Z13getNoteByFreqP4Noted+0x70>
     d02:	ed c0       	rjmp	.+474    	; 0xede <_Z13getNoteByFreqP4Noted+0x24a>
     d04:	f0 c0       	rjmp	.+480    	; 0xee6 <_Z13getNoteByFreqP4Noted+0x252>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     d06:	0f 2e       	mov	r0, r31
     d08:	c1 2c       	mov	r12, r1
     d0a:	d1 2c       	mov	r13, r1
     d0c:	f0 e8       	ldi	r31, 0x80	; 128
     d0e:	ef 2e       	mov	r14, r31
     d10:	ff e3       	ldi	r31, 0x3F	; 63
     d12:	ff 2e       	mov	r15, r31
     d14:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     d16:	a7 01       	movw	r20, r14
     d18:	96 01       	movw	r18, r12
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	08 d2       	rcall	.+1040   	; 0x1130 <__addsf3>
     d20:	6b 01       	movw	r12, r22
     d22:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     d24:	2b e9       	ldi	r18, 0x9B	; 155
     d26:	38 e4       	ldi	r19, 0x48	; 72
     d28:	4e ef       	ldi	r20, 0xFE	; 254
     d2a:	51 e4       	ldi	r21, 0x41	; 65
     d2c:	d7 d3       	rcall	.+1966   	; 0x14dc <__mulsf3>
     d2e:	4b 01       	movw	r8, r22
     d30:	5c 01       	movw	r10, r24
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	69 81       	ldd	r22, Y+1	; 0x01
     d38:	7a 81       	ldd	r23, Y+2	; 0x02
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	ca d3       	rcall	.+1940   	; 0x14d4 <__gesf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f3       	brlt	.-46     	; 0xd16 <_Z13getNoteByFreqP4Noted+0x82>
     d44:	8f 82       	std	Y+7, r8	; 0x07
     d46:	98 86       	std	Y+8, r9	; 0x08
     d48:	a9 86       	std	Y+9, r10	; 0x09
     d4a:	ba 86       	std	Y+10, r11	; 0x0a
     d4c:	e8 c0       	rjmp	.+464    	; 0xf1e <_Z13getNoteByFreqP4Noted+0x28a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     d4e:	1c 01       	movw	r2, r24
     d50:	51 01       	movw	r10, r2
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	a8 1a       	sub	r10, r24
     d56:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     d58:	ab 85       	ldd	r26, Y+11	; 0x0b
     d5a:	bc 85       	ldd	r27, Y+12	; 0x0c
     d5c:	6d 91       	ld	r22, X+
     d5e:	7d 91       	ld	r23, X+
     d60:	8d 91       	ld	r24, X+
     d62:	9d 91       	ld	r25, X+
     d64:	bc 87       	std	Y+12, r27	; 0x0c
     d66:	ab 87       	std	Y+11, r26	; 0x0b
     d68:	a7 01       	movw	r20, r14
     d6a:	96 01       	movw	r18, r12
     d6c:	b7 d3       	rcall	.+1902   	; 0x14dc <__mulsf3>
     d6e:	9b 01       	movw	r18, r22
     d70:	ac 01       	movw	r20, r24
     d72:	69 81       	ldd	r22, Y+1	; 0x01
     d74:	7a 81       	ldd	r23, Y+2	; 0x02
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	d9 d1       	rcall	.+946    	; 0x112e <__subsf3>
     d7c:	a9 d2       	rcall	.+1362   	; 0x12d0 <__fixsfsi>
     d7e:	9b 01       	movw	r18, r22
     d80:	77 23       	and	r23, r23
     d82:	24 f4       	brge	.+8      	; 0xd8c <_Z13getNoteByFreqP4Noted+0xf8>
     d84:	22 27       	eor	r18, r18
     d86:	33 27       	eor	r19, r19
     d88:	26 1b       	sub	r18, r22
     d8a:	37 0b       	sbc	r19, r23
     d8c:	b9 01       	movw	r22, r18
     d8e:	33 0f       	add	r19, r19
     d90:	88 0b       	sbc	r24, r24
     d92:	99 0b       	sbc	r25, r25
     d94:	d0 d2       	rcall	.+1440   	; 0x1336 <__floatsisf>
     d96:	96 2e       	mov	r9, r22
     d98:	07 2f       	mov	r16, r23
     d9a:	18 2f       	mov	r17, r24
     d9c:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     d9e:	27 2d       	mov	r18, r7
     da0:	34 2d       	mov	r19, r4
     da2:	45 2d       	mov	r20, r5
     da4:	56 2d       	mov	r21, r6
     da6:	28 d2       	rcall	.+1104   	; 0x11f8 <__cmpsf2>
     da8:	88 23       	and	r24, r24
     daa:	54 f4       	brge	.+20     	; 0xdc0 <_Z13getNoteByFreqP4Noted+0x12c>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     dac:	c1 01       	movw	r24, r2
     dae:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     db0:	79 2c       	mov	r7, r9
     db2:	40 2e       	mov	r4, r16
     db4:	51 2e       	mov	r5, r17
     db6:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     db8:	8c 30       	cpi	r24, 0x0C	; 12
     dba:	91 05       	cpc	r25, r1
     dbc:	41 f6       	brne	.-112    	; 0xd4e <_Z13getNoteByFreqP4Noted+0xba>
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <_Z13getNoteByFreqP4Noted+0x12e>
     dc0:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     dc2:	f1 01       	movw	r30, r2
     dc4:	ed 58       	subi	r30, 0x8D	; 141
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	ed 81       	ldd	r30, Y+5	; 0x05
     dcc:	fe 81       	ldd	r31, Y+6	; 0x06
     dce:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     dd0:	f1 01       	movw	r30, r2
     dd2:	e9 59       	subi	r30, 0x99	; 153
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	ad 81       	ldd	r26, Y+5	; 0x05
     dda:	be 81       	ldd	r27, Y+6	; 0x06
     ddc:	11 96       	adiw	r26, 0x01	; 1
     dde:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     de0:	f1 01       	movw	r30, r2
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	e1 58       	subi	r30, 0x81	; 129
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	20 81       	ld	r18, Z
     df0:	31 81       	ldd	r19, Z+1	; 0x01
     df2:	42 81       	ldd	r20, Z+2	; 0x02
     df4:	53 81       	ldd	r21, Z+3	; 0x03
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	70 d3       	rcall	.+1760   	; 0x14dc <__mulsf3>
     dfc:	2b 01       	movw	r4, r22
     dfe:	3c 01       	movw	r6, r24
     e00:	ed 81       	ldd	r30, Y+5	; 0x05
     e02:	fe 81       	ldd	r31, Y+6	; 0x06
     e04:	62 83       	std	Z+2, r22	; 0x02
     e06:	73 83       	std	Z+3, r23	; 0x03
     e08:	84 83       	std	Z+4, r24	; 0x04
     e0a:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     e10:	fb e0       	ldi	r31, 0x0B	; 11
     e12:	2f 16       	cp	r2, r31
     e14:	31 04       	cpc	r3, r1
     e16:	59 f4       	brne	.+22     	; 0xe2e <_Z13getNoteByFreqP4Noted+0x19a>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     e18:	8f 81       	ldd	r24, Y+7	; 0x07
     e1a:	98 85       	ldd	r25, Y+8	; 0x08
     e1c:	a9 85       	ldd	r26, Y+9	; 0x09
     e1e:	ba 85       	ldd	r27, Y+10	; 0x0a
     e20:	ed 81       	ldd	r30, Y+5	; 0x05
     e22:	fe 81       	ldd	r31, Y+6	; 0x06
     e24:	82 87       	std	Z+10, r24	; 0x0a
     e26:	93 87       	std	Z+11, r25	; 0x0b
     e28:	a4 87       	std	Z+12, r26	; 0x0c
     e2a:	b5 87       	std	Z+13, r27	; 0x0d
     e2c:	32 c0       	rjmp	.+100    	; 0xe92 <_Z13getNoteByFreqP4Noted+0x1fe>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     e2e:	f1 01       	movw	r30, r2
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	ed 57       	subi	r30, 0x7D	; 125
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	20 81       	ld	r18, Z
     e3e:	31 81       	ldd	r19, Z+1	; 0x01
     e40:	42 81       	ldd	r20, Z+2	; 0x02
     e42:	53 81       	ldd	r21, Z+3	; 0x03
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	49 d3       	rcall	.+1682   	; 0x14dc <__mulsf3>
     e4a:	a3 01       	movw	r20, r6
     e4c:	92 01       	movw	r18, r4
     e4e:	6f d1       	rcall	.+734    	; 0x112e <__subsf3>
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	5f e3       	ldi	r21, 0x3F	; 63
     e58:	41 d3       	rcall	.+1666   	; 0x14dc <__mulsf3>
     e5a:	a3 01       	movw	r20, r6
     e5c:	92 01       	movw	r18, r4
     e5e:	68 d1       	rcall	.+720    	; 0x1130 <__addsf3>
     e60:	ad 81       	ldd	r26, Y+5	; 0x05
     e62:	be 81       	ldd	r27, Y+6	; 0x06
     e64:	1a 96       	adiw	r26, 0x0a	; 10
     e66:	6d 93       	st	X+, r22
     e68:	7d 93       	st	X+, r23
     e6a:	8d 93       	st	X+, r24
     e6c:	9c 93       	st	X, r25
     e6e:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     e70:	21 14       	cp	r2, r1
     e72:	31 04       	cpc	r3, r1
     e74:	71 f4       	brne	.+28     	; 0xe92 <_Z13getNoteByFreqP4Noted+0x1fe>
		note->min_freq = MIN_FREQ*multiplier;
     e76:	2b e9       	ldi	r18, 0x9B	; 155
     e78:	38 e4       	ldi	r19, 0x48	; 72
     e7a:	4e e7       	ldi	r20, 0x7E	; 126
     e7c:	51 e4       	ldi	r21, 0x41	; 65
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	2c d3       	rcall	.+1624   	; 0x14dc <__mulsf3>
     e84:	ed 81       	ldd	r30, Y+5	; 0x05
     e86:	fe 81       	ldd	r31, Y+6	; 0x06
     e88:	66 83       	std	Z+6, r22	; 0x06
     e8a:	77 83       	std	Z+7, r23	; 0x07
     e8c:	80 87       	std	Z+8, r24	; 0x08
     e8e:	91 87       	std	Z+9, r25	; 0x09
     e90:	b0 c0       	rjmp	.+352    	; 0xff2 <_Z13getNoteByFreqP4Noted+0x35e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     e92:	f1 01       	movw	r30, r2
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e5 58       	subi	r30, 0x85	; 133
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	20 81       	ld	r18, Z
     ea2:	31 81       	ldd	r19, Z+1	; 0x01
     ea4:	42 81       	ldd	r20, Z+2	; 0x02
     ea6:	53 81       	ldd	r21, Z+3	; 0x03
     ea8:	c7 01       	movw	r24, r14
     eaa:	b6 01       	movw	r22, r12
     eac:	17 d3       	rcall	.+1582   	; 0x14dc <__mulsf3>
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	c3 01       	movw	r24, r6
     eb4:	b2 01       	movw	r22, r4
     eb6:	3b d1       	rcall	.+630    	; 0x112e <__subsf3>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0d d3       	rcall	.+1562   	; 0x14dc <__mulsf3>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	c3 01       	movw	r24, r6
     ec8:	b2 01       	movw	r22, r4
     eca:	31 d1       	rcall	.+610    	; 0x112e <__subsf3>
     ecc:	ad 81       	ldd	r26, Y+5	; 0x05
     ece:	be 81       	ldd	r27, Y+6	; 0x06
     ed0:	16 96       	adiw	r26, 0x06	; 6
     ed2:	6d 93       	st	X+, r22
     ed4:	7d 93       	st	X+, r23
     ed6:	8d 93       	st	X+, r24
     ed8:	9c 93       	st	X, r25
     eda:	19 97       	sbiw	r26, 0x09	; 9
     edc:	8a c0       	rjmp	.+276    	; 0xff2 <_Z13getNoteByFreqP4Noted+0x35e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     ede:	ed 81       	ldd	r30, Y+5	; 0x05
     ee0:	fe 81       	ldd	r31, Y+6	; 0x06
     ee2:	16 86       	std	Z+14, r1	; 0x0e
		return;
     ee4:	86 c0       	rjmp	.+268    	; 0xff2 <_Z13getNoteByFreqP4Noted+0x35e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     ee6:	2b e9       	ldi	r18, 0x9B	; 155
     ee8:	38 e4       	ldi	r19, 0x48	; 72
     eea:	4e ef       	ldi	r20, 0xFE	; 254
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	7a 81       	ldd	r23, Y+2	; 0x02
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	ee d2       	rcall	.+1500   	; 0x14d4 <__gesf2>
     ef8:	18 16       	cp	r1, r24
     efa:	0c f4       	brge	.+2      	; 0xefe <_Z13getNoteByFreqP4Noted+0x26a>
     efc:	04 cf       	rjmp	.-504    	; 0xd06 <_Z13getNoteByFreqP4Noted+0x72>
     efe:	8b e9       	ldi	r24, 0x9B	; 155
     f00:	98 e4       	ldi	r25, 0x48	; 72
     f02:	ae ef       	ldi	r26, 0xFE	; 254
     f04:	b1 e4       	ldi	r27, 0x41	; 65
     f06:	8f 83       	std	Y+7, r24	; 0x07
     f08:	98 87       	std	Y+8, r25	; 0x08
     f0a:	a9 87       	std	Y+9, r26	; 0x09
     f0c:	ba 87       	std	Y+10, r27	; 0x0a
     f0e:	0f 2e       	mov	r0, r31
     f10:	c1 2c       	mov	r12, r1
     f12:	d1 2c       	mov	r13, r1
     f14:	f0 e8       	ldi	r31, 0x80	; 128
     f16:	ef 2e       	mov	r14, r31
     f18:	ff e3       	ldi	r31, 0x3F	; 63
     f1a:	ff 2e       	mov	r15, r31
     f1c:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     f1e:	23 e1       	ldi	r18, 0x13	; 19
     f20:	30 ed       	ldi	r19, 0xD0	; 208
     f22:	42 e8       	ldi	r20, 0x82	; 130
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	c7 01       	movw	r24, r14
     f28:	b6 01       	movw	r22, r12
     f2a:	d8 d2       	rcall	.+1456   	; 0x14dc <__mulsf3>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	69 81       	ldd	r22, Y+1	; 0x01
     f32:	7a 81       	ldd	r23, Y+2	; 0x02
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	fa d0       	rcall	.+500    	; 0x112e <__subsf3>
     f3a:	ca d1       	rcall	.+916    	; 0x12d0 <__fixsfsi>
     f3c:	9b 01       	movw	r18, r22
     f3e:	77 23       	and	r23, r23
     f40:	24 f4       	brge	.+8      	; 0xf4a <_Z13getNoteByFreqP4Noted+0x2b6>
     f42:	22 27       	eor	r18, r18
     f44:	33 27       	eor	r19, r19
     f46:	26 1b       	sub	r18, r22
     f48:	37 0b       	sbc	r19, r23
     f4a:	b9 01       	movw	r22, r18
     f4c:	33 0f       	add	r19, r19
     f4e:	88 0b       	sbc	r24, r24
     f50:	99 0b       	sbc	r25, r25
     f52:	f1 d1       	rcall	.+994    	; 0x1336 <__floatsisf>
     f54:	76 2e       	mov	r7, r22
     f56:	47 2e       	mov	r4, r23
     f58:	58 2e       	mov	r5, r24
     f5a:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     f5c:	22 e5       	ldi	r18, 0x52	; 82
     f5e:	38 e4       	ldi	r19, 0x48	; 72
     f60:	4e ef       	ldi	r20, 0xFE	; 254
     f62:	53 e4       	ldi	r21, 0x43	; 67
     f64:	49 d1       	rcall	.+658    	; 0x11f8 <__cmpsf2>
     f66:	88 23       	and	r24, r24
     f68:	44 f4       	brge	.+16     	; 0xf7a <_Z13getNoteByFreqP4Noted+0x2e6>
     f6a:	a3 e8       	ldi	r26, 0x83	; 131
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     f6e:	22 24       	eor	r2, r2
     f70:	23 94       	inc	r2
     f72:	31 2c       	mov	r3, r1
     f74:	bc 87       	std	Y+12, r27	; 0x0c
     f76:	ab 87       	std	Y+11, r26	; 0x0b
     f78:	eb ce       	rjmp	.-554    	; 0xd50 <_Z13getNoteByFreqP4Noted+0xbc>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     f7a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <_ZL10noteSharps+0xb>
     f7e:	ed 81       	ldd	r30, Y+5	; 0x05
     f80:	fe 81       	ldd	r31, Y+6	; 0x06
     f82:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     f84:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_ZL8slopeTol>
     f88:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     f8a:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <_ZL9noteNames+0x8>
     f8e:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <_ZL9noteNames+0x9>
     f92:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <_ZL9noteNames+0xa>
     f96:	50 91 7e 00 	lds	r21, 0x007E	; 0x80007e <_ZL9noteNames+0xb>
     f9a:	c7 01       	movw	r24, r14
     f9c:	b6 01       	movw	r22, r12
     f9e:	9e d2       	rcall	.+1340   	; 0x14dc <__mulsf3>
     fa0:	2b 01       	movw	r4, r22
     fa2:	3c 01       	movw	r6, r24
     fa4:	ad 81       	ldd	r26, Y+5	; 0x05
     fa6:	be 81       	ldd	r27, Y+6	; 0x06
     fa8:	12 96       	adiw	r26, 0x02	; 2
     faa:	6d 93       	st	X+, r22
     fac:	7d 93       	st	X+, r23
     fae:	8d 93       	st	X+, r24
     fb0:	9c 93       	st	X, r25
     fb2:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	1e 96       	adiw	r26, 0x0e	; 14
     fb8:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     fba:	23 e1       	ldi	r18, 0x13	; 19
     fbc:	30 ed       	ldi	r19, 0xD0	; 208
     fbe:	42 e8       	ldi	r20, 0x82	; 130
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	8a d2       	rcall	.+1300   	; 0x14dc <__mulsf3>
     fc8:	a3 01       	movw	r20, r6
     fca:	92 01       	movw	r18, r4
     fcc:	b0 d0       	rcall	.+352    	; 0x112e <__subsf3>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	82 d2       	rcall	.+1284   	; 0x14dc <__mulsf3>
     fd8:	a3 01       	movw	r20, r6
     fda:	92 01       	movw	r18, r4
     fdc:	a9 d0       	rcall	.+338    	; 0x1130 <__addsf3>
     fde:	ed 81       	ldd	r30, Y+5	; 0x05
     fe0:	fe 81       	ldd	r31, Y+6	; 0x06
     fe2:	62 87       	std	Z+10, r22	; 0x0a
     fe4:	73 87       	std	Z+11, r23	; 0x0b
     fe6:	84 87       	std	Z+12, r24	; 0x0c
     fe8:	95 87       	std	Z+13, r25	; 0x0d
     fea:	22 24       	eor	r2, r2
     fec:	2a 94       	dec	r2
     fee:	32 2c       	mov	r3, r2
     ff0:	50 cf       	rjmp	.-352    	; 0xe92 <_Z13getNoteByFreqP4Noted+0x1fe>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     ff2:	2c 96       	adiw	r28, 0x0c	; 12
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	df 90       	pop	r13
    100c:	cf 90       	pop	r12
    100e:	bf 90       	pop	r11
    1010:	af 90       	pop	r10
    1012:	9f 90       	pop	r9
    1014:	8f 90       	pop	r8
    1016:	7f 90       	pop	r7
    1018:	6f 90       	pop	r6
    101a:	5f 90       	pop	r5
    101c:	4f 90       	pop	r4
    101e:	3f 90       	pop	r3
    1020:	2f 90       	pop	r2
    1022:	08 95       	ret

00001024 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    1024:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
    1026:	28 b3       	in	r18, 0x18	; 24
    1028:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
    102a:	38 b3       	in	r19, 0x18	; 24
    102c:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
    102e:	4f b7       	in	r20, 0x3f	; 63
  cli();  
    1030:	f8 94       	cli

  while (datlen--) {
    1032:	61 15       	cp	r22, r1
    1034:	71 05       	cpc	r23, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <ws2812_sendarray+0x16>
    1038:	21 c0       	rjmp	.+66     	; 0x107c <loop301+0x38>
    103a:	fc 01       	movw	r30, r24
    103c:	68 0f       	add	r22, r24
    103e:	79 1f       	adc	r23, r25
    curbyte=*data++;
    1040:	91 91       	ld	r25, Z+
    
    asm volatile(
    1042:	88 e0       	ldi	r24, 0x08	; 8

00001044 <loop301>:
    1044:	38 bb       	out	0x18, r19	; 24
    1046:	97 ff       	sbrs	r25, 7
    1048:	28 bb       	out	0x18, r18	; 24
    104a:	99 0f       	add	r25, r25
    104c:	00 00       	nop
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <loop301+0xc>
    1050:	28 bb       	out	0x18, r18	; 24
    1052:	00 00       	nop
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <loop301+0x12>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <loop301+0x14>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <loop301+0x16>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <loop301+0x18>
    105c:	00 c0       	rjmp	.+0      	; 0x105e <loop301+0x1a>
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <loop301+0x1c>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <loop301+0x1e>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <loop301+0x20>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <loop301+0x22>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <loop301+0x24>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <loop301+0x26>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <loop301+0x28>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <loop301+0x2a>
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <loop301+0x2c>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <loop301+0x2e>
    1072:	8a 95       	dec	r24
    1074:	39 f7       	brne	.-50     	; 0x1044 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    1076:	e6 17       	cp	r30, r22
    1078:	f7 07       	cpc	r31, r23
    107a:	11 f7       	brne	.-60     	; 0x1040 <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    107c:	4f bf       	out	0x3f, r20	; 63
    107e:	08 95       	ret

00001080 <_Z10USART_Initj>:

void USART_Transmit_unsigned_int (unsigned int data) {
	char fstr[30];
	sprintf(fstr, "%u", data);
	USART_Transmit_ar(fstr);
}
    1080:	90 bd       	out	0x20, r25	; 32
    1082:	89 b9       	out	0x09, r24	; 9
    1084:	88 e1       	ldi	r24, 0x18	; 24
    1086:	8a b9       	out	0x0a, r24	; 10
    1088:	8e e8       	ldi	r24, 0x8E	; 142
    108a:	80 bd       	out	0x20, r24	; 32
    108c:	08 95       	ret

0000108e <_Z14USART_Transmith>:
    108e:	5d 9b       	sbis	0x0b, 5	; 11
    1090:	fe cf       	rjmp	.-4      	; 0x108e <_Z14USART_Transmith>
    1092:	8c b9       	out	0x0c, r24	; 12
    1094:	08 95       	ret

00001096 <_Z17USART_Transmit_arPc>:
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	fc 01       	movw	r30, r24
    10a0:	01 90       	ld	r0, Z+
    10a2:	00 20       	and	r0, r0
    10a4:	e9 f7       	brne	.-6      	; 0x10a0 <_Z17USART_Transmit_arPc+0xa>
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	e8 1b       	sub	r30, r24
    10aa:	f9 0b       	sbc	r31, r25
    10ac:	1e 16       	cp	r1, r30
    10ae:	1f 06       	cpc	r1, r31
    10b0:	4c f4       	brge	.+18     	; 0x10c4 <_Z17USART_Transmit_arPc+0x2e>
    10b2:	ec 01       	movw	r28, r24
    10b4:	8c 01       	movw	r16, r24
    10b6:	0e 0f       	add	r16, r30
    10b8:	1f 1f       	adc	r17, r31
    10ba:	89 91       	ld	r24, Y+
    10bc:	e8 df       	rcall	.-48     	; 0x108e <_Z14USART_Transmith>
    10be:	c0 17       	cp	r28, r16
    10c0:	d1 07       	cpc	r29, r17
    10c2:	d9 f7       	brne	.-10     	; 0x10ba <_Z17USART_Transmit_arPc+0x24>
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <_Z18USART_Transmit_inti>:

void USART_Transmit_int (int data) {
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	6e 97       	sbiw	r28, 0x1e	; 30
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
	char fstr[30];
	sprintf(fstr, "%i", data);
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	82 eb       	ldi	r24, 0xB2	; 178
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	8e 01       	movw	r16, r28
    10f4:	0f 5f       	subi	r16, 0xFF	; 255
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	1f 93       	push	r17
    10fa:	0f 93       	push	r16
    10fc:	af d2       	rcall	.+1374   	; 0x165c <sprintf>
	USART_Transmit_ar(fstr);
    10fe:	c8 01       	movw	r24, r16
    1100:	ca df       	rcall	.-108    	; 0x1096 <_Z17USART_Transmit_arPc>
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	6e 96       	adiw	r28, 0x1e	; 30
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <_Z13USART_Printlnv>:

void USART_Println() {
	USART_Transmit('\r');
    1124:	8d e0       	ldi	r24, 0x0D	; 13
    1126:	b3 df       	rcall	.-154    	; 0x108e <_Z14USART_Transmith>
	USART_Transmit('\n');
    1128:	8a e0       	ldi	r24, 0x0A	; 10
    112a:	b1 df       	rcall	.-158    	; 0x108e <_Z14USART_Transmith>
    112c:	08 95       	ret

0000112e <__subsf3>:
    112e:	50 58       	subi	r21, 0x80	; 128

00001130 <__addsf3>:
    1130:	bb 27       	eor	r27, r27
    1132:	aa 27       	eor	r26, r26
    1134:	0e d0       	rcall	.+28     	; 0x1152 <__addsf3x>
    1136:	94 c1       	rjmp	.+808    	; 0x1460 <__fp_round>
    1138:	85 d1       	rcall	.+778    	; 0x1444 <__fp_pscA>
    113a:	30 f0       	brcs	.+12     	; 0x1148 <__addsf3+0x18>
    113c:	8a d1       	rcall	.+788    	; 0x1452 <__fp_pscB>
    113e:	20 f0       	brcs	.+8      	; 0x1148 <__addsf3+0x18>
    1140:	31 f4       	brne	.+12     	; 0x114e <__addsf3+0x1e>
    1142:	9f 3f       	cpi	r25, 0xFF	; 255
    1144:	11 f4       	brne	.+4      	; 0x114a <__addsf3+0x1a>
    1146:	1e f4       	brtc	.+6      	; 0x114e <__addsf3+0x1e>
    1148:	7a c1       	rjmp	.+756    	; 0x143e <__fp_nan>
    114a:	0e f4       	brtc	.+2      	; 0x114e <__addsf3+0x1e>
    114c:	e0 95       	com	r30
    114e:	e7 fb       	bst	r30, 7
    1150:	70 c1       	rjmp	.+736    	; 0x1432 <__fp_inf>

00001152 <__addsf3x>:
    1152:	e9 2f       	mov	r30, r25
    1154:	96 d1       	rcall	.+812    	; 0x1482 <__fp_split3>
    1156:	80 f3       	brcs	.-32     	; 0x1138 <__addsf3+0x8>
    1158:	ba 17       	cp	r27, r26
    115a:	62 07       	cpc	r22, r18
    115c:	73 07       	cpc	r23, r19
    115e:	84 07       	cpc	r24, r20
    1160:	95 07       	cpc	r25, r21
    1162:	18 f0       	brcs	.+6      	; 0x116a <__addsf3x+0x18>
    1164:	71 f4       	brne	.+28     	; 0x1182 <__addsf3x+0x30>
    1166:	9e f5       	brtc	.+102    	; 0x11ce <__addsf3x+0x7c>
    1168:	ae c1       	rjmp	.+860    	; 0x14c6 <__fp_zero>
    116a:	0e f4       	brtc	.+2      	; 0x116e <__addsf3x+0x1c>
    116c:	e0 95       	com	r30
    116e:	0b 2e       	mov	r0, r27
    1170:	ba 2f       	mov	r27, r26
    1172:	a0 2d       	mov	r26, r0
    1174:	0b 01       	movw	r0, r22
    1176:	b9 01       	movw	r22, r18
    1178:	90 01       	movw	r18, r0
    117a:	0c 01       	movw	r0, r24
    117c:	ca 01       	movw	r24, r20
    117e:	a0 01       	movw	r20, r0
    1180:	11 24       	eor	r1, r1
    1182:	ff 27       	eor	r31, r31
    1184:	59 1b       	sub	r21, r25
    1186:	99 f0       	breq	.+38     	; 0x11ae <__addsf3x+0x5c>
    1188:	59 3f       	cpi	r21, 0xF9	; 249
    118a:	50 f4       	brcc	.+20     	; 0x11a0 <__addsf3x+0x4e>
    118c:	50 3e       	cpi	r21, 0xE0	; 224
    118e:	68 f1       	brcs	.+90     	; 0x11ea <__addsf3x+0x98>
    1190:	1a 16       	cp	r1, r26
    1192:	f0 40       	sbci	r31, 0x00	; 0
    1194:	a2 2f       	mov	r26, r18
    1196:	23 2f       	mov	r18, r19
    1198:	34 2f       	mov	r19, r20
    119a:	44 27       	eor	r20, r20
    119c:	58 5f       	subi	r21, 0xF8	; 248
    119e:	f3 cf       	rjmp	.-26     	; 0x1186 <__addsf3x+0x34>
    11a0:	46 95       	lsr	r20
    11a2:	37 95       	ror	r19
    11a4:	27 95       	ror	r18
    11a6:	a7 95       	ror	r26
    11a8:	f0 40       	sbci	r31, 0x00	; 0
    11aa:	53 95       	inc	r21
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__addsf3x+0x4e>
    11ae:	7e f4       	brtc	.+30     	; 0x11ce <__addsf3x+0x7c>
    11b0:	1f 16       	cp	r1, r31
    11b2:	ba 0b       	sbc	r27, r26
    11b4:	62 0b       	sbc	r22, r18
    11b6:	73 0b       	sbc	r23, r19
    11b8:	84 0b       	sbc	r24, r20
    11ba:	ba f0       	brmi	.+46     	; 0x11ea <__addsf3x+0x98>
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <__addsf3x+0x96>
    11c0:	ff 0f       	add	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	c2 f7       	brpl	.-16     	; 0x11bc <__addsf3x+0x6a>
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <__addsf3x+0x98>
    11ce:	ba 0f       	add	r27, r26
    11d0:	62 1f       	adc	r22, r18
    11d2:	73 1f       	adc	r23, r19
    11d4:	84 1f       	adc	r24, r20
    11d6:	48 f4       	brcc	.+18     	; 0x11ea <__addsf3x+0x98>
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	f7 95       	ror	r31
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__addsf3x+0x96>
    11e6:	b3 cf       	rjmp	.-154    	; 0x114e <__addsf3+0x1e>
    11e8:	93 95       	inc	r25
    11ea:	88 0f       	add	r24, r24
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <__addsf3x+0x9e>
    11ee:	99 27       	eor	r25, r25
    11f0:	ee 0f       	add	r30, r30
    11f2:	97 95       	ror	r25
    11f4:	87 95       	ror	r24
    11f6:	08 95       	ret

000011f8 <__cmpsf2>:
    11f8:	f8 d0       	rcall	.+496    	; 0x13ea <__fp_cmp>
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <__cmpsf2+0x6>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret

00001200 <__divsf3>:
    1200:	0c d0       	rcall	.+24     	; 0x121a <__divsf3x>
    1202:	2e c1       	rjmp	.+604    	; 0x1460 <__fp_round>
    1204:	26 d1       	rcall	.+588    	; 0x1452 <__fp_pscB>
    1206:	40 f0       	brcs	.+16     	; 0x1218 <__divsf3+0x18>
    1208:	1d d1       	rcall	.+570    	; 0x1444 <__fp_pscA>
    120a:	30 f0       	brcs	.+12     	; 0x1218 <__divsf3+0x18>
    120c:	21 f4       	brne	.+8      	; 0x1216 <__divsf3+0x16>
    120e:	5f 3f       	cpi	r21, 0xFF	; 255
    1210:	19 f0       	breq	.+6      	; 0x1218 <__divsf3+0x18>
    1212:	0f c1       	rjmp	.+542    	; 0x1432 <__fp_inf>
    1214:	51 11       	cpse	r21, r1
    1216:	58 c1       	rjmp	.+688    	; 0x14c8 <__fp_szero>
    1218:	12 c1       	rjmp	.+548    	; 0x143e <__fp_nan>

0000121a <__divsf3x>:
    121a:	33 d1       	rcall	.+614    	; 0x1482 <__fp_split3>
    121c:	98 f3       	brcs	.-26     	; 0x1204 <__divsf3+0x4>

0000121e <__divsf3_pse>:
    121e:	99 23       	and	r25, r25
    1220:	c9 f3       	breq	.-14     	; 0x1214 <__divsf3+0x14>
    1222:	55 23       	and	r21, r21
    1224:	b1 f3       	breq	.-20     	; 0x1212 <__divsf3+0x12>
    1226:	95 1b       	sub	r25, r21
    1228:	55 0b       	sbc	r21, r21
    122a:	bb 27       	eor	r27, r27
    122c:	aa 27       	eor	r26, r26
    122e:	62 17       	cp	r22, r18
    1230:	73 07       	cpc	r23, r19
    1232:	84 07       	cpc	r24, r20
    1234:	38 f0       	brcs	.+14     	; 0x1244 <__divsf3_pse+0x26>
    1236:	9f 5f       	subi	r25, 0xFF	; 255
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	44 1f       	adc	r20, r20
    1240:	aa 1f       	adc	r26, r26
    1242:	a9 f3       	breq	.-22     	; 0x122e <__divsf3_pse+0x10>
    1244:	33 d0       	rcall	.+102    	; 0x12ac <__divsf3_pse+0x8e>
    1246:	0e 2e       	mov	r0, r30
    1248:	3a f0       	brmi	.+14     	; 0x1258 <__divsf3_pse+0x3a>
    124a:	e0 e8       	ldi	r30, 0x80	; 128
    124c:	30 d0       	rcall	.+96     	; 0x12ae <__divsf3_pse+0x90>
    124e:	91 50       	subi	r25, 0x01	; 1
    1250:	50 40       	sbci	r21, 0x00	; 0
    1252:	e6 95       	lsr	r30
    1254:	00 1c       	adc	r0, r0
    1256:	ca f7       	brpl	.-14     	; 0x124a <__divsf3_pse+0x2c>
    1258:	29 d0       	rcall	.+82     	; 0x12ac <__divsf3_pse+0x8e>
    125a:	fe 2f       	mov	r31, r30
    125c:	27 d0       	rcall	.+78     	; 0x12ac <__divsf3_pse+0x8e>
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	bb 1f       	adc	r27, r27
    1266:	26 17       	cp	r18, r22
    1268:	37 07       	cpc	r19, r23
    126a:	48 07       	cpc	r20, r24
    126c:	ab 07       	cpc	r26, r27
    126e:	b0 e8       	ldi	r27, 0x80	; 128
    1270:	09 f0       	breq	.+2      	; 0x1274 <__divsf3_pse+0x56>
    1272:	bb 0b       	sbc	r27, r27
    1274:	80 2d       	mov	r24, r0
    1276:	bf 01       	movw	r22, r30
    1278:	ff 27       	eor	r31, r31
    127a:	93 58       	subi	r25, 0x83	; 131
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	2a f0       	brmi	.+10     	; 0x128a <__divsf3_pse+0x6c>
    1280:	9e 3f       	cpi	r25, 0xFE	; 254
    1282:	51 05       	cpc	r21, r1
    1284:	68 f0       	brcs	.+26     	; 0x12a0 <__divsf3_pse+0x82>
    1286:	d5 c0       	rjmp	.+426    	; 0x1432 <__fp_inf>
    1288:	1f c1       	rjmp	.+574    	; 0x14c8 <__fp_szero>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	ec f3       	brlt	.-6      	; 0x1288 <__divsf3_pse+0x6a>
    128e:	98 3e       	cpi	r25, 0xE8	; 232
    1290:	dc f3       	brlt	.-10     	; 0x1288 <__divsf3_pse+0x6a>
    1292:	86 95       	lsr	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b7 95       	ror	r27
    129a:	f7 95       	ror	r31
    129c:	9f 5f       	subi	r25, 0xFF	; 255
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__divsf3_pse+0x74>
    12a0:	88 0f       	add	r24, r24
    12a2:	91 1d       	adc	r25, r1
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret
    12ac:	e1 e0       	ldi	r30, 0x01	; 1
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	bb 1f       	adc	r27, r27
    12b6:	62 17       	cp	r22, r18
    12b8:	73 07       	cpc	r23, r19
    12ba:	84 07       	cpc	r24, r20
    12bc:	ba 07       	cpc	r27, r26
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <__divsf3_pse+0xaa>
    12c0:	62 1b       	sub	r22, r18
    12c2:	73 0b       	sbc	r23, r19
    12c4:	84 0b       	sbc	r24, r20
    12c6:	ba 0b       	sbc	r27, r26
    12c8:	ee 1f       	adc	r30, r30
    12ca:	88 f7       	brcc	.-30     	; 0x12ae <__divsf3_pse+0x90>
    12cc:	e0 95       	com	r30
    12ce:	08 95       	ret

000012d0 <__fixsfsi>:
    12d0:	04 d0       	rcall	.+8      	; 0x12da <__fixunssfsi>
    12d2:	68 94       	set
    12d4:	b1 11       	cpse	r27, r1
    12d6:	f8 c0       	rjmp	.+496    	; 0x14c8 <__fp_szero>
    12d8:	08 95       	ret

000012da <__fixunssfsi>:
    12da:	db d0       	rcall	.+438    	; 0x1492 <__fp_splitA>
    12dc:	88 f0       	brcs	.+34     	; 0x1300 <__fixunssfsi+0x26>
    12de:	9f 57       	subi	r25, 0x7F	; 127
    12e0:	90 f0       	brcs	.+36     	; 0x1306 <__fixunssfsi+0x2c>
    12e2:	b9 2f       	mov	r27, r25
    12e4:	99 27       	eor	r25, r25
    12e6:	b7 51       	subi	r27, 0x17	; 23
    12e8:	a0 f0       	brcs	.+40     	; 0x1312 <__fixunssfsi+0x38>
    12ea:	d1 f0       	breq	.+52     	; 0x1320 <__fixunssfsi+0x46>
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	1a f0       	brmi	.+6      	; 0x12fc <__fixunssfsi+0x22>
    12f6:	ba 95       	dec	r27
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <__fixunssfsi+0x12>
    12fa:	12 c0       	rjmp	.+36     	; 0x1320 <__fixunssfsi+0x46>
    12fc:	b1 30       	cpi	r27, 0x01	; 1
    12fe:	81 f0       	breq	.+32     	; 0x1320 <__fixunssfsi+0x46>
    1300:	e2 d0       	rcall	.+452    	; 0x14c6 <__fp_zero>
    1302:	b1 e0       	ldi	r27, 0x01	; 1
    1304:	08 95       	ret
    1306:	df c0       	rjmp	.+446    	; 0x14c6 <__fp_zero>
    1308:	67 2f       	mov	r22, r23
    130a:	78 2f       	mov	r23, r24
    130c:	88 27       	eor	r24, r24
    130e:	b8 5f       	subi	r27, 0xF8	; 248
    1310:	39 f0       	breq	.+14     	; 0x1320 <__fixunssfsi+0x46>
    1312:	b9 3f       	cpi	r27, 0xF9	; 249
    1314:	cc f3       	brlt	.-14     	; 0x1308 <__fixunssfsi+0x2e>
    1316:	86 95       	lsr	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	b3 95       	inc	r27
    131e:	d9 f7       	brne	.-10     	; 0x1316 <__fixunssfsi+0x3c>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__fixunssfsi+0x56>
    1322:	90 95       	com	r25
    1324:	80 95       	com	r24
    1326:	70 95       	com	r23
    1328:	61 95       	neg	r22
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__floatunsisf>:
    1332:	e8 94       	clt
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <__floatsisf+0x12>

00001336 <__floatsisf>:
    1336:	97 fb       	bst	r25, 7
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__floatsisf+0x12>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	99 23       	and	r25, r25
    134a:	a9 f0       	breq	.+42     	; 0x1376 <__floatsisf+0x40>
    134c:	f9 2f       	mov	r31, r25
    134e:	96 e9       	ldi	r25, 0x96	; 150
    1350:	bb 27       	eor	r27, r27
    1352:	93 95       	inc	r25
    1354:	f6 95       	lsr	r31
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f1 11       	cpse	r31, r1
    1360:	f8 cf       	rjmp	.-16     	; 0x1352 <__floatsisf+0x1c>
    1362:	fa f4       	brpl	.+62     	; 0x13a2 <__floatsisf+0x6c>
    1364:	bb 0f       	add	r27, r27
    1366:	11 f4       	brne	.+4      	; 0x136c <__floatsisf+0x36>
    1368:	60 ff       	sbrs	r22, 0
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <__floatsisf+0x6c>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <__floatsisf+0x6c>
    1376:	88 23       	and	r24, r24
    1378:	11 f0       	breq	.+4      	; 0x137e <__floatsisf+0x48>
    137a:	96 e9       	ldi	r25, 0x96	; 150
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <__floatsisf+0x6a>
    137e:	77 23       	and	r23, r23
    1380:	21 f0       	breq	.+8      	; 0x138a <__floatsisf+0x54>
    1382:	9e e8       	ldi	r25, 0x8E	; 142
    1384:	87 2f       	mov	r24, r23
    1386:	76 2f       	mov	r23, r22
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__floatsisf+0x5e>
    138a:	66 23       	and	r22, r22
    138c:	71 f0       	breq	.+28     	; 0x13aa <__floatsisf+0x74>
    138e:	96 e8       	ldi	r25, 0x86	; 134
    1390:	86 2f       	mov	r24, r22
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	2a f0       	brmi	.+10     	; 0x13a2 <__floatsisf+0x6c>
    1398:	9a 95       	dec	r25
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	da f7       	brpl	.-10     	; 0x1398 <__floatsisf+0x62>
    13a2:	88 0f       	add	r24, r24
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <fmin>:
    13ac:	99 0f       	add	r25, r25
    13ae:	bb 0b       	sbc	r27, r27
    13b0:	55 0f       	add	r21, r21
    13b2:	aa 0b       	sbc	r26, r26
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	fe ef       	ldi	r31, 0xFE	; 254
    13b8:	16 16       	cp	r1, r22
    13ba:	17 06       	cpc	r1, r23
    13bc:	e8 07       	cpc	r30, r24
    13be:	f9 07       	cpc	r31, r25
    13c0:	70 f0       	brcs	.+28     	; 0x13de <fmin+0x32>
    13c2:	12 16       	cp	r1, r18
    13c4:	13 06       	cpc	r1, r19
    13c6:	e4 07       	cpc	r30, r20
    13c8:	f5 07       	cpc	r31, r21
    13ca:	60 f0       	brcs	.+24     	; 0x13e4 <fmin+0x38>
    13cc:	ba 17       	cp	r27, r26
    13ce:	54 f0       	brlt	.+20     	; 0x13e4 <fmin+0x38>
    13d0:	31 f4       	brne	.+12     	; 0x13de <fmin+0x32>
    13d2:	26 17       	cp	r18, r22
    13d4:	37 07       	cpc	r19, r23
    13d6:	48 07       	cpc	r20, r24
    13d8:	59 07       	cpc	r21, r25
    13da:	a7 95       	ror	r26
    13dc:	1b f4       	brvc	.+6      	; 0x13e4 <fmin+0x38>
    13de:	b9 01       	movw	r22, r18
    13e0:	ca 01       	movw	r24, r20
    13e2:	ba 2f       	mov	r27, r26
    13e4:	b6 95       	lsr	r27
    13e6:	97 95       	ror	r25
    13e8:	08 95       	ret

000013ea <__fp_cmp>:
    13ea:	99 0f       	add	r25, r25
    13ec:	00 08       	sbc	r0, r0
    13ee:	55 0f       	add	r21, r21
    13f0:	aa 0b       	sbc	r26, r26
    13f2:	e0 e8       	ldi	r30, 0x80	; 128
    13f4:	fe ef       	ldi	r31, 0xFE	; 254
    13f6:	16 16       	cp	r1, r22
    13f8:	17 06       	cpc	r1, r23
    13fa:	e8 07       	cpc	r30, r24
    13fc:	f9 07       	cpc	r31, r25
    13fe:	c0 f0       	brcs	.+48     	; 0x1430 <__fp_cmp+0x46>
    1400:	12 16       	cp	r1, r18
    1402:	13 06       	cpc	r1, r19
    1404:	e4 07       	cpc	r30, r20
    1406:	f5 07       	cpc	r31, r21
    1408:	98 f0       	brcs	.+38     	; 0x1430 <__fp_cmp+0x46>
    140a:	62 1b       	sub	r22, r18
    140c:	73 0b       	sbc	r23, r19
    140e:	84 0b       	sbc	r24, r20
    1410:	95 0b       	sbc	r25, r21
    1412:	39 f4       	brne	.+14     	; 0x1422 <__fp_cmp+0x38>
    1414:	0a 26       	eor	r0, r26
    1416:	61 f0       	breq	.+24     	; 0x1430 <__fp_cmp+0x46>
    1418:	23 2b       	or	r18, r19
    141a:	24 2b       	or	r18, r20
    141c:	25 2b       	or	r18, r21
    141e:	21 f4       	brne	.+8      	; 0x1428 <__fp_cmp+0x3e>
    1420:	08 95       	ret
    1422:	0a 26       	eor	r0, r26
    1424:	09 f4       	brne	.+2      	; 0x1428 <__fp_cmp+0x3e>
    1426:	a1 40       	sbci	r26, 0x01	; 1
    1428:	a6 95       	lsr	r26
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	81 1d       	adc	r24, r1
    142e:	81 1d       	adc	r24, r1
    1430:	08 95       	ret

00001432 <__fp_inf>:
    1432:	97 f9       	bld	r25, 7
    1434:	9f 67       	ori	r25, 0x7F	; 127
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	08 95       	ret

0000143e <__fp_nan>:
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	08 95       	ret

00001444 <__fp_pscA>:
    1444:	00 24       	eor	r0, r0
    1446:	0a 94       	dec	r0
    1448:	16 16       	cp	r1, r22
    144a:	17 06       	cpc	r1, r23
    144c:	18 06       	cpc	r1, r24
    144e:	09 06       	cpc	r0, r25
    1450:	08 95       	ret

00001452 <__fp_pscB>:
    1452:	00 24       	eor	r0, r0
    1454:	0a 94       	dec	r0
    1456:	12 16       	cp	r1, r18
    1458:	13 06       	cpc	r1, r19
    145a:	14 06       	cpc	r1, r20
    145c:	05 06       	cpc	r0, r21
    145e:	08 95       	ret

00001460 <__fp_round>:
    1460:	09 2e       	mov	r0, r25
    1462:	03 94       	inc	r0
    1464:	00 0c       	add	r0, r0
    1466:	11 f4       	brne	.+4      	; 0x146c <__fp_round+0xc>
    1468:	88 23       	and	r24, r24
    146a:	52 f0       	brmi	.+20     	; 0x1480 <__fp_round+0x20>
    146c:	bb 0f       	add	r27, r27
    146e:	40 f4       	brcc	.+16     	; 0x1480 <__fp_round+0x20>
    1470:	bf 2b       	or	r27, r31
    1472:	11 f4       	brne	.+4      	; 0x1478 <__fp_round+0x18>
    1474:	60 ff       	sbrs	r22, 0
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__fp_round+0x20>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__fp_split3>:
    1482:	57 fd       	sbrc	r21, 7
    1484:	90 58       	subi	r25, 0x80	; 128
    1486:	44 0f       	add	r20, r20
    1488:	55 1f       	adc	r21, r21
    148a:	59 f0       	breq	.+22     	; 0x14a2 <__fp_splitA+0x10>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	71 f0       	breq	.+28     	; 0x14ac <__fp_splitA+0x1a>
    1490:	47 95       	ror	r20

00001492 <__fp_splitA>:
    1492:	88 0f       	add	r24, r24
    1494:	97 fb       	bst	r25, 7
    1496:	99 1f       	adc	r25, r25
    1498:	61 f0       	breq	.+24     	; 0x14b2 <__fp_splitA+0x20>
    149a:	9f 3f       	cpi	r25, 0xFF	; 255
    149c:	79 f0       	breq	.+30     	; 0x14bc <__fp_splitA+0x2a>
    149e:	87 95       	ror	r24
    14a0:	08 95       	ret
    14a2:	12 16       	cp	r1, r18
    14a4:	13 06       	cpc	r1, r19
    14a6:	14 06       	cpc	r1, r20
    14a8:	55 1f       	adc	r21, r21
    14aa:	f2 cf       	rjmp	.-28     	; 0x1490 <__fp_split3+0xe>
    14ac:	46 95       	lsr	r20
    14ae:	f1 df       	rcall	.-30     	; 0x1492 <__fp_splitA>
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <__fp_splitA+0x30>
    14b2:	16 16       	cp	r1, r22
    14b4:	17 06       	cpc	r1, r23
    14b6:	18 06       	cpc	r1, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	f1 cf       	rjmp	.-30     	; 0x149e <__fp_splitA+0xc>
    14bc:	86 95       	lsr	r24
    14be:	71 05       	cpc	r23, r1
    14c0:	61 05       	cpc	r22, r1
    14c2:	08 94       	sec
    14c4:	08 95       	ret

000014c6 <__fp_zero>:
    14c6:	e8 94       	clt

000014c8 <__fp_szero>:
    14c8:	bb 27       	eor	r27, r27
    14ca:	66 27       	eor	r22, r22
    14cc:	77 27       	eor	r23, r23
    14ce:	cb 01       	movw	r24, r22
    14d0:	97 f9       	bld	r25, 7
    14d2:	08 95       	ret

000014d4 <__gesf2>:
    14d4:	8a df       	rcall	.-236    	; 0x13ea <__fp_cmp>
    14d6:	08 f4       	brcc	.+2      	; 0x14da <__gesf2+0x6>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	08 95       	ret

000014dc <__mulsf3>:
    14dc:	0b d0       	rcall	.+22     	; 0x14f4 <__mulsf3x>
    14de:	c0 cf       	rjmp	.-128    	; 0x1460 <__fp_round>
    14e0:	b1 df       	rcall	.-158    	; 0x1444 <__fp_pscA>
    14e2:	28 f0       	brcs	.+10     	; 0x14ee <__mulsf3+0x12>
    14e4:	b6 df       	rcall	.-148    	; 0x1452 <__fp_pscB>
    14e6:	18 f0       	brcs	.+6      	; 0x14ee <__mulsf3+0x12>
    14e8:	95 23       	and	r25, r21
    14ea:	09 f0       	breq	.+2      	; 0x14ee <__mulsf3+0x12>
    14ec:	a2 cf       	rjmp	.-188    	; 0x1432 <__fp_inf>
    14ee:	a7 cf       	rjmp	.-178    	; 0x143e <__fp_nan>
    14f0:	11 24       	eor	r1, r1
    14f2:	ea cf       	rjmp	.-44     	; 0x14c8 <__fp_szero>

000014f4 <__mulsf3x>:
    14f4:	c6 df       	rcall	.-116    	; 0x1482 <__fp_split3>
    14f6:	a0 f3       	brcs	.-24     	; 0x14e0 <__mulsf3+0x4>

000014f8 <__mulsf3_pse>:
    14f8:	95 9f       	mul	r25, r21
    14fa:	d1 f3       	breq	.-12     	; 0x14f0 <__mulsf3+0x14>
    14fc:	95 0f       	add	r25, r21
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	55 1f       	adc	r21, r21
    1502:	62 9f       	mul	r22, r18
    1504:	f0 01       	movw	r30, r0
    1506:	72 9f       	mul	r23, r18
    1508:	bb 27       	eor	r27, r27
    150a:	f0 0d       	add	r31, r0
    150c:	b1 1d       	adc	r27, r1
    150e:	63 9f       	mul	r22, r19
    1510:	aa 27       	eor	r26, r26
    1512:	f0 0d       	add	r31, r0
    1514:	b1 1d       	adc	r27, r1
    1516:	aa 1f       	adc	r26, r26
    1518:	64 9f       	mul	r22, r20
    151a:	66 27       	eor	r22, r22
    151c:	b0 0d       	add	r27, r0
    151e:	a1 1d       	adc	r26, r1
    1520:	66 1f       	adc	r22, r22
    1522:	82 9f       	mul	r24, r18
    1524:	22 27       	eor	r18, r18
    1526:	b0 0d       	add	r27, r0
    1528:	a1 1d       	adc	r26, r1
    152a:	62 1f       	adc	r22, r18
    152c:	73 9f       	mul	r23, r19
    152e:	b0 0d       	add	r27, r0
    1530:	a1 1d       	adc	r26, r1
    1532:	62 1f       	adc	r22, r18
    1534:	83 9f       	mul	r24, r19
    1536:	a0 0d       	add	r26, r0
    1538:	61 1d       	adc	r22, r1
    153a:	22 1f       	adc	r18, r18
    153c:	74 9f       	mul	r23, r20
    153e:	33 27       	eor	r19, r19
    1540:	a0 0d       	add	r26, r0
    1542:	61 1d       	adc	r22, r1
    1544:	23 1f       	adc	r18, r19
    1546:	84 9f       	mul	r24, r20
    1548:	60 0d       	add	r22, r0
    154a:	21 1d       	adc	r18, r1
    154c:	82 2f       	mov	r24, r18
    154e:	76 2f       	mov	r23, r22
    1550:	6a 2f       	mov	r22, r26
    1552:	11 24       	eor	r1, r1
    1554:	9f 57       	subi	r25, 0x7F	; 127
    1556:	50 40       	sbci	r21, 0x00	; 0
    1558:	8a f0       	brmi	.+34     	; 0x157c <__mulsf3_pse+0x84>
    155a:	e1 f0       	breq	.+56     	; 0x1594 <__mulsf3_pse+0x9c>
    155c:	88 23       	and	r24, r24
    155e:	4a f0       	brmi	.+18     	; 0x1572 <__mulsf3_pse+0x7a>
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	bb 1f       	adc	r27, r27
    1566:	66 1f       	adc	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	91 50       	subi	r25, 0x01	; 1
    156e:	50 40       	sbci	r21, 0x00	; 0
    1570:	a9 f7       	brne	.-22     	; 0x155c <__mulsf3_pse+0x64>
    1572:	9e 3f       	cpi	r25, 0xFE	; 254
    1574:	51 05       	cpc	r21, r1
    1576:	70 f0       	brcs	.+28     	; 0x1594 <__mulsf3_pse+0x9c>
    1578:	5c cf       	rjmp	.-328    	; 0x1432 <__fp_inf>
    157a:	a6 cf       	rjmp	.-180    	; 0x14c8 <__fp_szero>
    157c:	5f 3f       	cpi	r21, 0xFF	; 255
    157e:	ec f3       	brlt	.-6      	; 0x157a <__mulsf3_pse+0x82>
    1580:	98 3e       	cpi	r25, 0xE8	; 232
    1582:	dc f3       	brlt	.-10     	; 0x157a <__mulsf3_pse+0x82>
    1584:	86 95       	lsr	r24
    1586:	77 95       	ror	r23
    1588:	67 95       	ror	r22
    158a:	b7 95       	ror	r27
    158c:	f7 95       	ror	r31
    158e:	e7 95       	ror	r30
    1590:	9f 5f       	subi	r25, 0xFF	; 255
    1592:	c1 f7       	brne	.-16     	; 0x1584 <__mulsf3_pse+0x8c>
    1594:	fe 2b       	or	r31, r30
    1596:	88 0f       	add	r24, r24
    1598:	91 1d       	adc	r25, r1
    159a:	96 95       	lsr	r25
    159c:	87 95       	ror	r24
    159e:	97 f9       	bld	r25, 7
    15a0:	08 95       	ret
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__mulsf3_pse+0xb0>
    15a4:	0e f4       	brtc	.+2      	; 0x15a8 <__mulsf3_pse+0xb0>
    15a6:	4b cf       	rjmp	.-362    	; 0x143e <__fp_nan>
    15a8:	3e c0       	rjmp	.+124    	; 0x1626 <__fp_mpack>

000015aa <sqrt>:
    15aa:	73 df       	rcall	.-282    	; 0x1492 <__fp_splitA>
    15ac:	d0 f3       	brcs	.-12     	; 0x15a2 <__mulsf3_pse+0xaa>
    15ae:	99 23       	and	r25, r25
    15b0:	d9 f3       	breq	.-10     	; 0x15a8 <__mulsf3_pse+0xb0>
    15b2:	ce f3       	brts	.-14     	; 0x15a6 <__mulsf3_pse+0xae>
    15b4:	9f 57       	subi	r25, 0x7F	; 127
    15b6:	55 0b       	sbc	r21, r21
    15b8:	87 ff       	sbrs	r24, 7
    15ba:	43 d0       	rcall	.+134    	; 0x1642 <__fp_norm2>
    15bc:	00 24       	eor	r0, r0
    15be:	a0 e6       	ldi	r26, 0x60	; 96
    15c0:	40 ea       	ldi	r20, 0xA0	; 160
    15c2:	90 01       	movw	r18, r0
    15c4:	80 58       	subi	r24, 0x80	; 128
    15c6:	56 95       	lsr	r21
    15c8:	97 95       	ror	r25
    15ca:	28 f4       	brcc	.+10     	; 0x15d6 <sqrt+0x2c>
    15cc:	80 5c       	subi	r24, 0xC0	; 192
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	88 1f       	adc	r24, r24
    15d4:	20 f0       	brcs	.+8      	; 0x15de <sqrt+0x34>
    15d6:	26 17       	cp	r18, r22
    15d8:	37 07       	cpc	r19, r23
    15da:	48 07       	cpc	r20, r24
    15dc:	30 f4       	brcc	.+12     	; 0x15ea <sqrt+0x40>
    15de:	62 1b       	sub	r22, r18
    15e0:	73 0b       	sbc	r23, r19
    15e2:	84 0b       	sbc	r24, r20
    15e4:	20 29       	or	r18, r0
    15e6:	31 29       	or	r19, r1
    15e8:	4a 2b       	or	r20, r26
    15ea:	a6 95       	lsr	r26
    15ec:	17 94       	ror	r1
    15ee:	07 94       	ror	r0
    15f0:	20 25       	eor	r18, r0
    15f2:	31 25       	eor	r19, r1
    15f4:	4a 27       	eor	r20, r26
    15f6:	58 f7       	brcc	.-42     	; 0x15ce <sqrt+0x24>
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	20 f0       	brcs	.+8      	; 0x1608 <sqrt+0x5e>
    1600:	26 17       	cp	r18, r22
    1602:	37 07       	cpc	r19, r23
    1604:	48 07       	cpc	r20, r24
    1606:	30 f4       	brcc	.+12     	; 0x1614 <sqrt+0x6a>
    1608:	62 0b       	sbc	r22, r18
    160a:	73 0b       	sbc	r23, r19
    160c:	84 0b       	sbc	r24, r20
    160e:	20 0d       	add	r18, r0
    1610:	31 1d       	adc	r19, r1
    1612:	41 1d       	adc	r20, r1
    1614:	a0 95       	com	r26
    1616:	81 f7       	brne	.-32     	; 0x15f8 <sqrt+0x4e>
    1618:	b9 01       	movw	r22, r18
    161a:	84 2f       	mov	r24, r20
    161c:	91 58       	subi	r25, 0x81	; 129
    161e:	88 0f       	add	r24, r24
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	08 95       	ret

00001626 <__fp_mpack>:
    1626:	9f 3f       	cpi	r25, 0xFF	; 255
    1628:	31 f0       	breq	.+12     	; 0x1636 <__fp_mpack_finite+0xc>

0000162a <__fp_mpack_finite>:
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	20 f4       	brcc	.+8      	; 0x1636 <__fp_mpack_finite+0xc>
    162e:	87 95       	ror	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	b7 95       	ror	r27
    1636:	88 0f       	add	r24, r24
    1638:	91 1d       	adc	r25, r1
    163a:	96 95       	lsr	r25
    163c:	87 95       	ror	r24
    163e:	97 f9       	bld	r25, 7
    1640:	08 95       	ret

00001642 <__fp_norm2>:
    1642:	91 50       	subi	r25, 0x01	; 1
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	d2 f7       	brpl	.-12     	; 0x1642 <__fp_norm2>
    164e:	08 95       	ret

00001650 <__tablejump2__>:
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	05 90       	lpm	r0, Z+
    1656:	f4 91       	lpm	r31, Z
    1658:	e0 2d       	mov	r30, r0
    165a:	09 94       	ijmp

0000165c <sprintf>:
    165c:	ae e0       	ldi	r26, 0x0E	; 14
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e3 e3       	ldi	r30, 0x33	; 51
    1662:	fb e0       	ldi	r31, 0x0B	; 11
    1664:	aa c2       	rjmp	.+1364   	; 0x1bba <__prologue_saves__+0x1c>
    1666:	0d 89       	ldd	r16, Y+21	; 0x15
    1668:	1e 89       	ldd	r17, Y+22	; 0x16
    166a:	86 e0       	ldi	r24, 0x06	; 6
    166c:	8c 83       	std	Y+4, r24	; 0x04
    166e:	1a 83       	std	Y+2, r17	; 0x02
    1670:	09 83       	std	Y+1, r16	; 0x01
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	9f e7       	ldi	r25, 0x7F	; 127
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	ae 01       	movw	r20, r28
    167c:	47 5e       	subi	r20, 0xE7	; 231
    167e:	5f 4f       	sbci	r21, 0xFF	; 255
    1680:	6f 89       	ldd	r22, Y+23	; 0x17
    1682:	78 8d       	ldd	r23, Y+24	; 0x18
    1684:	ce 01       	movw	r24, r28
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	08 d0       	rcall	.+16     	; 0x169a <vfprintf>
    168a:	ef 81       	ldd	r30, Y+7	; 0x07
    168c:	f8 85       	ldd	r31, Y+8	; 0x08
    168e:	e0 0f       	add	r30, r16
    1690:	f1 1f       	adc	r31, r17
    1692:	10 82       	st	Z, r1
    1694:	2e 96       	adiw	r28, 0x0e	; 14
    1696:	e4 e0       	ldi	r30, 0x04	; 4
    1698:	ac c2       	rjmp	.+1368   	; 0x1bf2 <__epilogue_restores__+0x1c>

0000169a <vfprintf>:
    169a:	ab e0       	ldi	r26, 0x0B	; 11
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e2 e5       	ldi	r30, 0x52	; 82
    16a0:	fb e0       	ldi	r31, 0x0B	; 11
    16a2:	7d c2       	rjmp	.+1274   	; 0x1b9e <__prologue_saves__>
    16a4:	6c 01       	movw	r12, r24
    16a6:	7b 01       	movw	r14, r22
    16a8:	8a 01       	movw	r16, r20
    16aa:	fc 01       	movw	r30, r24
    16ac:	17 82       	std	Z+7, r1	; 0x07
    16ae:	16 82       	std	Z+6, r1	; 0x06
    16b0:	83 81       	ldd	r24, Z+3	; 0x03
    16b2:	81 ff       	sbrs	r24, 1
    16b4:	bf c1       	rjmp	.+894    	; 0x1a34 <vfprintf+0x39a>
    16b6:	ce 01       	movw	r24, r28
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	3c 01       	movw	r6, r24
    16bc:	f6 01       	movw	r30, r12
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	f7 01       	movw	r30, r14
    16c2:	93 fd       	sbrc	r25, 3
    16c4:	85 91       	lpm	r24, Z+
    16c6:	93 ff       	sbrs	r25, 3
    16c8:	81 91       	ld	r24, Z+
    16ca:	7f 01       	movw	r14, r30
    16cc:	88 23       	and	r24, r24
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <vfprintf+0x38>
    16d0:	ad c1       	rjmp	.+858    	; 0x1a2c <vfprintf+0x392>
    16d2:	85 32       	cpi	r24, 0x25	; 37
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <vfprintf+0x4a>
    16d6:	93 fd       	sbrc	r25, 3
    16d8:	85 91       	lpm	r24, Z+
    16da:	93 ff       	sbrs	r25, 3
    16dc:	81 91       	ld	r24, Z+
    16de:	7f 01       	movw	r14, r30
    16e0:	85 32       	cpi	r24, 0x25	; 37
    16e2:	21 f4       	brne	.+8      	; 0x16ec <vfprintf+0x52>
    16e4:	b6 01       	movw	r22, r12
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	c0 d1       	rcall	.+896    	; 0x1a6a <fputc>
    16ea:	e8 cf       	rjmp	.-48     	; 0x16bc <vfprintf+0x22>
    16ec:	91 2c       	mov	r9, r1
    16ee:	21 2c       	mov	r2, r1
    16f0:	31 2c       	mov	r3, r1
    16f2:	ff e1       	ldi	r31, 0x1F	; 31
    16f4:	f3 15       	cp	r31, r3
    16f6:	d8 f0       	brcs	.+54     	; 0x172e <vfprintf+0x94>
    16f8:	8b 32       	cpi	r24, 0x2B	; 43
    16fa:	79 f0       	breq	.+30     	; 0x171a <vfprintf+0x80>
    16fc:	38 f4       	brcc	.+14     	; 0x170c <vfprintf+0x72>
    16fe:	80 32       	cpi	r24, 0x20	; 32
    1700:	79 f0       	breq	.+30     	; 0x1720 <vfprintf+0x86>
    1702:	83 32       	cpi	r24, 0x23	; 35
    1704:	a1 f4       	brne	.+40     	; 0x172e <vfprintf+0x94>
    1706:	23 2d       	mov	r18, r3
    1708:	20 61       	ori	r18, 0x10	; 16
    170a:	1d c0       	rjmp	.+58     	; 0x1746 <vfprintf+0xac>
    170c:	8d 32       	cpi	r24, 0x2D	; 45
    170e:	61 f0       	breq	.+24     	; 0x1728 <vfprintf+0x8e>
    1710:	80 33       	cpi	r24, 0x30	; 48
    1712:	69 f4       	brne	.+26     	; 0x172e <vfprintf+0x94>
    1714:	23 2d       	mov	r18, r3
    1716:	21 60       	ori	r18, 0x01	; 1
    1718:	16 c0       	rjmp	.+44     	; 0x1746 <vfprintf+0xac>
    171a:	83 2d       	mov	r24, r3
    171c:	82 60       	ori	r24, 0x02	; 2
    171e:	38 2e       	mov	r3, r24
    1720:	e3 2d       	mov	r30, r3
    1722:	e4 60       	ori	r30, 0x04	; 4
    1724:	3e 2e       	mov	r3, r30
    1726:	2a c0       	rjmp	.+84     	; 0x177c <vfprintf+0xe2>
    1728:	f3 2d       	mov	r31, r3
    172a:	f8 60       	ori	r31, 0x08	; 8
    172c:	1d c0       	rjmp	.+58     	; 0x1768 <vfprintf+0xce>
    172e:	37 fc       	sbrc	r3, 7
    1730:	2d c0       	rjmp	.+90     	; 0x178c <vfprintf+0xf2>
    1732:	20 ed       	ldi	r18, 0xD0	; 208
    1734:	28 0f       	add	r18, r24
    1736:	2a 30       	cpi	r18, 0x0A	; 10
    1738:	40 f0       	brcs	.+16     	; 0x174a <vfprintf+0xb0>
    173a:	8e 32       	cpi	r24, 0x2E	; 46
    173c:	b9 f4       	brne	.+46     	; 0x176c <vfprintf+0xd2>
    173e:	36 fc       	sbrc	r3, 6
    1740:	75 c1       	rjmp	.+746    	; 0x1a2c <vfprintf+0x392>
    1742:	23 2d       	mov	r18, r3
    1744:	20 64       	ori	r18, 0x40	; 64
    1746:	32 2e       	mov	r3, r18
    1748:	19 c0       	rjmp	.+50     	; 0x177c <vfprintf+0xe2>
    174a:	36 fe       	sbrs	r3, 6
    174c:	06 c0       	rjmp	.+12     	; 0x175a <vfprintf+0xc0>
    174e:	8a e0       	ldi	r24, 0x0A	; 10
    1750:	98 9e       	mul	r9, r24
    1752:	20 0d       	add	r18, r0
    1754:	11 24       	eor	r1, r1
    1756:	92 2e       	mov	r9, r18
    1758:	11 c0       	rjmp	.+34     	; 0x177c <vfprintf+0xe2>
    175a:	ea e0       	ldi	r30, 0x0A	; 10
    175c:	2e 9e       	mul	r2, r30
    175e:	20 0d       	add	r18, r0
    1760:	11 24       	eor	r1, r1
    1762:	22 2e       	mov	r2, r18
    1764:	f3 2d       	mov	r31, r3
    1766:	f0 62       	ori	r31, 0x20	; 32
    1768:	3f 2e       	mov	r3, r31
    176a:	08 c0       	rjmp	.+16     	; 0x177c <vfprintf+0xe2>
    176c:	8c 36       	cpi	r24, 0x6C	; 108
    176e:	21 f4       	brne	.+8      	; 0x1778 <vfprintf+0xde>
    1770:	83 2d       	mov	r24, r3
    1772:	80 68       	ori	r24, 0x80	; 128
    1774:	38 2e       	mov	r3, r24
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0xe2>
    1778:	88 36       	cpi	r24, 0x68	; 104
    177a:	41 f4       	brne	.+16     	; 0x178c <vfprintf+0xf2>
    177c:	f7 01       	movw	r30, r14
    177e:	93 fd       	sbrc	r25, 3
    1780:	85 91       	lpm	r24, Z+
    1782:	93 ff       	sbrs	r25, 3
    1784:	81 91       	ld	r24, Z+
    1786:	7f 01       	movw	r14, r30
    1788:	81 11       	cpse	r24, r1
    178a:	b3 cf       	rjmp	.-154    	; 0x16f2 <vfprintf+0x58>
    178c:	98 2f       	mov	r25, r24
    178e:	9f 7d       	andi	r25, 0xDF	; 223
    1790:	95 54       	subi	r25, 0x45	; 69
    1792:	93 30       	cpi	r25, 0x03	; 3
    1794:	28 f4       	brcc	.+10     	; 0x17a0 <vfprintf+0x106>
    1796:	0c 5f       	subi	r16, 0xFC	; 252
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	9f e3       	ldi	r25, 0x3F	; 63
    179c:	99 83       	std	Y+1, r25	; 0x01
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <vfprintf+0x120>
    17a0:	83 36       	cpi	r24, 0x63	; 99
    17a2:	31 f0       	breq	.+12     	; 0x17b0 <vfprintf+0x116>
    17a4:	83 37       	cpi	r24, 0x73	; 115
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <vfprintf+0x12a>
    17a8:	83 35       	cpi	r24, 0x53	; 83
    17aa:	09 f0       	breq	.+2      	; 0x17ae <vfprintf+0x114>
    17ac:	55 c0       	rjmp	.+170    	; 0x1858 <vfprintf+0x1be>
    17ae:	20 c0       	rjmp	.+64     	; 0x17f0 <vfprintf+0x156>
    17b0:	f8 01       	movw	r30, r16
    17b2:	80 81       	ld	r24, Z
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	0e 5f       	subi	r16, 0xFE	; 254
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	88 24       	eor	r8, r8
    17bc:	83 94       	inc	r8
    17be:	91 2c       	mov	r9, r1
    17c0:	53 01       	movw	r10, r6
    17c2:	12 c0       	rjmp	.+36     	; 0x17e8 <vfprintf+0x14e>
    17c4:	28 01       	movw	r4, r16
    17c6:	f2 e0       	ldi	r31, 0x02	; 2
    17c8:	4f 0e       	add	r4, r31
    17ca:	51 1c       	adc	r5, r1
    17cc:	f8 01       	movw	r30, r16
    17ce:	a0 80       	ld	r10, Z
    17d0:	b1 80       	ldd	r11, Z+1	; 0x01
    17d2:	36 fe       	sbrs	r3, 6
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <vfprintf+0x142>
    17d6:	69 2d       	mov	r22, r9
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <vfprintf+0x146>
    17dc:	6f ef       	ldi	r22, 0xFF	; 255
    17de:	7f ef       	ldi	r23, 0xFF	; 255
    17e0:	c5 01       	movw	r24, r10
    17e2:	38 d1       	rcall	.+624    	; 0x1a54 <strnlen>
    17e4:	4c 01       	movw	r8, r24
    17e6:	82 01       	movw	r16, r4
    17e8:	f3 2d       	mov	r31, r3
    17ea:	ff 77       	andi	r31, 0x7F	; 127
    17ec:	3f 2e       	mov	r3, r31
    17ee:	15 c0       	rjmp	.+42     	; 0x181a <vfprintf+0x180>
    17f0:	28 01       	movw	r4, r16
    17f2:	22 e0       	ldi	r18, 0x02	; 2
    17f4:	42 0e       	add	r4, r18
    17f6:	51 1c       	adc	r5, r1
    17f8:	f8 01       	movw	r30, r16
    17fa:	a0 80       	ld	r10, Z
    17fc:	b1 80       	ldd	r11, Z+1	; 0x01
    17fe:	36 fe       	sbrs	r3, 6
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <vfprintf+0x16e>
    1802:	69 2d       	mov	r22, r9
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0x172>
    1808:	6f ef       	ldi	r22, 0xFF	; 255
    180a:	7f ef       	ldi	r23, 0xFF	; 255
    180c:	c5 01       	movw	r24, r10
    180e:	17 d1       	rcall	.+558    	; 0x1a3e <strnlen_P>
    1810:	4c 01       	movw	r8, r24
    1812:	f3 2d       	mov	r31, r3
    1814:	f0 68       	ori	r31, 0x80	; 128
    1816:	3f 2e       	mov	r3, r31
    1818:	82 01       	movw	r16, r4
    181a:	33 fc       	sbrc	r3, 3
    181c:	19 c0       	rjmp	.+50     	; 0x1850 <vfprintf+0x1b6>
    181e:	82 2d       	mov	r24, r2
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 16       	cp	r8, r24
    1824:	99 06       	cpc	r9, r25
    1826:	a0 f4       	brcc	.+40     	; 0x1850 <vfprintf+0x1b6>
    1828:	b6 01       	movw	r22, r12
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	1d d1       	rcall	.+570    	; 0x1a6a <fputc>
    1830:	2a 94       	dec	r2
    1832:	f5 cf       	rjmp	.-22     	; 0x181e <vfprintf+0x184>
    1834:	f5 01       	movw	r30, r10
    1836:	37 fc       	sbrc	r3, 7
    1838:	85 91       	lpm	r24, Z+
    183a:	37 fe       	sbrs	r3, 7
    183c:	81 91       	ld	r24, Z+
    183e:	5f 01       	movw	r10, r30
    1840:	b6 01       	movw	r22, r12
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	12 d1       	rcall	.+548    	; 0x1a6a <fputc>
    1846:	21 10       	cpse	r2, r1
    1848:	2a 94       	dec	r2
    184a:	21 e0       	ldi	r18, 0x01	; 1
    184c:	82 1a       	sub	r8, r18
    184e:	91 08       	sbc	r9, r1
    1850:	81 14       	cp	r8, r1
    1852:	91 04       	cpc	r9, r1
    1854:	79 f7       	brne	.-34     	; 0x1834 <vfprintf+0x19a>
    1856:	e1 c0       	rjmp	.+450    	; 0x1a1a <vfprintf+0x380>
    1858:	84 36       	cpi	r24, 0x64	; 100
    185a:	11 f0       	breq	.+4      	; 0x1860 <vfprintf+0x1c6>
    185c:	89 36       	cpi	r24, 0x69	; 105
    185e:	39 f5       	brne	.+78     	; 0x18ae <vfprintf+0x214>
    1860:	f8 01       	movw	r30, r16
    1862:	37 fe       	sbrs	r3, 7
    1864:	07 c0       	rjmp	.+14     	; 0x1874 <vfprintf+0x1da>
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	0c 5f       	subi	r16, 0xFC	; 252
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	08 c0       	rjmp	.+16     	; 0x1884 <vfprintf+0x1ea>
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	07 2e       	mov	r0, r23
    187a:	00 0c       	add	r0, r0
    187c:	88 0b       	sbc	r24, r24
    187e:	99 0b       	sbc	r25, r25
    1880:	0e 5f       	subi	r16, 0xFE	; 254
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	f3 2d       	mov	r31, r3
    1886:	ff 76       	andi	r31, 0x6F	; 111
    1888:	3f 2e       	mov	r3, r31
    188a:	97 ff       	sbrs	r25, 7
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <vfprintf+0x206>
    188e:	90 95       	com	r25
    1890:	80 95       	com	r24
    1892:	70 95       	com	r23
    1894:	61 95       	neg	r22
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	8f 4f       	sbci	r24, 0xFF	; 255
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	f0 68       	ori	r31, 0x80	; 128
    189e:	3f 2e       	mov	r3, r31
    18a0:	2a e0       	ldi	r18, 0x0A	; 10
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	a3 01       	movw	r20, r6
    18a6:	1d d1       	rcall	.+570    	; 0x1ae2 <__ultoa_invert>
    18a8:	88 2e       	mov	r8, r24
    18aa:	86 18       	sub	r8, r6
    18ac:	44 c0       	rjmp	.+136    	; 0x1936 <vfprintf+0x29c>
    18ae:	85 37       	cpi	r24, 0x75	; 117
    18b0:	31 f4       	brne	.+12     	; 0x18be <vfprintf+0x224>
    18b2:	23 2d       	mov	r18, r3
    18b4:	2f 7e       	andi	r18, 0xEF	; 239
    18b6:	b2 2e       	mov	r11, r18
    18b8:	2a e0       	ldi	r18, 0x0A	; 10
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	25 c0       	rjmp	.+74     	; 0x1908 <vfprintf+0x26e>
    18be:	93 2d       	mov	r25, r3
    18c0:	99 7f       	andi	r25, 0xF9	; 249
    18c2:	b9 2e       	mov	r11, r25
    18c4:	8f 36       	cpi	r24, 0x6F	; 111
    18c6:	c1 f0       	breq	.+48     	; 0x18f8 <vfprintf+0x25e>
    18c8:	18 f4       	brcc	.+6      	; 0x18d0 <vfprintf+0x236>
    18ca:	88 35       	cpi	r24, 0x58	; 88
    18cc:	79 f0       	breq	.+30     	; 0x18ec <vfprintf+0x252>
    18ce:	ae c0       	rjmp	.+348    	; 0x1a2c <vfprintf+0x392>
    18d0:	80 37       	cpi	r24, 0x70	; 112
    18d2:	19 f0       	breq	.+6      	; 0x18da <vfprintf+0x240>
    18d4:	88 37       	cpi	r24, 0x78	; 120
    18d6:	21 f0       	breq	.+8      	; 0x18e0 <vfprintf+0x246>
    18d8:	a9 c0       	rjmp	.+338    	; 0x1a2c <vfprintf+0x392>
    18da:	e9 2f       	mov	r30, r25
    18dc:	e0 61       	ori	r30, 0x10	; 16
    18de:	be 2e       	mov	r11, r30
    18e0:	b4 fe       	sbrs	r11, 4
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <vfprintf+0x264>
    18e4:	fb 2d       	mov	r31, r11
    18e6:	f4 60       	ori	r31, 0x04	; 4
    18e8:	bf 2e       	mov	r11, r31
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <vfprintf+0x264>
    18ec:	34 fe       	sbrs	r3, 4
    18ee:	0a c0       	rjmp	.+20     	; 0x1904 <vfprintf+0x26a>
    18f0:	29 2f       	mov	r18, r25
    18f2:	26 60       	ori	r18, 0x06	; 6
    18f4:	b2 2e       	mov	r11, r18
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <vfprintf+0x26a>
    18f8:	28 e0       	ldi	r18, 0x08	; 8
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	05 c0       	rjmp	.+10     	; 0x1908 <vfprintf+0x26e>
    18fe:	20 e1       	ldi	r18, 0x10	; 16
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0x26e>
    1904:	20 e1       	ldi	r18, 0x10	; 16
    1906:	32 e0       	ldi	r19, 0x02	; 2
    1908:	f8 01       	movw	r30, r16
    190a:	b7 fe       	sbrs	r11, 7
    190c:	07 c0       	rjmp	.+14     	; 0x191c <vfprintf+0x282>
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	0c 5f       	subi	r16, 0xFC	; 252
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <vfprintf+0x28e>
    191c:	60 81       	ld	r22, Z
    191e:	71 81       	ldd	r23, Z+1	; 0x01
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 5f       	subi	r16, 0xFE	; 254
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	a3 01       	movw	r20, r6
    192a:	db d0       	rcall	.+438    	; 0x1ae2 <__ultoa_invert>
    192c:	88 2e       	mov	r8, r24
    192e:	86 18       	sub	r8, r6
    1930:	fb 2d       	mov	r31, r11
    1932:	ff 77       	andi	r31, 0x7F	; 127
    1934:	3f 2e       	mov	r3, r31
    1936:	36 fe       	sbrs	r3, 6
    1938:	0d c0       	rjmp	.+26     	; 0x1954 <vfprintf+0x2ba>
    193a:	23 2d       	mov	r18, r3
    193c:	2e 7f       	andi	r18, 0xFE	; 254
    193e:	a2 2e       	mov	r10, r18
    1940:	89 14       	cp	r8, r9
    1942:	58 f4       	brcc	.+22     	; 0x195a <vfprintf+0x2c0>
    1944:	34 fe       	sbrs	r3, 4
    1946:	0b c0       	rjmp	.+22     	; 0x195e <vfprintf+0x2c4>
    1948:	32 fc       	sbrc	r3, 2
    194a:	09 c0       	rjmp	.+18     	; 0x195e <vfprintf+0x2c4>
    194c:	83 2d       	mov	r24, r3
    194e:	8e 7e       	andi	r24, 0xEE	; 238
    1950:	a8 2e       	mov	r10, r24
    1952:	05 c0       	rjmp	.+10     	; 0x195e <vfprintf+0x2c4>
    1954:	b8 2c       	mov	r11, r8
    1956:	a3 2c       	mov	r10, r3
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <vfprintf+0x2c6>
    195a:	b8 2c       	mov	r11, r8
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <vfprintf+0x2c6>
    195e:	b9 2c       	mov	r11, r9
    1960:	a4 fe       	sbrs	r10, 4
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <vfprintf+0x2e8>
    1964:	fe 01       	movw	r30, r28
    1966:	e8 0d       	add	r30, r8
    1968:	f1 1d       	adc	r31, r1
    196a:	80 81       	ld	r24, Z
    196c:	80 33       	cpi	r24, 0x30	; 48
    196e:	21 f4       	brne	.+8      	; 0x1978 <vfprintf+0x2de>
    1970:	9a 2d       	mov	r25, r10
    1972:	99 7e       	andi	r25, 0xE9	; 233
    1974:	a9 2e       	mov	r10, r25
    1976:	09 c0       	rjmp	.+18     	; 0x198a <vfprintf+0x2f0>
    1978:	a2 fe       	sbrs	r10, 2
    197a:	06 c0       	rjmp	.+12     	; 0x1988 <vfprintf+0x2ee>
    197c:	b3 94       	inc	r11
    197e:	b3 94       	inc	r11
    1980:	04 c0       	rjmp	.+8      	; 0x198a <vfprintf+0x2f0>
    1982:	8a 2d       	mov	r24, r10
    1984:	86 78       	andi	r24, 0x86	; 134
    1986:	09 f0       	breq	.+2      	; 0x198a <vfprintf+0x2f0>
    1988:	b3 94       	inc	r11
    198a:	a3 fc       	sbrc	r10, 3
    198c:	10 c0       	rjmp	.+32     	; 0x19ae <vfprintf+0x314>
    198e:	a0 fe       	sbrs	r10, 0
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x304>
    1992:	b2 14       	cp	r11, r2
    1994:	80 f4       	brcc	.+32     	; 0x19b6 <vfprintf+0x31c>
    1996:	28 0c       	add	r2, r8
    1998:	92 2c       	mov	r9, r2
    199a:	9b 18       	sub	r9, r11
    199c:	0d c0       	rjmp	.+26     	; 0x19b8 <vfprintf+0x31e>
    199e:	b2 14       	cp	r11, r2
    19a0:	58 f4       	brcc	.+22     	; 0x19b8 <vfprintf+0x31e>
    19a2:	b6 01       	movw	r22, r12
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	60 d0       	rcall	.+192    	; 0x1a6a <fputc>
    19aa:	b3 94       	inc	r11
    19ac:	f8 cf       	rjmp	.-16     	; 0x199e <vfprintf+0x304>
    19ae:	b2 14       	cp	r11, r2
    19b0:	18 f4       	brcc	.+6      	; 0x19b8 <vfprintf+0x31e>
    19b2:	2b 18       	sub	r2, r11
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0x320>
    19b6:	98 2c       	mov	r9, r8
    19b8:	21 2c       	mov	r2, r1
    19ba:	a4 fe       	sbrs	r10, 4
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <vfprintf+0x342>
    19be:	b6 01       	movw	r22, r12
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	52 d0       	rcall	.+164    	; 0x1a6a <fputc>
    19c6:	a2 fe       	sbrs	r10, 2
    19c8:	16 c0       	rjmp	.+44     	; 0x19f6 <vfprintf+0x35c>
    19ca:	a1 fc       	sbrc	r10, 1
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <vfprintf+0x33a>
    19ce:	88 e7       	ldi	r24, 0x78	; 120
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0x33e>
    19d4:	88 e5       	ldi	r24, 0x58	; 88
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	b6 01       	movw	r22, r12
    19da:	0c c0       	rjmp	.+24     	; 0x19f4 <vfprintf+0x35a>
    19dc:	8a 2d       	mov	r24, r10
    19de:	86 78       	andi	r24, 0x86	; 134
    19e0:	51 f0       	breq	.+20     	; 0x19f6 <vfprintf+0x35c>
    19e2:	a1 fe       	sbrs	r10, 1
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x350>
    19e6:	8b e2       	ldi	r24, 0x2B	; 43
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <vfprintf+0x352>
    19ea:	80 e2       	ldi	r24, 0x20	; 32
    19ec:	a7 fc       	sbrc	r10, 7
    19ee:	8d e2       	ldi	r24, 0x2D	; 45
    19f0:	b6 01       	movw	r22, r12
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	3a d0       	rcall	.+116    	; 0x1a6a <fputc>
    19f6:	89 14       	cp	r8, r9
    19f8:	30 f4       	brcc	.+12     	; 0x1a06 <vfprintf+0x36c>
    19fa:	b6 01       	movw	r22, r12
    19fc:	80 e3       	ldi	r24, 0x30	; 48
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	34 d0       	rcall	.+104    	; 0x1a6a <fputc>
    1a02:	9a 94       	dec	r9
    1a04:	f8 cf       	rjmp	.-16     	; 0x19f6 <vfprintf+0x35c>
    1a06:	8a 94       	dec	r8
    1a08:	f3 01       	movw	r30, r6
    1a0a:	e8 0d       	add	r30, r8
    1a0c:	f1 1d       	adc	r31, r1
    1a0e:	80 81       	ld	r24, Z
    1a10:	b6 01       	movw	r22, r12
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	2a d0       	rcall	.+84     	; 0x1a6a <fputc>
    1a16:	81 10       	cpse	r8, r1
    1a18:	f6 cf       	rjmp	.-20     	; 0x1a06 <vfprintf+0x36c>
    1a1a:	22 20       	and	r2, r2
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <vfprintf+0x386>
    1a1e:	4e ce       	rjmp	.-868    	; 0x16bc <vfprintf+0x22>
    1a20:	b6 01       	movw	r22, r12
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	21 d0       	rcall	.+66     	; 0x1a6a <fputc>
    1a28:	2a 94       	dec	r2
    1a2a:	f7 cf       	rjmp	.-18     	; 0x1a1a <vfprintf+0x380>
    1a2c:	f6 01       	movw	r30, r12
    1a2e:	86 81       	ldd	r24, Z+6	; 0x06
    1a30:	97 81       	ldd	r25, Z+7	; 0x07
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <vfprintf+0x39e>
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	9f ef       	ldi	r25, 0xFF	; 255
    1a38:	2b 96       	adiw	r28, 0x0b	; 11
    1a3a:	e2 e1       	ldi	r30, 0x12	; 18
    1a3c:	cc c0       	rjmp	.+408    	; 0x1bd6 <__epilogue_restores__>

00001a3e <strnlen_P>:
    1a3e:	fc 01       	movw	r30, r24
    1a40:	05 90       	lpm	r0, Z+
    1a42:	61 50       	subi	r22, 0x01	; 1
    1a44:	70 40       	sbci	r23, 0x00	; 0
    1a46:	01 10       	cpse	r0, r1
    1a48:	d8 f7       	brcc	.-10     	; 0x1a40 <strnlen_P+0x2>
    1a4a:	80 95       	com	r24
    1a4c:	90 95       	com	r25
    1a4e:	8e 0f       	add	r24, r30
    1a50:	9f 1f       	adc	r25, r31
    1a52:	08 95       	ret

00001a54 <strnlen>:
    1a54:	fc 01       	movw	r30, r24
    1a56:	61 50       	subi	r22, 0x01	; 1
    1a58:	70 40       	sbci	r23, 0x00	; 0
    1a5a:	01 90       	ld	r0, Z+
    1a5c:	01 10       	cpse	r0, r1
    1a5e:	d8 f7       	brcc	.-10     	; 0x1a56 <strnlen+0x2>
    1a60:	80 95       	com	r24
    1a62:	90 95       	com	r25
    1a64:	8e 0f       	add	r24, r30
    1a66:	9f 1f       	adc	r25, r31
    1a68:	08 95       	ret

00001a6a <fputc>:
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	fb 01       	movw	r30, r22
    1a74:	23 81       	ldd	r18, Z+3	; 0x03
    1a76:	21 fd       	sbrc	r18, 1
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <fputc+0x16>
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	2c c0       	rjmp	.+88     	; 0x1ad8 <fputc+0x6e>
    1a80:	22 ff       	sbrs	r18, 2
    1a82:	16 c0       	rjmp	.+44     	; 0x1ab0 <fputc+0x46>
    1a84:	46 81       	ldd	r20, Z+6	; 0x06
    1a86:	57 81       	ldd	r21, Z+7	; 0x07
    1a88:	24 81       	ldd	r18, Z+4	; 0x04
    1a8a:	35 81       	ldd	r19, Z+5	; 0x05
    1a8c:	42 17       	cp	r20, r18
    1a8e:	53 07       	cpc	r21, r19
    1a90:	44 f4       	brge	.+16     	; 0x1aa2 <fputc+0x38>
    1a92:	a0 81       	ld	r26, Z
    1a94:	b1 81       	ldd	r27, Z+1	; 0x01
    1a96:	9d 01       	movw	r18, r26
    1a98:	2f 5f       	subi	r18, 0xFF	; 255
    1a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9c:	31 83       	std	Z+1, r19	; 0x01
    1a9e:	20 83       	st	Z, r18
    1aa0:	8c 93       	st	X, r24
    1aa2:	26 81       	ldd	r18, Z+6	; 0x06
    1aa4:	37 81       	ldd	r19, Z+7	; 0x07
    1aa6:	2f 5f       	subi	r18, 0xFF	; 255
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	37 83       	std	Z+7, r19	; 0x07
    1aac:	26 83       	std	Z+6, r18	; 0x06
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <fputc+0x6e>
    1ab0:	8b 01       	movw	r16, r22
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	fb 01       	movw	r30, r22
    1ab6:	00 84       	ldd	r0, Z+8	; 0x08
    1ab8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aba:	e0 2d       	mov	r30, r0
    1abc:	09 95       	icall
    1abe:	89 2b       	or	r24, r25
    1ac0:	e1 f6       	brne	.-72     	; 0x1a7a <fputc+0x10>
    1ac2:	d8 01       	movw	r26, r16
    1ac4:	16 96       	adiw	r26, 0x06	; 6
    1ac6:	8d 91       	ld	r24, X+
    1ac8:	9c 91       	ld	r25, X
    1aca:	17 97       	sbiw	r26, 0x07	; 7
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	17 96       	adiw	r26, 0x07	; 7
    1ad0:	9c 93       	st	X, r25
    1ad2:	8e 93       	st	-X, r24
    1ad4:	16 97       	sbiw	r26, 0x06	; 6
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <__ultoa_invert>:
    1ae2:	fa 01       	movw	r30, r20
    1ae4:	aa 27       	eor	r26, r26
    1ae6:	28 30       	cpi	r18, 0x08	; 8
    1ae8:	51 f1       	breq	.+84     	; 0x1b3e <__ultoa_invert+0x5c>
    1aea:	20 31       	cpi	r18, 0x10	; 16
    1aec:	81 f1       	breq	.+96     	; 0x1b4e <__ultoa_invert+0x6c>
    1aee:	e8 94       	clt
    1af0:	6f 93       	push	r22
    1af2:	6e 7f       	andi	r22, 0xFE	; 254
    1af4:	6e 5f       	subi	r22, 0xFE	; 254
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	8f 4f       	sbci	r24, 0xFF	; 255
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	af 4f       	sbci	r26, 0xFF	; 255
    1afe:	b1 e0       	ldi	r27, 0x01	; 1
    1b00:	3e d0       	rcall	.+124    	; 0x1b7e <__ultoa_invert+0x9c>
    1b02:	b4 e0       	ldi	r27, 0x04	; 4
    1b04:	3c d0       	rcall	.+120    	; 0x1b7e <__ultoa_invert+0x9c>
    1b06:	67 0f       	add	r22, r23
    1b08:	78 1f       	adc	r23, r24
    1b0a:	89 1f       	adc	r24, r25
    1b0c:	9a 1f       	adc	r25, r26
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	68 0f       	add	r22, r24
    1b12:	79 1f       	adc	r23, r25
    1b14:	8a 1f       	adc	r24, r26
    1b16:	91 1d       	adc	r25, r1
    1b18:	a1 1d       	adc	r26, r1
    1b1a:	6a 0f       	add	r22, r26
    1b1c:	71 1d       	adc	r23, r1
    1b1e:	81 1d       	adc	r24, r1
    1b20:	91 1d       	adc	r25, r1
    1b22:	a1 1d       	adc	r26, r1
    1b24:	20 d0       	rcall	.+64     	; 0x1b66 <__ultoa_invert+0x84>
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <__ultoa_invert+0x48>
    1b28:	68 94       	set
    1b2a:	3f 91       	pop	r19
    1b2c:	2a e0       	ldi	r18, 0x0A	; 10
    1b2e:	26 9f       	mul	r18, r22
    1b30:	11 24       	eor	r1, r1
    1b32:	30 19       	sub	r19, r0
    1b34:	30 5d       	subi	r19, 0xD0	; 208
    1b36:	31 93       	st	Z+, r19
    1b38:	de f6       	brtc	.-74     	; 0x1af0 <__ultoa_invert+0xe>
    1b3a:	cf 01       	movw	r24, r30
    1b3c:	08 95       	ret
    1b3e:	46 2f       	mov	r20, r22
    1b40:	47 70       	andi	r20, 0x07	; 7
    1b42:	40 5d       	subi	r20, 0xD0	; 208
    1b44:	41 93       	st	Z+, r20
    1b46:	b3 e0       	ldi	r27, 0x03	; 3
    1b48:	0f d0       	rcall	.+30     	; 0x1b68 <__ultoa_invert+0x86>
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__ultoa_invert+0x5c>
    1b4c:	f6 cf       	rjmp	.-20     	; 0x1b3a <__ultoa_invert+0x58>
    1b4e:	46 2f       	mov	r20, r22
    1b50:	4f 70       	andi	r20, 0x0F	; 15
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	4a 33       	cpi	r20, 0x3A	; 58
    1b56:	18 f0       	brcs	.+6      	; 0x1b5e <__ultoa_invert+0x7c>
    1b58:	49 5d       	subi	r20, 0xD9	; 217
    1b5a:	31 fd       	sbrc	r19, 1
    1b5c:	40 52       	subi	r20, 0x20	; 32
    1b5e:	41 93       	st	Z+, r20
    1b60:	02 d0       	rcall	.+4      	; 0x1b66 <__ultoa_invert+0x84>
    1b62:	a9 f7       	brne	.-22     	; 0x1b4e <__ultoa_invert+0x6c>
    1b64:	ea cf       	rjmp	.-44     	; 0x1b3a <__ultoa_invert+0x58>
    1b66:	b4 e0       	ldi	r27, 0x04	; 4
    1b68:	a6 95       	lsr	r26
    1b6a:	97 95       	ror	r25
    1b6c:	87 95       	ror	r24
    1b6e:	77 95       	ror	r23
    1b70:	67 95       	ror	r22
    1b72:	ba 95       	dec	r27
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <__ultoa_invert+0x86>
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	61 05       	cpc	r22, r1
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	08 95       	ret
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ac 01       	movw	r20, r24
    1b82:	0a 2e       	mov	r0, r26
    1b84:	06 94       	lsr	r0
    1b86:	57 95       	ror	r21
    1b88:	47 95       	ror	r20
    1b8a:	37 95       	ror	r19
    1b8c:	27 95       	ror	r18
    1b8e:	ba 95       	dec	r27
    1b90:	c9 f7       	brne	.-14     	; 0x1b84 <__ultoa_invert+0xa2>
    1b92:	62 0f       	add	r22, r18
    1b94:	73 1f       	adc	r23, r19
    1b96:	84 1f       	adc	r24, r20
    1b98:	95 1f       	adc	r25, r21
    1b9a:	a0 1d       	adc	r26, r0
    1b9c:	08 95       	ret

00001b9e <__prologue_saves__>:
    1b9e:	2f 92       	push	r2
    1ba0:	3f 92       	push	r3
    1ba2:	4f 92       	push	r4
    1ba4:	5f 92       	push	r5
    1ba6:	6f 92       	push	r6
    1ba8:	7f 92       	push	r7
    1baa:	8f 92       	push	r8
    1bac:	9f 92       	push	r9
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	ca 1b       	sub	r28, r26
    1bc8:	db 0b       	sbc	r29, r27
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	09 94       	ijmp

00001bd6 <__epilogue_restores__>:
    1bd6:	2a 88       	ldd	r2, Y+18	; 0x12
    1bd8:	39 88       	ldd	r3, Y+17	; 0x11
    1bda:	48 88       	ldd	r4, Y+16	; 0x10
    1bdc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bde:	6e 84       	ldd	r6, Y+14	; 0x0e
    1be0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1be2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1be4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1be6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1be8:	b9 84       	ldd	r11, Y+9	; 0x09
    1bea:	c8 84       	ldd	r12, Y+8	; 0x08
    1bec:	df 80       	ldd	r13, Y+7	; 0x07
    1bee:	ee 80       	ldd	r14, Y+6	; 0x06
    1bf0:	fd 80       	ldd	r15, Y+5	; 0x05
    1bf2:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf4:	1b 81       	ldd	r17, Y+3	; 0x03
    1bf6:	aa 81       	ldd	r26, Y+2	; 0x02
    1bf8:	b9 81       	ldd	r27, Y+1	; 0x01
    1bfa:	ce 0f       	add	r28, r30
    1bfc:	d1 1d       	adc	r29, r1
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	ed 01       	movw	r28, r26
    1c0a:	08 95       	ret

00001c0c <_exit>:
    1c0c:	f8 94       	cli

00001c0e <__stop_program>:
    1c0e:	ff cf       	rjmp	.-2      	; 0x1c0e <__stop_program>
