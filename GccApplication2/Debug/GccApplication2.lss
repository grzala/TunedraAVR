
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000191a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000191a  000019ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000141  008000ae  008000ae  000019fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029d9  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7d  00000000  00000000  000045fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e33  00000000  00000000  0000557a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  000063b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ccb  00000000  00000000  00006910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f39  00000000  00000000  000075db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	40 c0       	rjmp	.+128    	; 0x9e <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	de 02       	muls	r29, r30

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	ea e1       	ldi	r30, 0x1A	; 26
      3c:	f9 e1       	ldi	r31, 0x19	; 25
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	ae 3a       	cpi	r26, 0xAE	; 174
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	21 e0       	ldi	r18, 0x01	; 1
      4c:	ae ea       	ldi	r26, 0xAE	; 174
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	af 3e       	cpi	r26, 0xEF	; 239
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	98 d9       	rcall	.-3280   	; 0xfffff398 <__eeprom_end+0xff7ef398>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	db d1       	rcall	.+950    	; 0x426 <main>
      70:	52 cc       	rjmp	.-1884   	; 0xfffff916 <__eeprom_end+0xff7ef916>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:

	for(i = 0; i < len; ++i)
	standardDeviation += pow(ar[i] - mean, 2);

	return sqrt(standardDeviation / len);
}
      74:	14 ba       	out	0x14, r1	; 20
      76:	f8 94       	cli
      78:	16 b8       	out	0x06, r1	; 6
      7a:	3e 9a       	sbi	0x07, 6	; 7
      7c:	3d 9a       	sbi	0x07, 5	; 7
      7e:	32 9a       	sbi	0x06, 2	; 6
      80:	35 9a       	sbi	0x06, 5	; 6
      82:	33 9a       	sbi	0x06, 3	; 6
      84:	37 9a       	sbi	0x06, 7	; 6
      86:	36 9a       	sbi	0x06, 6	; 6
      88:	78 94       	sei
      8a:	08 95       	ret

0000008c <_Z5resetv>:
      8c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <_ZL5index>
      90:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <_ZL7noMatch>
      94:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <_ZL8maxSlope+0x1>
      98:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <_ZL8maxSlope>
      9c:	08 95       	ret

0000009e <__vector_14>:
      9e:	1f 92       	push	r1
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	0f 92       	push	r0
      a6:	11 24       	eor	r1, r1
      a8:	2f 93       	push	r18
      aa:	3f 93       	push	r19
      ac:	4f 93       	push	r20
      ae:	5f 93       	push	r21
      b0:	6f 93       	push	r22
      b2:	7f 93       	push	r23
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
      b8:	af 93       	push	r26
      ba:	bf 93       	push	r27
      bc:	ef 93       	push	r30
      be:	ff 93       	push	r31
      c0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZL7newData>
      c4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZL8prevData>
      c8:	85 b1       	in	r24, 0x05	; 5
      ca:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <_ZL7newData>
      ce:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZL7newData>
      d2:	24 d7       	rcall	.+3656   	; 0xf1c <_Z14USART_Transmith>
      d4:	80 e2       	ldi	r24, 0x20	; 32
      d6:	22 d7       	rcall	.+3652   	; 0xf1c <_Z14USART_Transmith>
      d8:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <_ZL8prevData>
      dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      e0:	98 17       	cp	r25, r24
      e2:	08 f0       	brcs	.+2      	; 0xe6 <__vector_14+0x48>
      e4:	d2 c0       	rjmp	.+420    	; 0x28a <__vector_14+0x1ec>
      e6:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <_ZL7newData>
      ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      ee:	98 17       	cp	r25, r24
      f0:	08 f0       	brcs	.+2      	; 0xf4 <__vector_14+0x56>
      f2:	07 c1       	rjmp	.+526    	; 0x302 <__vector_14+0x264>
      f4:	ca c0       	rjmp	.+404    	; 0x28a <__vector_14+0x1ec>
      f6:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZL5index>
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL8newSlope>
     100:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_ZL8newSlope+0x1>
     104:	ee 0f       	add	r30, r30
     106:	ff 1f       	adc	r31, r31
     108:	e7 58       	subi	r30, 0x87	; 135
     10a:	fe 4f       	sbci	r31, 0xFE	; 254
     10c:	91 83       	std	Z+1, r25	; 0x01
     10e:	80 83       	st	Z, r24
     110:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZL5index>
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <_ZL4time>
     11a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <_ZL4time+0x1>
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	e3 57       	subi	r30, 0x73	; 115
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	91 83       	std	Z+1, r25	; 0x01
     128:	80 83       	st	Z, r24
     12a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <_ZL4time+0x1>
     12e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <_ZL4time>
     132:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <_ZL5index>
     136:	81 11       	cpse	r24, r1
     138:	08 c0       	rjmp	.+16     	; 0x14a <__vector_14+0xac>
     13a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <_ZL7noMatch>
     13e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <_ZL5index>
     142:	8f 5f       	subi	r24, 0xFF	; 255
     144:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <_ZL5index>
     148:	a0 c0       	rjmp	.+320    	; 0x28a <__vector_14+0x1ec>
     14a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZL5timer>
     14e:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_ZL5timer+0x1>
     152:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZL5index>
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	ee 0f       	add	r30, r30
     15a:	ff 1f       	adc	r31, r31
     15c:	e3 57       	subi	r30, 0x73	; 115
     15e:	fe 4f       	sbci	r31, 0xFE	; 254
     160:	20 81       	ld	r18, Z
     162:	31 81       	ldd	r19, Z+1	; 0x01
     164:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_ZL8timerTol>
     168:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_ZL8timerTol+0x1>
     16c:	82 1b       	sub	r24, r18
     16e:	93 0b       	sbc	r25, r19
     170:	9c 01       	movw	r18, r24
     172:	22 f4       	brpl	.+8      	; 0x17c <__vector_14+0xde>
     174:	22 27       	eor	r18, r18
     176:	33 27       	eor	r19, r19
     178:	28 1b       	sub	r18, r24
     17a:	39 0b       	sbc	r19, r25
     17c:	24 17       	cp	r18, r20
     17e:	35 07       	cpc	r19, r21
     180:	0c f0       	brlt	.+2      	; 0x184 <__vector_14+0xe6>
     182:	e3 c0       	rjmp	.+454    	; 0x34a <__vector_14+0x2ac>
     184:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <_ZL5slope>
     188:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <_ZL5slope+0x1>
     18c:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <_ZL8newSlope>
     190:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <_ZL8newSlope+0x1>
     194:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     198:	84 1b       	sub	r24, r20
     19a:	95 0b       	sbc	r25, r21
     19c:	ac 01       	movw	r20, r24
     19e:	22 f4       	brpl	.+8      	; 0x1a8 <__vector_14+0x10a>
     1a0:	44 27       	eor	r20, r20
     1a2:	55 27       	eor	r21, r21
     1a4:	48 1b       	sub	r20, r24
     1a6:	59 0b       	sbc	r21, r25
     1a8:	82 2f       	mov	r24, r18
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	48 17       	cp	r20, r24
     1ae:	59 07       	cpc	r21, r25
     1b0:	0c f4       	brge	.+2      	; 0x1b4 <__vector_14+0x116>
     1b2:	d6 c0       	rjmp	.+428    	; 0x360 <__vector_14+0x2c2>
     1b4:	ca c0       	rjmp	.+404    	; 0x34a <__vector_14+0x2ac>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	e8 2f       	mov	r30, r24
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	ee 0f       	add	r30, r30
     1be:	ff 1f       	adc	r31, r31
     1c0:	e3 57       	subi	r30, 0x73	; 115
     1c2:	fe 4f       	sbci	r31, 0xFE	; 254
     1c4:	40 81       	ld	r20, Z
     1c6:	51 81       	ldd	r21, Z+1	; 0x01
     1c8:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <_ZL10totalTimer>
     1cc:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <_ZL10totalTimer+0x1>
     1d0:	24 0f       	add	r18, r20
     1d2:	35 1f       	adc	r19, r21
     1d4:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <_ZL10totalTimer+0x1>
     1d8:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <_ZL10totalTimer>
     1dc:	8f 5f       	subi	r24, 0xFF	; 255
     1de:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <_ZL5index>
     1e2:	89 17       	cp	r24, r25
     1e4:	48 f3       	brcs	.-46     	; 0x1b8 <__vector_14+0x11a>
     1e6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <_ZL10totalTimer>
     1ea:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <_ZL10totalTimer+0x1>
     1ee:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <_ZL6period+0x1>
     1f2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <_ZL6period>
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <_ZL11periodReady>
     1fc:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZL5index>
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	e3 57       	subi	r30, 0x73	; 115
     208:	fe 4f       	sbci	r31, 0xFE	; 254
     20a:	20 81       	ld	r18, Z
     20c:	31 81       	ldd	r19, Z+1	; 0x01
     20e:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <_ZL5timer+0x1>
     212:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <_ZL5timer>
     216:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZL5index>
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e7 58       	subi	r30, 0x87	; 135
     222:	fe 4f       	sbci	r31, 0xFE	; 254
     224:	20 81       	ld	r18, Z
     226:	31 81       	ldd	r19, Z+1	; 0x01
     228:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <_ZL5slope+0x1>
     22c:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <_ZL5slope>
     230:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <_ZL5index>
     234:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <_ZL7noMatch>
     238:	28 c0       	rjmp	.+80     	; 0x28a <__vector_14+0x1ec>
     23a:	28 df       	rcall	.-432    	; 0x8c <_Z5resetv>
     23c:	26 c0       	rjmp	.+76     	; 0x28a <__vector_14+0x1ec>
     23e:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <_ZL8newSlope>
     242:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <_ZL8newSlope+0x1>
     246:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <_ZL8maxSlope>
     24a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <_ZL8maxSlope+0x1>
     24e:	82 17       	cp	r24, r18
     250:	93 07       	cpc	r25, r19
     252:	8c f4       	brge	.+34     	; 0x276 <__vector_14+0x1d8>
     254:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL8newSlope>
     258:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_ZL8newSlope+0x1>
     25c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <_ZL8maxSlope+0x1>
     260:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <_ZL8maxSlope>
     264:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <_ZL4time+0x1>
     268:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <_ZL4time>
     26c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <_ZL7noMatch>
     270:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <_ZL5index>
     274:	0a c0       	rjmp	.+20     	; 0x28a <__vector_14+0x1ec>
     276:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_ZL7noMatch>
     27a:	8f 5f       	subi	r24, 0xFF	; 255
     27c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_ZL7noMatch>
     280:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_ZL7noMatch>
     284:	8a 30       	cpi	r24, 0x0A	; 10
     286:	08 f0       	brcs	.+2      	; 0x28a <__vector_14+0x1ec>
     288:	01 df       	rcall	.-510    	; 0x8c <_Z5resetv>
     28a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZL7newData>
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <__vector_14+0x1f6>
     292:	6f c0       	rjmp	.+222    	; 0x372 <__vector_14+0x2d4>
     294:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZL7newData>
     298:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <_ZL4time>
     29c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <_ZL4time+0x1>
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <_ZL4time+0x1>
     2a6:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <_ZL4time>
     2aa:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <ampTimer>
     2ae:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <ampTimer+0x1>
     2b2:	2f 5f       	subi	r18, 0xFF	; 255
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
     2b6:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ampTimer+0x1>
     2ba:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ampTimer>
     2be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2c2:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <_ZL7newData>
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	84 1b       	sub	r24, r20
     2ca:	91 09       	sbc	r25, r1
     2cc:	ac 01       	movw	r20, r24
     2ce:	22 f4       	brpl	.+8      	; 0x2d8 <__vector_14+0x23a>
     2d0:	44 27       	eor	r20, r20
     2d2:	55 27       	eor	r21, r21
     2d4:	48 1b       	sub	r20, r24
     2d6:	59 0b       	sbc	r21, r25
     2d8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_ZL6maxAmp>
     2dc:	84 17       	cp	r24, r20
     2de:	10 f4       	brcc	.+4      	; 0x2e4 <__vector_14+0x246>
     2e0:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <_ZL6maxAmp>
     2e4:	28 3e       	cpi	r18, 0xE8	; 232
     2e6:	33 40       	sbci	r19, 0x03	; 3
     2e8:	09 f0       	breq	.+2      	; 0x2ec <__vector_14+0x24e>
     2ea:	47 c0       	rjmp	.+142    	; 0x37a <__vector_14+0x2dc>
     2ec:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <ampTimer+0x1>
     2f0:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <ampTimer>
     2f4:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_ZL6maxAmp>
     2f8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <_ZL11checkMaxAmp>
     2fc:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <_ZL6maxAmp>
     300:	3c c0       	rjmp	.+120    	; 0x37a <__vector_14+0x2dc>
     302:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZL7newData>
     306:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <_ZL8prevData>
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	82 1b       	sub	r24, r18
     30e:	91 09       	sbc	r25, r1
     310:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <_ZL8newSlope+0x1>
     314:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_ZL8newSlope>
     318:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL8newSlope>
     31c:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_ZL8newSlope+0x1>
     320:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <_ZL8maxSlope>
     324:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <_ZL8maxSlope+0x1>
     328:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <_ZL8slopeTol>
     32c:	84 1b       	sub	r24, r20
     32e:	95 0b       	sbc	r25, r21
     330:	ac 01       	movw	r20, r24
     332:	22 f4       	brpl	.+8      	; 0x33c <__vector_14+0x29e>
     334:	44 27       	eor	r20, r20
     336:	55 27       	eor	r21, r21
     338:	48 1b       	sub	r20, r24
     33a:	59 0b       	sbc	r21, r25
     33c:	82 2f       	mov	r24, r18
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	48 17       	cp	r20, r24
     342:	59 07       	cpc	r21, r25
     344:	0c f4       	brge	.+2      	; 0x348 <__vector_14+0x2aa>
     346:	d7 ce       	rjmp	.-594    	; 0xf6 <__vector_14+0x58>
     348:	7a cf       	rjmp	.-268    	; 0x23e <__vector_14+0x1a0>
     34a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <_ZL5index>
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <_ZL5index>
     354:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <_ZL5index>
     358:	8a 30       	cpi	r24, 0x0A	; 10
     35a:	08 f4       	brcc	.+2      	; 0x35e <__vector_14+0x2c0>
     35c:	96 cf       	rjmp	.-212    	; 0x28a <__vector_14+0x1ec>
     35e:	6d cf       	rjmp	.-294    	; 0x23a <__vector_14+0x19c>
     360:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <_ZL10totalTimer+0x1>
     364:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <_ZL10totalTimer>
     368:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <_ZL5index>
     36c:	81 11       	cpse	r24, r1
     36e:	23 cf       	rjmp	.-442    	; 0x1b6 <__vector_14+0x118>
     370:	3a cf       	rjmp	.-396    	; 0x1e6 <__vector_14+0x148>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_ZL8clipping>
     378:	8f cf       	rjmp	.-226    	; 0x298 <__vector_14+0x1fa>
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <_Z6get_avPdi>:
     39c:	8f 92       	push	r8
     39e:	9f 92       	push	r9
     3a0:	af 92       	push	r10
     3a2:	bf 92       	push	r11
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	6c 01       	movw	r12, r24
     3b6:	7b 01       	movw	r14, r22
     3b8:	16 16       	cp	r1, r22
     3ba:	17 06       	cpc	r1, r23
     3bc:	d4 f4       	brge	.+52     	; 0x3f2 <_Z6get_avPdi+0x56>
     3be:	8c 01       	movw	r16, r24
     3c0:	c0 e0       	ldi	r28, 0x00	; 0
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
     3c4:	81 2c       	mov	r8, r1
     3c6:	91 2c       	mov	r9, r1
     3c8:	54 01       	movw	r10, r8
     3ca:	c1 14       	cp	r12, r1
     3cc:	d1 04       	cpc	r13, r1
     3ce:	51 f0       	breq	.+20     	; 0x3e4 <_Z6get_avPdi+0x48>
     3d0:	f8 01       	movw	r30, r16
     3d2:	20 81       	ld	r18, Z
     3d4:	31 81       	ldd	r19, Z+1	; 0x01
     3d6:	42 81       	ldd	r20, Z+2	; 0x02
     3d8:	53 81       	ldd	r21, Z+3	; 0x03
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	a3 d5       	rcall	.+2886   	; 0xf26 <__addsf3>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
     3e4:	21 96       	adiw	r28, 0x01	; 1
     3e6:	0c 5f       	subi	r16, 0xFC	; 252
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	ec 16       	cp	r14, r28
     3ec:	fd 06       	cpc	r15, r29
     3ee:	69 f7       	brne	.-38     	; 0x3ca <_Z6get_avPdi+0x2e>
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <_Z6get_avPdi+0x5c>
     3f2:	81 2c       	mov	r8, r1
     3f4:	91 2c       	mov	r9, r1
     3f6:	54 01       	movw	r10, r8
     3f8:	b7 01       	movw	r22, r14
     3fa:	ff 0c       	add	r15, r15
     3fc:	88 0b       	sbc	r24, r24
     3fe:	99 0b       	sbc	r25, r25
     400:	95 d6       	rcall	.+3370   	; 0x112c <__floatsisf>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	c5 01       	movw	r24, r10
     408:	b4 01       	movw	r22, r8
     40a:	f5 d5       	rcall	.+3050   	; 0xff6 <__divsf3>
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	08 95       	ret

00000426 <main>:

int main() {
	setup();
     426:	26 de       	rcall	.-948    	; 0x74 <_Z5setupv>
	USART_Init ( MYUBRR );
     428:	83 e3       	ldi	r24, 0x33	; 51
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	70 d5       	rcall	.+2784   	; 0xf0e <_Z10USART_Initj>
	USART_Transmit('a');
     42e:	81 e6       	ldi	r24, 0x61	; 97
     430:	75 d5       	rcall	.+2794   	; 0xf1c <_Z14USART_Transmith>
	while(1) {
		
		if (checkMaxAmp > ampThreshold) /* && checkMaxAmp < maxAmpThreshold) */ {
     432:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL11checkMaxAmp>
     436:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     43a:	89 17       	cp	r24, r25
     43c:	08 f0       	brcs	.+2      	; 0x440 <main+0x1a>
     43e:	b7 c0       	rjmp	.+366    	; 0x5ae <__stack+0x14f>
			if (periodReady) { // prevent working twice with the same reading
     440:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <_ZL11periodReady>
     444:	88 23       	and	r24, r24
     446:	09 f4       	brne	.+2      	; 0x44a <main+0x24>
     448:	b2 c0       	rjmp	.+356    	; 0x5ae <__stack+0x14f>
				periodReady = false;
     44a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <_ZL11periodReady>
				
				frequency = FREQ_SAMPLING_RATE/float(period);//calculate frequency timer rate/period
     44e:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <_ZL6period>
     452:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <_ZL6period+0x1>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	66 d6       	rcall	.+3276   	; 0x1128 <__floatunsisf>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	7e e3       	ldi	r23, 0x3E	; 62
     464:	86 e1       	ldi	r24, 0x16	; 22
     466:	97 e4       	ldi	r25, 0x47	; 71
     468:	c6 d5       	rcall	.+2956   	; 0xff6 <__divsf3>
     46a:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_ZL9frequency>
     46e:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <_ZL9frequency+0x1>
     472:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL9frequency+0x2>
     476:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_ZL9frequency+0x3>
				
				//USART_Transmit_int((int)frequency);
				//USART_Println();
			
				if (isFreqLegal(frequency)) {
     47a:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <_ZL9frequency>
     47e:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <_ZL9frequency+0x1>
     482:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL9frequency+0x2>
     486:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <_ZL9frequency+0x3>
     48a:	2d d3       	rcall	.+1626   	; 0xae6 <_Z11isFreqLegald>
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <__stack+0x33>
     490:	8e c0       	rjmp	.+284    	; 0x5ae <__stack+0x14f>
			
					// Ignore noise and big swings
					long_last_frequencies[long_freq_ar_i++] = frequency;
     492:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <long_freq_ar_i>
     496:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <long_freq_ar_i+0x1>
     49a:	9c 01       	movw	r18, r24
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <long_freq_ar_i+0x1>
     4a4:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <long_freq_ar_i>
     4a8:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <_ZL9frequency>
     4ac:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <_ZL9frequency+0x1>
     4b0:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <_ZL9frequency+0x2>
     4b4:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <_ZL9frequency+0x3>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	fc 01       	movw	r30, r24
     4c2:	e6 52       	subi	r30, 0x26	; 38
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	40 83       	st	Z, r20
     4c8:	51 83       	std	Z+1, r21	; 0x01
     4ca:	62 83       	std	Z+2, r22	; 0x02
     4cc:	73 83       	std	Z+3, r23	; 0x03
					if (long_freq_ar_i >= LONG_FREQ_AR_LEN) long_freq_ar_i = 0;
     4ce:	23 32       	cpi	r18, 0x23	; 35
     4d0:	31 05       	cpc	r19, r1
     4d2:	24 f0       	brlt	.+8      	; 0x4dc <__stack+0x7d>
     4d4:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <long_freq_ar_i+0x1>
     4d8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <long_freq_ar_i>
					float long_average_freq = get_av(long_last_frequencies, LONG_FREQ_AR_LEN);
     4dc:	63 e2       	ldi	r22, 0x23	; 35
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	8a ed       	ldi	r24, 0xDA	; 218
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	5b df       	rcall	.-330    	; 0x39c <_Z6get_avPdi>
     4e6:	6b 01       	movw	r12, r22
     4e8:	7c 01       	movw	r14, r24
					float diff = abs(long_average_freq - frequency);
     4ea:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <_ZL9frequency>
     4ee:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <_ZL9frequency+0x1>
     4f2:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <_ZL9frequency+0x2>
     4f6:	50 91 72 01 	lds	r21, 0x0172	; 0x800172 <_ZL9frequency+0x3>
					float max_diff = long_average_freq * FREQ_MAX_DIFF;

					if (diff < max_diff){
     4fa:	14 d5       	rcall	.+2600   	; 0xf24 <__subsf3>
     4fc:	e4 d5       	rcall	.+3016   	; 0x10c6 <__fixsfsi>
     4fe:	9b 01       	movw	r18, r22
     500:	77 23       	and	r23, r23
     502:	24 f4       	brge	.+8      	; 0x50c <__stack+0xad>
     504:	22 27       	eor	r18, r18
     506:	33 27       	eor	r19, r19
     508:	26 1b       	sub	r18, r22
     50a:	37 0b       	sbc	r19, r23
     50c:	b9 01       	movw	r22, r18
     50e:	33 0f       	add	r19, r19
     510:	88 0b       	sbc	r24, r24
     512:	99 0b       	sbc	r25, r25
     514:	0b d6       	rcall	.+3094   	; 0x112c <__floatsisf>
     516:	4b 01       	movw	r8, r22
     518:	5c 01       	movw	r10, r24
     51a:	2a e9       	ldi	r18, 0x9A	; 154
     51c:	39 e9       	ldi	r19, 0x99	; 153
     51e:	49 e1       	ldi	r20, 0x19	; 25
     520:	5e e3       	ldi	r21, 0x3E	; 62
     522:	c7 01       	movw	r24, r14
     524:	b6 01       	movw	r22, r12
     526:	d5 d6       	rcall	.+3498   	; 0x12d2 <__mulsf3>
     528:	9b 01       	movw	r18, r22
     52a:	ac 01       	movw	r20, r24
     52c:	c5 01       	movw	r24, r10
     52e:	b4 01       	movw	r22, r8
     530:	5e d5       	rcall	.+2748   	; 0xfee <__cmpsf2>
     532:	88 23       	and	r24, r24
     534:	2c f5       	brge	.+74     	; 0x580 <__stack+0x121>
						// get average freq
						short_last_frequencies[short_freq_ar_i++] = frequency;
     536:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
     53a:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <__data_end+0x1>
     53e:	9c 01       	movw	r18, r24
     540:	2f 5f       	subi	r18, 0xFF	; 255
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <__data_end+0x1>
     548:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <__data_end>
     54c:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <_ZL9frequency>
     550:	50 91 70 01 	lds	r21, 0x0170	; 0x800170 <_ZL9frequency+0x1>
     554:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <_ZL9frequency+0x2>
     558:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <_ZL9frequency+0x3>
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	fc 01       	movw	r30, r24
     566:	e0 55       	subi	r30, 0x50	; 80
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	40 83       	st	Z, r20
     56c:	51 83       	std	Z+1, r21	; 0x01
     56e:	62 83       	std	Z+2, r22	; 0x02
     570:	73 83       	std	Z+3, r23	; 0x03
						if (short_freq_ar_i >= SHORT_FREQ_AR_LEN) short_freq_ar_i = 0;
     572:	2a 30       	cpi	r18, 0x0A	; 10
     574:	31 05       	cpc	r19, r1
     576:	24 f0       	brlt	.+8      	; 0x580 <__stack+0x121>
     578:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__data_end+0x1>
     57c:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <__data_end>
					}
			
					float short_average_freq = get_av(short_last_frequencies, SHORT_FREQ_AR_LEN);
     580:	6a e0       	ldi	r22, 0x0A	; 10
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 eb       	ldi	r24, 0xB0	; 176
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	09 df       	rcall	.-494    	; 0x39c <_Z6get_avPdi>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
					getNoteByFreq(&currentNote, short_average_freq); // RECOGNIZE NOTE
     58e:	ab 01       	movw	r20, r22
     590:	bc 01       	movw	r22, r24
     592:	80 ee       	ldi	r24, 0xE0	; 224
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	c5 d2       	rcall	.+1418   	; 0xb22 <_Z13getNoteByFreqP4Noted>
					if (currentNote.valid) {
     598:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <currentNote+0xe>
     59c:	88 23       	and	r24, r24
     59e:	39 f0       	breq	.+14     	; 0x5ae <__stack+0x14f>
						//USART_Transmit_int((int)short_average_freq);
						//USART_Println();
						//USART_Println();
						displ.displayNote(&currentNote, short_average_freq); // DISPLAY NOTE
     5a0:	a7 01       	movw	r20, r14
     5a2:	96 01       	movw	r18, r12
     5a4:	60 ee       	ldi	r22, 0xE0	; 224
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	86 ea       	ldi	r24, 0xA6	; 166
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	5e d2       	rcall	.+1212   	; 0xa6a <_ZN7Display11displayNoteEPK4Noted>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	8f e1       	ldi	r24, 0x1F	; 31
     5b0:	9e e4       	ldi	r25, 0x4E	; 78
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <__stack+0x153>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__stack+0x159>
     5b8:	00 00       	nop
     5ba:	3b cf       	rjmp	.-394    	; 0x432 <main+0xc>

000005bc <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     5bc:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     5c0:	e6 ea       	ldi	r30, 0xA6	; 166
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	11 82       	std	Z+1, r1	; 0x01
     5c6:	10 82       	st	Z, r1
     5c8:	12 82       	std	Z+2, r1	; 0x02
     5ca:	08 95       	ret

000005cc <_ZN7Display5lightEj>:
	}
	this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	86 17       	cp	r24, r22
     5d4:	97 07       	cpc	r25, r23
     5d6:	99 f0       	breq	.+38     	; 0x5fe <_ZN7Display5lightEj+0x32>
     5d8:	12 ba       	out	0x12, r1	; 18
     5da:	11 82       	std	Z+1, r1	; 0x01
     5dc:	10 82       	st	Z, r1
     5de:	60 fd       	sbrc	r22, 0
     5e0:	91 9a       	sbi	0x12, 1	; 18
     5e2:	61 fd       	sbrc	r22, 1
     5e4:	94 9a       	sbi	0x12, 4	; 18
     5e6:	62 fd       	sbrc	r22, 2
     5e8:	95 9a       	sbi	0x12, 5	; 18
     5ea:	63 fd       	sbrc	r22, 3
     5ec:	96 9a       	sbi	0x12, 6	; 18
     5ee:	64 fd       	sbrc	r22, 4
     5f0:	92 9a       	sbi	0x12, 2	; 18
     5f2:	65 fd       	sbrc	r22, 5
     5f4:	93 9a       	sbi	0x12, 3	; 18
     5f6:	66 fd       	sbrc	r22, 6
     5f8:	90 9a       	sbi	0x12, 0	; 18
     5fa:	71 83       	std	Z+1, r23	; 0x01
     5fc:	60 83       	st	Z, r22
     5fe:	08 95       	ret

00000600 <_ZN7Display10lightSharpEb>:
     600:	66 23       	and	r22, r22
     602:	11 f0       	breq	.+4      	; 0x608 <_ZN7Display10lightSharpEb+0x8>
     604:	97 9a       	sbi	0x12, 7	; 18
     606:	01 c0       	rjmp	.+2      	; 0x60a <_ZN7Display10lightSharpEb+0xa>
     608:	97 98       	cbi	0x12, 7	; 18
     60a:	fc 01       	movw	r30, r24
     60c:	62 83       	std	Z+2, r22	; 0x02
     60e:	08 95       	ret

00000610 <_ZN7Display12rebuildCacheEd>:
	//Serial.print(ledFCache.Bs[2]);
	//Serial.println();
}

// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     610:	4f 92       	push	r4
     612:	5f 92       	push	r5
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
     62e:	4a 01       	movw	r8, r20
     630:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     632:	2a e0       	ldi	r18, 0x0A	; 10
     634:	37 ed       	ldi	r19, 0xD7	; 215
     636:	43 ea       	ldi	r20, 0xA3	; 163
     638:	5d e3       	ldi	r21, 0x3D	; 61
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	49 d6       	rcall	.+3218   	; 0x12d2 <__mulsf3>
     640:	2b 01       	movw	r4, r22
     642:	3c 01       	movw	r6, r24
     644:	6e a7       	std	Y+46, r22	; 0x2e
     646:	7f a7       	std	Y+47, r23	; 0x2f
     648:	88 ab       	std	Y+48, r24	; 0x30
     64a:	99 ab       	std	Y+49, r25	; 0x31
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     64c:	2a e9       	ldi	r18, 0x9A	; 154
     64e:	39 e9       	ldi	r19, 0x99	; 153
     650:	49 e1       	ldi	r20, 0x19	; 25
     652:	5e e3       	ldi	r21, 0x3E	; 62
     654:	c5 01       	movw	r24, r10
     656:	b4 01       	movw	r22, r8
     658:	3c d6       	rcall	.+3192   	; 0x12d2 <__mulsf3>
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
     65e:	6a ab       	std	Y+50, r22	; 0x32
     660:	7b ab       	std	Y+51, r23	; 0x33
     662:	8c ab       	std	Y+52, r24	; 0x34
     664:	9d ab       	std	Y+53, r25	; 0x35
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     666:	23 e3       	ldi	r18, 0x33	; 51
     668:	33 e3       	ldi	r19, 0x33	; 51
     66a:	43 eb       	ldi	r20, 0xB3	; 179
     66c:	5e e3       	ldi	r21, 0x3E	; 62
     66e:	c5 01       	movw	r24, r10
     670:	b4 01       	movw	r22, r8
     672:	2f d6       	rcall	.+3166   	; 0x12d2 <__mulsf3>
     674:	4b 01       	movw	r8, r22
     676:	5c 01       	movw	r10, r24
     678:	6e ab       	std	Y+54, r22	; 0x36
     67a:	7f ab       	std	Y+55, r23	; 0x37
     67c:	88 af       	std	Y+56, r24	; 0x38
     67e:	99 af       	std	Y+57, r25	; 0x39
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     680:	a3 01       	movw	r20, r6
     682:	92 01       	movw	r18, r4
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	84 e8       	ldi	r24, 0x84	; 132
     68a:	92 ec       	ldi	r25, 0xC2	; 194
     68c:	b4 d4       	rcall	.+2408   	; 0xff6 <__divsf3>
     68e:	6e 8b       	std	Y+22, r22	; 0x16
     690:	7f 8b       	std	Y+23, r23	; 0x17
     692:	88 8f       	std	Y+24, r24	; 0x18
     694:	99 8f       	std	Y+25, r25	; 0x19
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	a0 ef       	ldi	r26, 0xF0	; 240
     69c:	b2 e4       	ldi	r27, 0x42	; 66
     69e:	8a a3       	std	Y+34, r24	; 0x22
     6a0:	9b a3       	std	Y+35, r25	; 0x23
     6a2:	ac a3       	std	Y+36, r26	; 0x24
     6a4:	bd a3       	std	Y+37, r27	; 0x25
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     6a6:	a3 01       	movw	r20, r6
     6a8:	92 01       	movw	r18, r4
     6aa:	c7 01       	movw	r24, r14
     6ac:	b6 01       	movw	r22, r12
     6ae:	3a d4       	rcall	.+2164   	; 0xf24 <__subsf3>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e1       	ldi	r24, 0x10	; 16
     6ba:	92 ec       	ldi	r25, 0xC2	; 194
     6bc:	9c d4       	rcall	.+2360   	; 0xff6 <__divsf3>
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	6a 8f       	std	Y+26, r22	; 0x1a
     6c4:	7b 8f       	std	Y+27, r23	; 0x1b
     6c6:	8c 8f       	std	Y+28, r24	; 0x1c
     6c8:	9d 8f       	std	Y+29, r25	; 0x1d
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	01 d6       	rcall	.+3074   	; 0x12d2 <__mulsf3>
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e9       	ldi	r24, 0x90	; 144
     6da:	91 e4       	ldi	r25, 0x41	; 65
     6dc:	23 d4       	rcall	.+2118   	; 0xf24 <__subsf3>
     6de:	6e a3       	std	Y+38, r22	; 0x26
     6e0:	7f a3       	std	Y+39, r23	; 0x27
     6e2:	88 a7       	std	Y+40, r24	; 0x28
     6e4:	99 a7       	std	Y+41, r25	; 0x29
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     6e6:	a7 01       	movw	r20, r14
     6e8:	96 01       	movw	r18, r12
     6ea:	c5 01       	movw	r24, r10
     6ec:	b4 01       	movw	r22, r8
     6ee:	1a d4       	rcall	.+2100   	; 0xf24 <__subsf3>
     6f0:	9b 01       	movw	r18, r22
     6f2:	ac 01       	movw	r20, r24
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e9       	ldi	r24, 0x90	; 144
     6fa:	91 ec       	ldi	r25, 0xC1	; 193
     6fc:	7c d4       	rcall	.+2296   	; 0xff6 <__divsf3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	6e 8f       	std	Y+30, r22	; 0x1e
     704:	7f 8f       	std	Y+31, r23	; 0x1f
     706:	88 a3       	std	Y+32, r24	; 0x20
     708:	99 a3       	std	Y+33, r25	; 0x21
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     70a:	c5 01       	movw	r24, r10
     70c:	b4 01       	movw	r22, r8
     70e:	e1 d5       	rcall	.+3010   	; 0x12d2 <__mulsf3>
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	cb 01       	movw	r24, r22
     71a:	04 d4       	rcall	.+2056   	; 0xf24 <__subsf3>
     71c:	6a a7       	std	Y+42, r22	; 0x2a
     71e:	7b a7       	std	Y+43, r23	; 0x2b
     720:	8c a7       	std	Y+44, r24	; 0x2c
     722:	9d a7       	std	Y+45, r25	; 0x2d
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	8f 90       	pop	r8
     738:	7f 90       	pop	r7
     73a:	6f 90       	pop	r6
     73c:	5f 90       	pop	r5
     73e:	4f 90       	pop	r4
     740:	08 95       	ret

00000742 <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
     75c:	6a 01       	movw	r12, r20
     75e:	7b 01       	movw	r14, r22
     760:	b9 01       	movw	r22, r18
     762:	a8 01       	movw	r20, r16
	this->rebuildCache(max_distance); // find new functions
     764:	55 df       	rcall	.-342    	; 0x610 <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	a9 01       	movw	r20, r18
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	3e d4       	rcall	.+2172   	; 0xfee <__cmpsf2>
     772:	88 23       	and	r24, r24
     774:	0c f4       	brge	.+2      	; 0x778 <_ZN7Display25getIndicatorValByDistanceEdd+0x36>
     776:	4f c0       	rjmp	.+158    	; 0x816 <_ZN7Display25getIndicatorValByDistanceEdd+0xd4>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     778:	8e a8       	ldd	r8, Y+54	; 0x36
     77a:	9f a8       	ldd	r9, Y+55	; 0x37
     77c:	a8 ac       	ldd	r10, Y+56	; 0x38
     77e:	b9 ac       	ldd	r11, Y+57	; 0x39
     780:	a5 01       	movw	r20, r10
     782:	94 01       	movw	r18, r8
     784:	c7 01       	movw	r24, r14
     786:	b6 01       	movw	r22, r12
     788:	a0 d5       	rcall	.+2880   	; 0x12ca <__gesf2>
     78a:	18 16       	cp	r1, r24
     78c:	0c f4       	brge	.+2      	; 0x790 <_ZN7Display25getIndicatorValByDistanceEdd+0x4e>
     78e:	46 c0       	rjmp	.+140    	; 0x81c <_ZN7Display25getIndicatorValByDistanceEdd+0xda>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     790:	2e a5       	ldd	r18, Y+46	; 0x2e
     792:	3f a5       	ldd	r19, Y+47	; 0x2f
     794:	48 a9       	ldd	r20, Y+48	; 0x30
     796:	59 a9       	ldd	r21, Y+49	; 0x31
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	28 d4       	rcall	.+2128   	; 0xfee <__cmpsf2>
     79e:	18 16       	cp	r1, r24
     7a0:	b4 f4       	brge	.+44     	; 0x7ce <_ZN7Display25getIndicatorValByDistanceEdd+0x8c>
     7a2:	2a a9       	ldd	r18, Y+50	; 0x32
     7a4:	3b a9       	ldd	r19, Y+51	; 0x33
     7a6:	4c a9       	ldd	r20, Y+52	; 0x34
     7a8:	5d a9       	ldd	r21, Y+53	; 0x35
     7aa:	c7 01       	movw	r24, r14
     7ac:	b6 01       	movw	r22, r12
     7ae:	1f d4       	rcall	.+2110   	; 0xfee <__cmpsf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	54 f4       	brge	.+20     	; 0x7c8 <_ZN7Display25getIndicatorValByDistanceEdd+0x86>
     7b4:	a5 01       	movw	r20, r10
     7b6:	94 01       	movw	r18, r8
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	18 d4       	rcall	.+2096   	; 0xfee <__cmpsf2>
     7be:	18 16       	cp	r1, r24
     7c0:	4c f0       	brlt	.+18     	; 0x7d4 <_ZN7Display25getIndicatorValByDistanceEdd+0x92>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     7c2:	02 e0       	ldi	r16, 0x02	; 2
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
     7c8:	01 e0       	ldi	r16, 0x01	; 1
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance <= ledFCache.xBounds[i])
     7ce:	00 e0       	ldi	r16, 0x00	; 0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <_ZN7Display25getIndicatorValByDistanceEdd+0x96>
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     7d4:	03 e0       	ldi	r16, 0x03	; 3
     7d6:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     7d8:	f8 01       	movw	r30, r16
     7da:	31 96       	adiw	r30, 0x01	; 1
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ec 0f       	add	r30, r28
     7e6:	fd 1f       	adc	r31, r29
     7e8:	22 89       	ldd	r18, Z+18	; 0x12
     7ea:	33 89       	ldd	r19, Z+19	; 0x13
     7ec:	44 89       	ldd	r20, Z+20	; 0x14
     7ee:	55 89       	ldd	r21, Z+21	; 0x15
     7f0:	c7 01       	movw	r24, r14
     7f2:	b6 01       	movw	r22, r12
     7f4:	6e d5       	rcall	.+2780   	; 0x12d2 <__mulsf3>
     7f6:	0c 5f       	subi	r16, 0xFC	; 252
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	00 0f       	add	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	00 0f       	add	r16, r16
     800:	11 1f       	adc	r17, r17
     802:	c0 0f       	add	r28, r16
     804:	d1 1f       	adc	r29, r17
     806:	2a 89       	ldd	r18, Y+18	; 0x12
     808:	3b 89       	ldd	r19, Y+19	; 0x13
     80a:	4c 89       	ldd	r20, Y+20	; 0x14
     80c:	5d 89       	ldd	r21, Y+21	; 0x15
     80e:	8b d3       	rcall	.+1814   	; 0xf26 <__addsf3>
     810:	5a d4       	rcall	.+2228   	; 0x10c6 <__fixsfsi>
	return val;
     812:	cb 01       	movw	r24, r22
     814:	05 c0       	rjmp	.+10     	; 0x820 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     816:	88 e7       	ldi	r24, 0x78	; 120
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	02 c0       	rjmp	.+4      	; 0x820 <_ZN7Display25getIndicatorValByDistanceEdd+0xde>
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
	return val;
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	9f 90       	pop	r9
     836:	8f 90       	pop	r8
     838:	08 95       	ret

0000083a <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     83a:	2f 92       	push	r2
     83c:	3f 92       	push	r3
     83e:	4f 92       	push	r4
     840:	5f 92       	push	r5
     842:	6f 92       	push	r6
     844:	7f 92       	push	r7
     846:	8f 92       	push	r8
     848:	9f 92       	push	r9
     84a:	af 92       	push	r10
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	6c 97       	sbiw	r28, 0x1c	; 28
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	1c 01       	movw	r2, r24
     870:	8b 01       	movw	r16, r22
     872:	2d 8b       	std	Y+21, r18	; 0x15
     874:	3e 8b       	std	Y+22, r19	; 0x16
     876:	4f 8b       	std	Y+23, r20	; 0x17
     878:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     87a:	db 01       	movw	r26, r22
     87c:	16 96       	adiw	r26, 0x06	; 6
     87e:	8d 91       	ld	r24, X+
     880:	9d 91       	ld	r25, X+
     882:	0d 90       	ld	r0, X+
     884:	bc 91       	ld	r27, X
     886:	a0 2d       	mov	r26, r0
     888:	89 8f       	std	Y+25, r24	; 0x19
     88a:	9a 8f       	std	Y+26, r25	; 0x1a
     88c:	ab 8f       	std	Y+27, r26	; 0x1b
     88e:	bc 8f       	std	Y+28, r27	; 0x1c
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     890:	fb 01       	movw	r30, r22
     892:	82 84       	ldd	r8, Z+10	; 0x0a
     894:	93 84       	ldd	r9, Z+11	; 0x0b
     896:	a4 84       	ldd	r10, Z+12	; 0x0c
     898:	b5 84       	ldd	r11, Z+13	; 0x0d
     89a:	9c 01       	movw	r18, r24
     89c:	ad 01       	movw	r20, r26
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	40 d3       	rcall	.+1664   	; 0xf24 <__subsf3>
     8a4:	6b 01       	movw	r12, r22
     8a6:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     8a8:	d8 01       	movw	r26, r16
     8aa:	12 96       	adiw	r26, 0x02	; 2
     8ac:	4d 90       	ld	r4, X+
     8ae:	5d 90       	ld	r5, X+
     8b0:	6d 90       	ld	r6, X+
     8b2:	7c 90       	ld	r7, X
     8b4:	15 97       	sbiw	r26, 0x05	; 5
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     8b6:	29 8d       	ldd	r18, Y+25	; 0x19
     8b8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8ba:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8bc:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8be:	6d 89       	ldd	r22, Y+21	; 0x15
     8c0:	7e 89       	ldd	r23, Y+22	; 0x16
     8c2:	8f 89       	ldd	r24, Y+23	; 0x17
     8c4:	98 8d       	ldd	r25, Y+24	; 0x18
     8c6:	2e d3       	rcall	.+1628   	; 0xf24 <__subsf3>
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	68 d4       	rcall	.+2256   	; 0x11a2 <fmin>
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     8d2:	69 83       	std	Y+1, r22	; 0x01
     8d4:	7a 83       	std	Y+2, r23	; 0x02
     8d6:	8b 83       	std	Y+3, r24	; 0x03
     8d8:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
     8da:	29 8d       	ldd	r18, Y+25	; 0x19
     8dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     8de:	4b 8d       	ldd	r20, Y+27	; 0x1b
     8e0:	5c 8d       	ldd	r21, Y+28	; 0x1c
     8e2:	c3 01       	movw	r24, r6
     8e4:	b2 01       	movw	r22, r4
     8e6:	1e d3       	rcall	.+1596   	; 0xf24 <__subsf3>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	5f e3       	ldi	r21, 0x3F	; 63
     8f0:	f0 d4       	rcall	.+2528   	; 0x12d2 <__mulsf3>
     8f2:	9b 01       	movw	r18, r22
     8f4:	ac 01       	movw	r20, r24
     8f6:	c3 01       	movw	r24, r6
     8f8:	b2 01       	movw	r22, r4
     8fa:	14 d3       	rcall	.+1576   	; 0xf24 <__subsf3>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	6d 89       	ldd	r22, Y+21	; 0x15
     902:	7e 89       	ldd	r23, Y+22	; 0x16
     904:	8f 89       	ldd	r24, Y+23	; 0x17
     906:	98 8d       	ldd	r25, Y+24	; 0x18
     908:	0d d3       	rcall	.+1562   	; 0xf24 <__subsf3>
     90a:	dd d3       	rcall	.+1978   	; 0x10c6 <__fixsfsi>
     90c:	9b 01       	movw	r18, r22
     90e:	77 23       	and	r23, r23
     910:	24 f4       	brge	.+8      	; 0x91a <_ZN7Display14lightIndicatorEPK4Noted+0xe0>
     912:	22 27       	eor	r18, r18
     914:	33 27       	eor	r19, r19
     916:	26 1b       	sub	r18, r22
     918:	37 0b       	sbc	r19, r23
     91a:	b9 01       	movw	r22, r18
     91c:	33 0f       	add	r19, r19
     91e:	88 0b       	sbc	r24, r24
     920:	99 0b       	sbc	r25, r25
     922:	04 d4       	rcall	.+2056   	; 0x112c <__floatsisf>
     924:	9b 01       	movw	r18, r22
     926:	ac 01       	movw	r20, r24
     928:	c7 01       	movw	r24, r14
     92a:	b6 01       	movw	r22, r12
     92c:	3a d4       	rcall	.+2164   	; 0x11a2 <fmin>
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     92e:	6d 83       	std	Y+5, r22	; 0x05
     930:	7e 83       	std	Y+6, r23	; 0x06
     932:	8f 83       	std	Y+7, r24	; 0x07
     934:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
     936:	a3 01       	movw	r20, r6
     938:	92 01       	movw	r18, r4
     93a:	6d 89       	ldd	r22, Y+21	; 0x15
     93c:	7e 89       	ldd	r23, Y+22	; 0x16
     93e:	8f 89       	ldd	r24, Y+23	; 0x17
     940:	98 8d       	ldd	r25, Y+24	; 0x18
     942:	f0 d2       	rcall	.+1504   	; 0xf24 <__subsf3>
     944:	c0 d3       	rcall	.+1920   	; 0x10c6 <__fixsfsi>
     946:	9b 01       	movw	r18, r22
     948:	77 23       	and	r23, r23
     94a:	24 f4       	brge	.+8      	; 0x954 <_ZN7Display14lightIndicatorEPK4Noted+0x11a>
     94c:	22 27       	eor	r18, r18
     94e:	33 27       	eor	r19, r19
     950:	26 1b       	sub	r18, r22
     952:	37 0b       	sbc	r19, r23
     954:	b9 01       	movw	r22, r18
     956:	33 0f       	add	r19, r19
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	e7 d3       	rcall	.+1998   	; 0x112c <__floatsisf>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	1d d4       	rcall	.+2106   	; 0x11a2 <fmin>
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     968:	69 87       	std	Y+9, r22	; 0x09
     96a:	7a 87       	std	Y+10, r23	; 0x0a
     96c:	8b 87       	std	Y+11, r24	; 0x0b
     96e:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
     970:	a3 01       	movw	r20, r6
     972:	92 01       	movw	r18, r4
     974:	c5 01       	movw	r24, r10
     976:	b4 01       	movw	r22, r8
     978:	d5 d2       	rcall	.+1450   	; 0xf24 <__subsf3>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	a7 d4       	rcall	.+2382   	; 0x12d2 <__mulsf3>
     984:	a3 01       	movw	r20, r6
     986:	92 01       	movw	r18, r4
     988:	ce d2       	rcall	.+1436   	; 0xf26 <__addsf3>
     98a:	2d 89       	ldd	r18, Y+21	; 0x15
     98c:	3e 89       	ldd	r19, Y+22	; 0x16
     98e:	4f 89       	ldd	r20, Y+23	; 0x17
     990:	58 8d       	ldd	r21, Y+24	; 0x18
     992:	c8 d2       	rcall	.+1424   	; 0xf24 <__subsf3>
     994:	98 d3       	rcall	.+1840   	; 0x10c6 <__fixsfsi>
     996:	9b 01       	movw	r18, r22
     998:	77 23       	and	r23, r23
     99a:	24 f4       	brge	.+8      	; 0x9a4 <_ZN7Display14lightIndicatorEPK4Noted+0x16a>
     99c:	22 27       	eor	r18, r18
     99e:	33 27       	eor	r19, r19
     9a0:	26 1b       	sub	r18, r22
     9a2:	37 0b       	sbc	r19, r23
     9a4:	b9 01       	movw	r22, r18
     9a6:	33 0f       	add	r19, r19
     9a8:	88 0b       	sbc	r24, r24
     9aa:	99 0b       	sbc	r25, r25
     9ac:	bf d3       	rcall	.+1918   	; 0x112c <__floatsisf>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c7 01       	movw	r24, r14
     9b4:	b6 01       	movw	r22, r12
     9b6:	f5 d3       	rcall	.+2026   	; 0x11a2 <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     9b8:	6d 87       	std	Y+13, r22	; 0x0d
     9ba:	7e 87       	std	Y+14, r23	; 0x0e
     9bc:	8f 87       	std	Y+15, r24	; 0x0f
     9be:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, abs(currentFreq - bound_1)),
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     9c0:	2d 89       	ldd	r18, Y+21	; 0x15
     9c2:	3e 89       	ldd	r19, Y+22	; 0x16
     9c4:	4f 89       	ldd	r20, Y+23	; 0x17
     9c6:	58 8d       	ldd	r21, Y+24	; 0x18
     9c8:	c5 01       	movw	r24, r10
     9ca:	b4 01       	movw	r22, r8
     9cc:	ab d2       	rcall	.+1366   	; 0xf24 <__subsf3>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	c7 01       	movw	r24, r14
     9d4:	b6 01       	movw	r22, r12
     9d6:	e5 d3       	rcall	.+1994   	; 0x11a2 <fmin>
	};
     9d8:	69 8b       	std	Y+17, r22	; 0x11
     9da:	7a 8b       	std	Y+18, r23	; 0x12
     9dc:	8b 8b       	std	Y+19, r24	; 0x13
     9de:	9c 8b       	std	Y+20, r25	; 0x14
     9e0:	fe 01       	movw	r30, r28
     9e2:	31 96       	adiw	r30, 0x01	; 1
     9e4:	3f 01       	movw	r6, r30
     9e6:	41 01       	movw	r8, r2
     9e8:	aa 24       	eor	r10, r10
     9ea:	a3 94       	inc	r10
     9ec:	b1 2c       	mov	r11, r1
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <_ZN7Display14lightIndicatorEPK4Noted+0x1c2>
     9f0:	ff ef       	ldi	r31, 0xFF	; 255
     9f2:	af 1a       	sub	r10, r31
     9f4:	bf 0a       	sbc	r11, r31
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	88 0e       	add	r8, r24
     9fa:	91 1c       	adc	r9, r1
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     9fc:	d3 01       	movw	r26, r6
     9fe:	4d 91       	ld	r20, X+
     a00:	5d 91       	ld	r21, X+
     a02:	6d 91       	ld	r22, X+
     a04:	7d 91       	ld	r23, X+
     a06:	3d 01       	movw	r6, r26
     a08:	97 01       	movw	r18, r14
     a0a:	86 01       	movw	r16, r12
     a0c:	c1 01       	movw	r24, r2
     a0e:	99 de       	rcall	.-718    	; 0x742 <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     a10:	b3 e0       	ldi	r27, 0x03	; 3
     a12:	ab 16       	cp	r10, r27
     a14:	b1 04       	cpc	r11, r1
     a16:	39 f0       	breq	.+14     	; 0xa26 <_ZN7Display14lightIndicatorEPK4Noted+0x1ec>
			this->indicatorBar[i].r = val;
     a18:	f4 01       	movw	r30, r8
     a1a:	83 83       	std	Z+3, r24	; 0x03
		fmin(max_dist, abs(currentFreq - note->freq)),
		fmin(max_dist, abs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     a1c:	f5 e0       	ldi	r31, 0x05	; 5
     a1e:	af 16       	cp	r10, r31
     a20:	b1 04       	cpc	r11, r1
     a22:	34 f3       	brlt	.-52     	; 0x9f0 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <_ZN7Display14lightIndicatorEPK4Noted+0x1f4>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     a26:	d1 01       	movw	r26, r2
     a28:	1a 96       	adiw	r26, 0x0a	; 10
     a2a:	8c 93       	st	X, r24
     a2c:	e1 cf       	rjmp	.-62     	; 0x9f0 <_ZN7Display14lightIndicatorEPK4Noted+0x1b6>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     a2e:	6f e0       	ldi	r22, 0x0F	; 15
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	c1 01       	movw	r24, r2
     a34:	03 96       	adiw	r24, 0x03	; 3
     a36:	3d d2       	rcall	.+1146   	; 0xeb2 <ws2812_sendarray>
}
     a38:	6c 96       	adiw	r28, 0x1c	; 28
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <_ZN7Display11displayNoteEPK4Noted>:

void Display::displayNote(const Note* note, double frequency) {
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ec 01       	movw	r28, r24
     a7c:	8b 01       	movw	r16, r22
     a7e:	69 01       	movw	r12, r18
     a80:	7a 01       	movw	r14, r20
	DI di = DI::A;
	switch(note->note) {
     a82:	fb 01       	movw	r30, r22
     a84:	80 81       	ld	r24, Z
     a86:	84 34       	cpi	r24, 0x44	; 68
     a88:	81 f0       	breq	.+32     	; 0xaaa <_ZN7Display11displayNoteEPK4Noted+0x40>
     a8a:	28 f4       	brcc	.+10     	; 0xa96 <_ZN7Display11displayNoteEPK4Noted+0x2c>
     a8c:	82 34       	cpi	r24, 0x42	; 66
     a8e:	49 f0       	breq	.+18     	; 0xaa2 <_ZN7Display11displayNoteEPK4Noted+0x38>
     a90:	83 34       	cpi	r24, 0x43	; 67
     a92:	49 f0       	breq	.+18     	; 0xaa6 <_ZN7Display11displayNoteEPK4Noted+0x3c>
     a94:	12 c0       	rjmp	.+36     	; 0xaba <_ZN7Display11displayNoteEPK4Noted+0x50>
     a96:	86 34       	cpi	r24, 0x46	; 70
     a98:	61 f0       	breq	.+24     	; 0xab2 <_ZN7Display11displayNoteEPK4Noted+0x48>
     a9a:	48 f0       	brcs	.+18     	; 0xaae <_ZN7Display11displayNoteEPK4Noted+0x44>
     a9c:	87 34       	cpi	r24, 0x47	; 71
     a9e:	59 f0       	breq	.+22     	; 0xab6 <_ZN7Display11displayNoteEPK4Noted+0x4c>
     aa0:	0c c0       	rjmp	.+24     	; 0xaba <_ZN7Display11displayNoteEPK4Noted+0x50>
		case 'A':
		di = DI::A;
		break;
		case 'B':
		di = DI::B;
     aa2:	69 e7       	ldi	r22, 0x79	; 121
     aa4:	0b c0       	rjmp	.+22     	; 0xabc <_ZN7Display11displayNoteEPK4Noted+0x52>
		break;
		case 'C':
		di = DI::C;
     aa6:	62 e7       	ldi	r22, 0x72	; 114
		break;
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'D':
		di = DI::D;
     aaa:	6d e3       	ldi	r22, 0x3D	; 61
		break;
     aac:	07 c0       	rjmp	.+14     	; 0xabc <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'E':
		di = DI::E;
     aae:	63 e7       	ldi	r22, 0x73	; 115
		break;
     ab0:	05 c0       	rjmp	.+10     	; 0xabc <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'F':
		di = DI::F;
     ab2:	63 e6       	ldi	r22, 0x63	; 99
		break;
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'G':
		di = DI::G;
     ab6:	6a e7       	ldi	r22, 0x7A	; 122
		break;
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <_ZN7Display11displayNoteEPK4Noted+0x52>

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::displayNote(const Note* note, double frequency) {
	DI di = DI::A;
     aba:	6f e6       	ldi	r22, 0x6F	; 111
void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
}

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	ce 01       	movw	r24, r28
     ac0:	85 dd       	rcall	.-1270   	; 0x5cc <_ZN7Display5lightEj>
		di = DI::G;
		break;
	}
	
	this->light(di);
	this->lightSharp(note->sharp);
     ac2:	f8 01       	movw	r30, r16
     ac4:	61 81       	ldd	r22, Z+1	; 0x01
     ac6:	ce 01       	movw	r24, r28
     ac8:	9b dd       	rcall	.-1226   	; 0x600 <_ZN7Display10lightSharpEb>
	this->lightIndicator(note, frequency);
     aca:	a7 01       	movw	r20, r14
     acc:	96 01       	movw	r18, r12
     ace:	b8 01       	movw	r22, r16
     ad0:	ce 01       	movw	r24, r28
     ad2:	b3 de       	rcall	.-666    	; 0x83a <_ZN7Display14lightIndicatorEPK4Noted>
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	08 95       	ret

00000ae6 <_Z11isFreqLegald>:
		multiplier *= 2.0;
		// last_octave_freq = FIRST_OCT_MAX_FREQ * multiplier;
	}

	return multiplier;
}
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	6b 01       	movw	r12, r22
     af0:	7c 01       	movw	r14, r24
     af2:	2b e9       	ldi	r18, 0x9B	; 155
     af4:	38 e4       	ldi	r19, 0x48	; 72
     af6:	4e e7       	ldi	r20, 0x7E	; 126
     af8:	51 e4       	ldi	r21, 0x41	; 65
     afa:	e7 d3       	rcall	.+1998   	; 0x12ca <__gesf2>
     afc:	88 23       	and	r24, r24
     afe:	5c f0       	brlt	.+22     	; 0xb16 <_Z11isFreqLegald+0x30>
     b00:	22 e5       	ldi	r18, 0x52	; 82
     b02:	38 e4       	ldi	r19, 0x48	; 72
     b04:	4e ef       	ldi	r20, 0xFE	; 254
     b06:	53 e4       	ldi	r21, 0x43	; 67
     b08:	c7 01       	movw	r24, r14
     b0a:	b6 01       	movw	r22, r12
     b0c:	70 d2       	rcall	.+1248   	; 0xfee <__cmpsf2>
     b0e:	88 1f       	adc	r24, r24
     b10:	88 27       	eor	r24, r24
     b12:	88 1f       	adc	r24, r24
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <_Z11isFreqLegald+0x32>
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	08 95       	ret

00000b22 <_Z13getNoteByFreqP4Noted>:

void getNoteByFreq(Note* note, double freq) {
     b22:	2f 92       	push	r2
     b24:	3f 92       	push	r3
     b26:	4f 92       	push	r4
     b28:	5f 92       	push	r5
     b2a:	6f 92       	push	r6
     b2c:	7f 92       	push	r7
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	af 92       	push	r10
     b34:	bf 92       	push	r11
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	2c 97       	sbiw	r28, 0x0c	; 12
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	9e 83       	std	Y+6, r25	; 0x06
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	49 83       	std	Y+1, r20	; 0x01
     b5c:	5a 83       	std	Y+2, r21	; 0x02
     b5e:	6b 83       	std	Y+3, r22	; 0x03
     b60:	7c 83       	std	Y+4, r23	; 0x04

#include "noteDetection.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     b62:	2b e9       	ldi	r18, 0x9B	; 155
     b64:	38 e4       	ldi	r19, 0x48	; 72
     b66:	4e e7       	ldi	r20, 0x7E	; 126
     b68:	51 e4       	ldi	r21, 0x41	; 65
     b6a:	69 81       	ldd	r22, Y+1	; 0x01
     b6c:	7a 81       	ldd	r23, Y+2	; 0x02
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	ab d3       	rcall	.+1878   	; 0x12ca <__gesf2>
     b74:	88 23       	and	r24, r24
     b76:	0c f4       	brge	.+2      	; 0xb7a <_Z13getNoteByFreqP4Noted+0x58>
     b78:	f9 c0       	rjmp	.+498    	; 0xd6c <_Z13getNoteByFreqP4Noted+0x24a>
     b7a:	22 e5       	ldi	r18, 0x52	; 82
     b7c:	38 e4       	ldi	r19, 0x48	; 72
     b7e:	4e ef       	ldi	r20, 0xFE	; 254
     b80:	53 e4       	ldi	r21, 0x43	; 67
     b82:	69 81       	ldd	r22, Y+1	; 0x01
     b84:	7a 81       	ldd	r23, Y+2	; 0x02
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	31 d2       	rcall	.+1122   	; 0xfee <__cmpsf2>
     b8c:	88 23       	and	r24, r24
     b8e:	0c f0       	brlt	.+2      	; 0xb92 <_Z13getNoteByFreqP4Noted+0x70>
     b90:	ed c0       	rjmp	.+474    	; 0xd6c <_Z13getNoteByFreqP4Noted+0x24a>
     b92:	f0 c0       	rjmp	.+480    	; 0xd74 <_Z13getNoteByFreqP4Noted+0x252>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b94:	0f 2e       	mov	r0, r31
     b96:	c1 2c       	mov	r12, r1
     b98:	d1 2c       	mov	r13, r1
     b9a:	f0 e8       	ldi	r31, 0x80	; 128
     b9c:	ef 2e       	mov	r14, r31
     b9e:	ff e3       	ldi	r31, 0x3F	; 63
     ba0:	ff 2e       	mov	r15, r31
     ba2:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     ba4:	a7 01       	movw	r20, r14
     ba6:	96 01       	movw	r18, r12
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	bc d1       	rcall	.+888    	; 0xf26 <__addsf3>
     bae:	6b 01       	movw	r12, r22
     bb0:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     bb2:	2b e9       	ldi	r18, 0x9B	; 155
     bb4:	38 e4       	ldi	r19, 0x48	; 72
     bb6:	4e ef       	ldi	r20, 0xFE	; 254
     bb8:	51 e4       	ldi	r21, 0x41	; 65
     bba:	8b d3       	rcall	.+1814   	; 0x12d2 <__mulsf3>
     bbc:	4b 01       	movw	r8, r22
     bbe:	5c 01       	movw	r10, r24
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	69 81       	ldd	r22, Y+1	; 0x01
     bc6:	7a 81       	ldd	r23, Y+2	; 0x02
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	7e d3       	rcall	.+1788   	; 0x12ca <__gesf2>
     bce:	18 16       	cp	r1, r24
     bd0:	4c f3       	brlt	.-46     	; 0xba4 <_Z13getNoteByFreqP4Noted+0x82>
     bd2:	8f 82       	std	Y+7, r8	; 0x07
     bd4:	98 86       	std	Y+8, r9	; 0x08
     bd6:	a9 86       	std	Y+9, r10	; 0x09
     bd8:	ba 86       	std	Y+10, r11	; 0x0a
     bda:	e8 c0       	rjmp	.+464    	; 0xdac <_Z13getNoteByFreqP4Noted+0x28a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     bdc:	1c 01       	movw	r2, r24
     bde:	51 01       	movw	r10, r2
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	a8 1a       	sub	r10, r24
     be4:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     be6:	ab 85       	ldd	r26, Y+11	; 0x0b
     be8:	bc 85       	ldd	r27, Y+12	; 0x0c
     bea:	6d 91       	ld	r22, X+
     bec:	7d 91       	ld	r23, X+
     bee:	8d 91       	ld	r24, X+
     bf0:	9d 91       	ld	r25, X+
     bf2:	bc 87       	std	Y+12, r27	; 0x0c
     bf4:	ab 87       	std	Y+11, r26	; 0x0b
     bf6:	a7 01       	movw	r20, r14
     bf8:	96 01       	movw	r18, r12
     bfa:	6b d3       	rcall	.+1750   	; 0x12d2 <__mulsf3>
     bfc:	9b 01       	movw	r18, r22
     bfe:	ac 01       	movw	r20, r24
     c00:	69 81       	ldd	r22, Y+1	; 0x01
     c02:	7a 81       	ldd	r23, Y+2	; 0x02
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	8d d1       	rcall	.+794    	; 0xf24 <__subsf3>
     c0a:	5d d2       	rcall	.+1210   	; 0x10c6 <__fixsfsi>
     c0c:	9b 01       	movw	r18, r22
     c0e:	77 23       	and	r23, r23
     c10:	24 f4       	brge	.+8      	; 0xc1a <_Z13getNoteByFreqP4Noted+0xf8>
     c12:	22 27       	eor	r18, r18
     c14:	33 27       	eor	r19, r19
     c16:	26 1b       	sub	r18, r22
     c18:	37 0b       	sbc	r19, r23
     c1a:	b9 01       	movw	r22, r18
     c1c:	33 0f       	add	r19, r19
     c1e:	88 0b       	sbc	r24, r24
     c20:	99 0b       	sbc	r25, r25
     c22:	84 d2       	rcall	.+1288   	; 0x112c <__floatsisf>
     c24:	96 2e       	mov	r9, r22
     c26:	07 2f       	mov	r16, r23
     c28:	18 2f       	mov	r17, r24
     c2a:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     c2c:	27 2d       	mov	r18, r7
     c2e:	34 2d       	mov	r19, r4
     c30:	45 2d       	mov	r20, r5
     c32:	56 2d       	mov	r21, r6
     c34:	dc d1       	rcall	.+952    	; 0xfee <__cmpsf2>
     c36:	88 23       	and	r24, r24
     c38:	54 f4       	brge	.+20     	; 0xc4e <_Z13getNoteByFreqP4Noted+0x12c>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c3a:	c1 01       	movw	r24, r2
     c3c:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     c3e:	79 2c       	mov	r7, r9
     c40:	40 2e       	mov	r4, r16
     c42:	51 2e       	mov	r5, r17
     c44:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     c46:	8c 30       	cpi	r24, 0x0C	; 12
     c48:	91 05       	cpc	r25, r1
     c4a:	41 f6       	brne	.-112    	; 0xbdc <_Z13getNoteByFreqP4Noted+0xba>
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <_Z13getNoteByFreqP4Noted+0x12e>
     c4e:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     c50:	f1 01       	movw	r30, r2
     c52:	ef 58       	subi	r30, 0x8F	; 143
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	80 81       	ld	r24, Z
     c58:	ed 81       	ldd	r30, Y+5	; 0x05
     c5a:	fe 81       	ldd	r31, Y+6	; 0x06
     c5c:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     c5e:	f1 01       	movw	r30, r2
     c60:	eb 59       	subi	r30, 0x9B	; 155
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	80 81       	ld	r24, Z
     c66:	ad 81       	ldd	r26, Y+5	; 0x05
     c68:	be 81       	ldd	r27, Y+6	; 0x06
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     c6e:	f1 01       	movw	r30, r2
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	e3 58       	subi	r30, 0x83	; 131
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	20 81       	ld	r18, Z
     c7e:	31 81       	ldd	r19, Z+1	; 0x01
     c80:	42 81       	ldd	r20, Z+2	; 0x02
     c82:	53 81       	ldd	r21, Z+3	; 0x03
     c84:	c7 01       	movw	r24, r14
     c86:	b6 01       	movw	r22, r12
     c88:	24 d3       	rcall	.+1608   	; 0x12d2 <__mulsf3>
     c8a:	2b 01       	movw	r4, r22
     c8c:	3c 01       	movw	r6, r24
     c8e:	ed 81       	ldd	r30, Y+5	; 0x05
     c90:	fe 81       	ldd	r31, Y+6	; 0x06
     c92:	62 83       	std	Z+2, r22	; 0x02
     c94:	73 83       	std	Z+3, r23	; 0x03
     c96:	84 83       	std	Z+4, r24	; 0x04
     c98:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     c9e:	fb e0       	ldi	r31, 0x0B	; 11
     ca0:	2f 16       	cp	r2, r31
     ca2:	31 04       	cpc	r3, r1
     ca4:	59 f4       	brne	.+22     	; 0xcbc <_Z13getNoteByFreqP4Noted+0x19a>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     ca6:	8f 81       	ldd	r24, Y+7	; 0x07
     ca8:	98 85       	ldd	r25, Y+8	; 0x08
     caa:	a9 85       	ldd	r26, Y+9	; 0x09
     cac:	ba 85       	ldd	r27, Y+10	; 0x0a
     cae:	ed 81       	ldd	r30, Y+5	; 0x05
     cb0:	fe 81       	ldd	r31, Y+6	; 0x06
     cb2:	82 87       	std	Z+10, r24	; 0x0a
     cb4:	93 87       	std	Z+11, r25	; 0x0b
     cb6:	a4 87       	std	Z+12, r26	; 0x0c
     cb8:	b5 87       	std	Z+13, r27	; 0x0d
     cba:	32 c0       	rjmp	.+100    	; 0xd20 <_Z13getNoteByFreqP4Noted+0x1fe>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     cbc:	f1 01       	movw	r30, r2
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ef 57       	subi	r30, 0x7F	; 127
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	20 81       	ld	r18, Z
     ccc:	31 81       	ldd	r19, Z+1	; 0x01
     cce:	42 81       	ldd	r20, Z+2	; 0x02
     cd0:	53 81       	ldd	r21, Z+3	; 0x03
     cd2:	c7 01       	movw	r24, r14
     cd4:	b6 01       	movw	r22, r12
     cd6:	fd d2       	rcall	.+1530   	; 0x12d2 <__mulsf3>
     cd8:	a3 01       	movw	r20, r6
     cda:	92 01       	movw	r18, r4
     cdc:	23 d1       	rcall	.+582    	; 0xf24 <__subsf3>
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	f5 d2       	rcall	.+1514   	; 0x12d2 <__mulsf3>
     ce8:	a3 01       	movw	r20, r6
     cea:	92 01       	movw	r18, r4
     cec:	1c d1       	rcall	.+568    	; 0xf26 <__addsf3>
     cee:	ad 81       	ldd	r26, Y+5	; 0x05
     cf0:	be 81       	ldd	r27, Y+6	; 0x06
     cf2:	1a 96       	adiw	r26, 0x0a	; 10
     cf4:	6d 93       	st	X+, r22
     cf6:	7d 93       	st	X+, r23
     cf8:	8d 93       	st	X+, r24
     cfa:	9c 93       	st	X, r25
     cfc:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     cfe:	21 14       	cp	r2, r1
     d00:	31 04       	cpc	r3, r1
     d02:	71 f4       	brne	.+28     	; 0xd20 <_Z13getNoteByFreqP4Noted+0x1fe>
		note->min_freq = MIN_FREQ*multiplier;
     d04:	2b e9       	ldi	r18, 0x9B	; 155
     d06:	38 e4       	ldi	r19, 0x48	; 72
     d08:	4e e7       	ldi	r20, 0x7E	; 126
     d0a:	51 e4       	ldi	r21, 0x41	; 65
     d0c:	c7 01       	movw	r24, r14
     d0e:	b6 01       	movw	r22, r12
     d10:	e0 d2       	rcall	.+1472   	; 0x12d2 <__mulsf3>
     d12:	ed 81       	ldd	r30, Y+5	; 0x05
     d14:	fe 81       	ldd	r31, Y+6	; 0x06
     d16:	66 83       	std	Z+6, r22	; 0x06
     d18:	77 83       	std	Z+7, r23	; 0x07
     d1a:	80 87       	std	Z+8, r24	; 0x08
     d1c:	91 87       	std	Z+9, r25	; 0x09
     d1e:	b0 c0       	rjmp	.+352    	; 0xe80 <_Z13getNoteByFreqP4Noted+0x35e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     d20:	f1 01       	movw	r30, r2
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ee 0f       	add	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	e7 58       	subi	r30, 0x87	; 135
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	42 81       	ldd	r20, Z+2	; 0x02
     d34:	53 81       	ldd	r21, Z+3	; 0x03
     d36:	c7 01       	movw	r24, r14
     d38:	b6 01       	movw	r22, r12
     d3a:	cb d2       	rcall	.+1430   	; 0x12d2 <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c3 01       	movw	r24, r6
     d42:	b2 01       	movw	r22, r4
     d44:	ef d0       	rcall	.+478    	; 0xf24 <__subsf3>
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	c1 d2       	rcall	.+1410   	; 0x12d2 <__mulsf3>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	c3 01       	movw	r24, r6
     d56:	b2 01       	movw	r22, r4
     d58:	e5 d0       	rcall	.+458    	; 0xf24 <__subsf3>
     d5a:	ad 81       	ldd	r26, Y+5	; 0x05
     d5c:	be 81       	ldd	r27, Y+6	; 0x06
     d5e:	16 96       	adiw	r26, 0x06	; 6
     d60:	6d 93       	st	X+, r22
     d62:	7d 93       	st	X+, r23
     d64:	8d 93       	st	X+, r24
     d66:	9c 93       	st	X, r25
     d68:	19 97       	sbiw	r26, 0x09	; 9
     d6a:	8a c0       	rjmp	.+276    	; 0xe80 <_Z13getNoteByFreqP4Noted+0x35e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     d6c:	ed 81       	ldd	r30, Y+5	; 0x05
     d6e:	fe 81       	ldd	r31, Y+6	; 0x06
     d70:	16 86       	std	Z+14, r1	; 0x0e
		return;
     d72:	86 c0       	rjmp	.+268    	; 0xe80 <_Z13getNoteByFreqP4Noted+0x35e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     d74:	2b e9       	ldi	r18, 0x9B	; 155
     d76:	38 e4       	ldi	r19, 0x48	; 72
     d78:	4e ef       	ldi	r20, 0xFE	; 254
     d7a:	51 e4       	ldi	r21, 0x41	; 65
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
     d7e:	7a 81       	ldd	r23, Y+2	; 0x02
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	a2 d2       	rcall	.+1348   	; 0x12ca <__gesf2>
     d86:	18 16       	cp	r1, r24
     d88:	0c f4       	brge	.+2      	; 0xd8c <_Z13getNoteByFreqP4Noted+0x26a>
     d8a:	04 cf       	rjmp	.-504    	; 0xb94 <_Z13getNoteByFreqP4Noted+0x72>
     d8c:	8b e9       	ldi	r24, 0x9B	; 155
     d8e:	98 e4       	ldi	r25, 0x48	; 72
     d90:	ae ef       	ldi	r26, 0xFE	; 254
     d92:	b1 e4       	ldi	r27, 0x41	; 65
     d94:	8f 83       	std	Y+7, r24	; 0x07
     d96:	98 87       	std	Y+8, r25	; 0x08
     d98:	a9 87       	std	Y+9, r26	; 0x09
     d9a:	ba 87       	std	Y+10, r27	; 0x0a
     d9c:	0f 2e       	mov	r0, r31
     d9e:	c1 2c       	mov	r12, r1
     da0:	d1 2c       	mov	r13, r1
     da2:	f0 e8       	ldi	r31, 0x80	; 128
     da4:	ef 2e       	mov	r14, r31
     da6:	ff e3       	ldi	r31, 0x3F	; 63
     da8:	ff 2e       	mov	r15, r31
     daa:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     dac:	23 e1       	ldi	r18, 0x13	; 19
     dae:	30 ed       	ldi	r19, 0xD0	; 208
     db0:	42 e8       	ldi	r20, 0x82	; 130
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	c7 01       	movw	r24, r14
     db6:	b6 01       	movw	r22, r12
     db8:	8c d2       	rcall	.+1304   	; 0x12d2 <__mulsf3>
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	69 81       	ldd	r22, Y+1	; 0x01
     dc0:	7a 81       	ldd	r23, Y+2	; 0x02
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	ae d0       	rcall	.+348    	; 0xf24 <__subsf3>
     dc8:	7e d1       	rcall	.+764    	; 0x10c6 <__fixsfsi>
     dca:	9b 01       	movw	r18, r22
     dcc:	77 23       	and	r23, r23
     dce:	24 f4       	brge	.+8      	; 0xdd8 <_Z13getNoteByFreqP4Noted+0x2b6>
     dd0:	22 27       	eor	r18, r18
     dd2:	33 27       	eor	r19, r19
     dd4:	26 1b       	sub	r18, r22
     dd6:	37 0b       	sbc	r19, r23
     dd8:	b9 01       	movw	r22, r18
     dda:	33 0f       	add	r19, r19
     ddc:	88 0b       	sbc	r24, r24
     dde:	99 0b       	sbc	r25, r25
     de0:	a5 d1       	rcall	.+842    	; 0x112c <__floatsisf>
     de2:	76 2e       	mov	r7, r22
     de4:	47 2e       	mov	r4, r23
     de6:	58 2e       	mov	r5, r24
     de8:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     dea:	22 e5       	ldi	r18, 0x52	; 82
     dec:	38 e4       	ldi	r19, 0x48	; 72
     dee:	4e ef       	ldi	r20, 0xFE	; 254
     df0:	53 e4       	ldi	r21, 0x43	; 67
     df2:	fd d0       	rcall	.+506    	; 0xfee <__cmpsf2>
     df4:	88 23       	and	r24, r24
     df6:	44 f4       	brge	.+16     	; 0xe08 <_Z13getNoteByFreqP4Noted+0x2e6>
     df8:	a1 e8       	ldi	r26, 0x81	; 129
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     dfc:	22 24       	eor	r2, r2
     dfe:	23 94       	inc	r2
     e00:	31 2c       	mov	r3, r1
     e02:	bc 87       	std	Y+12, r27	; 0x0c
     e04:	ab 87       	std	Y+11, r26	; 0x0b
     e06:	eb ce       	rjmp	.-554    	; 0xbde <_Z13getNoteByFreqP4Noted+0xbc>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     e08:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <_ZL10noteSharps+0xb>
     e0c:	ed 81       	ldd	r30, Y+5	; 0x05
     e0e:	fe 81       	ldd	r31, Y+6	; 0x06
     e10:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     e12:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL8slopeTol>
     e16:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     e18:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <_ZL9noteNames+0x8>
     e1c:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <_ZL9noteNames+0x9>
     e20:	40 91 7b 00 	lds	r20, 0x007B	; 0x80007b <_ZL9noteNames+0xa>
     e24:	50 91 7c 00 	lds	r21, 0x007C	; 0x80007c <_ZL9noteNames+0xb>
     e28:	c7 01       	movw	r24, r14
     e2a:	b6 01       	movw	r22, r12
     e2c:	52 d2       	rcall	.+1188   	; 0x12d2 <__mulsf3>
     e2e:	2b 01       	movw	r4, r22
     e30:	3c 01       	movw	r6, r24
     e32:	ad 81       	ldd	r26, Y+5	; 0x05
     e34:	be 81       	ldd	r27, Y+6	; 0x06
     e36:	12 96       	adiw	r26, 0x02	; 2
     e38:	6d 93       	st	X+, r22
     e3a:	7d 93       	st	X+, r23
     e3c:	8d 93       	st	X+, r24
     e3e:	9c 93       	st	X, r25
     e40:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	1e 96       	adiw	r26, 0x0e	; 14
     e46:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     e48:	23 e1       	ldi	r18, 0x13	; 19
     e4a:	30 ed       	ldi	r19, 0xD0	; 208
     e4c:	42 e8       	ldi	r20, 0x82	; 130
     e4e:	51 e4       	ldi	r21, 0x41	; 65
     e50:	c7 01       	movw	r24, r14
     e52:	b6 01       	movw	r22, r12
     e54:	3e d2       	rcall	.+1148   	; 0x12d2 <__mulsf3>
     e56:	a3 01       	movw	r20, r6
     e58:	92 01       	movw	r18, r4
     e5a:	64 d0       	rcall	.+200    	; 0xf24 <__subsf3>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	36 d2       	rcall	.+1132   	; 0x12d2 <__mulsf3>
     e66:	a3 01       	movw	r20, r6
     e68:	92 01       	movw	r18, r4
     e6a:	5d d0       	rcall	.+186    	; 0xf26 <__addsf3>
     e6c:	ed 81       	ldd	r30, Y+5	; 0x05
     e6e:	fe 81       	ldd	r31, Y+6	; 0x06
     e70:	62 87       	std	Z+10, r22	; 0x0a
     e72:	73 87       	std	Z+11, r23	; 0x0b
     e74:	84 87       	std	Z+12, r24	; 0x0c
     e76:	95 87       	std	Z+13, r25	; 0x0d
     e78:	22 24       	eor	r2, r2
     e7a:	2a 94       	dec	r2
     e7c:	32 2c       	mov	r3, r2
     e7e:	50 cf       	rjmp	.-352    	; 0xd20 <_Z13getNoteByFreqP4Noted+0x1fe>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     e80:	2c 96       	adiw	r28, 0x0c	; 12
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
     ea4:	7f 90       	pop	r7
     ea6:	6f 90       	pop	r6
     ea8:	5f 90       	pop	r5
     eaa:	4f 90       	pop	r4
     eac:	3f 90       	pop	r3
     eae:	2f 90       	pop	r2
     eb0:	08 95       	ret

00000eb2 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     eb2:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     eb4:	28 b3       	in	r18, 0x18	; 24
     eb6:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     eb8:	38 b3       	in	r19, 0x18	; 24
     eba:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     ebc:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     ebe:	f8 94       	cli

  while (datlen--) {
     ec0:	61 15       	cp	r22, r1
     ec2:	71 05       	cpc	r23, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <ws2812_sendarray+0x16>
     ec6:	21 c0       	rjmp	.+66     	; 0xf0a <loop301+0x38>
     ec8:	fc 01       	movw	r30, r24
     eca:	68 0f       	add	r22, r24
     ecc:	79 1f       	adc	r23, r25
    curbyte=*data++;
     ece:	91 91       	ld	r25, Z+
    
    asm volatile(
     ed0:	88 e0       	ldi	r24, 0x08	; 8

00000ed2 <loop301>:
     ed2:	38 bb       	out	0x18, r19	; 24
     ed4:	97 ff       	sbrs	r25, 7
     ed6:	28 bb       	out	0x18, r18	; 24
     ed8:	99 0f       	add	r25, r25
     eda:	00 00       	nop
     edc:	00 c0       	rjmp	.+0      	; 0xede <loop301+0xc>
     ede:	28 bb       	out	0x18, r18	; 24
     ee0:	00 00       	nop
     ee2:	00 c0       	rjmp	.+0      	; 0xee4 <loop301+0x12>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <loop301+0x14>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <loop301+0x16>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <loop301+0x18>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <loop301+0x1a>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <loop301+0x1c>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <loop301+0x1e>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <loop301+0x20>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <loop301+0x22>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <loop301+0x24>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <loop301+0x26>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <loop301+0x28>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <loop301+0x2a>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <loop301+0x2c>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <loop301+0x2e>
     f00:	8a 95       	dec	r24
     f02:	39 f7       	brne	.-50     	; 0xed2 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     f04:	e6 17       	cp	r30, r22
     f06:	f7 07       	cpc	r31, r23
     f08:	11 f7       	brne	.-60     	; 0xece <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     f0a:	4f bf       	out	0x3f, r20	; 63
     f0c:	08 95       	ret

00000f0e <_Z10USART_Initj>:
#include "serial.h"

void USART_Init (unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
     f0e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
     f10:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     f12:	88 e1       	ldi	r24, 0x18	; 24
     f14:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     f16:	8e e8       	ldi	r24, 0x8E	; 142
     f18:	80 bd       	out	0x20, r24	; 32
     f1a:	08 95       	ret

00000f1c <_Z14USART_Transmith>:
}

void USART_Transmit (unsigned char data) {
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
     f1c:	5d 9b       	sbis	0x0b, 5	; 11
     f1e:	fe cf       	rjmp	.-4      	; 0xf1c <_Z14USART_Transmith>
	/* Put data into buffer, sends the data */
	UDR = data;
     f20:	8c b9       	out	0x0c, r24	; 12
     f22:	08 95       	ret

00000f24 <__subsf3>:
     f24:	50 58       	subi	r21, 0x80	; 128

00000f26 <__addsf3>:
     f26:	bb 27       	eor	r27, r27
     f28:	aa 27       	eor	r26, r26
     f2a:	0e d0       	rcall	.+28     	; 0xf48 <__addsf3x>
     f2c:	94 c1       	rjmp	.+808    	; 0x1256 <__fp_round>
     f2e:	85 d1       	rcall	.+778    	; 0x123a <__fp_pscA>
     f30:	30 f0       	brcs	.+12     	; 0xf3e <__addsf3+0x18>
     f32:	8a d1       	rcall	.+788    	; 0x1248 <__fp_pscB>
     f34:	20 f0       	brcs	.+8      	; 0xf3e <__addsf3+0x18>
     f36:	31 f4       	brne	.+12     	; 0xf44 <__addsf3+0x1e>
     f38:	9f 3f       	cpi	r25, 0xFF	; 255
     f3a:	11 f4       	brne	.+4      	; 0xf40 <__addsf3+0x1a>
     f3c:	1e f4       	brtc	.+6      	; 0xf44 <__addsf3+0x1e>
     f3e:	7a c1       	rjmp	.+756    	; 0x1234 <__fp_nan>
     f40:	0e f4       	brtc	.+2      	; 0xf44 <__addsf3+0x1e>
     f42:	e0 95       	com	r30
     f44:	e7 fb       	bst	r30, 7
     f46:	70 c1       	rjmp	.+736    	; 0x1228 <__fp_inf>

00000f48 <__addsf3x>:
     f48:	e9 2f       	mov	r30, r25
     f4a:	96 d1       	rcall	.+812    	; 0x1278 <__fp_split3>
     f4c:	80 f3       	brcs	.-32     	; 0xf2e <__addsf3+0x8>
     f4e:	ba 17       	cp	r27, r26
     f50:	62 07       	cpc	r22, r18
     f52:	73 07       	cpc	r23, r19
     f54:	84 07       	cpc	r24, r20
     f56:	95 07       	cpc	r25, r21
     f58:	18 f0       	brcs	.+6      	; 0xf60 <__addsf3x+0x18>
     f5a:	71 f4       	brne	.+28     	; 0xf78 <__addsf3x+0x30>
     f5c:	9e f5       	brtc	.+102    	; 0xfc4 <__addsf3x+0x7c>
     f5e:	ae c1       	rjmp	.+860    	; 0x12bc <__fp_zero>
     f60:	0e f4       	brtc	.+2      	; 0xf64 <__addsf3x+0x1c>
     f62:	e0 95       	com	r30
     f64:	0b 2e       	mov	r0, r27
     f66:	ba 2f       	mov	r27, r26
     f68:	a0 2d       	mov	r26, r0
     f6a:	0b 01       	movw	r0, r22
     f6c:	b9 01       	movw	r22, r18
     f6e:	90 01       	movw	r18, r0
     f70:	0c 01       	movw	r0, r24
     f72:	ca 01       	movw	r24, r20
     f74:	a0 01       	movw	r20, r0
     f76:	11 24       	eor	r1, r1
     f78:	ff 27       	eor	r31, r31
     f7a:	59 1b       	sub	r21, r25
     f7c:	99 f0       	breq	.+38     	; 0xfa4 <__addsf3x+0x5c>
     f7e:	59 3f       	cpi	r21, 0xF9	; 249
     f80:	50 f4       	brcc	.+20     	; 0xf96 <__addsf3x+0x4e>
     f82:	50 3e       	cpi	r21, 0xE0	; 224
     f84:	68 f1       	brcs	.+90     	; 0xfe0 <__addsf3x+0x98>
     f86:	1a 16       	cp	r1, r26
     f88:	f0 40       	sbci	r31, 0x00	; 0
     f8a:	a2 2f       	mov	r26, r18
     f8c:	23 2f       	mov	r18, r19
     f8e:	34 2f       	mov	r19, r20
     f90:	44 27       	eor	r20, r20
     f92:	58 5f       	subi	r21, 0xF8	; 248
     f94:	f3 cf       	rjmp	.-26     	; 0xf7c <__addsf3x+0x34>
     f96:	46 95       	lsr	r20
     f98:	37 95       	ror	r19
     f9a:	27 95       	ror	r18
     f9c:	a7 95       	ror	r26
     f9e:	f0 40       	sbci	r31, 0x00	; 0
     fa0:	53 95       	inc	r21
     fa2:	c9 f7       	brne	.-14     	; 0xf96 <__addsf3x+0x4e>
     fa4:	7e f4       	brtc	.+30     	; 0xfc4 <__addsf3x+0x7c>
     fa6:	1f 16       	cp	r1, r31
     fa8:	ba 0b       	sbc	r27, r26
     faa:	62 0b       	sbc	r22, r18
     fac:	73 0b       	sbc	r23, r19
     fae:	84 0b       	sbc	r24, r20
     fb0:	ba f0       	brmi	.+46     	; 0xfe0 <__addsf3x+0x98>
     fb2:	91 50       	subi	r25, 0x01	; 1
     fb4:	a1 f0       	breq	.+40     	; 0xfde <__addsf3x+0x96>
     fb6:	ff 0f       	add	r31, r31
     fb8:	bb 1f       	adc	r27, r27
     fba:	66 1f       	adc	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	c2 f7       	brpl	.-16     	; 0xfb2 <__addsf3x+0x6a>
     fc2:	0e c0       	rjmp	.+28     	; 0xfe0 <__addsf3x+0x98>
     fc4:	ba 0f       	add	r27, r26
     fc6:	62 1f       	adc	r22, r18
     fc8:	73 1f       	adc	r23, r19
     fca:	84 1f       	adc	r24, r20
     fcc:	48 f4       	brcc	.+18     	; 0xfe0 <__addsf3x+0x98>
     fce:	87 95       	ror	r24
     fd0:	77 95       	ror	r23
     fd2:	67 95       	ror	r22
     fd4:	b7 95       	ror	r27
     fd6:	f7 95       	ror	r31
     fd8:	9e 3f       	cpi	r25, 0xFE	; 254
     fda:	08 f0       	brcs	.+2      	; 0xfde <__addsf3x+0x96>
     fdc:	b3 cf       	rjmp	.-154    	; 0xf44 <__addsf3+0x1e>
     fde:	93 95       	inc	r25
     fe0:	88 0f       	add	r24, r24
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <__addsf3x+0x9e>
     fe4:	99 27       	eor	r25, r25
     fe6:	ee 0f       	add	r30, r30
     fe8:	97 95       	ror	r25
     fea:	87 95       	ror	r24
     fec:	08 95       	ret

00000fee <__cmpsf2>:
     fee:	f8 d0       	rcall	.+496    	; 0x11e0 <__fp_cmp>
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <__cmpsf2+0x6>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <__divsf3>:
     ff6:	0c d0       	rcall	.+24     	; 0x1010 <__divsf3x>
     ff8:	2e c1       	rjmp	.+604    	; 0x1256 <__fp_round>
     ffa:	26 d1       	rcall	.+588    	; 0x1248 <__fp_pscB>
     ffc:	40 f0       	brcs	.+16     	; 0x100e <__divsf3+0x18>
     ffe:	1d d1       	rcall	.+570    	; 0x123a <__fp_pscA>
    1000:	30 f0       	brcs	.+12     	; 0x100e <__divsf3+0x18>
    1002:	21 f4       	brne	.+8      	; 0x100c <__divsf3+0x16>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	19 f0       	breq	.+6      	; 0x100e <__divsf3+0x18>
    1008:	0f c1       	rjmp	.+542    	; 0x1228 <__fp_inf>
    100a:	51 11       	cpse	r21, r1
    100c:	58 c1       	rjmp	.+688    	; 0x12be <__fp_szero>
    100e:	12 c1       	rjmp	.+548    	; 0x1234 <__fp_nan>

00001010 <__divsf3x>:
    1010:	33 d1       	rcall	.+614    	; 0x1278 <__fp_split3>
    1012:	98 f3       	brcs	.-26     	; 0xffa <__divsf3+0x4>

00001014 <__divsf3_pse>:
    1014:	99 23       	and	r25, r25
    1016:	c9 f3       	breq	.-14     	; 0x100a <__divsf3+0x14>
    1018:	55 23       	and	r21, r21
    101a:	b1 f3       	breq	.-20     	; 0x1008 <__divsf3+0x12>
    101c:	95 1b       	sub	r25, r21
    101e:	55 0b       	sbc	r21, r21
    1020:	bb 27       	eor	r27, r27
    1022:	aa 27       	eor	r26, r26
    1024:	62 17       	cp	r22, r18
    1026:	73 07       	cpc	r23, r19
    1028:	84 07       	cpc	r24, r20
    102a:	38 f0       	brcs	.+14     	; 0x103a <__divsf3_pse+0x26>
    102c:	9f 5f       	subi	r25, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	44 1f       	adc	r20, r20
    1036:	aa 1f       	adc	r26, r26
    1038:	a9 f3       	breq	.-22     	; 0x1024 <__divsf3_pse+0x10>
    103a:	33 d0       	rcall	.+102    	; 0x10a2 <__divsf3_pse+0x8e>
    103c:	0e 2e       	mov	r0, r30
    103e:	3a f0       	brmi	.+14     	; 0x104e <__divsf3_pse+0x3a>
    1040:	e0 e8       	ldi	r30, 0x80	; 128
    1042:	30 d0       	rcall	.+96     	; 0x10a4 <__divsf3_pse+0x90>
    1044:	91 50       	subi	r25, 0x01	; 1
    1046:	50 40       	sbci	r21, 0x00	; 0
    1048:	e6 95       	lsr	r30
    104a:	00 1c       	adc	r0, r0
    104c:	ca f7       	brpl	.-14     	; 0x1040 <__divsf3_pse+0x2c>
    104e:	29 d0       	rcall	.+82     	; 0x10a2 <__divsf3_pse+0x8e>
    1050:	fe 2f       	mov	r31, r30
    1052:	27 d0       	rcall	.+78     	; 0x10a2 <__divsf3_pse+0x8e>
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	88 1f       	adc	r24, r24
    105a:	bb 1f       	adc	r27, r27
    105c:	26 17       	cp	r18, r22
    105e:	37 07       	cpc	r19, r23
    1060:	48 07       	cpc	r20, r24
    1062:	ab 07       	cpc	r26, r27
    1064:	b0 e8       	ldi	r27, 0x80	; 128
    1066:	09 f0       	breq	.+2      	; 0x106a <__divsf3_pse+0x56>
    1068:	bb 0b       	sbc	r27, r27
    106a:	80 2d       	mov	r24, r0
    106c:	bf 01       	movw	r22, r30
    106e:	ff 27       	eor	r31, r31
    1070:	93 58       	subi	r25, 0x83	; 131
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	2a f0       	brmi	.+10     	; 0x1080 <__divsf3_pse+0x6c>
    1076:	9e 3f       	cpi	r25, 0xFE	; 254
    1078:	51 05       	cpc	r21, r1
    107a:	68 f0       	brcs	.+26     	; 0x1096 <__divsf3_pse+0x82>
    107c:	d5 c0       	rjmp	.+426    	; 0x1228 <__fp_inf>
    107e:	1f c1       	rjmp	.+574    	; 0x12be <__fp_szero>
    1080:	5f 3f       	cpi	r21, 0xFF	; 255
    1082:	ec f3       	brlt	.-6      	; 0x107e <__divsf3_pse+0x6a>
    1084:	98 3e       	cpi	r25, 0xE8	; 232
    1086:	dc f3       	brlt	.-10     	; 0x107e <__divsf3_pse+0x6a>
    1088:	86 95       	lsr	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	b7 95       	ror	r27
    1090:	f7 95       	ror	r31
    1092:	9f 5f       	subi	r25, 0xFF	; 255
    1094:	c9 f7       	brne	.-14     	; 0x1088 <__divsf3_pse+0x74>
    1096:	88 0f       	add	r24, r24
    1098:	91 1d       	adc	r25, r1
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24
    109e:	97 f9       	bld	r25, 7
    10a0:	08 95       	ret
    10a2:	e1 e0       	ldi	r30, 0x01	; 1
    10a4:	66 0f       	add	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	bb 1f       	adc	r27, r27
    10ac:	62 17       	cp	r22, r18
    10ae:	73 07       	cpc	r23, r19
    10b0:	84 07       	cpc	r24, r20
    10b2:	ba 07       	cpc	r27, r26
    10b4:	20 f0       	brcs	.+8      	; 0x10be <__divsf3_pse+0xaa>
    10b6:	62 1b       	sub	r22, r18
    10b8:	73 0b       	sbc	r23, r19
    10ba:	84 0b       	sbc	r24, r20
    10bc:	ba 0b       	sbc	r27, r26
    10be:	ee 1f       	adc	r30, r30
    10c0:	88 f7       	brcc	.-30     	; 0x10a4 <__divsf3_pse+0x90>
    10c2:	e0 95       	com	r30
    10c4:	08 95       	ret

000010c6 <__fixsfsi>:
    10c6:	04 d0       	rcall	.+8      	; 0x10d0 <__fixunssfsi>
    10c8:	68 94       	set
    10ca:	b1 11       	cpse	r27, r1
    10cc:	f8 c0       	rjmp	.+496    	; 0x12be <__fp_szero>
    10ce:	08 95       	ret

000010d0 <__fixunssfsi>:
    10d0:	db d0       	rcall	.+438    	; 0x1288 <__fp_splitA>
    10d2:	88 f0       	brcs	.+34     	; 0x10f6 <__fixunssfsi+0x26>
    10d4:	9f 57       	subi	r25, 0x7F	; 127
    10d6:	90 f0       	brcs	.+36     	; 0x10fc <__fixunssfsi+0x2c>
    10d8:	b9 2f       	mov	r27, r25
    10da:	99 27       	eor	r25, r25
    10dc:	b7 51       	subi	r27, 0x17	; 23
    10de:	a0 f0       	brcs	.+40     	; 0x1108 <__fixunssfsi+0x38>
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <__fixunssfsi+0x46>
    10e2:	66 0f       	add	r22, r22
    10e4:	77 1f       	adc	r23, r23
    10e6:	88 1f       	adc	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	1a f0       	brmi	.+6      	; 0x10f2 <__fixunssfsi+0x22>
    10ec:	ba 95       	dec	r27
    10ee:	c9 f7       	brne	.-14     	; 0x10e2 <__fixunssfsi+0x12>
    10f0:	12 c0       	rjmp	.+36     	; 0x1116 <__fixunssfsi+0x46>
    10f2:	b1 30       	cpi	r27, 0x01	; 1
    10f4:	81 f0       	breq	.+32     	; 0x1116 <__fixunssfsi+0x46>
    10f6:	e2 d0       	rcall	.+452    	; 0x12bc <__fp_zero>
    10f8:	b1 e0       	ldi	r27, 0x01	; 1
    10fa:	08 95       	ret
    10fc:	df c0       	rjmp	.+446    	; 0x12bc <__fp_zero>
    10fe:	67 2f       	mov	r22, r23
    1100:	78 2f       	mov	r23, r24
    1102:	88 27       	eor	r24, r24
    1104:	b8 5f       	subi	r27, 0xF8	; 248
    1106:	39 f0       	breq	.+14     	; 0x1116 <__fixunssfsi+0x46>
    1108:	b9 3f       	cpi	r27, 0xF9	; 249
    110a:	cc f3       	brlt	.-14     	; 0x10fe <__fixunssfsi+0x2e>
    110c:	86 95       	lsr	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b3 95       	inc	r27
    1114:	d9 f7       	brne	.-10     	; 0x110c <__fixunssfsi+0x3c>
    1116:	3e f4       	brtc	.+14     	; 0x1126 <__fixunssfsi+0x56>
    1118:	90 95       	com	r25
    111a:	80 95       	com	r24
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	08 95       	ret

00001128 <__floatunsisf>:
    1128:	e8 94       	clt
    112a:	09 c0       	rjmp	.+18     	; 0x113e <__floatsisf+0x12>

0000112c <__floatsisf>:
    112c:	97 fb       	bst	r25, 7
    112e:	3e f4       	brtc	.+14     	; 0x113e <__floatsisf+0x12>
    1130:	90 95       	com	r25
    1132:	80 95       	com	r24
    1134:	70 95       	com	r23
    1136:	61 95       	neg	r22
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	99 23       	and	r25, r25
    1140:	a9 f0       	breq	.+42     	; 0x116c <__floatsisf+0x40>
    1142:	f9 2f       	mov	r31, r25
    1144:	96 e9       	ldi	r25, 0x96	; 150
    1146:	bb 27       	eor	r27, r27
    1148:	93 95       	inc	r25
    114a:	f6 95       	lsr	r31
    114c:	87 95       	ror	r24
    114e:	77 95       	ror	r23
    1150:	67 95       	ror	r22
    1152:	b7 95       	ror	r27
    1154:	f1 11       	cpse	r31, r1
    1156:	f8 cf       	rjmp	.-16     	; 0x1148 <__floatsisf+0x1c>
    1158:	fa f4       	brpl	.+62     	; 0x1198 <__floatsisf+0x6c>
    115a:	bb 0f       	add	r27, r27
    115c:	11 f4       	brne	.+4      	; 0x1162 <__floatsisf+0x36>
    115e:	60 ff       	sbrs	r22, 0
    1160:	1b c0       	rjmp	.+54     	; 0x1198 <__floatsisf+0x6c>
    1162:	6f 5f       	subi	r22, 0xFF	; 255
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	16 c0       	rjmp	.+44     	; 0x1198 <__floatsisf+0x6c>
    116c:	88 23       	and	r24, r24
    116e:	11 f0       	breq	.+4      	; 0x1174 <__floatsisf+0x48>
    1170:	96 e9       	ldi	r25, 0x96	; 150
    1172:	11 c0       	rjmp	.+34     	; 0x1196 <__floatsisf+0x6a>
    1174:	77 23       	and	r23, r23
    1176:	21 f0       	breq	.+8      	; 0x1180 <__floatsisf+0x54>
    1178:	9e e8       	ldi	r25, 0x8E	; 142
    117a:	87 2f       	mov	r24, r23
    117c:	76 2f       	mov	r23, r22
    117e:	05 c0       	rjmp	.+10     	; 0x118a <__floatsisf+0x5e>
    1180:	66 23       	and	r22, r22
    1182:	71 f0       	breq	.+28     	; 0x11a0 <__floatsisf+0x74>
    1184:	96 e8       	ldi	r25, 0x86	; 134
    1186:	86 2f       	mov	r24, r22
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	2a f0       	brmi	.+10     	; 0x1198 <__floatsisf+0x6c>
    118e:	9a 95       	dec	r25
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	da f7       	brpl	.-10     	; 0x118e <__floatsisf+0x62>
    1198:	88 0f       	add	r24, r24
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	97 f9       	bld	r25, 7
    11a0:	08 95       	ret

000011a2 <fmin>:
    11a2:	99 0f       	add	r25, r25
    11a4:	bb 0b       	sbc	r27, r27
    11a6:	55 0f       	add	r21, r21
    11a8:	aa 0b       	sbc	r26, r26
    11aa:	e0 e8       	ldi	r30, 0x80	; 128
    11ac:	fe ef       	ldi	r31, 0xFE	; 254
    11ae:	16 16       	cp	r1, r22
    11b0:	17 06       	cpc	r1, r23
    11b2:	e8 07       	cpc	r30, r24
    11b4:	f9 07       	cpc	r31, r25
    11b6:	70 f0       	brcs	.+28     	; 0x11d4 <fmin+0x32>
    11b8:	12 16       	cp	r1, r18
    11ba:	13 06       	cpc	r1, r19
    11bc:	e4 07       	cpc	r30, r20
    11be:	f5 07       	cpc	r31, r21
    11c0:	60 f0       	brcs	.+24     	; 0x11da <fmin+0x38>
    11c2:	ba 17       	cp	r27, r26
    11c4:	54 f0       	brlt	.+20     	; 0x11da <fmin+0x38>
    11c6:	31 f4       	brne	.+12     	; 0x11d4 <fmin+0x32>
    11c8:	26 17       	cp	r18, r22
    11ca:	37 07       	cpc	r19, r23
    11cc:	48 07       	cpc	r20, r24
    11ce:	59 07       	cpc	r21, r25
    11d0:	a7 95       	ror	r26
    11d2:	1b f4       	brvc	.+6      	; 0x11da <fmin+0x38>
    11d4:	b9 01       	movw	r22, r18
    11d6:	ca 01       	movw	r24, r20
    11d8:	ba 2f       	mov	r27, r26
    11da:	b6 95       	lsr	r27
    11dc:	97 95       	ror	r25
    11de:	08 95       	ret

000011e0 <__fp_cmp>:
    11e0:	99 0f       	add	r25, r25
    11e2:	00 08       	sbc	r0, r0
    11e4:	55 0f       	add	r21, r21
    11e6:	aa 0b       	sbc	r26, r26
    11e8:	e0 e8       	ldi	r30, 0x80	; 128
    11ea:	fe ef       	ldi	r31, 0xFE	; 254
    11ec:	16 16       	cp	r1, r22
    11ee:	17 06       	cpc	r1, r23
    11f0:	e8 07       	cpc	r30, r24
    11f2:	f9 07       	cpc	r31, r25
    11f4:	c0 f0       	brcs	.+48     	; 0x1226 <__fp_cmp+0x46>
    11f6:	12 16       	cp	r1, r18
    11f8:	13 06       	cpc	r1, r19
    11fa:	e4 07       	cpc	r30, r20
    11fc:	f5 07       	cpc	r31, r21
    11fe:	98 f0       	brcs	.+38     	; 0x1226 <__fp_cmp+0x46>
    1200:	62 1b       	sub	r22, r18
    1202:	73 0b       	sbc	r23, r19
    1204:	84 0b       	sbc	r24, r20
    1206:	95 0b       	sbc	r25, r21
    1208:	39 f4       	brne	.+14     	; 0x1218 <__fp_cmp+0x38>
    120a:	0a 26       	eor	r0, r26
    120c:	61 f0       	breq	.+24     	; 0x1226 <__fp_cmp+0x46>
    120e:	23 2b       	or	r18, r19
    1210:	24 2b       	or	r18, r20
    1212:	25 2b       	or	r18, r21
    1214:	21 f4       	brne	.+8      	; 0x121e <__fp_cmp+0x3e>
    1216:	08 95       	ret
    1218:	0a 26       	eor	r0, r26
    121a:	09 f4       	brne	.+2      	; 0x121e <__fp_cmp+0x3e>
    121c:	a1 40       	sbci	r26, 0x01	; 1
    121e:	a6 95       	lsr	r26
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	81 1d       	adc	r24, r1
    1224:	81 1d       	adc	r24, r1
    1226:	08 95       	ret

00001228 <__fp_inf>:
    1228:	97 f9       	bld	r25, 7
    122a:	9f 67       	ori	r25, 0x7F	; 127
    122c:	80 e8       	ldi	r24, 0x80	; 128
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	08 95       	ret

00001234 <__fp_nan>:
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	80 ec       	ldi	r24, 0xC0	; 192
    1238:	08 95       	ret

0000123a <__fp_pscA>:
    123a:	00 24       	eor	r0, r0
    123c:	0a 94       	dec	r0
    123e:	16 16       	cp	r1, r22
    1240:	17 06       	cpc	r1, r23
    1242:	18 06       	cpc	r1, r24
    1244:	09 06       	cpc	r0, r25
    1246:	08 95       	ret

00001248 <__fp_pscB>:
    1248:	00 24       	eor	r0, r0
    124a:	0a 94       	dec	r0
    124c:	12 16       	cp	r1, r18
    124e:	13 06       	cpc	r1, r19
    1250:	14 06       	cpc	r1, r20
    1252:	05 06       	cpc	r0, r21
    1254:	08 95       	ret

00001256 <__fp_round>:
    1256:	09 2e       	mov	r0, r25
    1258:	03 94       	inc	r0
    125a:	00 0c       	add	r0, r0
    125c:	11 f4       	brne	.+4      	; 0x1262 <__fp_round+0xc>
    125e:	88 23       	and	r24, r24
    1260:	52 f0       	brmi	.+20     	; 0x1276 <__fp_round+0x20>
    1262:	bb 0f       	add	r27, r27
    1264:	40 f4       	brcc	.+16     	; 0x1276 <__fp_round+0x20>
    1266:	bf 2b       	or	r27, r31
    1268:	11 f4       	brne	.+4      	; 0x126e <__fp_round+0x18>
    126a:	60 ff       	sbrs	r22, 0
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <__fp_round+0x20>
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	08 95       	ret

00001278 <__fp_split3>:
    1278:	57 fd       	sbrc	r21, 7
    127a:	90 58       	subi	r25, 0x80	; 128
    127c:	44 0f       	add	r20, r20
    127e:	55 1f       	adc	r21, r21
    1280:	59 f0       	breq	.+22     	; 0x1298 <__fp_splitA+0x10>
    1282:	5f 3f       	cpi	r21, 0xFF	; 255
    1284:	71 f0       	breq	.+28     	; 0x12a2 <__fp_splitA+0x1a>
    1286:	47 95       	ror	r20

00001288 <__fp_splitA>:
    1288:	88 0f       	add	r24, r24
    128a:	97 fb       	bst	r25, 7
    128c:	99 1f       	adc	r25, r25
    128e:	61 f0       	breq	.+24     	; 0x12a8 <__fp_splitA+0x20>
    1290:	9f 3f       	cpi	r25, 0xFF	; 255
    1292:	79 f0       	breq	.+30     	; 0x12b2 <__fp_splitA+0x2a>
    1294:	87 95       	ror	r24
    1296:	08 95       	ret
    1298:	12 16       	cp	r1, r18
    129a:	13 06       	cpc	r1, r19
    129c:	14 06       	cpc	r1, r20
    129e:	55 1f       	adc	r21, r21
    12a0:	f2 cf       	rjmp	.-28     	; 0x1286 <__fp_split3+0xe>
    12a2:	46 95       	lsr	r20
    12a4:	f1 df       	rcall	.-30     	; 0x1288 <__fp_splitA>
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <__fp_splitA+0x30>
    12a8:	16 16       	cp	r1, r22
    12aa:	17 06       	cpc	r1, r23
    12ac:	18 06       	cpc	r1, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	f1 cf       	rjmp	.-30     	; 0x1294 <__fp_splitA+0xc>
    12b2:	86 95       	lsr	r24
    12b4:	71 05       	cpc	r23, r1
    12b6:	61 05       	cpc	r22, r1
    12b8:	08 94       	sec
    12ba:	08 95       	ret

000012bc <__fp_zero>:
    12bc:	e8 94       	clt

000012be <__fp_szero>:
    12be:	bb 27       	eor	r27, r27
    12c0:	66 27       	eor	r22, r22
    12c2:	77 27       	eor	r23, r23
    12c4:	cb 01       	movw	r24, r22
    12c6:	97 f9       	bld	r25, 7
    12c8:	08 95       	ret

000012ca <__gesf2>:
    12ca:	8a df       	rcall	.-236    	; 0x11e0 <__fp_cmp>
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <__gesf2+0x6>
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__mulsf3>:
    12d2:	0b d0       	rcall	.+22     	; 0x12ea <__mulsf3x>
    12d4:	c0 cf       	rjmp	.-128    	; 0x1256 <__fp_round>
    12d6:	b1 df       	rcall	.-158    	; 0x123a <__fp_pscA>
    12d8:	28 f0       	brcs	.+10     	; 0x12e4 <__mulsf3+0x12>
    12da:	b6 df       	rcall	.-148    	; 0x1248 <__fp_pscB>
    12dc:	18 f0       	brcs	.+6      	; 0x12e4 <__mulsf3+0x12>
    12de:	95 23       	and	r25, r21
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__mulsf3+0x12>
    12e2:	a2 cf       	rjmp	.-188    	; 0x1228 <__fp_inf>
    12e4:	a7 cf       	rjmp	.-178    	; 0x1234 <__fp_nan>
    12e6:	11 24       	eor	r1, r1
    12e8:	ea cf       	rjmp	.-44     	; 0x12be <__fp_szero>

000012ea <__mulsf3x>:
    12ea:	c6 df       	rcall	.-116    	; 0x1278 <__fp_split3>
    12ec:	a0 f3       	brcs	.-24     	; 0x12d6 <__mulsf3+0x4>

000012ee <__mulsf3_pse>:
    12ee:	95 9f       	mul	r25, r21
    12f0:	d1 f3       	breq	.-12     	; 0x12e6 <__mulsf3+0x14>
    12f2:	95 0f       	add	r25, r21
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	55 1f       	adc	r21, r21
    12f8:	62 9f       	mul	r22, r18
    12fa:	f0 01       	movw	r30, r0
    12fc:	72 9f       	mul	r23, r18
    12fe:	bb 27       	eor	r27, r27
    1300:	f0 0d       	add	r31, r0
    1302:	b1 1d       	adc	r27, r1
    1304:	63 9f       	mul	r22, r19
    1306:	aa 27       	eor	r26, r26
    1308:	f0 0d       	add	r31, r0
    130a:	b1 1d       	adc	r27, r1
    130c:	aa 1f       	adc	r26, r26
    130e:	64 9f       	mul	r22, r20
    1310:	66 27       	eor	r22, r22
    1312:	b0 0d       	add	r27, r0
    1314:	a1 1d       	adc	r26, r1
    1316:	66 1f       	adc	r22, r22
    1318:	82 9f       	mul	r24, r18
    131a:	22 27       	eor	r18, r18
    131c:	b0 0d       	add	r27, r0
    131e:	a1 1d       	adc	r26, r1
    1320:	62 1f       	adc	r22, r18
    1322:	73 9f       	mul	r23, r19
    1324:	b0 0d       	add	r27, r0
    1326:	a1 1d       	adc	r26, r1
    1328:	62 1f       	adc	r22, r18
    132a:	83 9f       	mul	r24, r19
    132c:	a0 0d       	add	r26, r0
    132e:	61 1d       	adc	r22, r1
    1330:	22 1f       	adc	r18, r18
    1332:	74 9f       	mul	r23, r20
    1334:	33 27       	eor	r19, r19
    1336:	a0 0d       	add	r26, r0
    1338:	61 1d       	adc	r22, r1
    133a:	23 1f       	adc	r18, r19
    133c:	84 9f       	mul	r24, r20
    133e:	60 0d       	add	r22, r0
    1340:	21 1d       	adc	r18, r1
    1342:	82 2f       	mov	r24, r18
    1344:	76 2f       	mov	r23, r22
    1346:	6a 2f       	mov	r22, r26
    1348:	11 24       	eor	r1, r1
    134a:	9f 57       	subi	r25, 0x7F	; 127
    134c:	50 40       	sbci	r21, 0x00	; 0
    134e:	8a f0       	brmi	.+34     	; 0x1372 <__mulsf3_pse+0x84>
    1350:	e1 f0       	breq	.+56     	; 0x138a <__mulsf3_pse+0x9c>
    1352:	88 23       	and	r24, r24
    1354:	4a f0       	brmi	.+18     	; 0x1368 <__mulsf3_pse+0x7a>
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	bb 1f       	adc	r27, r27
    135c:	66 1f       	adc	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	88 1f       	adc	r24, r24
    1362:	91 50       	subi	r25, 0x01	; 1
    1364:	50 40       	sbci	r21, 0x00	; 0
    1366:	a9 f7       	brne	.-22     	; 0x1352 <__mulsf3_pse+0x64>
    1368:	9e 3f       	cpi	r25, 0xFE	; 254
    136a:	51 05       	cpc	r21, r1
    136c:	70 f0       	brcs	.+28     	; 0x138a <__mulsf3_pse+0x9c>
    136e:	5c cf       	rjmp	.-328    	; 0x1228 <__fp_inf>
    1370:	a6 cf       	rjmp	.-180    	; 0x12be <__fp_szero>
    1372:	5f 3f       	cpi	r21, 0xFF	; 255
    1374:	ec f3       	brlt	.-6      	; 0x1370 <__mulsf3_pse+0x82>
    1376:	98 3e       	cpi	r25, 0xE8	; 232
    1378:	dc f3       	brlt	.-10     	; 0x1370 <__mulsf3_pse+0x82>
    137a:	86 95       	lsr	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b7 95       	ror	r27
    1382:	f7 95       	ror	r31
    1384:	e7 95       	ror	r30
    1386:	9f 5f       	subi	r25, 0xFF	; 255
    1388:	c1 f7       	brne	.-16     	; 0x137a <__mulsf3_pse+0x8c>
    138a:	fe 2b       	or	r31, r30
    138c:	88 0f       	add	r24, r24
    138e:	91 1d       	adc	r25, r1
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret

00001398 <__tablejump2__>:
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	05 90       	lpm	r0, Z+
    139e:	f4 91       	lpm	r31, Z
    13a0:	e0 2d       	mov	r30, r0
    13a2:	09 94       	ijmp

000013a4 <vfprintf>:
    13a4:	ab e0       	ldi	r26, 0x0B	; 11
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e7 ed       	ldi	r30, 0xD7	; 215
    13aa:	f9 e0       	ldi	r31, 0x09	; 9
    13ac:	7d c2       	rjmp	.+1274   	; 0x18a8 <__prologue_saves__>
    13ae:	6c 01       	movw	r12, r24
    13b0:	7b 01       	movw	r14, r22
    13b2:	8a 01       	movw	r16, r20
    13b4:	fc 01       	movw	r30, r24
    13b6:	17 82       	std	Z+7, r1	; 0x07
    13b8:	16 82       	std	Z+6, r1	; 0x06
    13ba:	83 81       	ldd	r24, Z+3	; 0x03
    13bc:	81 ff       	sbrs	r24, 1
    13be:	bf c1       	rjmp	.+894    	; 0x173e <vfprintf+0x39a>
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	3c 01       	movw	r6, r24
    13c6:	f6 01       	movw	r30, r12
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	f7 01       	movw	r30, r14
    13cc:	93 fd       	sbrc	r25, 3
    13ce:	85 91       	lpm	r24, Z+
    13d0:	93 ff       	sbrs	r25, 3
    13d2:	81 91       	ld	r24, Z+
    13d4:	7f 01       	movw	r14, r30
    13d6:	88 23       	and	r24, r24
    13d8:	09 f4       	brne	.+2      	; 0x13dc <vfprintf+0x38>
    13da:	ad c1       	rjmp	.+858    	; 0x1736 <vfprintf+0x392>
    13dc:	85 32       	cpi	r24, 0x25	; 37
    13de:	39 f4       	brne	.+14     	; 0x13ee <vfprintf+0x4a>
    13e0:	93 fd       	sbrc	r25, 3
    13e2:	85 91       	lpm	r24, Z+
    13e4:	93 ff       	sbrs	r25, 3
    13e6:	81 91       	ld	r24, Z+
    13e8:	7f 01       	movw	r14, r30
    13ea:	85 32       	cpi	r24, 0x25	; 37
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <vfprintf+0x52>
    13ee:	b6 01       	movw	r22, r12
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	c0 d1       	rcall	.+896    	; 0x1774 <fputc>
    13f4:	e8 cf       	rjmp	.-48     	; 0x13c6 <vfprintf+0x22>
    13f6:	91 2c       	mov	r9, r1
    13f8:	21 2c       	mov	r2, r1
    13fa:	31 2c       	mov	r3, r1
    13fc:	ff e1       	ldi	r31, 0x1F	; 31
    13fe:	f3 15       	cp	r31, r3
    1400:	d8 f0       	brcs	.+54     	; 0x1438 <vfprintf+0x94>
    1402:	8b 32       	cpi	r24, 0x2B	; 43
    1404:	79 f0       	breq	.+30     	; 0x1424 <vfprintf+0x80>
    1406:	38 f4       	brcc	.+14     	; 0x1416 <vfprintf+0x72>
    1408:	80 32       	cpi	r24, 0x20	; 32
    140a:	79 f0       	breq	.+30     	; 0x142a <vfprintf+0x86>
    140c:	83 32       	cpi	r24, 0x23	; 35
    140e:	a1 f4       	brne	.+40     	; 0x1438 <vfprintf+0x94>
    1410:	23 2d       	mov	r18, r3
    1412:	20 61       	ori	r18, 0x10	; 16
    1414:	1d c0       	rjmp	.+58     	; 0x1450 <vfprintf+0xac>
    1416:	8d 32       	cpi	r24, 0x2D	; 45
    1418:	61 f0       	breq	.+24     	; 0x1432 <vfprintf+0x8e>
    141a:	80 33       	cpi	r24, 0x30	; 48
    141c:	69 f4       	brne	.+26     	; 0x1438 <vfprintf+0x94>
    141e:	23 2d       	mov	r18, r3
    1420:	21 60       	ori	r18, 0x01	; 1
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <vfprintf+0xac>
    1424:	83 2d       	mov	r24, r3
    1426:	82 60       	ori	r24, 0x02	; 2
    1428:	38 2e       	mov	r3, r24
    142a:	e3 2d       	mov	r30, r3
    142c:	e4 60       	ori	r30, 0x04	; 4
    142e:	3e 2e       	mov	r3, r30
    1430:	2a c0       	rjmp	.+84     	; 0x1486 <vfprintf+0xe2>
    1432:	f3 2d       	mov	r31, r3
    1434:	f8 60       	ori	r31, 0x08	; 8
    1436:	1d c0       	rjmp	.+58     	; 0x1472 <vfprintf+0xce>
    1438:	37 fc       	sbrc	r3, 7
    143a:	2d c0       	rjmp	.+90     	; 0x1496 <vfprintf+0xf2>
    143c:	20 ed       	ldi	r18, 0xD0	; 208
    143e:	28 0f       	add	r18, r24
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	40 f0       	brcs	.+16     	; 0x1454 <vfprintf+0xb0>
    1444:	8e 32       	cpi	r24, 0x2E	; 46
    1446:	b9 f4       	brne	.+46     	; 0x1476 <vfprintf+0xd2>
    1448:	36 fc       	sbrc	r3, 6
    144a:	75 c1       	rjmp	.+746    	; 0x1736 <vfprintf+0x392>
    144c:	23 2d       	mov	r18, r3
    144e:	20 64       	ori	r18, 0x40	; 64
    1450:	32 2e       	mov	r3, r18
    1452:	19 c0       	rjmp	.+50     	; 0x1486 <vfprintf+0xe2>
    1454:	36 fe       	sbrs	r3, 6
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <vfprintf+0xc0>
    1458:	8a e0       	ldi	r24, 0x0A	; 10
    145a:	98 9e       	mul	r9, r24
    145c:	20 0d       	add	r18, r0
    145e:	11 24       	eor	r1, r1
    1460:	92 2e       	mov	r9, r18
    1462:	11 c0       	rjmp	.+34     	; 0x1486 <vfprintf+0xe2>
    1464:	ea e0       	ldi	r30, 0x0A	; 10
    1466:	2e 9e       	mul	r2, r30
    1468:	20 0d       	add	r18, r0
    146a:	11 24       	eor	r1, r1
    146c:	22 2e       	mov	r2, r18
    146e:	f3 2d       	mov	r31, r3
    1470:	f0 62       	ori	r31, 0x20	; 32
    1472:	3f 2e       	mov	r3, r31
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <vfprintf+0xe2>
    1476:	8c 36       	cpi	r24, 0x6C	; 108
    1478:	21 f4       	brne	.+8      	; 0x1482 <vfprintf+0xde>
    147a:	83 2d       	mov	r24, r3
    147c:	80 68       	ori	r24, 0x80	; 128
    147e:	38 2e       	mov	r3, r24
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <vfprintf+0xe2>
    1482:	88 36       	cpi	r24, 0x68	; 104
    1484:	41 f4       	brne	.+16     	; 0x1496 <vfprintf+0xf2>
    1486:	f7 01       	movw	r30, r14
    1488:	93 fd       	sbrc	r25, 3
    148a:	85 91       	lpm	r24, Z+
    148c:	93 ff       	sbrs	r25, 3
    148e:	81 91       	ld	r24, Z+
    1490:	7f 01       	movw	r14, r30
    1492:	81 11       	cpse	r24, r1
    1494:	b3 cf       	rjmp	.-154    	; 0x13fc <vfprintf+0x58>
    1496:	98 2f       	mov	r25, r24
    1498:	9f 7d       	andi	r25, 0xDF	; 223
    149a:	95 54       	subi	r25, 0x45	; 69
    149c:	93 30       	cpi	r25, 0x03	; 3
    149e:	28 f4       	brcc	.+10     	; 0x14aa <vfprintf+0x106>
    14a0:	0c 5f       	subi	r16, 0xFC	; 252
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
    14a4:	9f e3       	ldi	r25, 0x3F	; 63
    14a6:	99 83       	std	Y+1, r25	; 0x01
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <vfprintf+0x120>
    14aa:	83 36       	cpi	r24, 0x63	; 99
    14ac:	31 f0       	breq	.+12     	; 0x14ba <vfprintf+0x116>
    14ae:	83 37       	cpi	r24, 0x73	; 115
    14b0:	71 f0       	breq	.+28     	; 0x14ce <vfprintf+0x12a>
    14b2:	83 35       	cpi	r24, 0x53	; 83
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <vfprintf+0x114>
    14b6:	55 c0       	rjmp	.+170    	; 0x1562 <vfprintf+0x1be>
    14b8:	20 c0       	rjmp	.+64     	; 0x14fa <vfprintf+0x156>
    14ba:	f8 01       	movw	r30, r16
    14bc:	80 81       	ld	r24, Z
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	88 24       	eor	r8, r8
    14c6:	83 94       	inc	r8
    14c8:	91 2c       	mov	r9, r1
    14ca:	53 01       	movw	r10, r6
    14cc:	12 c0       	rjmp	.+36     	; 0x14f2 <vfprintf+0x14e>
    14ce:	28 01       	movw	r4, r16
    14d0:	f2 e0       	ldi	r31, 0x02	; 2
    14d2:	4f 0e       	add	r4, r31
    14d4:	51 1c       	adc	r5, r1
    14d6:	f8 01       	movw	r30, r16
    14d8:	a0 80       	ld	r10, Z
    14da:	b1 80       	ldd	r11, Z+1	; 0x01
    14dc:	36 fe       	sbrs	r3, 6
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <vfprintf+0x142>
    14e0:	69 2d       	mov	r22, r9
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <vfprintf+0x146>
    14e6:	6f ef       	ldi	r22, 0xFF	; 255
    14e8:	7f ef       	ldi	r23, 0xFF	; 255
    14ea:	c5 01       	movw	r24, r10
    14ec:	38 d1       	rcall	.+624    	; 0x175e <strnlen>
    14ee:	4c 01       	movw	r8, r24
    14f0:	82 01       	movw	r16, r4
    14f2:	f3 2d       	mov	r31, r3
    14f4:	ff 77       	andi	r31, 0x7F	; 127
    14f6:	3f 2e       	mov	r3, r31
    14f8:	15 c0       	rjmp	.+42     	; 0x1524 <vfprintf+0x180>
    14fa:	28 01       	movw	r4, r16
    14fc:	22 e0       	ldi	r18, 0x02	; 2
    14fe:	42 0e       	add	r4, r18
    1500:	51 1c       	adc	r5, r1
    1502:	f8 01       	movw	r30, r16
    1504:	a0 80       	ld	r10, Z
    1506:	b1 80       	ldd	r11, Z+1	; 0x01
    1508:	36 fe       	sbrs	r3, 6
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vfprintf+0x16e>
    150c:	69 2d       	mov	r22, r9
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <vfprintf+0x172>
    1512:	6f ef       	ldi	r22, 0xFF	; 255
    1514:	7f ef       	ldi	r23, 0xFF	; 255
    1516:	c5 01       	movw	r24, r10
    1518:	17 d1       	rcall	.+558    	; 0x1748 <strnlen_P>
    151a:	4c 01       	movw	r8, r24
    151c:	f3 2d       	mov	r31, r3
    151e:	f0 68       	ori	r31, 0x80	; 128
    1520:	3f 2e       	mov	r3, r31
    1522:	82 01       	movw	r16, r4
    1524:	33 fc       	sbrc	r3, 3
    1526:	19 c0       	rjmp	.+50     	; 0x155a <vfprintf+0x1b6>
    1528:	82 2d       	mov	r24, r2
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	88 16       	cp	r8, r24
    152e:	99 06       	cpc	r9, r25
    1530:	a0 f4       	brcc	.+40     	; 0x155a <vfprintf+0x1b6>
    1532:	b6 01       	movw	r22, r12
    1534:	80 e2       	ldi	r24, 0x20	; 32
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	1d d1       	rcall	.+570    	; 0x1774 <fputc>
    153a:	2a 94       	dec	r2
    153c:	f5 cf       	rjmp	.-22     	; 0x1528 <vfprintf+0x184>
    153e:	f5 01       	movw	r30, r10
    1540:	37 fc       	sbrc	r3, 7
    1542:	85 91       	lpm	r24, Z+
    1544:	37 fe       	sbrs	r3, 7
    1546:	81 91       	ld	r24, Z+
    1548:	5f 01       	movw	r10, r30
    154a:	b6 01       	movw	r22, r12
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	12 d1       	rcall	.+548    	; 0x1774 <fputc>
    1550:	21 10       	cpse	r2, r1
    1552:	2a 94       	dec	r2
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	82 1a       	sub	r8, r18
    1558:	91 08       	sbc	r9, r1
    155a:	81 14       	cp	r8, r1
    155c:	91 04       	cpc	r9, r1
    155e:	79 f7       	brne	.-34     	; 0x153e <vfprintf+0x19a>
    1560:	e1 c0       	rjmp	.+450    	; 0x1724 <vfprintf+0x380>
    1562:	84 36       	cpi	r24, 0x64	; 100
    1564:	11 f0       	breq	.+4      	; 0x156a <vfprintf+0x1c6>
    1566:	89 36       	cpi	r24, 0x69	; 105
    1568:	39 f5       	brne	.+78     	; 0x15b8 <vfprintf+0x214>
    156a:	f8 01       	movw	r30, r16
    156c:	37 fe       	sbrs	r3, 7
    156e:	07 c0       	rjmp	.+14     	; 0x157e <vfprintf+0x1da>
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	0c 5f       	subi	r16, 0xFC	; 252
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	08 c0       	rjmp	.+16     	; 0x158e <vfprintf+0x1ea>
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	07 2e       	mov	r0, r23
    1584:	00 0c       	add	r0, r0
    1586:	88 0b       	sbc	r24, r24
    1588:	99 0b       	sbc	r25, r25
    158a:	0e 5f       	subi	r16, 0xFE	; 254
    158c:	1f 4f       	sbci	r17, 0xFF	; 255
    158e:	f3 2d       	mov	r31, r3
    1590:	ff 76       	andi	r31, 0x6F	; 111
    1592:	3f 2e       	mov	r3, r31
    1594:	97 ff       	sbrs	r25, 7
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <vfprintf+0x206>
    1598:	90 95       	com	r25
    159a:	80 95       	com	r24
    159c:	70 95       	com	r23
    159e:	61 95       	neg	r22
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	f0 68       	ori	r31, 0x80	; 128
    15a8:	3f 2e       	mov	r3, r31
    15aa:	2a e0       	ldi	r18, 0x0A	; 10
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	a3 01       	movw	r20, r6
    15b0:	1d d1       	rcall	.+570    	; 0x17ec <__ultoa_invert>
    15b2:	88 2e       	mov	r8, r24
    15b4:	86 18       	sub	r8, r6
    15b6:	44 c0       	rjmp	.+136    	; 0x1640 <vfprintf+0x29c>
    15b8:	85 37       	cpi	r24, 0x75	; 117
    15ba:	31 f4       	brne	.+12     	; 0x15c8 <vfprintf+0x224>
    15bc:	23 2d       	mov	r18, r3
    15be:	2f 7e       	andi	r18, 0xEF	; 239
    15c0:	b2 2e       	mov	r11, r18
    15c2:	2a e0       	ldi	r18, 0x0A	; 10
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	25 c0       	rjmp	.+74     	; 0x1612 <vfprintf+0x26e>
    15c8:	93 2d       	mov	r25, r3
    15ca:	99 7f       	andi	r25, 0xF9	; 249
    15cc:	b9 2e       	mov	r11, r25
    15ce:	8f 36       	cpi	r24, 0x6F	; 111
    15d0:	c1 f0       	breq	.+48     	; 0x1602 <vfprintf+0x25e>
    15d2:	18 f4       	brcc	.+6      	; 0x15da <vfprintf+0x236>
    15d4:	88 35       	cpi	r24, 0x58	; 88
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <vfprintf+0x252>
    15d8:	ae c0       	rjmp	.+348    	; 0x1736 <vfprintf+0x392>
    15da:	80 37       	cpi	r24, 0x70	; 112
    15dc:	19 f0       	breq	.+6      	; 0x15e4 <vfprintf+0x240>
    15de:	88 37       	cpi	r24, 0x78	; 120
    15e0:	21 f0       	breq	.+8      	; 0x15ea <vfprintf+0x246>
    15e2:	a9 c0       	rjmp	.+338    	; 0x1736 <vfprintf+0x392>
    15e4:	e9 2f       	mov	r30, r25
    15e6:	e0 61       	ori	r30, 0x10	; 16
    15e8:	be 2e       	mov	r11, r30
    15ea:	b4 fe       	sbrs	r11, 4
    15ec:	0d c0       	rjmp	.+26     	; 0x1608 <vfprintf+0x264>
    15ee:	fb 2d       	mov	r31, r11
    15f0:	f4 60       	ori	r31, 0x04	; 4
    15f2:	bf 2e       	mov	r11, r31
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <vfprintf+0x264>
    15f6:	34 fe       	sbrs	r3, 4
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <vfprintf+0x26a>
    15fa:	29 2f       	mov	r18, r25
    15fc:	26 60       	ori	r18, 0x06	; 6
    15fe:	b2 2e       	mov	r11, r18
    1600:	06 c0       	rjmp	.+12     	; 0x160e <vfprintf+0x26a>
    1602:	28 e0       	ldi	r18, 0x08	; 8
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <vfprintf+0x26e>
    1608:	20 e1       	ldi	r18, 0x10	; 16
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <vfprintf+0x26e>
    160e:	20 e1       	ldi	r18, 0x10	; 16
    1610:	32 e0       	ldi	r19, 0x02	; 2
    1612:	f8 01       	movw	r30, r16
    1614:	b7 fe       	sbrs	r11, 7
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <vfprintf+0x282>
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	0c 5f       	subi	r16, 0xFC	; 252
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0x28e>
    1626:	60 81       	ld	r22, Z
    1628:	71 81       	ldd	r23, Z+1	; 0x01
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 5f       	subi	r16, 0xFE	; 254
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	a3 01       	movw	r20, r6
    1634:	db d0       	rcall	.+438    	; 0x17ec <__ultoa_invert>
    1636:	88 2e       	mov	r8, r24
    1638:	86 18       	sub	r8, r6
    163a:	fb 2d       	mov	r31, r11
    163c:	ff 77       	andi	r31, 0x7F	; 127
    163e:	3f 2e       	mov	r3, r31
    1640:	36 fe       	sbrs	r3, 6
    1642:	0d c0       	rjmp	.+26     	; 0x165e <vfprintf+0x2ba>
    1644:	23 2d       	mov	r18, r3
    1646:	2e 7f       	andi	r18, 0xFE	; 254
    1648:	a2 2e       	mov	r10, r18
    164a:	89 14       	cp	r8, r9
    164c:	58 f4       	brcc	.+22     	; 0x1664 <vfprintf+0x2c0>
    164e:	34 fe       	sbrs	r3, 4
    1650:	0b c0       	rjmp	.+22     	; 0x1668 <vfprintf+0x2c4>
    1652:	32 fc       	sbrc	r3, 2
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <vfprintf+0x2c4>
    1656:	83 2d       	mov	r24, r3
    1658:	8e 7e       	andi	r24, 0xEE	; 238
    165a:	a8 2e       	mov	r10, r24
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <vfprintf+0x2c4>
    165e:	b8 2c       	mov	r11, r8
    1660:	a3 2c       	mov	r10, r3
    1662:	03 c0       	rjmp	.+6      	; 0x166a <vfprintf+0x2c6>
    1664:	b8 2c       	mov	r11, r8
    1666:	01 c0       	rjmp	.+2      	; 0x166a <vfprintf+0x2c6>
    1668:	b9 2c       	mov	r11, r9
    166a:	a4 fe       	sbrs	r10, 4
    166c:	0f c0       	rjmp	.+30     	; 0x168c <vfprintf+0x2e8>
    166e:	fe 01       	movw	r30, r28
    1670:	e8 0d       	add	r30, r8
    1672:	f1 1d       	adc	r31, r1
    1674:	80 81       	ld	r24, Z
    1676:	80 33       	cpi	r24, 0x30	; 48
    1678:	21 f4       	brne	.+8      	; 0x1682 <vfprintf+0x2de>
    167a:	9a 2d       	mov	r25, r10
    167c:	99 7e       	andi	r25, 0xE9	; 233
    167e:	a9 2e       	mov	r10, r25
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <vfprintf+0x2f0>
    1682:	a2 fe       	sbrs	r10, 2
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0x2ee>
    1686:	b3 94       	inc	r11
    1688:	b3 94       	inc	r11
    168a:	04 c0       	rjmp	.+8      	; 0x1694 <vfprintf+0x2f0>
    168c:	8a 2d       	mov	r24, r10
    168e:	86 78       	andi	r24, 0x86	; 134
    1690:	09 f0       	breq	.+2      	; 0x1694 <vfprintf+0x2f0>
    1692:	b3 94       	inc	r11
    1694:	a3 fc       	sbrc	r10, 3
    1696:	10 c0       	rjmp	.+32     	; 0x16b8 <vfprintf+0x314>
    1698:	a0 fe       	sbrs	r10, 0
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <vfprintf+0x304>
    169c:	b2 14       	cp	r11, r2
    169e:	80 f4       	brcc	.+32     	; 0x16c0 <vfprintf+0x31c>
    16a0:	28 0c       	add	r2, r8
    16a2:	92 2c       	mov	r9, r2
    16a4:	9b 18       	sub	r9, r11
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <vfprintf+0x31e>
    16a8:	b2 14       	cp	r11, r2
    16aa:	58 f4       	brcc	.+22     	; 0x16c2 <vfprintf+0x31e>
    16ac:	b6 01       	movw	r22, r12
    16ae:	80 e2       	ldi	r24, 0x20	; 32
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	60 d0       	rcall	.+192    	; 0x1774 <fputc>
    16b4:	b3 94       	inc	r11
    16b6:	f8 cf       	rjmp	.-16     	; 0x16a8 <vfprintf+0x304>
    16b8:	b2 14       	cp	r11, r2
    16ba:	18 f4       	brcc	.+6      	; 0x16c2 <vfprintf+0x31e>
    16bc:	2b 18       	sub	r2, r11
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x320>
    16c0:	98 2c       	mov	r9, r8
    16c2:	21 2c       	mov	r2, r1
    16c4:	a4 fe       	sbrs	r10, 4
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <vfprintf+0x342>
    16c8:	b6 01       	movw	r22, r12
    16ca:	80 e3       	ldi	r24, 0x30	; 48
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	52 d0       	rcall	.+164    	; 0x1774 <fputc>
    16d0:	a2 fe       	sbrs	r10, 2
    16d2:	16 c0       	rjmp	.+44     	; 0x1700 <vfprintf+0x35c>
    16d4:	a1 fc       	sbrc	r10, 1
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <vfprintf+0x33a>
    16d8:	88 e7       	ldi	r24, 0x78	; 120
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x33e>
    16de:	88 e5       	ldi	r24, 0x58	; 88
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	b6 01       	movw	r22, r12
    16e4:	0c c0       	rjmp	.+24     	; 0x16fe <vfprintf+0x35a>
    16e6:	8a 2d       	mov	r24, r10
    16e8:	86 78       	andi	r24, 0x86	; 134
    16ea:	51 f0       	breq	.+20     	; 0x1700 <vfprintf+0x35c>
    16ec:	a1 fe       	sbrs	r10, 1
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x350>
    16f0:	8b e2       	ldi	r24, 0x2B	; 43
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <vfprintf+0x352>
    16f4:	80 e2       	ldi	r24, 0x20	; 32
    16f6:	a7 fc       	sbrc	r10, 7
    16f8:	8d e2       	ldi	r24, 0x2D	; 45
    16fa:	b6 01       	movw	r22, r12
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	3a d0       	rcall	.+116    	; 0x1774 <fputc>
    1700:	89 14       	cp	r8, r9
    1702:	30 f4       	brcc	.+12     	; 0x1710 <vfprintf+0x36c>
    1704:	b6 01       	movw	r22, r12
    1706:	80 e3       	ldi	r24, 0x30	; 48
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	34 d0       	rcall	.+104    	; 0x1774 <fputc>
    170c:	9a 94       	dec	r9
    170e:	f8 cf       	rjmp	.-16     	; 0x1700 <vfprintf+0x35c>
    1710:	8a 94       	dec	r8
    1712:	f3 01       	movw	r30, r6
    1714:	e8 0d       	add	r30, r8
    1716:	f1 1d       	adc	r31, r1
    1718:	80 81       	ld	r24, Z
    171a:	b6 01       	movw	r22, r12
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	2a d0       	rcall	.+84     	; 0x1774 <fputc>
    1720:	81 10       	cpse	r8, r1
    1722:	f6 cf       	rjmp	.-20     	; 0x1710 <vfprintf+0x36c>
    1724:	22 20       	and	r2, r2
    1726:	09 f4       	brne	.+2      	; 0x172a <vfprintf+0x386>
    1728:	4e ce       	rjmp	.-868    	; 0x13c6 <vfprintf+0x22>
    172a:	b6 01       	movw	r22, r12
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	21 d0       	rcall	.+66     	; 0x1774 <fputc>
    1732:	2a 94       	dec	r2
    1734:	f7 cf       	rjmp	.-18     	; 0x1724 <vfprintf+0x380>
    1736:	f6 01       	movw	r30, r12
    1738:	86 81       	ldd	r24, Z+6	; 0x06
    173a:	97 81       	ldd	r25, Z+7	; 0x07
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x39e>
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	9f ef       	ldi	r25, 0xFF	; 255
    1742:	2b 96       	adiw	r28, 0x0b	; 11
    1744:	e2 e1       	ldi	r30, 0x12	; 18
    1746:	cc c0       	rjmp	.+408    	; 0x18e0 <__epilogue_restores__>

00001748 <strnlen_P>:
    1748:	fc 01       	movw	r30, r24
    174a:	05 90       	lpm	r0, Z+
    174c:	61 50       	subi	r22, 0x01	; 1
    174e:	70 40       	sbci	r23, 0x00	; 0
    1750:	01 10       	cpse	r0, r1
    1752:	d8 f7       	brcc	.-10     	; 0x174a <strnlen_P+0x2>
    1754:	80 95       	com	r24
    1756:	90 95       	com	r25
    1758:	8e 0f       	add	r24, r30
    175a:	9f 1f       	adc	r25, r31
    175c:	08 95       	ret

0000175e <strnlen>:
    175e:	fc 01       	movw	r30, r24
    1760:	61 50       	subi	r22, 0x01	; 1
    1762:	70 40       	sbci	r23, 0x00	; 0
    1764:	01 90       	ld	r0, Z+
    1766:	01 10       	cpse	r0, r1
    1768:	d8 f7       	brcc	.-10     	; 0x1760 <strnlen+0x2>
    176a:	80 95       	com	r24
    176c:	90 95       	com	r25
    176e:	8e 0f       	add	r24, r30
    1770:	9f 1f       	adc	r25, r31
    1772:	08 95       	ret

00001774 <fputc>:
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	fb 01       	movw	r30, r22
    177e:	23 81       	ldd	r18, Z+3	; 0x03
    1780:	21 fd       	sbrc	r18, 1
    1782:	03 c0       	rjmp	.+6      	; 0x178a <fputc+0x16>
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	9f ef       	ldi	r25, 0xFF	; 255
    1788:	2c c0       	rjmp	.+88     	; 0x17e2 <fputc+0x6e>
    178a:	22 ff       	sbrs	r18, 2
    178c:	16 c0       	rjmp	.+44     	; 0x17ba <fputc+0x46>
    178e:	46 81       	ldd	r20, Z+6	; 0x06
    1790:	57 81       	ldd	r21, Z+7	; 0x07
    1792:	24 81       	ldd	r18, Z+4	; 0x04
    1794:	35 81       	ldd	r19, Z+5	; 0x05
    1796:	42 17       	cp	r20, r18
    1798:	53 07       	cpc	r21, r19
    179a:	44 f4       	brge	.+16     	; 0x17ac <fputc+0x38>
    179c:	a0 81       	ld	r26, Z
    179e:	b1 81       	ldd	r27, Z+1	; 0x01
    17a0:	9d 01       	movw	r18, r26
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	31 83       	std	Z+1, r19	; 0x01
    17a8:	20 83       	st	Z, r18
    17aa:	8c 93       	st	X, r24
    17ac:	26 81       	ldd	r18, Z+6	; 0x06
    17ae:	37 81       	ldd	r19, Z+7	; 0x07
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	37 83       	std	Z+7, r19	; 0x07
    17b6:	26 83       	std	Z+6, r18	; 0x06
    17b8:	14 c0       	rjmp	.+40     	; 0x17e2 <fputc+0x6e>
    17ba:	8b 01       	movw	r16, r22
    17bc:	ec 01       	movw	r28, r24
    17be:	fb 01       	movw	r30, r22
    17c0:	00 84       	ldd	r0, Z+8	; 0x08
    17c2:	f1 85       	ldd	r31, Z+9	; 0x09
    17c4:	e0 2d       	mov	r30, r0
    17c6:	09 95       	icall
    17c8:	89 2b       	or	r24, r25
    17ca:	e1 f6       	brne	.-72     	; 0x1784 <fputc+0x10>
    17cc:	d8 01       	movw	r26, r16
    17ce:	16 96       	adiw	r26, 0x06	; 6
    17d0:	8d 91       	ld	r24, X+
    17d2:	9c 91       	ld	r25, X
    17d4:	17 97       	sbiw	r26, 0x07	; 7
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	17 96       	adiw	r26, 0x07	; 7
    17da:	9c 93       	st	X, r25
    17dc:	8e 93       	st	-X, r24
    17de:	16 97       	sbiw	r26, 0x06	; 6
    17e0:	ce 01       	movw	r24, r28
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <__ultoa_invert>:
    17ec:	fa 01       	movw	r30, r20
    17ee:	aa 27       	eor	r26, r26
    17f0:	28 30       	cpi	r18, 0x08	; 8
    17f2:	51 f1       	breq	.+84     	; 0x1848 <__ultoa_invert+0x5c>
    17f4:	20 31       	cpi	r18, 0x10	; 16
    17f6:	81 f1       	breq	.+96     	; 0x1858 <__ultoa_invert+0x6c>
    17f8:	e8 94       	clt
    17fa:	6f 93       	push	r22
    17fc:	6e 7f       	andi	r22, 0xFE	; 254
    17fe:	6e 5f       	subi	r22, 0xFE	; 254
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	af 4f       	sbci	r26, 0xFF	; 255
    1808:	b1 e0       	ldi	r27, 0x01	; 1
    180a:	3e d0       	rcall	.+124    	; 0x1888 <__ultoa_invert+0x9c>
    180c:	b4 e0       	ldi	r27, 0x04	; 4
    180e:	3c d0       	rcall	.+120    	; 0x1888 <__ultoa_invert+0x9c>
    1810:	67 0f       	add	r22, r23
    1812:	78 1f       	adc	r23, r24
    1814:	89 1f       	adc	r24, r25
    1816:	9a 1f       	adc	r25, r26
    1818:	a1 1d       	adc	r26, r1
    181a:	68 0f       	add	r22, r24
    181c:	79 1f       	adc	r23, r25
    181e:	8a 1f       	adc	r24, r26
    1820:	91 1d       	adc	r25, r1
    1822:	a1 1d       	adc	r26, r1
    1824:	6a 0f       	add	r22, r26
    1826:	71 1d       	adc	r23, r1
    1828:	81 1d       	adc	r24, r1
    182a:	91 1d       	adc	r25, r1
    182c:	a1 1d       	adc	r26, r1
    182e:	20 d0       	rcall	.+64     	; 0x1870 <__ultoa_invert+0x84>
    1830:	09 f4       	brne	.+2      	; 0x1834 <__ultoa_invert+0x48>
    1832:	68 94       	set
    1834:	3f 91       	pop	r19
    1836:	2a e0       	ldi	r18, 0x0A	; 10
    1838:	26 9f       	mul	r18, r22
    183a:	11 24       	eor	r1, r1
    183c:	30 19       	sub	r19, r0
    183e:	30 5d       	subi	r19, 0xD0	; 208
    1840:	31 93       	st	Z+, r19
    1842:	de f6       	brtc	.-74     	; 0x17fa <__ultoa_invert+0xe>
    1844:	cf 01       	movw	r24, r30
    1846:	08 95       	ret
    1848:	46 2f       	mov	r20, r22
    184a:	47 70       	andi	r20, 0x07	; 7
    184c:	40 5d       	subi	r20, 0xD0	; 208
    184e:	41 93       	st	Z+, r20
    1850:	b3 e0       	ldi	r27, 0x03	; 3
    1852:	0f d0       	rcall	.+30     	; 0x1872 <__ultoa_invert+0x86>
    1854:	c9 f7       	brne	.-14     	; 0x1848 <__ultoa_invert+0x5c>
    1856:	f6 cf       	rjmp	.-20     	; 0x1844 <__ultoa_invert+0x58>
    1858:	46 2f       	mov	r20, r22
    185a:	4f 70       	andi	r20, 0x0F	; 15
    185c:	40 5d       	subi	r20, 0xD0	; 208
    185e:	4a 33       	cpi	r20, 0x3A	; 58
    1860:	18 f0       	brcs	.+6      	; 0x1868 <__ultoa_invert+0x7c>
    1862:	49 5d       	subi	r20, 0xD9	; 217
    1864:	31 fd       	sbrc	r19, 1
    1866:	40 52       	subi	r20, 0x20	; 32
    1868:	41 93       	st	Z+, r20
    186a:	02 d0       	rcall	.+4      	; 0x1870 <__ultoa_invert+0x84>
    186c:	a9 f7       	brne	.-22     	; 0x1858 <__ultoa_invert+0x6c>
    186e:	ea cf       	rjmp	.-44     	; 0x1844 <__ultoa_invert+0x58>
    1870:	b4 e0       	ldi	r27, 0x04	; 4
    1872:	a6 95       	lsr	r26
    1874:	97 95       	ror	r25
    1876:	87 95       	ror	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	ba 95       	dec	r27
    187e:	c9 f7       	brne	.-14     	; 0x1872 <__ultoa_invert+0x86>
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	61 05       	cpc	r22, r1
    1884:	71 05       	cpc	r23, r1
    1886:	08 95       	ret
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	0a 2e       	mov	r0, r26
    188e:	06 94       	lsr	r0
    1890:	57 95       	ror	r21
    1892:	47 95       	ror	r20
    1894:	37 95       	ror	r19
    1896:	27 95       	ror	r18
    1898:	ba 95       	dec	r27
    189a:	c9 f7       	brne	.-14     	; 0x188e <__ultoa_invert+0xa2>
    189c:	62 0f       	add	r22, r18
    189e:	73 1f       	adc	r23, r19
    18a0:	84 1f       	adc	r24, r20
    18a2:	95 1f       	adc	r25, r21
    18a4:	a0 1d       	adc	r26, r0
    18a6:	08 95       	ret

000018a8 <__prologue_saves__>:
    18a8:	2f 92       	push	r2
    18aa:	3f 92       	push	r3
    18ac:	4f 92       	push	r4
    18ae:	5f 92       	push	r5
    18b0:	6f 92       	push	r6
    18b2:	7f 92       	push	r7
    18b4:	8f 92       	push	r8
    18b6:	9f 92       	push	r9
    18b8:	af 92       	push	r10
    18ba:	bf 92       	push	r11
    18bc:	cf 92       	push	r12
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	ca 1b       	sub	r28, r26
    18d2:	db 0b       	sbc	r29, r27
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	09 94       	ijmp

000018e0 <__epilogue_restores__>:
    18e0:	2a 88       	ldd	r2, Y+18	; 0x12
    18e2:	39 88       	ldd	r3, Y+17	; 0x11
    18e4:	48 88       	ldd	r4, Y+16	; 0x10
    18e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    18e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    18ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    18ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    18ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    18f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    18f2:	b9 84       	ldd	r11, Y+9	; 0x09
    18f4:	c8 84       	ldd	r12, Y+8	; 0x08
    18f6:	df 80       	ldd	r13, Y+7	; 0x07
    18f8:	ee 80       	ldd	r14, Y+6	; 0x06
    18fa:	fd 80       	ldd	r15, Y+5	; 0x05
    18fc:	0c 81       	ldd	r16, Y+4	; 0x04
    18fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1900:	aa 81       	ldd	r26, Y+2	; 0x02
    1902:	b9 81       	ldd	r27, Y+1	; 0x01
    1904:	ce 0f       	add	r28, r30
    1906:	d1 1d       	adc	r29, r1
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	ed 01       	movw	r28, r26
    1914:	08 95       	ret

00001916 <_exit>:
    1916:	f8 94       	cli

00001918 <__stop_program>:
    1918:	ff cf       	rjmp	.-2      	; 0x1918 <__stop_program>
