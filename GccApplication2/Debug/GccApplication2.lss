
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000188e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  0000188e  00001922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000137  008000b0  008000b0  00001972  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000272c  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6d  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf7  00000000  00000000  000050ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00005de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bd1  00000000  00000000  000062a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001da7  00000000  00000000  00006e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	40 c0       	rjmp	.+128    	; 0x9e <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	d3 02       	muls	r29, r19

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	ee e8       	ldi	r30, 0x8E	; 142
      3c:	f8 e1       	ldi	r31, 0x18	; 24
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	a0 3b       	cpi	r26, 0xB0	; 176
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	21 e0       	ldi	r18, 0x01	; 1
      4c:	a0 eb       	ldi	r26, 0xB0	; 176
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	a7 3e       	cpi	r26, 0xE7	; 231
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	52 d9       	rcall	.-3420   	; 0xfffff30c <__eeprom_end+0xff7ef30c>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	dc d1       	rcall	.+952    	; 0x428 <main>
      70:	0c cc       	rjmp	.-2024   	; 0xfffff88a <__eeprom_end+0xff7ef88a>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:

	for(i = 0; i < len; ++i)
	standardDeviation += pow(ar[i] - mean, 2);

	return sqrt(standardDeviation / len);
}
      74:	14 ba       	out	0x14, r1	; 20
      76:	f8 94       	cli
      78:	16 b8       	out	0x06, r1	; 6
      7a:	3e 9a       	sbi	0x07, 6	; 7
      7c:	3d 9a       	sbi	0x07, 5	; 7
      7e:	32 9a       	sbi	0x06, 2	; 6
      80:	35 9a       	sbi	0x06, 5	; 6
      82:	33 9a       	sbi	0x06, 3	; 6
      84:	37 9a       	sbi	0x06, 7	; 6
      86:	36 9a       	sbi	0x06, 6	; 6
      88:	78 94       	sei
      8a:	08 95       	ret

0000008c <_Z5resetv>:
      8c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <_ZL5index>
      90:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_ZL7noMatch>
      94:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8maxSlope+0x1>
      98:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL8maxSlope>
      9c:	08 95       	ret

0000009e <__vector_14>:
      9e:	1f 92       	push	r1
      a0:	0f 92       	push	r0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	0f 92       	push	r0
      a6:	11 24       	eor	r1, r1
      a8:	2f 93       	push	r18
      aa:	3f 93       	push	r19
      ac:	4f 93       	push	r20
      ae:	5f 93       	push	r21
      b0:	6f 93       	push	r22
      b2:	7f 93       	push	r23
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25
      b8:	af 93       	push	r26
      ba:	bf 93       	push	r27
      bc:	ef 93       	push	r30
      be:	ff 93       	push	r31
      c0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_ZL7newData>
      c4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZL8prevData>
      c8:	85 b1       	in	r24, 0x05	; 5
      ca:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZL7newData>
      ce:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <_ZL8prevData>
      d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      d6:	98 17       	cp	r25, r24
      d8:	08 f0       	brcs	.+2      	; 0xdc <__vector_14+0x3e>
      da:	d2 c0       	rjmp	.+420    	; 0x280 <__vector_14+0x1e2>
      dc:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_ZL7newData>
      e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      e4:	98 17       	cp	r25, r24
      e6:	08 f0       	brcs	.+2      	; 0xea <__vector_14+0x4c>
      e8:	07 c1       	rjmp	.+526    	; 0x2f8 <__vector_14+0x25a>
      ea:	ca c0       	rjmp	.+404    	; 0x280 <__vector_14+0x1e2>
      ec:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <_ZL5index>
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZL8newSlope>
      f6:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL8newSlope+0x1>
      fa:	ee 0f       	add	r30, r30
      fc:	ff 1f       	adc	r31, r31
      fe:	ef 58       	subi	r30, 0x8F	; 143
     100:	fe 4f       	sbci	r31, 0xFE	; 254
     102:	91 83       	std	Z+1, r25	; 0x01
     104:	80 83       	st	Z, r24
     106:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <_ZL5index>
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL4time>
     110:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL4time+0x1>
     114:	ee 0f       	add	r30, r30
     116:	ff 1f       	adc	r31, r31
     118:	eb 57       	subi	r30, 0x7B	; 123
     11a:	fe 4f       	sbci	r31, 0xFE	; 254
     11c:	91 83       	std	Z+1, r25	; 0x01
     11e:	80 83       	st	Z, r24
     120:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <_ZL4time+0x1>
     124:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <_ZL4time>
     128:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL5index>
     12c:	81 11       	cpse	r24, r1
     12e:	08 c0       	rjmp	.+16     	; 0x140 <__vector_14+0xa2>
     130:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_ZL7noMatch>
     134:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL5index>
     138:	8f 5f       	subi	r24, 0xFF	; 255
     13a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_ZL5index>
     13e:	a0 c0       	rjmp	.+320    	; 0x280 <__vector_14+0x1e2>
     140:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <_ZL5timer>
     144:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <_ZL5timer+0x1>
     148:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <_ZL5index>
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	eb 57       	subi	r30, 0x7B	; 123
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	20 81       	ld	r18, Z
     158:	31 81       	ldd	r19, Z+1	; 0x01
     15a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_ZL8timerTol>
     15e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_ZL8timerTol+0x1>
     162:	82 1b       	sub	r24, r18
     164:	93 0b       	sbc	r25, r19
     166:	9c 01       	movw	r18, r24
     168:	22 f4       	brpl	.+8      	; 0x172 <__vector_14+0xd4>
     16a:	22 27       	eor	r18, r18
     16c:	33 27       	eor	r19, r19
     16e:	28 1b       	sub	r18, r24
     170:	39 0b       	sbc	r19, r25
     172:	24 17       	cp	r18, r20
     174:	35 07       	cpc	r19, r21
     176:	0c f0       	brlt	.+2      	; 0x17a <__vector_14+0xdc>
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__vector_14+0x2a2>
     17a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <_ZL5slope>
     17e:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <_ZL5slope+0x1>
     182:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <_ZL8newSlope>
     186:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <_ZL8newSlope+0x1>
     18a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <_ZL8slopeTol>
     18e:	84 1b       	sub	r24, r20
     190:	95 0b       	sbc	r25, r21
     192:	ac 01       	movw	r20, r24
     194:	22 f4       	brpl	.+8      	; 0x19e <__vector_14+0x100>
     196:	44 27       	eor	r20, r20
     198:	55 27       	eor	r21, r21
     19a:	48 1b       	sub	r20, r24
     19c:	59 0b       	sbc	r21, r25
     19e:	82 2f       	mov	r24, r18
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	48 17       	cp	r20, r24
     1a4:	59 07       	cpc	r21, r25
     1a6:	0c f4       	brge	.+2      	; 0x1aa <__vector_14+0x10c>
     1a8:	dc c0       	rjmp	.+440    	; 0x362 <__vector_14+0x2c4>
     1aa:	ca c0       	rjmp	.+404    	; 0x340 <__vector_14+0x2a2>
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	e8 2f       	mov	r30, r24
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	eb 57       	subi	r30, 0x7B	; 123
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	40 81       	ld	r20, Z
     1bc:	51 81       	ldd	r21, Z+1	; 0x01
     1be:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <_ZL10totalTimer>
     1c2:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <_ZL10totalTimer+0x1>
     1c6:	24 0f       	add	r18, r20
     1c8:	35 1f       	adc	r19, r21
     1ca:	30 93 70 01 	sts	0x0170, r19	; 0x800170 <_ZL10totalTimer+0x1>
     1ce:	20 93 6f 01 	sts	0x016F, r18	; 0x80016f <_ZL10totalTimer>
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <_ZL5index>
     1d8:	89 17       	cp	r24, r25
     1da:	48 f3       	brcs	.-46     	; 0x1ae <__vector_14+0x110>
     1dc:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_ZL10totalTimer>
     1e0:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <_ZL10totalTimer+0x1>
     1e4:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <_ZL6period+0x1>
     1e8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <_ZL6period>
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <_ZL11periodReady>
     1f2:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <_ZL5index>
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	eb 57       	subi	r30, 0x7B	; 123
     1fe:	fe 4f       	sbci	r31, 0xFE	; 254
     200:	20 81       	ld	r18, Z
     202:	31 81       	ldd	r19, Z+1	; 0x01
     204:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <_ZL5timer+0x1>
     208:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <_ZL5timer>
     20c:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <_ZL5index>
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	ef 58       	subi	r30, 0x8F	; 143
     218:	fe 4f       	sbci	r31, 0xFE	; 254
     21a:	20 81       	ld	r18, Z
     21c:	31 81       	ldd	r19, Z+1	; 0x01
     21e:	30 93 72 01 	sts	0x0172, r19	; 0x800172 <_ZL5slope+0x1>
     222:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <_ZL5slope>
     226:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_ZL5index>
     22a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_ZL7noMatch>
     22e:	28 c0       	rjmp	.+80     	; 0x280 <__vector_14+0x1e2>
     230:	2d df       	rcall	.-422    	; 0x8c <_Z5resetv>
     232:	26 c0       	rjmp	.+76     	; 0x280 <__vector_14+0x1e2>
     234:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <_ZL8newSlope>
     238:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <_ZL8newSlope+0x1>
     23c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <_ZL8maxSlope>
     240:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <_ZL8maxSlope+0x1>
     244:	82 17       	cp	r24, r18
     246:	93 07       	cpc	r25, r19
     248:	8c f4       	brge	.+34     	; 0x26c <__vector_14+0x1ce>
     24a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZL8newSlope>
     24e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL8newSlope+0x1>
     252:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <_ZL8maxSlope+0x1>
     256:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <_ZL8maxSlope>
     25a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <_ZL4time+0x1>
     25e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <_ZL4time>
     262:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_ZL7noMatch>
     266:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <_ZL5index>
     26a:	0a c0       	rjmp	.+20     	; 0x280 <__vector_14+0x1e2>
     26c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL7noMatch>
     270:	8f 5f       	subi	r24, 0xFF	; 255
     272:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_ZL7noMatch>
     276:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_ZL7noMatch>
     27a:	8a 30       	cpi	r24, 0x0A	; 10
     27c:	08 f0       	brcs	.+2      	; 0x280 <__vector_14+0x1e2>
     27e:	06 df       	rcall	.-500    	; 0x8c <_Z5resetv>
     280:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_ZL7newData>
     284:	88 23       	and	r24, r24
     286:	09 f4       	brne	.+2      	; 0x28a <__vector_14+0x1ec>
     288:	75 c0       	rjmp	.+234    	; 0x374 <__vector_14+0x2d6>
     28a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_ZL7newData>
     28e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_ZL4time>
     292:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZL4time+0x1>
     296:	01 96       	adiw	r24, 0x01	; 1
     298:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <_ZL4time+0x1>
     29c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL4time>
     2a0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <ampTimer>
     2a4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <ampTimer+0x1>
     2a8:	2f 5f       	subi	r18, 0xFF	; 255
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <ampTimer+0x1>
     2b0:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <ampTimer>
     2b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2b8:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <_ZL7newData>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	84 1b       	sub	r24, r20
     2c0:	91 09       	sbc	r25, r1
     2c2:	ac 01       	movw	r20, r24
     2c4:	22 f4       	brpl	.+8      	; 0x2ce <__vector_14+0x230>
     2c6:	44 27       	eor	r20, r20
     2c8:	55 27       	eor	r21, r21
     2ca:	48 1b       	sub	r20, r24
     2cc:	59 0b       	sbc	r21, r25
     2ce:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <_ZL6maxAmp>
     2d2:	84 17       	cp	r24, r20
     2d4:	10 f4       	brcc	.+4      	; 0x2da <__vector_14+0x23c>
     2d6:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <_ZL6maxAmp>
     2da:	28 3e       	cpi	r18, 0xE8	; 232
     2dc:	33 40       	sbci	r19, 0x03	; 3
     2de:	09 f0       	breq	.+2      	; 0x2e2 <__vector_14+0x244>
     2e0:	4d c0       	rjmp	.+154    	; 0x37c <__vector_14+0x2de>
     2e2:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <ampTimer+0x1>
     2e6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <ampTimer>
     2ea:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <_ZL6maxAmp>
     2ee:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <_ZL11checkMaxAmp>
     2f2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <_ZL6maxAmp>
     2f6:	42 c0       	rjmp	.+132    	; 0x37c <__vector_14+0x2de>
     2f8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_ZL7newData>
     2fc:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <_ZL8prevData>
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	82 1b       	sub	r24, r18
     304:	91 09       	sbc	r25, r1
     306:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <_ZL8newSlope+0x1>
     30a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <_ZL8newSlope>
     30e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZL8newSlope>
     312:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_ZL8newSlope+0x1>
     316:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <_ZL8maxSlope>
     31a:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <_ZL8maxSlope+0x1>
     31e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <_ZL8slopeTol>
     322:	84 1b       	sub	r24, r20
     324:	95 0b       	sbc	r25, r21
     326:	ac 01       	movw	r20, r24
     328:	22 f4       	brpl	.+8      	; 0x332 <__vector_14+0x294>
     32a:	44 27       	eor	r20, r20
     32c:	55 27       	eor	r21, r21
     32e:	48 1b       	sub	r20, r24
     330:	59 0b       	sbc	r21, r25
     332:	82 2f       	mov	r24, r18
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	48 17       	cp	r20, r24
     338:	59 07       	cpc	r21, r25
     33a:	0c f4       	brge	.+2      	; 0x33e <__vector_14+0x2a0>
     33c:	d7 ce       	rjmp	.-594    	; 0xec <__vector_14+0x4e>
     33e:	7a cf       	rjmp	.-268    	; 0x234 <__vector_14+0x196>
     340:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL5index>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_ZL5index>
     34a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL5index>
     34e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <_ZL12noMatchLimit>
     352:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <_ZL12noMatchLimit+0x1>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 17       	cp	r18, r24
     35a:	39 07       	cpc	r19, r25
     35c:	0c f0       	brlt	.+2      	; 0x360 <__vector_14+0x2c2>
     35e:	90 cf       	rjmp	.-224    	; 0x280 <__vector_14+0x1e2>
     360:	67 cf       	rjmp	.-306    	; 0x230 <__vector_14+0x192>
     362:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <_ZL10totalTimer+0x1>
     366:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <_ZL10totalTimer>
     36a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_ZL5index>
     36e:	81 11       	cpse	r24, r1
     370:	1d cf       	rjmp	.-454    	; 0x1ac <__vector_14+0x10e>
     372:	34 cf       	rjmp	.-408    	; 0x1dc <__vector_14+0x13e>
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_ZL8clipping>
     37a:	89 cf       	rjmp	.-238    	; 0x28e <__vector_14+0x1f0>
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <_Z6get_avPdi>:
     39e:	8f 92       	push	r8
     3a0:	9f 92       	push	r9
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	6c 01       	movw	r12, r24
     3b8:	7b 01       	movw	r14, r22
     3ba:	16 16       	cp	r1, r22
     3bc:	17 06       	cpc	r1, r23
     3be:	d4 f4       	brge	.+52     	; 0x3f4 <_Z6get_avPdi+0x56>
     3c0:	8c 01       	movw	r16, r24
     3c2:	c0 e0       	ldi	r28, 0x00	; 0
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	81 2c       	mov	r8, r1
     3c8:	91 2c       	mov	r9, r1
     3ca:	54 01       	movw	r10, r8
     3cc:	c1 14       	cp	r12, r1
     3ce:	d1 04       	cpc	r13, r1
     3d0:	51 f0       	breq	.+20     	; 0x3e6 <_Z6get_avPdi+0x48>
     3d2:	f8 01       	movw	r30, r16
     3d4:	20 81       	ld	r18, Z
     3d6:	31 81       	ldd	r19, Z+1	; 0x01
     3d8:	42 81       	ldd	r20, Z+2	; 0x02
     3da:	53 81       	ldd	r21, Z+3	; 0x03
     3dc:	c5 01       	movw	r24, r10
     3de:	b4 01       	movw	r22, r8
     3e0:	5c d5       	rcall	.+2744   	; 0xe9a <__addsf3>
     3e2:	4b 01       	movw	r8, r22
     3e4:	5c 01       	movw	r10, r24
     3e6:	21 96       	adiw	r28, 0x01	; 1
     3e8:	0c 5f       	subi	r16, 0xFC	; 252
     3ea:	1f 4f       	sbci	r17, 0xFF	; 255
     3ec:	ec 16       	cp	r14, r28
     3ee:	fd 06       	cpc	r15, r29
     3f0:	69 f7       	brne	.-38     	; 0x3cc <_Z6get_avPdi+0x2e>
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <_Z6get_avPdi+0x5c>
     3f4:	81 2c       	mov	r8, r1
     3f6:	91 2c       	mov	r9, r1
     3f8:	54 01       	movw	r10, r8
     3fa:	b7 01       	movw	r22, r14
     3fc:	ff 0c       	add	r15, r15
     3fe:	88 0b       	sbc	r24, r24
     400:	99 0b       	sbc	r25, r25
     402:	4e d6       	rcall	.+3228   	; 0x10a0 <__floatsisf>
     404:	9b 01       	movw	r18, r22
     406:	ac 01       	movw	r20, r24
     408:	c5 01       	movw	r24, r10
     40a:	b4 01       	movw	r22, r8
     40c:	ae d5       	rcall	.+2908   	; 0xf6a <__divsf3>
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	bf 90       	pop	r11
     420:	af 90       	pop	r10
     422:	9f 90       	pop	r9
     424:	8f 90       	pop	r8
     426:	08 95       	ret

00000428 <main>:

int main() {
	setup();
     428:	25 de       	rcall	.-950    	; 0x74 <_Z5setupv>
	//USART_Init ( MYUBRR );
	//USART_Transmit('a');
	while(1) {
		
		if (checkMaxAmp > ampThreshold) /* && checkMaxAmp < maxAmpThreshold) */ {
     42a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <_ZL11checkMaxAmp>
     42e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_ZL12ampThreshold>
     432:	89 17       	cp	r24, r25
     434:	08 f0       	brcs	.+2      	; 0x438 <main+0x10>
     436:	b0 c0       	rjmp	.+352    	; 0x598 <__stack+0x139>
			if (periodReady) { // prevent working twice with the same reading
     438:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <_ZL11periodReady>
     43c:	88 23       	and	r24, r24
     43e:	09 f4       	brne	.+2      	; 0x442 <main+0x1a>
     440:	ab c0       	rjmp	.+342    	; 0x598 <__stack+0x139>
				periodReady = false;
     442:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <_ZL11periodReady>
				
				frequency = FREQ_SAMPLING_RATE/float(period);//calculate frequency timer rate/period
     446:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <_ZL6period>
     44a:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <_ZL6period+0x1>
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	24 d6       	rcall	.+3144   	; 0x109c <__floatunsisf>
     454:	9b 01       	movw	r18, r22
     456:	ac 01       	movw	r20, r24
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	76 e9       	ldi	r23, 0x96	; 150
     45c:	88 e1       	ldi	r24, 0x18	; 24
     45e:	97 e4       	ldi	r25, 0x47	; 71
     460:	84 d5       	rcall	.+2824   	; 0xf6a <__divsf3>
     462:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <_ZL9frequency>
     466:	70 93 68 01 	sts	0x0168, r23	; 0x800168 <_ZL9frequency+0x1>
     46a:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <_ZL9frequency+0x2>
     46e:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <_ZL9frequency+0x3>
				
				//USART_Transmit_int((int)frequency);
				//USART_Println();
			
				if (isFreqLegal(frequency)) {
     472:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <_ZL9frequency>
     476:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <_ZL9frequency+0x1>
     47a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL9frequency+0x2>
     47e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL9frequency+0x3>
     482:	0e d3       	rcall	.+1564   	; 0xaa0 <_Z11isFreqLegald>
     484:	88 23       	and	r24, r24
     486:	09 f4       	brne	.+2      	; 0x48a <__stack+0x2b>
     488:	87 c0       	rjmp	.+270    	; 0x598 <__stack+0x139>
			
					// Ignore noise and big swings
					long_last_frequencies[long_freq_ar_i++] = frequency;
     48a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <long_freq_ar_i>
     48e:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <long_freq_ar_i+0x1>
     492:	9c 01       	movw	r18, r24
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	30 93 e3 00 	sts	0x00E3, r19	; 0x8000e3 <long_freq_ar_i+0x1>
     49c:	20 93 e2 00 	sts	0x00E2, r18	; 0x8000e2 <long_freq_ar_i>
     4a0:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <_ZL9frequency>
     4a4:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <_ZL9frequency+0x1>
     4a8:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <_ZL9frequency+0x2>
     4ac:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <_ZL9frequency+0x3>
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	fc 01       	movw	r30, r24
     4ba:	ec 51       	subi	r30, 0x1C	; 28
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	40 83       	st	Z, r20
     4c0:	51 83       	std	Z+1, r21	; 0x01
     4c2:	62 83       	std	Z+2, r22	; 0x02
     4c4:	73 83       	std	Z+3, r23	; 0x03
					if (long_freq_ar_i >= LONG_FREQ_AR_LEN) long_freq_ar_i = 0;
     4c6:	2e 31       	cpi	r18, 0x1E	; 30
     4c8:	31 05       	cpc	r19, r1
     4ca:	24 f0       	brlt	.+8      	; 0x4d4 <__stack+0x75>
     4cc:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <long_freq_ar_i+0x1>
     4d0:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <long_freq_ar_i>
					float long_average_freq = get_av(long_last_frequencies, LONG_FREQ_AR_LEN);
     4d4:	6e e1       	ldi	r22, 0x1E	; 30
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	84 ee       	ldi	r24, 0xE4	; 228
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	60 df       	rcall	.-320    	; 0x39e <_Z6get_avPdi>
     4de:	4b 01       	movw	r8, r22
     4e0:	5c 01       	movw	r10, r24
					float diff = fabs(long_average_freq - frequency);
     4e2:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <_ZL9frequency>
     4e6:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <_ZL9frequency+0x1>
     4ea:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <_ZL9frequency+0x2>
     4ee:	50 91 6a 01 	lds	r21, 0x016A	; 0x80016a <_ZL9frequency+0x3>
					float max_diff = long_average_freq * FREQ_MAX_DIFF;

					if (diff < max_diff){
     4f2:	d2 d4       	rcall	.+2468   	; 0xe98 <__subsf3>
     4f4:	6b 01       	movw	r12, r22
     4f6:	7c 01       	movw	r14, r24
     4f8:	e8 94       	clt
     4fa:	f7 f8       	bld	r15, 7
     4fc:	2d ec       	ldi	r18, 0xCD	; 205
     4fe:	3c ec       	ldi	r19, 0xCC	; 204
     500:	4c e4       	ldi	r20, 0x4C	; 76
     502:	5e e3       	ldi	r21, 0x3E	; 62
     504:	c5 01       	movw	r24, r10
     506:	b4 01       	movw	r22, r8
     508:	9e d6       	rcall	.+3388   	; 0x1246 <__mulsf3>
     50a:	9b 01       	movw	r18, r22
     50c:	ac 01       	movw	r20, r24
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	27 d5       	rcall	.+2638   	; 0xf62 <__cmpsf2>
     514:	88 23       	and	r24, r24
     516:	2c f5       	brge	.+74     	; 0x562 <__stack+0x103>
						// get average freq
						short_last_frequencies[short_freq_ar_i++] = frequency;
     518:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
     51c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
     520:	9c 01       	movw	r18, r24
     522:	2f 5f       	subi	r18, 0xFF	; 255
     524:	3f 4f       	sbci	r19, 0xFF	; 255
     526:	30 93 b1 00 	sts	0x00B1, r19	; 0x8000b1 <__data_end+0x1>
     52a:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__data_end>
     52e:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <_ZL9frequency>
     532:	50 91 68 01 	lds	r21, 0x0168	; 0x800168 <_ZL9frequency+0x1>
     536:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <_ZL9frequency+0x2>
     53a:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <_ZL9frequency+0x3>
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	fc 01       	movw	r30, r24
     548:	ee 54       	subi	r30, 0x4E	; 78
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	40 83       	st	Z, r20
     54e:	51 83       	std	Z+1, r21	; 0x01
     550:	62 83       	std	Z+2, r22	; 0x02
     552:	73 83       	std	Z+3, r23	; 0x03
						if (short_freq_ar_i >= SHORT_FREQ_AR_LEN) short_freq_ar_i = 0;
     554:	2c 30       	cpi	r18, 0x0C	; 12
     556:	31 05       	cpc	r19, r1
     558:	24 f0       	brlt	.+8      	; 0x562 <__stack+0x103>
     55a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__data_end+0x1>
     55e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
					}
			
					float short_average_freq = get_av(short_last_frequencies, SHORT_FREQ_AR_LEN);
     562:	6c e0       	ldi	r22, 0x0C	; 12
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	82 eb       	ldi	r24, 0xB2	; 178
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	19 df       	rcall	.-462    	; 0x39e <_Z6get_avPdi>
     56c:	6b 01       	movw	r12, r22
     56e:	7c 01       	movw	r14, r24
					getNoteByFreq(&currentNote, short_average_freq); // RECOGNIZE NOTE
     570:	ab 01       	movw	r20, r22
     572:	bc 01       	movw	r22, r24
     574:	88 ed       	ldi	r24, 0xD8	; 216
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	b1 d2       	rcall	.+1378   	; 0xadc <_Z13getNoteByFreqP4Noted>
					if (currentNote.valid) {
     57a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <currentNote+0xe>
     57e:	88 23       	and	r24, r24
     580:	39 f0       	breq	.+14     	; 0x590 <__stack+0x131>
						//USART_Transmit_int((int)short_average_freq);
						//USART_Println();
						//USART_Println();
						displ.displayNote(&currentNote, short_average_freq); // DISPLAY NOTE
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	68 ed       	ldi	r22, 0xD8	; 216
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	8e e9       	ldi	r24, 0x9E	; 158
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	4a d2       	rcall	.+1172   	; 0xa24 <_ZN7Display11displayNoteEPK4Noted>
					//USART_Transmit(' ');
					//USART_Transmit_int((int)(ticks));
					//USART_Transmit(' ');
					//USART_Println();
					
					ticks = 0;
     590:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <_ZL5ticks+0x1>
     594:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <_ZL5ticks>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     598:	8f e4       	ldi	r24, 0x4F	; 79
     59a:	93 ec       	ldi	r25, 0xC3	; 195
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	f1 f7       	brne	.-4      	; 0x59c <__stack+0x13d>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__stack+0x143>
     5a2:	00 00       	nop
     5a4:	42 cf       	rjmp	.-380    	; 0x42a <main+0x2>

000005a6 <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     5a6:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     5aa:	ee e9       	ldi	r30, 0x9E	; 158
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	11 82       	std	Z+1, r1	; 0x01
     5b0:	10 82       	st	Z, r1
     5b2:	12 82       	std	Z+2, r1	; 0x02
     5b4:	08 95       	ret

000005b6 <_ZN7Display5lightEj>:
	}
	this->currentSharpPinStatus = light;
}


void Display::printCacheInfo() {
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	86 17       	cp	r24, r22
     5be:	97 07       	cpc	r25, r23
     5c0:	99 f0       	breq	.+38     	; 0x5e8 <_ZN7Display5lightEj+0x32>
     5c2:	12 ba       	out	0x12, r1	; 18
     5c4:	11 82       	std	Z+1, r1	; 0x01
     5c6:	10 82       	st	Z, r1
     5c8:	60 fd       	sbrc	r22, 0
     5ca:	91 9a       	sbi	0x12, 1	; 18
     5cc:	61 fd       	sbrc	r22, 1
     5ce:	94 9a       	sbi	0x12, 4	; 18
     5d0:	62 fd       	sbrc	r22, 2
     5d2:	95 9a       	sbi	0x12, 5	; 18
     5d4:	63 fd       	sbrc	r22, 3
     5d6:	96 9a       	sbi	0x12, 6	; 18
     5d8:	64 fd       	sbrc	r22, 4
     5da:	92 9a       	sbi	0x12, 2	; 18
     5dc:	65 fd       	sbrc	r22, 5
     5de:	93 9a       	sbi	0x12, 3	; 18
     5e0:	66 fd       	sbrc	r22, 6
     5e2:	90 9a       	sbi	0x12, 0	; 18
     5e4:	71 83       	std	Z+1, r23	; 0x01
     5e6:	60 83       	st	Z, r22
     5e8:	08 95       	ret

000005ea <_ZN7Display10lightSharpEb>:
     5ea:	66 23       	and	r22, r22
     5ec:	11 f0       	breq	.+4      	; 0x5f2 <_ZN7Display10lightSharpEb+0x8>
     5ee:	97 9a       	sbi	0x12, 7	; 18
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <_ZN7Display10lightSharpEb+0xa>
     5f2:	97 98       	cbi	0x12, 7	; 18
     5f4:	fc 01       	movw	r30, r24
     5f6:	62 83       	std	Z+2, r22	; 0x02
     5f8:	08 95       	ret

000005fa <_ZN7Display12rebuildCacheEd>:
	//Serial.print(ledFCache.Bs[2]);
	//Serial.println();
}

// build a and b coefficients for linear functions
void Display::rebuildCache(double max_distance) {
     5fa:	4f 92       	push	r4
     5fc:	5f 92       	push	r5
     5fe:	6f 92       	push	r6
     600:	7f 92       	push	r7
     602:	8f 92       	push	r8
     604:	9f 92       	push	r9
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	ec 01       	movw	r28, r24
     618:	4a 01       	movw	r8, r20
     61a:	5b 01       	movw	r10, r22
	this->ledFCache.xBounds[0] = this->xBoundFactors[0] * max_distance;
     61c:	2b e7       	ldi	r18, 0x7B	; 123
     61e:	34 e1       	ldi	r19, 0x14	; 20
     620:	4e ea       	ldi	r20, 0xAE	; 174
     622:	5d e3       	ldi	r21, 0x3D	; 61
     624:	c5 01       	movw	r24, r10
     626:	b4 01       	movw	r22, r8
     628:	0e d6       	rcall	.+3100   	; 0x1246 <__mulsf3>
     62a:	2b 01       	movw	r4, r22
     62c:	3c 01       	movw	r6, r24
     62e:	6e a7       	std	Y+46, r22	; 0x2e
     630:	7f a7       	std	Y+47, r23	; 0x2f
     632:	88 ab       	std	Y+48, r24	; 0x30
     634:	99 ab       	std	Y+49, r25	; 0x31
	this->ledFCache.xBounds[1] = this->xBoundFactors[1] * max_distance;
     636:	2a e9       	ldi	r18, 0x9A	; 154
     638:	39 e9       	ldi	r19, 0x99	; 153
     63a:	49 e1       	ldi	r20, 0x19	; 25
     63c:	5e e3       	ldi	r21, 0x3E	; 62
     63e:	c5 01       	movw	r24, r10
     640:	b4 01       	movw	r22, r8
     642:	01 d6       	rcall	.+3074   	; 0x1246 <__mulsf3>
     644:	6b 01       	movw	r12, r22
     646:	7c 01       	movw	r14, r24
     648:	6a ab       	std	Y+50, r22	; 0x32
     64a:	7b ab       	std	Y+51, r23	; 0x33
     64c:	8c ab       	std	Y+52, r24	; 0x34
     64e:	9d ab       	std	Y+53, r25	; 0x35
	this->ledFCache.xBounds[2] = this->xBoundFactors[2] * max_distance; 
     650:	23 e3       	ldi	r18, 0x33	; 51
     652:	33 e3       	ldi	r19, 0x33	; 51
     654:	43 eb       	ldi	r20, 0xB3	; 179
     656:	5e e3       	ldi	r21, 0x3E	; 62
     658:	c5 01       	movw	r24, r10
     65a:	b4 01       	movw	r22, r8
     65c:	f4 d5       	rcall	.+3048   	; 0x1246 <__mulsf3>
     65e:	4b 01       	movw	r8, r22
     660:	5c 01       	movw	r10, r24
     662:	6e ab       	std	Y+54, r22	; 0x36
     664:	7f ab       	std	Y+55, r23	; 0x37
     666:	88 af       	std	Y+56, r24	; 0x38
     668:	99 af       	std	Y+57, r25	; 0x39
	
	this->ledFCache.As[0] = (this->yBounds[0] - this->MAX_ANALOG) / (this->ledFCache.xBounds[0]);
     66a:	a3 01       	movw	r20, r6
     66c:	92 01       	movw	r18, r4
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e7       	ldi	r24, 0x70	; 112
     674:	92 ec       	ldi	r25, 0xC2	; 194
     676:	79 d4       	rcall	.+2290   	; 0xf6a <__divsf3>
     678:	6e 8b       	std	Y+22, r22	; 0x16
     67a:	7f 8b       	std	Y+23, r23	; 0x17
     67c:	88 8f       	std	Y+24, r24	; 0x18
     67e:	99 8f       	std	Y+25, r25	; 0x19
	this->ledFCache.Bs[0] = this->MAX_ANALOG;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	a0 ef       	ldi	r26, 0xF0	; 240
     686:	b2 e4       	ldi	r27, 0x42	; 66
     688:	8a a3       	std	Y+34, r24	; 0x22
     68a:	9b a3       	std	Y+35, r25	; 0x23
     68c:	ac a3       	std	Y+36, r26	; 0x24
     68e:	bd a3       	std	Y+37, r27	; 0x25
	
	this->ledFCache.As[1] = (this->yBounds[1] - this->yBounds[0]) / (this->ledFCache.xBounds[1] - this->ledFCache.xBounds[0]);
     690:	a3 01       	movw	r20, r6
     692:	92 01       	movw	r18, r4
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	ff d3       	rcall	.+2046   	; 0xe98 <__subsf3>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e1       	ldi	r24, 0x10	; 16
     6a4:	92 ec       	ldi	r25, 0xC2	; 194
     6a6:	61 d4       	rcall	.+2242   	; 0xf6a <__divsf3>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	6a 8f       	std	Y+26, r22	; 0x1a
     6ae:	7b 8f       	std	Y+27, r23	; 0x1b
     6b0:	8c 8f       	std	Y+28, r24	; 0x1c
     6b2:	9d 8f       	std	Y+29, r25	; 0x1d
	this->ledFCache.Bs[1] = this->yBounds[1] - (this->ledFCache.As[1] * this->ledFCache.xBounds[1]);
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	c6 d5       	rcall	.+2956   	; 0x1246 <__mulsf3>
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	80 ec       	ldi	r24, 0xC0	; 192
     6c4:	91 e4       	ldi	r25, 0x41	; 65
     6c6:	e8 d3       	rcall	.+2000   	; 0xe98 <__subsf3>
     6c8:	6e a3       	std	Y+38, r22	; 0x26
     6ca:	7f a3       	std	Y+39, r23	; 0x27
     6cc:	88 a7       	std	Y+40, r24	; 0x28
     6ce:	99 a7       	std	Y+41, r25	; 0x29
	
	ledFCache.As[2] = (yBounds[2] - yBounds[1]) / (ledFCache.xBounds[2] - ledFCache.xBounds[1]);
     6d0:	a7 01       	movw	r20, r14
     6d2:	96 01       	movw	r18, r12
     6d4:	c5 01       	movw	r24, r10
     6d6:	b4 01       	movw	r22, r8
     6d8:	df d3       	rcall	.+1982   	; 0xe98 <__subsf3>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 ec       	ldi	r24, 0xC0	; 192
     6e4:	91 ec       	ldi	r25, 0xC1	; 193
     6e6:	41 d4       	rcall	.+2178   	; 0xf6a <__divsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	6e 8f       	std	Y+30, r22	; 0x1e
     6ee:	7f 8f       	std	Y+31, r23	; 0x1f
     6f0:	88 a3       	std	Y+32, r24	; 0x20
     6f2:	99 a3       	std	Y+33, r25	; 0x21
	ledFCache.Bs[2] = yBounds[2] - (ledFCache.As[2] * ledFCache.xBounds[2]);
     6f4:	c5 01       	movw	r24, r10
     6f6:	b4 01       	movw	r22, r8
     6f8:	a6 d5       	rcall	.+2892   	; 0x1246 <__mulsf3>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	cb 01       	movw	r24, r22
     704:	c9 d3       	rcall	.+1938   	; 0xe98 <__subsf3>
     706:	6a a7       	std	Y+42, r22	; 0x2a
     708:	7b a7       	std	Y+43, r23	; 0x2b
     70a:	8c a7       	std	Y+44, r24	; 0x2c
     70c:	9d a7       	std	Y+45, r25	; 0x2d
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	9f 90       	pop	r9
     720:	8f 90       	pop	r8
     722:	7f 90       	pop	r7
     724:	6f 90       	pop	r6
     726:	5f 90       	pop	r5
     728:	4f 90       	pop	r4
     72a:	08 95       	ret

0000072c <_ZN7Display25getIndicatorValByDistanceEdd>:

int Display::getIndicatorValByDistance(double distance, double max_distance) {
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
     746:	6a 01       	movw	r12, r20
     748:	7b 01       	movw	r14, r22
     74a:	48 01       	movw	r8, r16
     74c:	59 01       	movw	r10, r18
	this->rebuildCache(max_distance); // find new functions
     74e:	b9 01       	movw	r22, r18
     750:	a8 01       	movw	r20, r16
     752:	53 df       	rcall	.-346    	; 0x5fa <_ZN7Display12rebuildCacheEd>
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	a9 01       	movw	r20, r18
     75a:	c7 01       	movw	r24, r14
     75c:	b6 01       	movw	r22, r12
     75e:	01 d4       	rcall	.+2050   	; 0xf62 <__cmpsf2>
     760:	88 23       	and	r24, r24
     762:	0c f4       	brge	.+2      	; 0x766 <_ZN7Display25getIndicatorValByDistanceEdd+0x3a>
     764:	57 c0       	rjmp	.+174    	; 0x814 <_ZN7Display25getIndicatorValByDistanceEdd+0xe8>
	if (distance > max_distance) return 0;
     766:	a7 01       	movw	r20, r14
     768:	96 01       	movw	r18, r12
     76a:	c5 01       	movw	r24, r10
     76c:	b4 01       	movw	r22, r8
     76e:	f9 d3       	rcall	.+2034   	; 0xf62 <__cmpsf2>
     770:	88 23       	and	r24, r24
     772:	0c f4       	brge	.+2      	; 0x776 <_ZN7Display25getIndicatorValByDistanceEdd+0x4a>
     774:	52 c0       	rjmp	.+164    	; 0x81a <_ZN7Display25getIndicatorValByDistanceEdd+0xee>
	
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     776:	8e a8       	ldd	r8, Y+54	; 0x36
     778:	9f a8       	ldd	r9, Y+55	; 0x37
     77a:	a8 ac       	ldd	r10, Y+56	; 0x38
     77c:	b9 ac       	ldd	r11, Y+57	; 0x39
     77e:	a5 01       	movw	r20, r10
     780:	94 01       	movw	r18, r8
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	5b d5       	rcall	.+2742   	; 0x123e <__gesf2>
     788:	18 16       	cp	r1, r24
     78a:	0c f4       	brge	.+2      	; 0x78e <_ZN7Display25getIndicatorValByDistanceEdd+0x62>
     78c:	49 c0       	rjmp	.+146    	; 0x820 <_ZN7Display25getIndicatorValByDistanceEdd+0xf4>

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
	if (distance <= ledFCache.xBounds[i])
     78e:	2e a5       	ldd	r18, Y+46	; 0x2e
     790:	3f a5       	ldd	r19, Y+47	; 0x2f
     792:	48 a9       	ldd	r20, Y+48	; 0x30
     794:	59 a9       	ldd	r21, Y+49	; 0x31
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	e3 d3       	rcall	.+1990   	; 0xf62 <__cmpsf2>
     79c:	18 16       	cp	r1, r24
     79e:	b4 f4       	brge	.+44     	; 0x7cc <_ZN7Display25getIndicatorValByDistanceEdd+0xa0>
     7a0:	2a a9       	ldd	r18, Y+50	; 0x32
     7a2:	3b a9       	ldd	r19, Y+51	; 0x33
     7a4:	4c a9       	ldd	r20, Y+52	; 0x34
     7a6:	5d a9       	ldd	r21, Y+53	; 0x35
     7a8:	c7 01       	movw	r24, r14
     7aa:	b6 01       	movw	r22, r12
     7ac:	da d3       	rcall	.+1972   	; 0xf62 <__cmpsf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	54 f4       	brge	.+20     	; 0x7c6 <_ZN7Display25getIndicatorValByDistanceEdd+0x9a>
     7b2:	a5 01       	movw	r20, r10
     7b4:	94 01       	movw	r18, r8
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	d3 d3       	rcall	.+1958   	; 0xf62 <__cmpsf2>
     7bc:	18 16       	cp	r1, r24
     7be:	4c f0       	brlt	.+18     	; 0x7d2 <_ZN7Display25getIndicatorValByDistanceEdd+0xa6>
	
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     7c0:	02 e0       	ldi	r16, 0x02	; 2
     7c2:	10 e0       	ldi	r17, 0x00	; 0
     7c4:	08 c0       	rjmp	.+16     	; 0x7d6 <_ZN7Display25getIndicatorValByDistanceEdd+0xaa>
     7c6:	01 e0       	ldi	r16, 0x01	; 1
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <_ZN7Display25getIndicatorValByDistanceEdd+0xaa>
	if (distance <= ledFCache.xBounds[i])
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <_ZN7Display25getIndicatorValByDistanceEdd+0xaa>
	
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high

	// Find which function to use
	int i = 0;
	for(; i < LEDFunctions_Len; i++)
     7d2:	03 e0       	ldi	r16, 0x03	; 3
     7d4:	10 e0       	ldi	r17, 0x00	; 0
	if (distance <= ledFCache.xBounds[i])
	break;
	
	int val = (int)((ledFCache.As[i] * distance) + ledFCache.Bs[i]);
     7d6:	f8 01       	movw	r30, r16
     7d8:	31 96       	adiw	r30, 0x01	; 1
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ec 0f       	add	r30, r28
     7e4:	fd 1f       	adc	r31, r29
     7e6:	22 89       	ldd	r18, Z+18	; 0x12
     7e8:	33 89       	ldd	r19, Z+19	; 0x13
     7ea:	44 89       	ldd	r20, Z+20	; 0x14
     7ec:	55 89       	ldd	r21, Z+21	; 0x15
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	29 d5       	rcall	.+2642   	; 0x1246 <__mulsf3>
     7f4:	0c 5f       	subi	r16, 0xFC	; 252
     7f6:	1f 4f       	sbci	r17, 0xFF	; 255
     7f8:	00 0f       	add	r16, r16
     7fa:	11 1f       	adc	r17, r17
     7fc:	00 0f       	add	r16, r16
     7fe:	11 1f       	adc	r17, r17
     800:	c0 0f       	add	r28, r16
     802:	d1 1f       	adc	r29, r17
     804:	2a 89       	ldd	r18, Y+18	; 0x12
     806:	3b 89       	ldd	r19, Y+19	; 0x13
     808:	4c 89       	ldd	r20, Y+20	; 0x14
     80a:	5d 89       	ldd	r21, Y+21	; 0x15
     80c:	46 d3       	rcall	.+1676   	; 0xe9a <__addsf3>
     80e:	15 d4       	rcall	.+2090   	; 0x103a <__fixsfsi>
	//float inv_dist = max_distance - distance;
	//float percentage = (inv_dist / max_distance) * 100.0;
	//int val = (int)(percentage * (float)MAX_ANALOG);
	
	
	return val;
     810:	cb 01       	movw	r24, r22
     812:	08 c0       	rjmp	.+16     	; 0x824 <_ZN7Display25getIndicatorValByDistanceEdd+0xf8>
}

int Display::getIndicatorValByDistance(double distance, double max_distance) {
	this->rebuildCache(max_distance); // find new functions
	
	if (distance < 0) return MAX_ANALOG; // distance should never be negative - in case it is, return max
     814:	88 e7       	ldi	r24, 0x78	; 120
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <_ZN7Display25getIndicatorValByDistanceEdd+0xf8>
	if (distance > max_distance) return 0;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	02 c0       	rjmp	.+4      	; 0x824 <_ZN7Display25getIndicatorValByDistanceEdd+0xf8>
	
	if (distance > ledFCache.xBounds[2]) return 0; // always no light if distance too high
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
	//float percentage = (inv_dist / max_distance) * 100.0;
	//int val = (int)(percentage * (float)MAX_ANALOG);
	
	
	return val;
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	08 95       	ret

0000083e <_ZN7Display14lightIndicatorEPK4Noted>:

// currentFreq must be beterrn min and max freq of note
void Display::lightIndicator(const Note* note, double currentFreq) {
     83e:	2f 92       	push	r2
     840:	3f 92       	push	r3
     842:	4f 92       	push	r4
     844:	5f 92       	push	r5
     846:	6f 92       	push	r6
     848:	7f 92       	push	r7
     84a:	8f 92       	push	r8
     84c:	9f 92       	push	r9
     84e:	af 92       	push	r10
     850:	bf 92       	push	r11
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	6c 97       	sbiw	r28, 0x1c	; 28
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
     872:	1c 01       	movw	r2, r24
     874:	8b 01       	movw	r16, r22
     876:	2d 8b       	std	Y+21, r18	; 0x15
     878:	3e 8b       	std	Y+22, r19	; 0x16
     87a:	4f 8b       	std	Y+23, r20	; 0x17
     87c:	58 8f       	std	Y+24, r21	; 0x18
	if (currentFreq < note->min_freq || currentFreq > note->max_freq) {
     87e:	db 01       	movw	r26, r22
     880:	16 96       	adiw	r26, 0x06	; 6
     882:	4d 90       	ld	r4, X+
     884:	5d 90       	ld	r5, X+
     886:	6d 90       	ld	r6, X+
     888:	7c 90       	ld	r7, X
     88a:	19 97       	sbiw	r26, 0x09	; 9
		//return;
	}
	double max_dist = (note->max_freq - note->min_freq);
     88c:	1a 96       	adiw	r26, 0x0a	; 10
     88e:	8d 91       	ld	r24, X+
     890:	9d 91       	ld	r25, X+
     892:	0d 90       	ld	r0, X+
     894:	bc 91       	ld	r27, X
     896:	a0 2d       	mov	r26, r0
     898:	89 8f       	std	Y+25, r24	; 0x19
     89a:	9a 8f       	std	Y+26, r25	; 0x1a
     89c:	ab 8f       	std	Y+27, r26	; 0x1b
     89e:	bc 8f       	std	Y+28, r27	; 0x1c
     8a0:	a3 01       	movw	r20, r6
     8a2:	92 01       	movw	r18, r4
     8a4:	bc 01       	movw	r22, r24
     8a6:	cd 01       	movw	r24, r26
     8a8:	f7 d2       	rcall	.+1518   	; 0xe98 <__subsf3>
     8aa:	6b 01       	movw	r12, r22
     8ac:	7c 01       	movw	r14, r24

	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
     8ae:	f8 01       	movw	r30, r16
     8b0:	82 80       	ldd	r8, Z+2	; 0x02
     8b2:	93 80       	ldd	r9, Z+3	; 0x03
     8b4:	a4 80       	ldd	r10, Z+4	; 0x04
     8b6:	b5 80       	ldd	r11, Z+5	; 0x05
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
     8b8:	a3 01       	movw	r20, r6
     8ba:	92 01       	movw	r18, r4
     8bc:	6d 89       	ldd	r22, Y+21	; 0x15
     8be:	7e 89       	ldd	r23, Y+22	; 0x16
     8c0:	8f 89       	ldd	r24, Y+23	; 0x17
     8c2:	98 8d       	ldd	r25, Y+24	; 0x18
     8c4:	e9 d2       	rcall	.+1490   	; 0xe98 <__subsf3>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	23 d4       	rcall	.+2118   	; 0x1116 <fmin>
		fmin(max_dist, fabs(currentFreq - bound_1)),
		fmin(max_dist, fabs(currentFreq - note->freq)),
		fmin(max_dist, fabs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     8d0:	69 83       	std	Y+1, r22	; 0x01
     8d2:	7a 83       	std	Y+2, r23	; 0x02
     8d4:	8b 83       	std	Y+3, r24	; 0x03
     8d6:	9c 83       	std	Y+4, r25	; 0x04
	double bound_1 = note->freq - (note->freq  - note->min_freq)/2.0;
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, fabs(currentFreq - bound_1)),
     8d8:	a3 01       	movw	r20, r6
     8da:	92 01       	movw	r18, r4
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	db d2       	rcall	.+1462   	; 0xe98 <__subsf3>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	5f e3       	ldi	r21, 0x3F	; 63
     8ea:	ad d4       	rcall	.+2394   	; 0x1246 <__mulsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c5 01       	movw	r24, r10
     8f2:	b4 01       	movw	r22, r8
     8f4:	d1 d2       	rcall	.+1442   	; 0xe98 <__subsf3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	6d 89       	ldd	r22, Y+21	; 0x15
     8fc:	7e 89       	ldd	r23, Y+22	; 0x16
     8fe:	8f 89       	ldd	r24, Y+23	; 0x17
     900:	98 8d       	ldd	r25, Y+24	; 0x18
     902:	ca d2       	rcall	.+1428   	; 0xe98 <__subsf3>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	5f 77       	andi	r21, 0x7F	; 127
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	03 d4       	rcall	.+2054   	; 0x1116 <fmin>
		fmin(max_dist, fabs(currentFreq - note->freq)),
		fmin(max_dist, fabs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     910:	6d 83       	std	Y+5, r22	; 0x05
     912:	7e 83       	std	Y+6, r23	; 0x06
     914:	8f 83       	std	Y+7, r24	; 0x07
     916:	98 87       	std	Y+8, r25	; 0x08
	double bound_3 = note->freq + (note->max_freq - note->freq)/2.0;
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, fabs(currentFreq - bound_1)),
		fmin(max_dist, fabs(currentFreq - note->freq)),
     918:	a5 01       	movw	r20, r10
     91a:	94 01       	movw	r18, r8
     91c:	6d 89       	ldd	r22, Y+21	; 0x15
     91e:	7e 89       	ldd	r23, Y+22	; 0x16
     920:	8f 89       	ldd	r24, Y+23	; 0x17
     922:	98 8d       	ldd	r25, Y+24	; 0x18
     924:	b9 d2       	rcall	.+1394   	; 0xe98 <__subsf3>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	5f 77       	andi	r21, 0x7F	; 127
     92c:	c7 01       	movw	r24, r14
     92e:	b6 01       	movw	r22, r12
     930:	f2 d3       	rcall	.+2020   	; 0x1116 <fmin>
		fmin(max_dist, fabs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
     932:	69 87       	std	Y+9, r22	; 0x09
     934:	7a 87       	std	Y+10, r23	; 0x0a
     936:	8b 87       	std	Y+11, r24	; 0x0b
     938:	9c 87       	std	Y+12, r25	; 0x0c
	
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, fabs(currentFreq - bound_1)),
		fmin(max_dist, fabs(currentFreq - note->freq)),
		fmin(max_dist, fabs(bound_3 - currentFreq)),
     93a:	a5 01       	movw	r20, r10
     93c:	94 01       	movw	r18, r8
     93e:	69 8d       	ldd	r22, Y+25	; 0x19
     940:	7a 8d       	ldd	r23, Y+26	; 0x1a
     942:	8b 8d       	ldd	r24, Y+27	; 0x1b
     944:	9c 8d       	ldd	r25, Y+28	; 0x1c
     946:	a8 d2       	rcall	.+1360   	; 0xe98 <__subsf3>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	5f e3       	ldi	r21, 0x3F	; 63
     950:	7a d4       	rcall	.+2292   	; 0x1246 <__mulsf3>
     952:	a5 01       	movw	r20, r10
     954:	94 01       	movw	r18, r8
     956:	a1 d2       	rcall	.+1346   	; 0xe9a <__addsf3>
     958:	2d 89       	ldd	r18, Y+21	; 0x15
     95a:	3e 89       	ldd	r19, Y+22	; 0x16
     95c:	4f 89       	ldd	r20, Y+23	; 0x17
     95e:	58 8d       	ldd	r21, Y+24	; 0x18
     960:	9b d2       	rcall	.+1334   	; 0xe98 <__subsf3>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	5f 77       	andi	r21, 0x7F	; 127
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	d4 d3       	rcall	.+1960   	; 0x1116 <fmin>
		fmin(max_dist, note->max_freq - currentFreq)
	};
     96e:	6d 87       	std	Y+13, r22	; 0x0d
     970:	7e 87       	std	Y+14, r23	; 0x0e
     972:	8f 87       	std	Y+15, r24	; 0x0f
     974:	98 8b       	std	Y+16, r25	; 0x10
	double dists[] = {
		fmin(max_dist, currentFreq - note->min_freq),
		fmin(max_dist, fabs(currentFreq - bound_1)),
		fmin(max_dist, fabs(currentFreq - note->freq)),
		fmin(max_dist, fabs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
     976:	2d 89       	ldd	r18, Y+21	; 0x15
     978:	3e 89       	ldd	r19, Y+22	; 0x16
     97a:	4f 89       	ldd	r20, Y+23	; 0x17
     97c:	58 8d       	ldd	r21, Y+24	; 0x18
     97e:	69 8d       	ldd	r22, Y+25	; 0x19
     980:	7a 8d       	ldd	r23, Y+26	; 0x1a
     982:	8b 8d       	ldd	r24, Y+27	; 0x1b
     984:	9c 8d       	ldd	r25, Y+28	; 0x1c
     986:	88 d2       	rcall	.+1296   	; 0xe98 <__subsf3>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	c2 d3       	rcall	.+1924   	; 0x1116 <fmin>
	};
     992:	69 8b       	std	Y+17, r22	; 0x11
     994:	7a 8b       	std	Y+18, r23	; 0x12
     996:	8b 8b       	std	Y+19, r24	; 0x13
     998:	9c 8b       	std	Y+20, r25	; 0x14
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	3c 01       	movw	r6, r24
     9a0:	41 01       	movw	r8, r2
     9a2:	aa 24       	eor	r10, r10
     9a4:	a3 94       	inc	r10
     9a6:	b1 2c       	mov	r11, r1
     9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <_ZN7Display14lightIndicatorEPK4Noted+0x178>
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
     9ac:	a9 1a       	sub	r10, r25
     9ae:	b9 0a       	sbc	r11, r25
     9b0:	a3 e0       	ldi	r26, 0x03	; 3
     9b2:	8a 0e       	add	r8, r26
     9b4:	91 1c       	adc	r9, r1
	
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
     9b6:	f3 01       	movw	r30, r6
     9b8:	41 91       	ld	r20, Z+
     9ba:	51 91       	ld	r21, Z+
     9bc:	61 91       	ld	r22, Z+
     9be:	71 91       	ld	r23, Z+
     9c0:	3f 01       	movw	r6, r30
     9c2:	97 01       	movw	r18, r14
     9c4:	86 01       	movw	r16, r12
     9c6:	c1 01       	movw	r24, r2
     9c8:	b1 de       	rcall	.-670    	; 0x72c <_ZN7Display25getIndicatorValByDistanceEdd>
		if (i != 2) {
     9ca:	f3 e0       	ldi	r31, 0x03	; 3
     9cc:	af 16       	cp	r10, r31
     9ce:	b1 04       	cpc	r11, r1
     9d0:	41 f0       	breq	.+16     	; 0x9e2 <_ZN7Display14lightIndicatorEPK4Noted+0x1a4>
			this->indicatorBar[i].r = val;
     9d2:	d4 01       	movw	r26, r8
     9d4:	13 96       	adiw	r26, 0x03	; 3
     9d6:	8c 93       	st	X, r24
		fmin(max_dist, fabs(bound_3 - currentFreq)),
		fmin(max_dist, note->max_freq - currentFreq)
	};
	
	
	for (int i = 0; i < INDICATOR_BAR_LEN; i++) {
     9d8:	b5 e0       	ldi	r27, 0x05	; 5
     9da:	ab 16       	cp	r10, r27
     9dc:	b1 04       	cpc	r11, r1
     9de:	2c f3       	brlt	.-54     	; 0x9aa <_ZN7Display14lightIndicatorEPK4Noted+0x16c>
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <_ZN7Display14lightIndicatorEPK4Noted+0x1aa>
		int val = this->getIndicatorValByDistance(dists[i], max_dist);
		if (i != 2) {
			this->indicatorBar[i].r = val;
		} else { 
			this->indicatorBar[i].g = val;
     9e2:	f1 01       	movw	r30, r2
     9e4:	82 87       	std	Z+10, r24	; 0x0a
     9e6:	e1 cf       	rjmp	.-62     	; 0x9aa <_ZN7Display14lightIndicatorEPK4Noted+0x16c>
		}
	}
	

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
     9e8:	6f e0       	ldi	r22, 0x0F	; 15
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	c1 01       	movw	r24, r2
     9ee:	03 96       	adiw	r24, 0x03	; 3
     9f0:	25 d2       	rcall	.+1098   	; 0xe3c <ws2812_sendarray>
}
     9f2:	6c 96       	adiw	r28, 0x1c	; 28
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	af 90       	pop	r10
     a12:	9f 90       	pop	r9
     a14:	8f 90       	pop	r8
     a16:	7f 90       	pop	r7
     a18:	6f 90       	pop	r6
     a1a:	5f 90       	pop	r5
     a1c:	4f 90       	pop	r4
     a1e:	3f 90       	pop	r3
     a20:	2f 90       	pop	r2
     a22:	08 95       	ret

00000a24 <_ZN7Display11displayNoteEPK4Noted>:

void Display::displayNote(const Note* note, double frequency) {
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	ec 01       	movw	r28, r24
     a36:	8b 01       	movw	r16, r22
     a38:	69 01       	movw	r12, r18
     a3a:	7a 01       	movw	r14, r20
	DI di = DI::A;
	switch(note->note) {
     a3c:	fb 01       	movw	r30, r22
     a3e:	80 81       	ld	r24, Z
     a40:	84 34       	cpi	r24, 0x44	; 68
     a42:	81 f0       	breq	.+32     	; 0xa64 <_ZN7Display11displayNoteEPK4Noted+0x40>
     a44:	28 f4       	brcc	.+10     	; 0xa50 <_ZN7Display11displayNoteEPK4Noted+0x2c>
     a46:	82 34       	cpi	r24, 0x42	; 66
     a48:	49 f0       	breq	.+18     	; 0xa5c <_ZN7Display11displayNoteEPK4Noted+0x38>
     a4a:	83 34       	cpi	r24, 0x43	; 67
     a4c:	49 f0       	breq	.+18     	; 0xa60 <_ZN7Display11displayNoteEPK4Noted+0x3c>
     a4e:	12 c0       	rjmp	.+36     	; 0xa74 <_ZN7Display11displayNoteEPK4Noted+0x50>
     a50:	86 34       	cpi	r24, 0x46	; 70
     a52:	61 f0       	breq	.+24     	; 0xa6c <_ZN7Display11displayNoteEPK4Noted+0x48>
     a54:	48 f0       	brcs	.+18     	; 0xa68 <_ZN7Display11displayNoteEPK4Noted+0x44>
     a56:	87 34       	cpi	r24, 0x47	; 71
     a58:	59 f0       	breq	.+22     	; 0xa70 <_ZN7Display11displayNoteEPK4Noted+0x4c>
     a5a:	0c c0       	rjmp	.+24     	; 0xa74 <_ZN7Display11displayNoteEPK4Noted+0x50>
		case 'A':
		di = DI::A;
		break;
		case 'B':
		di = DI::B;
     a5c:	69 e7       	ldi	r22, 0x79	; 121
     a5e:	0b c0       	rjmp	.+22     	; 0xa76 <_ZN7Display11displayNoteEPK4Noted+0x52>
		break;
		case 'C':
		di = DI::C;
     a60:	62 e7       	ldi	r22, 0x72	; 114
		break;
     a62:	09 c0       	rjmp	.+18     	; 0xa76 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'D':
		di = DI::D;
     a64:	6d e3       	ldi	r22, 0x3D	; 61
		break;
     a66:	07 c0       	rjmp	.+14     	; 0xa76 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'E':
		di = DI::E;
     a68:	63 e7       	ldi	r22, 0x73	; 115
		break;
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'F':
		di = DI::F;
     a6c:	63 e6       	ldi	r22, 0x63	; 99
		break;
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <_ZN7Display11displayNoteEPK4Noted+0x52>
		case 'G':
		di = DI::G;
     a70:	6a e7       	ldi	r22, 0x7A	; 122
		break;
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <_ZN7Display11displayNoteEPK4Noted+0x52>

	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::displayNote(const Note* note, double frequency) {
	DI di = DI::A;
     a74:	6f e6       	ldi	r22, 0x6F	; 111
void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
}

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	ce 01       	movw	r24, r28
     a7a:	9d dd       	rcall	.-1222   	; 0x5b6 <_ZN7Display5lightEj>
		di = DI::G;
		break;
	}
	
	this->light(di);
	this->lightSharp(note->sharp);
     a7c:	f8 01       	movw	r30, r16
     a7e:	61 81       	ldd	r22, Z+1	; 0x01
     a80:	ce 01       	movw	r24, r28
     a82:	b3 dd       	rcall	.-1178   	; 0x5ea <_ZN7Display10lightSharpEb>
	this->lightIndicator(note, frequency);
     a84:	a7 01       	movw	r20, r14
     a86:	96 01       	movw	r18, r12
     a88:	b8 01       	movw	r22, r16
     a8a:	ce 01       	movw	r24, r28
     a8c:	d8 de       	rcall	.-592    	; 0x83e <_ZN7Display14lightIndicatorEPK4Noted>
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	08 95       	ret

00000aa0 <_Z11isFreqLegald>:
		multiplier *= 2.0;
		// last_octave_freq = FIRST_OCT_MAX_FREQ * multiplier;
	}

	return multiplier;
}
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	6b 01       	movw	r12, r22
     aaa:	7c 01       	movw	r14, r24
     aac:	2b e9       	ldi	r18, 0x9B	; 155
     aae:	38 e4       	ldi	r19, 0x48	; 72
     ab0:	4e e7       	ldi	r20, 0x7E	; 126
     ab2:	51 e4       	ldi	r21, 0x41	; 65
     ab4:	c4 d3       	rcall	.+1928   	; 0x123e <__gesf2>
     ab6:	88 23       	and	r24, r24
     ab8:	5c f0       	brlt	.+22     	; 0xad0 <_Z11isFreqLegald+0x30>
     aba:	22 e5       	ldi	r18, 0x52	; 82
     abc:	38 e4       	ldi	r19, 0x48	; 72
     abe:	4e ef       	ldi	r20, 0xFE	; 254
     ac0:	53 e4       	ldi	r21, 0x43	; 67
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	4d d2       	rcall	.+1178   	; 0xf62 <__cmpsf2>
     ac8:	88 1f       	adc	r24, r24
     aca:	88 27       	eor	r24, r24
     acc:	88 1f       	adc	r24, r24
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <_Z11isFreqLegald+0x32>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	08 95       	ret

00000adc <_Z13getNoteByFreqP4Noted>:

void getNoteByFreq(Note* note, double freq) {
     adc:	2f 92       	push	r2
     ade:	3f 92       	push	r3
     ae0:	4f 92       	push	r4
     ae2:	5f 92       	push	r5
     ae4:	6f 92       	push	r6
     ae6:	7f 92       	push	r7
     ae8:	8f 92       	push	r8
     aea:	9f 92       	push	r9
     aec:	af 92       	push	r10
     aee:	bf 92       	push	r11
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	2c 97       	sbiw	r28, 0x0c	; 12
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	9e 83       	std	Y+6, r25	; 0x06
     b12:	8d 83       	std	Y+5, r24	; 0x05
     b14:	2a 01       	movw	r4, r20
     b16:	3b 01       	movw	r6, r22

#include "noteDetection.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     b18:	2b e9       	ldi	r18, 0x9B	; 155
     b1a:	38 e4       	ldi	r19, 0x48	; 72
     b1c:	4e e7       	ldi	r20, 0x7E	; 126
     b1e:	51 e4       	ldi	r21, 0x41	; 65
     b20:	c3 01       	movw	r24, r6
     b22:	b2 01       	movw	r22, r4
     b24:	8c d3       	rcall	.+1816   	; 0x123e <__gesf2>
     b26:	88 23       	and	r24, r24
     b28:	0c f4       	brge	.+2      	; 0xb2c <_Z13getNoteByFreqP4Noted+0x50>
     b2a:	ef c0       	rjmp	.+478    	; 0xd0a <_Z13getNoteByFreqP4Noted+0x22e>
     b2c:	22 e5       	ldi	r18, 0x52	; 82
     b2e:	38 e4       	ldi	r19, 0x48	; 72
     b30:	4e ef       	ldi	r20, 0xFE	; 254
     b32:	53 e4       	ldi	r21, 0x43	; 67
     b34:	c3 01       	movw	r24, r6
     b36:	b2 01       	movw	r22, r4
     b38:	14 d2       	rcall	.+1064   	; 0xf62 <__cmpsf2>
     b3a:	88 23       	and	r24, r24
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <_Z13getNoteByFreqP4Noted+0x64>
     b3e:	e5 c0       	rjmp	.+458    	; 0xd0a <_Z13getNoteByFreqP4Noted+0x22e>
     b40:	e8 c0       	rjmp	.+464    	; 0xd12 <_Z13getNoteByFreqP4Noted+0x236>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b42:	0f 2e       	mov	r0, r31
     b44:	c1 2c       	mov	r12, r1
     b46:	d1 2c       	mov	r13, r1
     b48:	f0 e8       	ldi	r31, 0x80	; 128
     b4a:	ef 2e       	mov	r14, r31
     b4c:	ff e3       	ldi	r31, 0x3F	; 63
     b4e:	ff 2e       	mov	r15, r31
     b50:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     b52:	a7 01       	movw	r20, r14
     b54:	96 01       	movw	r18, r12
     b56:	c7 01       	movw	r24, r14
     b58:	b6 01       	movw	r22, r12
     b5a:	9f d1       	rcall	.+830    	; 0xe9a <__addsf3>
     b5c:	6b 01       	movw	r12, r22
     b5e:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     b60:	2b e9       	ldi	r18, 0x9B	; 155
     b62:	38 e4       	ldi	r19, 0x48	; 72
     b64:	4e ef       	ldi	r20, 0xFE	; 254
     b66:	51 e4       	ldi	r21, 0x41	; 65
     b68:	6e d3       	rcall	.+1756   	; 0x1246 <__mulsf3>
     b6a:	4b 01       	movw	r8, r22
     b6c:	5c 01       	movw	r10, r24
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	c3 01       	movw	r24, r6
     b74:	b2 01       	movw	r22, r4
     b76:	63 d3       	rcall	.+1734   	; 0x123e <__gesf2>
     b78:	18 16       	cp	r1, r24
     b7a:	5c f3       	brlt	.-42     	; 0xb52 <_Z13getNoteByFreqP4Noted+0x76>
     b7c:	8f 82       	std	Y+7, r8	; 0x07
     b7e:	98 86       	std	Y+8, r9	; 0x08
     b80:	a9 86       	std	Y+9, r10	; 0x09
     b82:	ba 86       	std	Y+10, r11	; 0x0a
     b84:	e0 c0       	rjmp	.+448    	; 0xd46 <_Z13getNoteByFreqP4Noted+0x26a>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	8b 87       	std	Y+11, r24	; 0x0b
     b8a:	2b 84       	ldd	r2, Y+11	; 0x0b
     b8c:	3c 84       	ldd	r3, Y+12	; 0x0c
     b8e:	21 e0       	ldi	r18, 0x01	; 1
     b90:	22 1a       	sub	r2, r18
     b92:	31 08       	sbc	r3, r1
		double distance = fabs(freq - (firstOctaveFreqs[note_i]*multiplier));
     b94:	d8 01       	movw	r26, r16
     b96:	6d 91       	ld	r22, X+
     b98:	7d 91       	ld	r23, X+
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	8d 01       	movw	r16, r26
     ba0:	a7 01       	movw	r20, r14
     ba2:	96 01       	movw	r18, r12
     ba4:	50 d3       	rcall	.+1696   	; 0x1246 <__mulsf3>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c3 01       	movw	r24, r6
     bac:	b2 01       	movw	r22, r4
     bae:	74 d1       	rcall	.+744    	; 0xe98 <__subsf3>
     bb0:	4b 01       	movw	r8, r22
     bb2:	5c 01       	movw	r10, r24
     bb4:	e8 94       	clt
     bb6:	b7 f8       	bld	r11, 7
		if (distance < min_distance) {
     bb8:	29 81       	ldd	r18, Y+1	; 0x01
     bba:	3a 81       	ldd	r19, Y+2	; 0x02
     bbc:	4b 81       	ldd	r20, Y+3	; 0x03
     bbe:	5c 81       	ldd	r21, Y+4	; 0x04
     bc0:	c5 01       	movw	r24, r10
     bc2:	b4 01       	movw	r22, r8
     bc4:	ce d1       	rcall	.+924    	; 0xf62 <__cmpsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	5c f4       	brge	.+22     	; 0xbe0 <_Z13getNoteByFreqP4Noted+0x104>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     bca:	8b 85       	ldd	r24, Y+11	; 0x0b
     bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bce:	01 96       	adiw	r24, 0x01	; 1
		double distance = fabs(freq - (firstOctaveFreqs[note_i]*multiplier));
     bd0:	89 82       	std	Y+1, r8	; 0x01
     bd2:	9a 82       	std	Y+2, r9	; 0x02
     bd4:	ab 82       	std	Y+3, r10	; 0x03
     bd6:	bc 82       	std	Y+4, r11	; 0x04
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     bd8:	8c 30       	cpi	r24, 0x0C	; 12
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 f6       	brne	.-88     	; 0xb86 <_Z13getNoteByFreqP4Noted+0xaa>
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <_Z13getNoteByFreqP4Noted+0x108>
     be0:	3c 86       	std	Y+12, r3	; 0x0c
     be2:	2b 86       	std	Y+11, r2	; 0x0b
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     be4:	eb 85       	ldd	r30, Y+11	; 0x0b
     be6:	fc 85       	ldd	r31, Y+12	; 0x0c
     be8:	ed 58       	subi	r30, 0x8D	; 141
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	80 81       	ld	r24, Z
     bee:	ad 81       	ldd	r26, Y+5	; 0x05
     bf0:	be 81       	ldd	r27, Y+6	; 0x06
     bf2:	8c 93       	st	X, r24
	note->sharp = noteSharps[closest_i];
     bf4:	eb 85       	ldd	r30, Y+11	; 0x0b
     bf6:	fc 85       	ldd	r31, Y+12	; 0x0c
     bf8:	e9 59       	subi	r30, 0x99	; 153
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	80 81       	ld	r24, Z
     bfe:	11 96       	adiw	r26, 0x01	; 1
     c00:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     c02:	eb 85       	ldd	r30, Y+11	; 0x0b
     c04:	fc 85       	ldd	r31, Y+12	; 0x0c
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e1 58       	subi	r30, 0x81	; 129
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	20 81       	ld	r18, Z
     c14:	31 81       	ldd	r19, Z+1	; 0x01
     c16:	42 81       	ldd	r20, Z+2	; 0x02
     c18:	53 81       	ldd	r21, Z+3	; 0x03
     c1a:	c7 01       	movw	r24, r14
     c1c:	b6 01       	movw	r22, r12
     c1e:	13 d3       	rcall	.+1574   	; 0x1246 <__mulsf3>
     c20:	4b 01       	movw	r8, r22
     c22:	5c 01       	movw	r10, r24
     c24:	ed 81       	ldd	r30, Y+5	; 0x05
     c26:	fe 81       	ldd	r31, Y+6	; 0x06
     c28:	62 83       	std	Z+2, r22	; 0x02
     c2a:	73 83       	std	Z+3, r23	; 0x03
     c2c:	84 83       	std	Z+4, r24	; 0x04
     c2e:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     c34:	2b 85       	ldd	r18, Y+11	; 0x0b
     c36:	3c 85       	ldd	r19, Y+12	; 0x0c
     c38:	2b 30       	cpi	r18, 0x0B	; 11
     c3a:	31 05       	cpc	r19, r1
     c3c:	49 f4       	brne	.+18     	; 0xc50 <_Z13getNoteByFreqP4Noted+0x174>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     c3e:	8f 81       	ldd	r24, Y+7	; 0x07
     c40:	98 85       	ldd	r25, Y+8	; 0x08
     c42:	a9 85       	ldd	r26, Y+9	; 0x09
     c44:	ba 85       	ldd	r27, Y+10	; 0x0a
     c46:	82 87       	std	Z+10, r24	; 0x0a
     c48:	93 87       	std	Z+11, r25	; 0x0b
     c4a:	a4 87       	std	Z+12, r26	; 0x0c
     c4c:	b5 87       	std	Z+13, r27	; 0x0d
     c4e:	36 c0       	rjmp	.+108    	; 0xcbc <_Z13getNoteByFreqP4Noted+0x1e0>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     c50:	eb 85       	ldd	r30, Y+11	; 0x0b
     c52:	fc 85       	ldd	r31, Y+12	; 0x0c
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ed 57       	subi	r30, 0x7D	; 125
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	20 81       	ld	r18, Z
     c62:	31 81       	ldd	r19, Z+1	; 0x01
     c64:	42 81       	ldd	r20, Z+2	; 0x02
     c66:	53 81       	ldd	r21, Z+3	; 0x03
     c68:	c7 01       	movw	r24, r14
     c6a:	b6 01       	movw	r22, r12
     c6c:	ec d2       	rcall	.+1496   	; 0x1246 <__mulsf3>
     c6e:	a5 01       	movw	r20, r10
     c70:	94 01       	movw	r18, r8
     c72:	12 d1       	rcall	.+548    	; 0xe98 <__subsf3>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	e4 d2       	rcall	.+1480   	; 0x1246 <__mulsf3>
     c7e:	a5 01       	movw	r20, r10
     c80:	94 01       	movw	r18, r8
     c82:	0b d1       	rcall	.+534    	; 0xe9a <__addsf3>
     c84:	ad 81       	ldd	r26, Y+5	; 0x05
     c86:	be 81       	ldd	r27, Y+6	; 0x06
     c88:	1a 96       	adiw	r26, 0x0a	; 10
     c8a:	6d 93       	st	X+, r22
     c8c:	7d 93       	st	X+, r23
     c8e:	8d 93       	st	X+, r24
     c90:	9c 93       	st	X, r25
     c92:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     c94:	eb 85       	ldd	r30, Y+11	; 0x0b
     c96:	fc 85       	ldd	r31, Y+12	; 0x0c
     c98:	ef 2b       	or	r30, r31
     c9a:	81 f4       	brne	.+32     	; 0xcbc <_Z13getNoteByFreqP4Noted+0x1e0>
		note->min_freq = MIN_FREQ*multiplier;
     c9c:	2b e9       	ldi	r18, 0x9B	; 155
     c9e:	38 e4       	ldi	r19, 0x48	; 72
     ca0:	4e e7       	ldi	r20, 0x7E	; 126
     ca2:	51 e4       	ldi	r21, 0x41	; 65
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
     ca8:	ce d2       	rcall	.+1436   	; 0x1246 <__mulsf3>
     caa:	ad 81       	ldd	r26, Y+5	; 0x05
     cac:	be 81       	ldd	r27, Y+6	; 0x06
     cae:	16 96       	adiw	r26, 0x06	; 6
     cb0:	6d 93       	st	X+, r22
     cb2:	7d 93       	st	X+, r23
     cb4:	8d 93       	st	X+, r24
     cb6:	9c 93       	st	X, r25
     cb8:	19 97       	sbiw	r26, 0x09	; 9
     cba:	a7 c0       	rjmp	.+334    	; 0xe0a <_Z13getNoteByFreqP4Noted+0x32e>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     cbc:	eb 85       	ldd	r30, Y+11	; 0x0b
     cbe:	fc 85       	ldd	r31, Y+12	; 0x0c
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	e5 58       	subi	r30, 0x85	; 133
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	20 81       	ld	r18, Z
     cce:	31 81       	ldd	r19, Z+1	; 0x01
     cd0:	42 81       	ldd	r20, Z+2	; 0x02
     cd2:	53 81       	ldd	r21, Z+3	; 0x03
     cd4:	c7 01       	movw	r24, r14
     cd6:	b6 01       	movw	r22, r12
     cd8:	b6 d2       	rcall	.+1388   	; 0x1246 <__mulsf3>
     cda:	9b 01       	movw	r18, r22
     cdc:	ac 01       	movw	r20, r24
     cde:	c5 01       	movw	r24, r10
     ce0:	b4 01       	movw	r22, r8
     ce2:	da d0       	rcall	.+436    	; 0xe98 <__subsf3>
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	5f e3       	ldi	r21, 0x3F	; 63
     cec:	ac d2       	rcall	.+1368   	; 0x1246 <__mulsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	d0 d0       	rcall	.+416    	; 0xe98 <__subsf3>
     cf8:	ad 81       	ldd	r26, Y+5	; 0x05
     cfa:	be 81       	ldd	r27, Y+6	; 0x06
     cfc:	16 96       	adiw	r26, 0x06	; 6
     cfe:	6d 93       	st	X+, r22
     d00:	7d 93       	st	X+, r23
     d02:	8d 93       	st	X+, r24
     d04:	9c 93       	st	X, r25
     d06:	19 97       	sbiw	r26, 0x09	; 9
     d08:	80 c0       	rjmp	.+256    	; 0xe0a <_Z13getNoteByFreqP4Noted+0x32e>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     d0a:	ed 81       	ldd	r30, Y+5	; 0x05
     d0c:	fe 81       	ldd	r31, Y+6	; 0x06
     d0e:	16 86       	std	Z+14, r1	; 0x0e
		return;
     d10:	7c c0       	rjmp	.+248    	; 0xe0a <_Z13getNoteByFreqP4Noted+0x32e>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     d12:	2b e9       	ldi	r18, 0x9B	; 155
     d14:	38 e4       	ldi	r19, 0x48	; 72
     d16:	4e ef       	ldi	r20, 0xFE	; 254
     d18:	51 e4       	ldi	r21, 0x41	; 65
     d1a:	c3 01       	movw	r24, r6
     d1c:	b2 01       	movw	r22, r4
     d1e:	8f d2       	rcall	.+1310   	; 0x123e <__gesf2>
     d20:	18 16       	cp	r1, r24
     d22:	0c f4       	brge	.+2      	; 0xd26 <_Z13getNoteByFreqP4Noted+0x24a>
     d24:	0e cf       	rjmp	.-484    	; 0xb42 <_Z13getNoteByFreqP4Noted+0x66>
     d26:	2b e9       	ldi	r18, 0x9B	; 155
     d28:	38 e4       	ldi	r19, 0x48	; 72
     d2a:	4e ef       	ldi	r20, 0xFE	; 254
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	2f 83       	std	Y+7, r18	; 0x07
     d30:	38 87       	std	Y+8, r19	; 0x08
     d32:	49 87       	std	Y+9, r20	; 0x09
     d34:	5a 87       	std	Y+10, r21	; 0x0a
     d36:	0f 2e       	mov	r0, r31
     d38:	c1 2c       	mov	r12, r1
     d3a:	d1 2c       	mov	r13, r1
     d3c:	f0 e8       	ldi	r31, 0x80	; 128
     d3e:	ef 2e       	mov	r14, r31
     d40:	ff e3       	ldi	r31, 0x3F	; 63
     d42:	ff 2e       	mov	r15, r31
     d44:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = fabs(freq - (firstOctaveFreqs[note_i]*multiplier));
     d46:	23 e1       	ldi	r18, 0x13	; 19
     d48:	30 ed       	ldi	r19, 0xD0	; 208
     d4a:	42 e8       	ldi	r20, 0x82	; 130
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	79 d2       	rcall	.+1266   	; 0x1246 <__mulsf3>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	c3 01       	movw	r24, r6
     d5a:	b2 01       	movw	r22, r4
     d5c:	9d d0       	rcall	.+314    	; 0xe98 <__subsf3>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	5f 77       	andi	r21, 0x7F	; 127
     d64:	29 83       	std	Y+1, r18	; 0x01
     d66:	3a 83       	std	Y+2, r19	; 0x02
     d68:	4b 83       	std	Y+3, r20	; 0x03
     d6a:	5c 83       	std	Y+4, r21	; 0x04
		if (distance < min_distance) {
     d6c:	22 e5       	ldi	r18, 0x52	; 82
     d6e:	38 e4       	ldi	r19, 0x48	; 72
     d70:	4e ef       	ldi	r20, 0xFE	; 254
     d72:	53 e4       	ldi	r21, 0x43	; 67
     d74:	69 81       	ldd	r22, Y+1	; 0x01
     d76:	7a 81       	ldd	r23, Y+2	; 0x02
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	f2 d0       	rcall	.+484    	; 0xf62 <__cmpsf2>
     d7e:	88 23       	and	r24, r24
     d80:	3c f4       	brge	.+14     	; 0xd90 <_Z13getNoteByFreqP4Noted+0x2b4>
     d82:	03 e8       	ldi	r16, 0x83	; 131
     d84:	10 e0       	ldi	r17, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	5c 87       	std	Y+12, r21	; 0x0c
     d8c:	4b 87       	std	Y+11, r20	; 0x0b
     d8e:	fd ce       	rjmp	.-518    	; 0xb8a <_Z13getNoteByFreqP4Noted+0xae>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     d90:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <_ZL10noteSharps+0xb>
     d94:	ad 81       	ldd	r26, Y+5	; 0x05
     d96:	be 81       	ldd	r27, Y+6	; 0x06
     d98:	8c 93       	st	X, r24
	note->sharp = noteSharps[closest_i];
     d9a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_ZL8slopeTol>
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     da2:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <_ZL9noteNames+0x8>
     da6:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <_ZL9noteNames+0x9>
     daa:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <_ZL9noteNames+0xa>
     dae:	50 91 7e 00 	lds	r21, 0x007E	; 0x80007e <_ZL9noteNames+0xb>
     db2:	c7 01       	movw	r24, r14
     db4:	b6 01       	movw	r22, r12
     db6:	47 d2       	rcall	.+1166   	; 0x1246 <__mulsf3>
     db8:	4b 01       	movw	r8, r22
     dba:	5c 01       	movw	r10, r24
     dbc:	ed 81       	ldd	r30, Y+5	; 0x05
     dbe:	fe 81       	ldd	r31, Y+6	; 0x06
     dc0:	62 83       	std	Z+2, r22	; 0x02
     dc2:	73 83       	std	Z+3, r23	; 0x03
     dc4:	84 83       	std	Z+4, r24	; 0x04
     dc6:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     dcc:	23 e1       	ldi	r18, 0x13	; 19
     dce:	30 ed       	ldi	r19, 0xD0	; 208
     dd0:	42 e8       	ldi	r20, 0x82	; 130
     dd2:	51 e4       	ldi	r21, 0x41	; 65
     dd4:	c7 01       	movw	r24, r14
     dd6:	b6 01       	movw	r22, r12
     dd8:	36 d2       	rcall	.+1132   	; 0x1246 <__mulsf3>
     dda:	a5 01       	movw	r20, r10
     ddc:	94 01       	movw	r18, r8
     dde:	5c d0       	rcall	.+184    	; 0xe98 <__subsf3>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	5f e3       	ldi	r21, 0x3F	; 63
     de8:	2e d2       	rcall	.+1116   	; 0x1246 <__mulsf3>
     dea:	a5 01       	movw	r20, r10
     dec:	94 01       	movw	r18, r8
     dee:	55 d0       	rcall	.+170    	; 0xe9a <__addsf3>
     df0:	ad 81       	ldd	r26, Y+5	; 0x05
     df2:	be 81       	ldd	r27, Y+6	; 0x06
     df4:	1a 96       	adiw	r26, 0x0a	; 10
     df6:	6d 93       	st	X+, r22
     df8:	7d 93       	st	X+, r23
     dfa:	8d 93       	st	X+, r24
     dfc:	9c 93       	st	X, r25
     dfe:	1d 97       	sbiw	r26, 0x0d	; 13
     e00:	ef ef       	ldi	r30, 0xFF	; 255
     e02:	ff ef       	ldi	r31, 0xFF	; 255
     e04:	fc 87       	std	Y+12, r31	; 0x0c
     e06:	eb 87       	std	Y+11, r30	; 0x0b
     e08:	59 cf       	rjmp	.-334    	; 0xcbc <_Z13getNoteByFreqP4Noted+0x1e0>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     e0a:	2c 96       	adiw	r28, 0x0c	; 12
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	cf 90       	pop	r12
     e26:	bf 90       	pop	r11
     e28:	af 90       	pop	r10
     e2a:	9f 90       	pop	r9
     e2c:	8f 90       	pop	r8
     e2e:	7f 90       	pop	r7
     e30:	6f 90       	pop	r6
     e32:	5f 90       	pop	r5
     e34:	4f 90       	pop	r4
     e36:	3f 90       	pop	r3
     e38:	2f 90       	pop	r2
     e3a:	08 95       	ret

00000e3c <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     e3c:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     e3e:	28 b3       	in	r18, 0x18	; 24
     e40:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     e42:	38 b3       	in	r19, 0x18	; 24
     e44:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     e46:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     e48:	f8 94       	cli

  while (datlen--) {
     e4a:	61 15       	cp	r22, r1
     e4c:	71 05       	cpc	r23, r1
     e4e:	09 f4       	brne	.+2      	; 0xe52 <ws2812_sendarray+0x16>
     e50:	21 c0       	rjmp	.+66     	; 0xe94 <loop301+0x38>
     e52:	fc 01       	movw	r30, r24
     e54:	68 0f       	add	r22, r24
     e56:	79 1f       	adc	r23, r25
    curbyte=*data++;
     e58:	91 91       	ld	r25, Z+
    
    asm volatile(
     e5a:	88 e0       	ldi	r24, 0x08	; 8

00000e5c <loop301>:
     e5c:	38 bb       	out	0x18, r19	; 24
     e5e:	97 ff       	sbrs	r25, 7
     e60:	28 bb       	out	0x18, r18	; 24
     e62:	99 0f       	add	r25, r25
     e64:	00 00       	nop
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <loop301+0xc>
     e68:	28 bb       	out	0x18, r18	; 24
     e6a:	00 00       	nop
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <loop301+0x12>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <loop301+0x14>
     e70:	00 c0       	rjmp	.+0      	; 0xe72 <loop301+0x16>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <loop301+0x18>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <loop301+0x1a>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <loop301+0x1c>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <loop301+0x1e>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <loop301+0x20>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <loop301+0x22>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <loop301+0x24>
     e80:	00 c0       	rjmp	.+0      	; 0xe82 <loop301+0x26>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <loop301+0x28>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <loop301+0x2a>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <loop301+0x2c>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <loop301+0x2e>
     e8a:	8a 95       	dec	r24
     e8c:	39 f7       	brne	.-50     	; 0xe5c <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     e8e:	e6 17       	cp	r30, r22
     e90:	f7 07       	cpc	r31, r23
     e92:	11 f7       	brne	.-60     	; 0xe58 <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     e94:	4f bf       	out	0x3f, r20	; 63
     e96:	08 95       	ret

00000e98 <__subsf3>:
     e98:	50 58       	subi	r21, 0x80	; 128

00000e9a <__addsf3>:
     e9a:	bb 27       	eor	r27, r27
     e9c:	aa 27       	eor	r26, r26
     e9e:	0e d0       	rcall	.+28     	; 0xebc <__addsf3x>
     ea0:	94 c1       	rjmp	.+808    	; 0x11ca <__fp_round>
     ea2:	85 d1       	rcall	.+778    	; 0x11ae <__fp_pscA>
     ea4:	30 f0       	brcs	.+12     	; 0xeb2 <__addsf3+0x18>
     ea6:	8a d1       	rcall	.+788    	; 0x11bc <__fp_pscB>
     ea8:	20 f0       	brcs	.+8      	; 0xeb2 <__addsf3+0x18>
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__addsf3+0x1e>
     eac:	9f 3f       	cpi	r25, 0xFF	; 255
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__addsf3+0x1a>
     eb0:	1e f4       	brtc	.+6      	; 0xeb8 <__addsf3+0x1e>
     eb2:	7a c1       	rjmp	.+756    	; 0x11a8 <__fp_nan>
     eb4:	0e f4       	brtc	.+2      	; 0xeb8 <__addsf3+0x1e>
     eb6:	e0 95       	com	r30
     eb8:	e7 fb       	bst	r30, 7
     eba:	70 c1       	rjmp	.+736    	; 0x119c <__fp_inf>

00000ebc <__addsf3x>:
     ebc:	e9 2f       	mov	r30, r25
     ebe:	96 d1       	rcall	.+812    	; 0x11ec <__fp_split3>
     ec0:	80 f3       	brcs	.-32     	; 0xea2 <__addsf3+0x8>
     ec2:	ba 17       	cp	r27, r26
     ec4:	62 07       	cpc	r22, r18
     ec6:	73 07       	cpc	r23, r19
     ec8:	84 07       	cpc	r24, r20
     eca:	95 07       	cpc	r25, r21
     ecc:	18 f0       	brcs	.+6      	; 0xed4 <__addsf3x+0x18>
     ece:	71 f4       	brne	.+28     	; 0xeec <__addsf3x+0x30>
     ed0:	9e f5       	brtc	.+102    	; 0xf38 <__addsf3x+0x7c>
     ed2:	ae c1       	rjmp	.+860    	; 0x1230 <__fp_zero>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3x+0x1c>
     ed6:	e0 95       	com	r30
     ed8:	0b 2e       	mov	r0, r27
     eda:	ba 2f       	mov	r27, r26
     edc:	a0 2d       	mov	r26, r0
     ede:	0b 01       	movw	r0, r22
     ee0:	b9 01       	movw	r22, r18
     ee2:	90 01       	movw	r18, r0
     ee4:	0c 01       	movw	r0, r24
     ee6:	ca 01       	movw	r24, r20
     ee8:	a0 01       	movw	r20, r0
     eea:	11 24       	eor	r1, r1
     eec:	ff 27       	eor	r31, r31
     eee:	59 1b       	sub	r21, r25
     ef0:	99 f0       	breq	.+38     	; 0xf18 <__addsf3x+0x5c>
     ef2:	59 3f       	cpi	r21, 0xF9	; 249
     ef4:	50 f4       	brcc	.+20     	; 0xf0a <__addsf3x+0x4e>
     ef6:	50 3e       	cpi	r21, 0xE0	; 224
     ef8:	68 f1       	brcs	.+90     	; 0xf54 <__addsf3x+0x98>
     efa:	1a 16       	cp	r1, r26
     efc:	f0 40       	sbci	r31, 0x00	; 0
     efe:	a2 2f       	mov	r26, r18
     f00:	23 2f       	mov	r18, r19
     f02:	34 2f       	mov	r19, r20
     f04:	44 27       	eor	r20, r20
     f06:	58 5f       	subi	r21, 0xF8	; 248
     f08:	f3 cf       	rjmp	.-26     	; 0xef0 <__addsf3x+0x34>
     f0a:	46 95       	lsr	r20
     f0c:	37 95       	ror	r19
     f0e:	27 95       	ror	r18
     f10:	a7 95       	ror	r26
     f12:	f0 40       	sbci	r31, 0x00	; 0
     f14:	53 95       	inc	r21
     f16:	c9 f7       	brne	.-14     	; 0xf0a <__addsf3x+0x4e>
     f18:	7e f4       	brtc	.+30     	; 0xf38 <__addsf3x+0x7c>
     f1a:	1f 16       	cp	r1, r31
     f1c:	ba 0b       	sbc	r27, r26
     f1e:	62 0b       	sbc	r22, r18
     f20:	73 0b       	sbc	r23, r19
     f22:	84 0b       	sbc	r24, r20
     f24:	ba f0       	brmi	.+46     	; 0xf54 <__addsf3x+0x98>
     f26:	91 50       	subi	r25, 0x01	; 1
     f28:	a1 f0       	breq	.+40     	; 0xf52 <__addsf3x+0x96>
     f2a:	ff 0f       	add	r31, r31
     f2c:	bb 1f       	adc	r27, r27
     f2e:	66 1f       	adc	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	88 1f       	adc	r24, r24
     f34:	c2 f7       	brpl	.-16     	; 0xf26 <__addsf3x+0x6a>
     f36:	0e c0       	rjmp	.+28     	; 0xf54 <__addsf3x+0x98>
     f38:	ba 0f       	add	r27, r26
     f3a:	62 1f       	adc	r22, r18
     f3c:	73 1f       	adc	r23, r19
     f3e:	84 1f       	adc	r24, r20
     f40:	48 f4       	brcc	.+18     	; 0xf54 <__addsf3x+0x98>
     f42:	87 95       	ror	r24
     f44:	77 95       	ror	r23
     f46:	67 95       	ror	r22
     f48:	b7 95       	ror	r27
     f4a:	f7 95       	ror	r31
     f4c:	9e 3f       	cpi	r25, 0xFE	; 254
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__addsf3x+0x96>
     f50:	b3 cf       	rjmp	.-154    	; 0xeb8 <__addsf3+0x1e>
     f52:	93 95       	inc	r25
     f54:	88 0f       	add	r24, r24
     f56:	08 f0       	brcs	.+2      	; 0xf5a <__addsf3x+0x9e>
     f58:	99 27       	eor	r25, r25
     f5a:	ee 0f       	add	r30, r30
     f5c:	97 95       	ror	r25
     f5e:	87 95       	ror	r24
     f60:	08 95       	ret

00000f62 <__cmpsf2>:
     f62:	f8 d0       	rcall	.+496    	; 0x1154 <__fp_cmp>
     f64:	08 f4       	brcc	.+2      	; 0xf68 <__cmpsf2+0x6>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	08 95       	ret

00000f6a <__divsf3>:
     f6a:	0c d0       	rcall	.+24     	; 0xf84 <__divsf3x>
     f6c:	2e c1       	rjmp	.+604    	; 0x11ca <__fp_round>
     f6e:	26 d1       	rcall	.+588    	; 0x11bc <__fp_pscB>
     f70:	40 f0       	brcs	.+16     	; 0xf82 <__divsf3+0x18>
     f72:	1d d1       	rcall	.+570    	; 0x11ae <__fp_pscA>
     f74:	30 f0       	brcs	.+12     	; 0xf82 <__divsf3+0x18>
     f76:	21 f4       	brne	.+8      	; 0xf80 <__divsf3+0x16>
     f78:	5f 3f       	cpi	r21, 0xFF	; 255
     f7a:	19 f0       	breq	.+6      	; 0xf82 <__divsf3+0x18>
     f7c:	0f c1       	rjmp	.+542    	; 0x119c <__fp_inf>
     f7e:	51 11       	cpse	r21, r1
     f80:	58 c1       	rjmp	.+688    	; 0x1232 <__fp_szero>
     f82:	12 c1       	rjmp	.+548    	; 0x11a8 <__fp_nan>

00000f84 <__divsf3x>:
     f84:	33 d1       	rcall	.+614    	; 0x11ec <__fp_split3>
     f86:	98 f3       	brcs	.-26     	; 0xf6e <__divsf3+0x4>

00000f88 <__divsf3_pse>:
     f88:	99 23       	and	r25, r25
     f8a:	c9 f3       	breq	.-14     	; 0xf7e <__divsf3+0x14>
     f8c:	55 23       	and	r21, r21
     f8e:	b1 f3       	breq	.-20     	; 0xf7c <__divsf3+0x12>
     f90:	95 1b       	sub	r25, r21
     f92:	55 0b       	sbc	r21, r21
     f94:	bb 27       	eor	r27, r27
     f96:	aa 27       	eor	r26, r26
     f98:	62 17       	cp	r22, r18
     f9a:	73 07       	cpc	r23, r19
     f9c:	84 07       	cpc	r24, r20
     f9e:	38 f0       	brcs	.+14     	; 0xfae <__divsf3_pse+0x26>
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	44 1f       	adc	r20, r20
     faa:	aa 1f       	adc	r26, r26
     fac:	a9 f3       	breq	.-22     	; 0xf98 <__divsf3_pse+0x10>
     fae:	33 d0       	rcall	.+102    	; 0x1016 <__divsf3_pse+0x8e>
     fb0:	0e 2e       	mov	r0, r30
     fb2:	3a f0       	brmi	.+14     	; 0xfc2 <__divsf3_pse+0x3a>
     fb4:	e0 e8       	ldi	r30, 0x80	; 128
     fb6:	30 d0       	rcall	.+96     	; 0x1018 <__divsf3_pse+0x90>
     fb8:	91 50       	subi	r25, 0x01	; 1
     fba:	50 40       	sbci	r21, 0x00	; 0
     fbc:	e6 95       	lsr	r30
     fbe:	00 1c       	adc	r0, r0
     fc0:	ca f7       	brpl	.-14     	; 0xfb4 <__divsf3_pse+0x2c>
     fc2:	29 d0       	rcall	.+82     	; 0x1016 <__divsf3_pse+0x8e>
     fc4:	fe 2f       	mov	r31, r30
     fc6:	27 d0       	rcall	.+78     	; 0x1016 <__divsf3_pse+0x8e>
     fc8:	66 0f       	add	r22, r22
     fca:	77 1f       	adc	r23, r23
     fcc:	88 1f       	adc	r24, r24
     fce:	bb 1f       	adc	r27, r27
     fd0:	26 17       	cp	r18, r22
     fd2:	37 07       	cpc	r19, r23
     fd4:	48 07       	cpc	r20, r24
     fd6:	ab 07       	cpc	r26, r27
     fd8:	b0 e8       	ldi	r27, 0x80	; 128
     fda:	09 f0       	breq	.+2      	; 0xfde <__divsf3_pse+0x56>
     fdc:	bb 0b       	sbc	r27, r27
     fde:	80 2d       	mov	r24, r0
     fe0:	bf 01       	movw	r22, r30
     fe2:	ff 27       	eor	r31, r31
     fe4:	93 58       	subi	r25, 0x83	; 131
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	2a f0       	brmi	.+10     	; 0xff4 <__divsf3_pse+0x6c>
     fea:	9e 3f       	cpi	r25, 0xFE	; 254
     fec:	51 05       	cpc	r21, r1
     fee:	68 f0       	brcs	.+26     	; 0x100a <__divsf3_pse+0x82>
     ff0:	d5 c0       	rjmp	.+426    	; 0x119c <__fp_inf>
     ff2:	1f c1       	rjmp	.+574    	; 0x1232 <__fp_szero>
     ff4:	5f 3f       	cpi	r21, 0xFF	; 255
     ff6:	ec f3       	brlt	.-6      	; 0xff2 <__divsf3_pse+0x6a>
     ff8:	98 3e       	cpi	r25, 0xE8	; 232
     ffa:	dc f3       	brlt	.-10     	; 0xff2 <__divsf3_pse+0x6a>
     ffc:	86 95       	lsr	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	b7 95       	ror	r27
    1004:	f7 95       	ror	r31
    1006:	9f 5f       	subi	r25, 0xFF	; 255
    1008:	c9 f7       	brne	.-14     	; 0xffc <__divsf3_pse+0x74>
    100a:	88 0f       	add	r24, r24
    100c:	91 1d       	adc	r25, r1
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret
    1016:	e1 e0       	ldi	r30, 0x01	; 1
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	bb 1f       	adc	r27, r27
    1020:	62 17       	cp	r22, r18
    1022:	73 07       	cpc	r23, r19
    1024:	84 07       	cpc	r24, r20
    1026:	ba 07       	cpc	r27, r26
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__divsf3_pse+0xaa>
    102a:	62 1b       	sub	r22, r18
    102c:	73 0b       	sbc	r23, r19
    102e:	84 0b       	sbc	r24, r20
    1030:	ba 0b       	sbc	r27, r26
    1032:	ee 1f       	adc	r30, r30
    1034:	88 f7       	brcc	.-30     	; 0x1018 <__divsf3_pse+0x90>
    1036:	e0 95       	com	r30
    1038:	08 95       	ret

0000103a <__fixsfsi>:
    103a:	04 d0       	rcall	.+8      	; 0x1044 <__fixunssfsi>
    103c:	68 94       	set
    103e:	b1 11       	cpse	r27, r1
    1040:	f8 c0       	rjmp	.+496    	; 0x1232 <__fp_szero>
    1042:	08 95       	ret

00001044 <__fixunssfsi>:
    1044:	db d0       	rcall	.+438    	; 0x11fc <__fp_splitA>
    1046:	88 f0       	brcs	.+34     	; 0x106a <__fixunssfsi+0x26>
    1048:	9f 57       	subi	r25, 0x7F	; 127
    104a:	90 f0       	brcs	.+36     	; 0x1070 <__fixunssfsi+0x2c>
    104c:	b9 2f       	mov	r27, r25
    104e:	99 27       	eor	r25, r25
    1050:	b7 51       	subi	r27, 0x17	; 23
    1052:	a0 f0       	brcs	.+40     	; 0x107c <__fixunssfsi+0x38>
    1054:	d1 f0       	breq	.+52     	; 0x108a <__fixunssfsi+0x46>
    1056:	66 0f       	add	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	1a f0       	brmi	.+6      	; 0x1066 <__fixunssfsi+0x22>
    1060:	ba 95       	dec	r27
    1062:	c9 f7       	brne	.-14     	; 0x1056 <__fixunssfsi+0x12>
    1064:	12 c0       	rjmp	.+36     	; 0x108a <__fixunssfsi+0x46>
    1066:	b1 30       	cpi	r27, 0x01	; 1
    1068:	81 f0       	breq	.+32     	; 0x108a <__fixunssfsi+0x46>
    106a:	e2 d0       	rcall	.+452    	; 0x1230 <__fp_zero>
    106c:	b1 e0       	ldi	r27, 0x01	; 1
    106e:	08 95       	ret
    1070:	df c0       	rjmp	.+446    	; 0x1230 <__fp_zero>
    1072:	67 2f       	mov	r22, r23
    1074:	78 2f       	mov	r23, r24
    1076:	88 27       	eor	r24, r24
    1078:	b8 5f       	subi	r27, 0xF8	; 248
    107a:	39 f0       	breq	.+14     	; 0x108a <__fixunssfsi+0x46>
    107c:	b9 3f       	cpi	r27, 0xF9	; 249
    107e:	cc f3       	brlt	.-14     	; 0x1072 <__fixunssfsi+0x2e>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b3 95       	inc	r27
    1088:	d9 f7       	brne	.-10     	; 0x1080 <__fixunssfsi+0x3c>
    108a:	3e f4       	brtc	.+14     	; 0x109a <__fixunssfsi+0x56>
    108c:	90 95       	com	r25
    108e:	80 95       	com	r24
    1090:	70 95       	com	r23
    1092:	61 95       	neg	r22
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	08 95       	ret

0000109c <__floatunsisf>:
    109c:	e8 94       	clt
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <__floatsisf+0x12>

000010a0 <__floatsisf>:
    10a0:	97 fb       	bst	r25, 7
    10a2:	3e f4       	brtc	.+14     	; 0x10b2 <__floatsisf+0x12>
    10a4:	90 95       	com	r25
    10a6:	80 95       	com	r24
    10a8:	70 95       	com	r23
    10aa:	61 95       	neg	r22
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	8f 4f       	sbci	r24, 0xFF	; 255
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	99 23       	and	r25, r25
    10b4:	a9 f0       	breq	.+42     	; 0x10e0 <__floatsisf+0x40>
    10b6:	f9 2f       	mov	r31, r25
    10b8:	96 e9       	ldi	r25, 0x96	; 150
    10ba:	bb 27       	eor	r27, r27
    10bc:	93 95       	inc	r25
    10be:	f6 95       	lsr	r31
    10c0:	87 95       	ror	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f1 11       	cpse	r31, r1
    10ca:	f8 cf       	rjmp	.-16     	; 0x10bc <__floatsisf+0x1c>
    10cc:	fa f4       	brpl	.+62     	; 0x110c <__floatsisf+0x6c>
    10ce:	bb 0f       	add	r27, r27
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <__floatsisf+0x36>
    10d2:	60 ff       	sbrs	r22, 0
    10d4:	1b c0       	rjmp	.+54     	; 0x110c <__floatsisf+0x6c>
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	16 c0       	rjmp	.+44     	; 0x110c <__floatsisf+0x6c>
    10e0:	88 23       	and	r24, r24
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <__floatsisf+0x48>
    10e4:	96 e9       	ldi	r25, 0x96	; 150
    10e6:	11 c0       	rjmp	.+34     	; 0x110a <__floatsisf+0x6a>
    10e8:	77 23       	and	r23, r23
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <__floatsisf+0x54>
    10ec:	9e e8       	ldi	r25, 0x8E	; 142
    10ee:	87 2f       	mov	r24, r23
    10f0:	76 2f       	mov	r23, r22
    10f2:	05 c0       	rjmp	.+10     	; 0x10fe <__floatsisf+0x5e>
    10f4:	66 23       	and	r22, r22
    10f6:	71 f0       	breq	.+28     	; 0x1114 <__floatsisf+0x74>
    10f8:	96 e8       	ldi	r25, 0x86	; 134
    10fa:	86 2f       	mov	r24, r22
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	2a f0       	brmi	.+10     	; 0x110c <__floatsisf+0x6c>
    1102:	9a 95       	dec	r25
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	da f7       	brpl	.-10     	; 0x1102 <__floatsisf+0x62>
    110c:	88 0f       	add	r24, r24
    110e:	96 95       	lsr	r25
    1110:	87 95       	ror	r24
    1112:	97 f9       	bld	r25, 7
    1114:	08 95       	ret

00001116 <fmin>:
    1116:	99 0f       	add	r25, r25
    1118:	bb 0b       	sbc	r27, r27
    111a:	55 0f       	add	r21, r21
    111c:	aa 0b       	sbc	r26, r26
    111e:	e0 e8       	ldi	r30, 0x80	; 128
    1120:	fe ef       	ldi	r31, 0xFE	; 254
    1122:	16 16       	cp	r1, r22
    1124:	17 06       	cpc	r1, r23
    1126:	e8 07       	cpc	r30, r24
    1128:	f9 07       	cpc	r31, r25
    112a:	70 f0       	brcs	.+28     	; 0x1148 <fmin+0x32>
    112c:	12 16       	cp	r1, r18
    112e:	13 06       	cpc	r1, r19
    1130:	e4 07       	cpc	r30, r20
    1132:	f5 07       	cpc	r31, r21
    1134:	60 f0       	brcs	.+24     	; 0x114e <fmin+0x38>
    1136:	ba 17       	cp	r27, r26
    1138:	54 f0       	brlt	.+20     	; 0x114e <fmin+0x38>
    113a:	31 f4       	brne	.+12     	; 0x1148 <fmin+0x32>
    113c:	26 17       	cp	r18, r22
    113e:	37 07       	cpc	r19, r23
    1140:	48 07       	cpc	r20, r24
    1142:	59 07       	cpc	r21, r25
    1144:	a7 95       	ror	r26
    1146:	1b f4       	brvc	.+6      	; 0x114e <fmin+0x38>
    1148:	b9 01       	movw	r22, r18
    114a:	ca 01       	movw	r24, r20
    114c:	ba 2f       	mov	r27, r26
    114e:	b6 95       	lsr	r27
    1150:	97 95       	ror	r25
    1152:	08 95       	ret

00001154 <__fp_cmp>:
    1154:	99 0f       	add	r25, r25
    1156:	00 08       	sbc	r0, r0
    1158:	55 0f       	add	r21, r21
    115a:	aa 0b       	sbc	r26, r26
    115c:	e0 e8       	ldi	r30, 0x80	; 128
    115e:	fe ef       	ldi	r31, 0xFE	; 254
    1160:	16 16       	cp	r1, r22
    1162:	17 06       	cpc	r1, r23
    1164:	e8 07       	cpc	r30, r24
    1166:	f9 07       	cpc	r31, r25
    1168:	c0 f0       	brcs	.+48     	; 0x119a <__fp_cmp+0x46>
    116a:	12 16       	cp	r1, r18
    116c:	13 06       	cpc	r1, r19
    116e:	e4 07       	cpc	r30, r20
    1170:	f5 07       	cpc	r31, r21
    1172:	98 f0       	brcs	.+38     	; 0x119a <__fp_cmp+0x46>
    1174:	62 1b       	sub	r22, r18
    1176:	73 0b       	sbc	r23, r19
    1178:	84 0b       	sbc	r24, r20
    117a:	95 0b       	sbc	r25, r21
    117c:	39 f4       	brne	.+14     	; 0x118c <__fp_cmp+0x38>
    117e:	0a 26       	eor	r0, r26
    1180:	61 f0       	breq	.+24     	; 0x119a <__fp_cmp+0x46>
    1182:	23 2b       	or	r18, r19
    1184:	24 2b       	or	r18, r20
    1186:	25 2b       	or	r18, r21
    1188:	21 f4       	brne	.+8      	; 0x1192 <__fp_cmp+0x3e>
    118a:	08 95       	ret
    118c:	0a 26       	eor	r0, r26
    118e:	09 f4       	brne	.+2      	; 0x1192 <__fp_cmp+0x3e>
    1190:	a1 40       	sbci	r26, 0x01	; 1
    1192:	a6 95       	lsr	r26
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	81 1d       	adc	r24, r1
    1198:	81 1d       	adc	r24, r1
    119a:	08 95       	ret

0000119c <__fp_inf>:
    119c:	97 f9       	bld	r25, 7
    119e:	9f 67       	ori	r25, 0x7F	; 127
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	08 95       	ret

000011a8 <__fp_nan>:
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	80 ec       	ldi	r24, 0xC0	; 192
    11ac:	08 95       	ret

000011ae <__fp_pscA>:
    11ae:	00 24       	eor	r0, r0
    11b0:	0a 94       	dec	r0
    11b2:	16 16       	cp	r1, r22
    11b4:	17 06       	cpc	r1, r23
    11b6:	18 06       	cpc	r1, r24
    11b8:	09 06       	cpc	r0, r25
    11ba:	08 95       	ret

000011bc <__fp_pscB>:
    11bc:	00 24       	eor	r0, r0
    11be:	0a 94       	dec	r0
    11c0:	12 16       	cp	r1, r18
    11c2:	13 06       	cpc	r1, r19
    11c4:	14 06       	cpc	r1, r20
    11c6:	05 06       	cpc	r0, r21
    11c8:	08 95       	ret

000011ca <__fp_round>:
    11ca:	09 2e       	mov	r0, r25
    11cc:	03 94       	inc	r0
    11ce:	00 0c       	add	r0, r0
    11d0:	11 f4       	brne	.+4      	; 0x11d6 <__fp_round+0xc>
    11d2:	88 23       	and	r24, r24
    11d4:	52 f0       	brmi	.+20     	; 0x11ea <__fp_round+0x20>
    11d6:	bb 0f       	add	r27, r27
    11d8:	40 f4       	brcc	.+16     	; 0x11ea <__fp_round+0x20>
    11da:	bf 2b       	or	r27, r31
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <__fp_round+0x18>
    11de:	60 ff       	sbrs	r22, 0
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <__fp_round+0x20>
    11e2:	6f 5f       	subi	r22, 0xFF	; 255
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	8f 4f       	sbci	r24, 0xFF	; 255
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	08 95       	ret

000011ec <__fp_split3>:
    11ec:	57 fd       	sbrc	r21, 7
    11ee:	90 58       	subi	r25, 0x80	; 128
    11f0:	44 0f       	add	r20, r20
    11f2:	55 1f       	adc	r21, r21
    11f4:	59 f0       	breq	.+22     	; 0x120c <__fp_splitA+0x10>
    11f6:	5f 3f       	cpi	r21, 0xFF	; 255
    11f8:	71 f0       	breq	.+28     	; 0x1216 <__fp_splitA+0x1a>
    11fa:	47 95       	ror	r20

000011fc <__fp_splitA>:
    11fc:	88 0f       	add	r24, r24
    11fe:	97 fb       	bst	r25, 7
    1200:	99 1f       	adc	r25, r25
    1202:	61 f0       	breq	.+24     	; 0x121c <__fp_splitA+0x20>
    1204:	9f 3f       	cpi	r25, 0xFF	; 255
    1206:	79 f0       	breq	.+30     	; 0x1226 <__fp_splitA+0x2a>
    1208:	87 95       	ror	r24
    120a:	08 95       	ret
    120c:	12 16       	cp	r1, r18
    120e:	13 06       	cpc	r1, r19
    1210:	14 06       	cpc	r1, r20
    1212:	55 1f       	adc	r21, r21
    1214:	f2 cf       	rjmp	.-28     	; 0x11fa <__fp_split3+0xe>
    1216:	46 95       	lsr	r20
    1218:	f1 df       	rcall	.-30     	; 0x11fc <__fp_splitA>
    121a:	08 c0       	rjmp	.+16     	; 0x122c <__fp_splitA+0x30>
    121c:	16 16       	cp	r1, r22
    121e:	17 06       	cpc	r1, r23
    1220:	18 06       	cpc	r1, r24
    1222:	99 1f       	adc	r25, r25
    1224:	f1 cf       	rjmp	.-30     	; 0x1208 <__fp_splitA+0xc>
    1226:	86 95       	lsr	r24
    1228:	71 05       	cpc	r23, r1
    122a:	61 05       	cpc	r22, r1
    122c:	08 94       	sec
    122e:	08 95       	ret

00001230 <__fp_zero>:
    1230:	e8 94       	clt

00001232 <__fp_szero>:
    1232:	bb 27       	eor	r27, r27
    1234:	66 27       	eor	r22, r22
    1236:	77 27       	eor	r23, r23
    1238:	cb 01       	movw	r24, r22
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret

0000123e <__gesf2>:
    123e:	8a df       	rcall	.-236    	; 0x1154 <__fp_cmp>
    1240:	08 f4       	brcc	.+2      	; 0x1244 <__gesf2+0x6>
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	08 95       	ret

00001246 <__mulsf3>:
    1246:	0b d0       	rcall	.+22     	; 0x125e <__mulsf3x>
    1248:	c0 cf       	rjmp	.-128    	; 0x11ca <__fp_round>
    124a:	b1 df       	rcall	.-158    	; 0x11ae <__fp_pscA>
    124c:	28 f0       	brcs	.+10     	; 0x1258 <__mulsf3+0x12>
    124e:	b6 df       	rcall	.-148    	; 0x11bc <__fp_pscB>
    1250:	18 f0       	brcs	.+6      	; 0x1258 <__mulsf3+0x12>
    1252:	95 23       	and	r25, r21
    1254:	09 f0       	breq	.+2      	; 0x1258 <__mulsf3+0x12>
    1256:	a2 cf       	rjmp	.-188    	; 0x119c <__fp_inf>
    1258:	a7 cf       	rjmp	.-178    	; 0x11a8 <__fp_nan>
    125a:	11 24       	eor	r1, r1
    125c:	ea cf       	rjmp	.-44     	; 0x1232 <__fp_szero>

0000125e <__mulsf3x>:
    125e:	c6 df       	rcall	.-116    	; 0x11ec <__fp_split3>
    1260:	a0 f3       	brcs	.-24     	; 0x124a <__mulsf3+0x4>

00001262 <__mulsf3_pse>:
    1262:	95 9f       	mul	r25, r21
    1264:	d1 f3       	breq	.-12     	; 0x125a <__mulsf3+0x14>
    1266:	95 0f       	add	r25, r21
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	55 1f       	adc	r21, r21
    126c:	62 9f       	mul	r22, r18
    126e:	f0 01       	movw	r30, r0
    1270:	72 9f       	mul	r23, r18
    1272:	bb 27       	eor	r27, r27
    1274:	f0 0d       	add	r31, r0
    1276:	b1 1d       	adc	r27, r1
    1278:	63 9f       	mul	r22, r19
    127a:	aa 27       	eor	r26, r26
    127c:	f0 0d       	add	r31, r0
    127e:	b1 1d       	adc	r27, r1
    1280:	aa 1f       	adc	r26, r26
    1282:	64 9f       	mul	r22, r20
    1284:	66 27       	eor	r22, r22
    1286:	b0 0d       	add	r27, r0
    1288:	a1 1d       	adc	r26, r1
    128a:	66 1f       	adc	r22, r22
    128c:	82 9f       	mul	r24, r18
    128e:	22 27       	eor	r18, r18
    1290:	b0 0d       	add	r27, r0
    1292:	a1 1d       	adc	r26, r1
    1294:	62 1f       	adc	r22, r18
    1296:	73 9f       	mul	r23, r19
    1298:	b0 0d       	add	r27, r0
    129a:	a1 1d       	adc	r26, r1
    129c:	62 1f       	adc	r22, r18
    129e:	83 9f       	mul	r24, r19
    12a0:	a0 0d       	add	r26, r0
    12a2:	61 1d       	adc	r22, r1
    12a4:	22 1f       	adc	r18, r18
    12a6:	74 9f       	mul	r23, r20
    12a8:	33 27       	eor	r19, r19
    12aa:	a0 0d       	add	r26, r0
    12ac:	61 1d       	adc	r22, r1
    12ae:	23 1f       	adc	r18, r19
    12b0:	84 9f       	mul	r24, r20
    12b2:	60 0d       	add	r22, r0
    12b4:	21 1d       	adc	r18, r1
    12b6:	82 2f       	mov	r24, r18
    12b8:	76 2f       	mov	r23, r22
    12ba:	6a 2f       	mov	r22, r26
    12bc:	11 24       	eor	r1, r1
    12be:	9f 57       	subi	r25, 0x7F	; 127
    12c0:	50 40       	sbci	r21, 0x00	; 0
    12c2:	8a f0       	brmi	.+34     	; 0x12e6 <__mulsf3_pse+0x84>
    12c4:	e1 f0       	breq	.+56     	; 0x12fe <__mulsf3_pse+0x9c>
    12c6:	88 23       	and	r24, r24
    12c8:	4a f0       	brmi	.+18     	; 0x12dc <__mulsf3_pse+0x7a>
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	bb 1f       	adc	r27, r27
    12d0:	66 1f       	adc	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	88 1f       	adc	r24, r24
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	50 40       	sbci	r21, 0x00	; 0
    12da:	a9 f7       	brne	.-22     	; 0x12c6 <__mulsf3_pse+0x64>
    12dc:	9e 3f       	cpi	r25, 0xFE	; 254
    12de:	51 05       	cpc	r21, r1
    12e0:	70 f0       	brcs	.+28     	; 0x12fe <__mulsf3_pse+0x9c>
    12e2:	5c cf       	rjmp	.-328    	; 0x119c <__fp_inf>
    12e4:	a6 cf       	rjmp	.-180    	; 0x1232 <__fp_szero>
    12e6:	5f 3f       	cpi	r21, 0xFF	; 255
    12e8:	ec f3       	brlt	.-6      	; 0x12e4 <__mulsf3_pse+0x82>
    12ea:	98 3e       	cpi	r25, 0xE8	; 232
    12ec:	dc f3       	brlt	.-10     	; 0x12e4 <__mulsf3_pse+0x82>
    12ee:	86 95       	lsr	r24
    12f0:	77 95       	ror	r23
    12f2:	67 95       	ror	r22
    12f4:	b7 95       	ror	r27
    12f6:	f7 95       	ror	r31
    12f8:	e7 95       	ror	r30
    12fa:	9f 5f       	subi	r25, 0xFF	; 255
    12fc:	c1 f7       	brne	.-16     	; 0x12ee <__mulsf3_pse+0x8c>
    12fe:	fe 2b       	or	r31, r30
    1300:	88 0f       	add	r24, r24
    1302:	91 1d       	adc	r25, r1
    1304:	96 95       	lsr	r25
    1306:	87 95       	ror	r24
    1308:	97 f9       	bld	r25, 7
    130a:	08 95       	ret

0000130c <__tablejump2__>:
    130c:	ee 0f       	add	r30, r30
    130e:	ff 1f       	adc	r31, r31
    1310:	05 90       	lpm	r0, Z+
    1312:	f4 91       	lpm	r31, Z
    1314:	e0 2d       	mov	r30, r0
    1316:	09 94       	ijmp

00001318 <vfprintf>:
    1318:	ab e0       	ldi	r26, 0x0B	; 11
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e1 e9       	ldi	r30, 0x91	; 145
    131e:	f9 e0       	ldi	r31, 0x09	; 9
    1320:	7d c2       	rjmp	.+1274   	; 0x181c <__prologue_saves__>
    1322:	6c 01       	movw	r12, r24
    1324:	7b 01       	movw	r14, r22
    1326:	8a 01       	movw	r16, r20
    1328:	fc 01       	movw	r30, r24
    132a:	17 82       	std	Z+7, r1	; 0x07
    132c:	16 82       	std	Z+6, r1	; 0x06
    132e:	83 81       	ldd	r24, Z+3	; 0x03
    1330:	81 ff       	sbrs	r24, 1
    1332:	bf c1       	rjmp	.+894    	; 0x16b2 <vfprintf+0x39a>
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	3c 01       	movw	r6, r24
    133a:	f6 01       	movw	r30, r12
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	f7 01       	movw	r30, r14
    1340:	93 fd       	sbrc	r25, 3
    1342:	85 91       	lpm	r24, Z+
    1344:	93 ff       	sbrs	r25, 3
    1346:	81 91       	ld	r24, Z+
    1348:	7f 01       	movw	r14, r30
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <vfprintf+0x38>
    134e:	ad c1       	rjmp	.+858    	; 0x16aa <vfprintf+0x392>
    1350:	85 32       	cpi	r24, 0x25	; 37
    1352:	39 f4       	brne	.+14     	; 0x1362 <vfprintf+0x4a>
    1354:	93 fd       	sbrc	r25, 3
    1356:	85 91       	lpm	r24, Z+
    1358:	93 ff       	sbrs	r25, 3
    135a:	81 91       	ld	r24, Z+
    135c:	7f 01       	movw	r14, r30
    135e:	85 32       	cpi	r24, 0x25	; 37
    1360:	21 f4       	brne	.+8      	; 0x136a <vfprintf+0x52>
    1362:	b6 01       	movw	r22, r12
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	c0 d1       	rcall	.+896    	; 0x16e8 <fputc>
    1368:	e8 cf       	rjmp	.-48     	; 0x133a <vfprintf+0x22>
    136a:	91 2c       	mov	r9, r1
    136c:	21 2c       	mov	r2, r1
    136e:	31 2c       	mov	r3, r1
    1370:	ff e1       	ldi	r31, 0x1F	; 31
    1372:	f3 15       	cp	r31, r3
    1374:	d8 f0       	brcs	.+54     	; 0x13ac <vfprintf+0x94>
    1376:	8b 32       	cpi	r24, 0x2B	; 43
    1378:	79 f0       	breq	.+30     	; 0x1398 <vfprintf+0x80>
    137a:	38 f4       	brcc	.+14     	; 0x138a <vfprintf+0x72>
    137c:	80 32       	cpi	r24, 0x20	; 32
    137e:	79 f0       	breq	.+30     	; 0x139e <vfprintf+0x86>
    1380:	83 32       	cpi	r24, 0x23	; 35
    1382:	a1 f4       	brne	.+40     	; 0x13ac <vfprintf+0x94>
    1384:	23 2d       	mov	r18, r3
    1386:	20 61       	ori	r18, 0x10	; 16
    1388:	1d c0       	rjmp	.+58     	; 0x13c4 <vfprintf+0xac>
    138a:	8d 32       	cpi	r24, 0x2D	; 45
    138c:	61 f0       	breq	.+24     	; 0x13a6 <vfprintf+0x8e>
    138e:	80 33       	cpi	r24, 0x30	; 48
    1390:	69 f4       	brne	.+26     	; 0x13ac <vfprintf+0x94>
    1392:	23 2d       	mov	r18, r3
    1394:	21 60       	ori	r18, 0x01	; 1
    1396:	16 c0       	rjmp	.+44     	; 0x13c4 <vfprintf+0xac>
    1398:	83 2d       	mov	r24, r3
    139a:	82 60       	ori	r24, 0x02	; 2
    139c:	38 2e       	mov	r3, r24
    139e:	e3 2d       	mov	r30, r3
    13a0:	e4 60       	ori	r30, 0x04	; 4
    13a2:	3e 2e       	mov	r3, r30
    13a4:	2a c0       	rjmp	.+84     	; 0x13fa <vfprintf+0xe2>
    13a6:	f3 2d       	mov	r31, r3
    13a8:	f8 60       	ori	r31, 0x08	; 8
    13aa:	1d c0       	rjmp	.+58     	; 0x13e6 <vfprintf+0xce>
    13ac:	37 fc       	sbrc	r3, 7
    13ae:	2d c0       	rjmp	.+90     	; 0x140a <vfprintf+0xf2>
    13b0:	20 ed       	ldi	r18, 0xD0	; 208
    13b2:	28 0f       	add	r18, r24
    13b4:	2a 30       	cpi	r18, 0x0A	; 10
    13b6:	40 f0       	brcs	.+16     	; 0x13c8 <vfprintf+0xb0>
    13b8:	8e 32       	cpi	r24, 0x2E	; 46
    13ba:	b9 f4       	brne	.+46     	; 0x13ea <vfprintf+0xd2>
    13bc:	36 fc       	sbrc	r3, 6
    13be:	75 c1       	rjmp	.+746    	; 0x16aa <vfprintf+0x392>
    13c0:	23 2d       	mov	r18, r3
    13c2:	20 64       	ori	r18, 0x40	; 64
    13c4:	32 2e       	mov	r3, r18
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <vfprintf+0xe2>
    13c8:	36 fe       	sbrs	r3, 6
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <vfprintf+0xc0>
    13cc:	8a e0       	ldi	r24, 0x0A	; 10
    13ce:	98 9e       	mul	r9, r24
    13d0:	20 0d       	add	r18, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	92 2e       	mov	r9, r18
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <vfprintf+0xe2>
    13d8:	ea e0       	ldi	r30, 0x0A	; 10
    13da:	2e 9e       	mul	r2, r30
    13dc:	20 0d       	add	r18, r0
    13de:	11 24       	eor	r1, r1
    13e0:	22 2e       	mov	r2, r18
    13e2:	f3 2d       	mov	r31, r3
    13e4:	f0 62       	ori	r31, 0x20	; 32
    13e6:	3f 2e       	mov	r3, r31
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <vfprintf+0xe2>
    13ea:	8c 36       	cpi	r24, 0x6C	; 108
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <vfprintf+0xde>
    13ee:	83 2d       	mov	r24, r3
    13f0:	80 68       	ori	r24, 0x80	; 128
    13f2:	38 2e       	mov	r3, r24
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0xe2>
    13f6:	88 36       	cpi	r24, 0x68	; 104
    13f8:	41 f4       	brne	.+16     	; 0x140a <vfprintf+0xf2>
    13fa:	f7 01       	movw	r30, r14
    13fc:	93 fd       	sbrc	r25, 3
    13fe:	85 91       	lpm	r24, Z+
    1400:	93 ff       	sbrs	r25, 3
    1402:	81 91       	ld	r24, Z+
    1404:	7f 01       	movw	r14, r30
    1406:	81 11       	cpse	r24, r1
    1408:	b3 cf       	rjmp	.-154    	; 0x1370 <vfprintf+0x58>
    140a:	98 2f       	mov	r25, r24
    140c:	9f 7d       	andi	r25, 0xDF	; 223
    140e:	95 54       	subi	r25, 0x45	; 69
    1410:	93 30       	cpi	r25, 0x03	; 3
    1412:	28 f4       	brcc	.+10     	; 0x141e <vfprintf+0x106>
    1414:	0c 5f       	subi	r16, 0xFC	; 252
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	9f e3       	ldi	r25, 0x3F	; 63
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <vfprintf+0x120>
    141e:	83 36       	cpi	r24, 0x63	; 99
    1420:	31 f0       	breq	.+12     	; 0x142e <vfprintf+0x116>
    1422:	83 37       	cpi	r24, 0x73	; 115
    1424:	71 f0       	breq	.+28     	; 0x1442 <vfprintf+0x12a>
    1426:	83 35       	cpi	r24, 0x53	; 83
    1428:	09 f0       	breq	.+2      	; 0x142c <vfprintf+0x114>
    142a:	55 c0       	rjmp	.+170    	; 0x14d6 <vfprintf+0x1be>
    142c:	20 c0       	rjmp	.+64     	; 0x146e <vfprintf+0x156>
    142e:	f8 01       	movw	r30, r16
    1430:	80 81       	ld	r24, Z
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	0e 5f       	subi	r16, 0xFE	; 254
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	88 24       	eor	r8, r8
    143a:	83 94       	inc	r8
    143c:	91 2c       	mov	r9, r1
    143e:	53 01       	movw	r10, r6
    1440:	12 c0       	rjmp	.+36     	; 0x1466 <vfprintf+0x14e>
    1442:	28 01       	movw	r4, r16
    1444:	f2 e0       	ldi	r31, 0x02	; 2
    1446:	4f 0e       	add	r4, r31
    1448:	51 1c       	adc	r5, r1
    144a:	f8 01       	movw	r30, r16
    144c:	a0 80       	ld	r10, Z
    144e:	b1 80       	ldd	r11, Z+1	; 0x01
    1450:	36 fe       	sbrs	r3, 6
    1452:	03 c0       	rjmp	.+6      	; 0x145a <vfprintf+0x142>
    1454:	69 2d       	mov	r22, r9
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x146>
    145a:	6f ef       	ldi	r22, 0xFF	; 255
    145c:	7f ef       	ldi	r23, 0xFF	; 255
    145e:	c5 01       	movw	r24, r10
    1460:	38 d1       	rcall	.+624    	; 0x16d2 <strnlen>
    1462:	4c 01       	movw	r8, r24
    1464:	82 01       	movw	r16, r4
    1466:	f3 2d       	mov	r31, r3
    1468:	ff 77       	andi	r31, 0x7F	; 127
    146a:	3f 2e       	mov	r3, r31
    146c:	15 c0       	rjmp	.+42     	; 0x1498 <vfprintf+0x180>
    146e:	28 01       	movw	r4, r16
    1470:	22 e0       	ldi	r18, 0x02	; 2
    1472:	42 0e       	add	r4, r18
    1474:	51 1c       	adc	r5, r1
    1476:	f8 01       	movw	r30, r16
    1478:	a0 80       	ld	r10, Z
    147a:	b1 80       	ldd	r11, Z+1	; 0x01
    147c:	36 fe       	sbrs	r3, 6
    147e:	03 c0       	rjmp	.+6      	; 0x1486 <vfprintf+0x16e>
    1480:	69 2d       	mov	r22, r9
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <vfprintf+0x172>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	c5 01       	movw	r24, r10
    148c:	17 d1       	rcall	.+558    	; 0x16bc <strnlen_P>
    148e:	4c 01       	movw	r8, r24
    1490:	f3 2d       	mov	r31, r3
    1492:	f0 68       	ori	r31, 0x80	; 128
    1494:	3f 2e       	mov	r3, r31
    1496:	82 01       	movw	r16, r4
    1498:	33 fc       	sbrc	r3, 3
    149a:	19 c0       	rjmp	.+50     	; 0x14ce <vfprintf+0x1b6>
    149c:	82 2d       	mov	r24, r2
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	88 16       	cp	r8, r24
    14a2:	99 06       	cpc	r9, r25
    14a4:	a0 f4       	brcc	.+40     	; 0x14ce <vfprintf+0x1b6>
    14a6:	b6 01       	movw	r22, r12
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	1d d1       	rcall	.+570    	; 0x16e8 <fputc>
    14ae:	2a 94       	dec	r2
    14b0:	f5 cf       	rjmp	.-22     	; 0x149c <vfprintf+0x184>
    14b2:	f5 01       	movw	r30, r10
    14b4:	37 fc       	sbrc	r3, 7
    14b6:	85 91       	lpm	r24, Z+
    14b8:	37 fe       	sbrs	r3, 7
    14ba:	81 91       	ld	r24, Z+
    14bc:	5f 01       	movw	r10, r30
    14be:	b6 01       	movw	r22, r12
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	12 d1       	rcall	.+548    	; 0x16e8 <fputc>
    14c4:	21 10       	cpse	r2, r1
    14c6:	2a 94       	dec	r2
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	82 1a       	sub	r8, r18
    14cc:	91 08       	sbc	r9, r1
    14ce:	81 14       	cp	r8, r1
    14d0:	91 04       	cpc	r9, r1
    14d2:	79 f7       	brne	.-34     	; 0x14b2 <vfprintf+0x19a>
    14d4:	e1 c0       	rjmp	.+450    	; 0x1698 <vfprintf+0x380>
    14d6:	84 36       	cpi	r24, 0x64	; 100
    14d8:	11 f0       	breq	.+4      	; 0x14de <vfprintf+0x1c6>
    14da:	89 36       	cpi	r24, 0x69	; 105
    14dc:	39 f5       	brne	.+78     	; 0x152c <vfprintf+0x214>
    14de:	f8 01       	movw	r30, r16
    14e0:	37 fe       	sbrs	r3, 7
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <vfprintf+0x1da>
    14e4:	60 81       	ld	r22, Z
    14e6:	71 81       	ldd	r23, Z+1	; 0x01
    14e8:	82 81       	ldd	r24, Z+2	; 0x02
    14ea:	93 81       	ldd	r25, Z+3	; 0x03
    14ec:	0c 5f       	subi	r16, 0xFC	; 252
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <vfprintf+0x1ea>
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	07 2e       	mov	r0, r23
    14f8:	00 0c       	add	r0, r0
    14fa:	88 0b       	sbc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	0e 5f       	subi	r16, 0xFE	; 254
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	f3 2d       	mov	r31, r3
    1504:	ff 76       	andi	r31, 0x6F	; 111
    1506:	3f 2e       	mov	r3, r31
    1508:	97 ff       	sbrs	r25, 7
    150a:	09 c0       	rjmp	.+18     	; 0x151e <vfprintf+0x206>
    150c:	90 95       	com	r25
    150e:	80 95       	com	r24
    1510:	70 95       	com	r23
    1512:	61 95       	neg	r22
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	f0 68       	ori	r31, 0x80	; 128
    151c:	3f 2e       	mov	r3, r31
    151e:	2a e0       	ldi	r18, 0x0A	; 10
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	a3 01       	movw	r20, r6
    1524:	1d d1       	rcall	.+570    	; 0x1760 <__ultoa_invert>
    1526:	88 2e       	mov	r8, r24
    1528:	86 18       	sub	r8, r6
    152a:	44 c0       	rjmp	.+136    	; 0x15b4 <vfprintf+0x29c>
    152c:	85 37       	cpi	r24, 0x75	; 117
    152e:	31 f4       	brne	.+12     	; 0x153c <vfprintf+0x224>
    1530:	23 2d       	mov	r18, r3
    1532:	2f 7e       	andi	r18, 0xEF	; 239
    1534:	b2 2e       	mov	r11, r18
    1536:	2a e0       	ldi	r18, 0x0A	; 10
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	25 c0       	rjmp	.+74     	; 0x1586 <vfprintf+0x26e>
    153c:	93 2d       	mov	r25, r3
    153e:	99 7f       	andi	r25, 0xF9	; 249
    1540:	b9 2e       	mov	r11, r25
    1542:	8f 36       	cpi	r24, 0x6F	; 111
    1544:	c1 f0       	breq	.+48     	; 0x1576 <vfprintf+0x25e>
    1546:	18 f4       	brcc	.+6      	; 0x154e <vfprintf+0x236>
    1548:	88 35       	cpi	r24, 0x58	; 88
    154a:	79 f0       	breq	.+30     	; 0x156a <vfprintf+0x252>
    154c:	ae c0       	rjmp	.+348    	; 0x16aa <vfprintf+0x392>
    154e:	80 37       	cpi	r24, 0x70	; 112
    1550:	19 f0       	breq	.+6      	; 0x1558 <vfprintf+0x240>
    1552:	88 37       	cpi	r24, 0x78	; 120
    1554:	21 f0       	breq	.+8      	; 0x155e <vfprintf+0x246>
    1556:	a9 c0       	rjmp	.+338    	; 0x16aa <vfprintf+0x392>
    1558:	e9 2f       	mov	r30, r25
    155a:	e0 61       	ori	r30, 0x10	; 16
    155c:	be 2e       	mov	r11, r30
    155e:	b4 fe       	sbrs	r11, 4
    1560:	0d c0       	rjmp	.+26     	; 0x157c <vfprintf+0x264>
    1562:	fb 2d       	mov	r31, r11
    1564:	f4 60       	ori	r31, 0x04	; 4
    1566:	bf 2e       	mov	r11, r31
    1568:	09 c0       	rjmp	.+18     	; 0x157c <vfprintf+0x264>
    156a:	34 fe       	sbrs	r3, 4
    156c:	0a c0       	rjmp	.+20     	; 0x1582 <vfprintf+0x26a>
    156e:	29 2f       	mov	r18, r25
    1570:	26 60       	ori	r18, 0x06	; 6
    1572:	b2 2e       	mov	r11, r18
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <vfprintf+0x26a>
    1576:	28 e0       	ldi	r18, 0x08	; 8
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <vfprintf+0x26e>
    157c:	20 e1       	ldi	r18, 0x10	; 16
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x26e>
    1582:	20 e1       	ldi	r18, 0x10	; 16
    1584:	32 e0       	ldi	r19, 0x02	; 2
    1586:	f8 01       	movw	r30, r16
    1588:	b7 fe       	sbrs	r11, 7
    158a:	07 c0       	rjmp	.+14     	; 0x159a <vfprintf+0x282>
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	0c 5f       	subi	r16, 0xFC	; 252
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <vfprintf+0x28e>
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 5f       	subi	r16, 0xFE	; 254
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	a3 01       	movw	r20, r6
    15a8:	db d0       	rcall	.+438    	; 0x1760 <__ultoa_invert>
    15aa:	88 2e       	mov	r8, r24
    15ac:	86 18       	sub	r8, r6
    15ae:	fb 2d       	mov	r31, r11
    15b0:	ff 77       	andi	r31, 0x7F	; 127
    15b2:	3f 2e       	mov	r3, r31
    15b4:	36 fe       	sbrs	r3, 6
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <vfprintf+0x2ba>
    15b8:	23 2d       	mov	r18, r3
    15ba:	2e 7f       	andi	r18, 0xFE	; 254
    15bc:	a2 2e       	mov	r10, r18
    15be:	89 14       	cp	r8, r9
    15c0:	58 f4       	brcc	.+22     	; 0x15d8 <vfprintf+0x2c0>
    15c2:	34 fe       	sbrs	r3, 4
    15c4:	0b c0       	rjmp	.+22     	; 0x15dc <vfprintf+0x2c4>
    15c6:	32 fc       	sbrc	r3, 2
    15c8:	09 c0       	rjmp	.+18     	; 0x15dc <vfprintf+0x2c4>
    15ca:	83 2d       	mov	r24, r3
    15cc:	8e 7e       	andi	r24, 0xEE	; 238
    15ce:	a8 2e       	mov	r10, r24
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <vfprintf+0x2c4>
    15d2:	b8 2c       	mov	r11, r8
    15d4:	a3 2c       	mov	r10, r3
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <vfprintf+0x2c6>
    15d8:	b8 2c       	mov	r11, r8
    15da:	01 c0       	rjmp	.+2      	; 0x15de <vfprintf+0x2c6>
    15dc:	b9 2c       	mov	r11, r9
    15de:	a4 fe       	sbrs	r10, 4
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <vfprintf+0x2e8>
    15e2:	fe 01       	movw	r30, r28
    15e4:	e8 0d       	add	r30, r8
    15e6:	f1 1d       	adc	r31, r1
    15e8:	80 81       	ld	r24, Z
    15ea:	80 33       	cpi	r24, 0x30	; 48
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <vfprintf+0x2de>
    15ee:	9a 2d       	mov	r25, r10
    15f0:	99 7e       	andi	r25, 0xE9	; 233
    15f2:	a9 2e       	mov	r10, r25
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <vfprintf+0x2f0>
    15f6:	a2 fe       	sbrs	r10, 2
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0x2ee>
    15fa:	b3 94       	inc	r11
    15fc:	b3 94       	inc	r11
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <vfprintf+0x2f0>
    1600:	8a 2d       	mov	r24, r10
    1602:	86 78       	andi	r24, 0x86	; 134
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x2f0>
    1606:	b3 94       	inc	r11
    1608:	a3 fc       	sbrc	r10, 3
    160a:	10 c0       	rjmp	.+32     	; 0x162c <vfprintf+0x314>
    160c:	a0 fe       	sbrs	r10, 0
    160e:	06 c0       	rjmp	.+12     	; 0x161c <vfprintf+0x304>
    1610:	b2 14       	cp	r11, r2
    1612:	80 f4       	brcc	.+32     	; 0x1634 <vfprintf+0x31c>
    1614:	28 0c       	add	r2, r8
    1616:	92 2c       	mov	r9, r2
    1618:	9b 18       	sub	r9, r11
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <vfprintf+0x31e>
    161c:	b2 14       	cp	r11, r2
    161e:	58 f4       	brcc	.+22     	; 0x1636 <vfprintf+0x31e>
    1620:	b6 01       	movw	r22, r12
    1622:	80 e2       	ldi	r24, 0x20	; 32
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	60 d0       	rcall	.+192    	; 0x16e8 <fputc>
    1628:	b3 94       	inc	r11
    162a:	f8 cf       	rjmp	.-16     	; 0x161c <vfprintf+0x304>
    162c:	b2 14       	cp	r11, r2
    162e:	18 f4       	brcc	.+6      	; 0x1636 <vfprintf+0x31e>
    1630:	2b 18       	sub	r2, r11
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x320>
    1634:	98 2c       	mov	r9, r8
    1636:	21 2c       	mov	r2, r1
    1638:	a4 fe       	sbrs	r10, 4
    163a:	0f c0       	rjmp	.+30     	; 0x165a <vfprintf+0x342>
    163c:	b6 01       	movw	r22, r12
    163e:	80 e3       	ldi	r24, 0x30	; 48
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	52 d0       	rcall	.+164    	; 0x16e8 <fputc>
    1644:	a2 fe       	sbrs	r10, 2
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <vfprintf+0x35c>
    1648:	a1 fc       	sbrc	r10, 1
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <vfprintf+0x33a>
    164c:	88 e7       	ldi	r24, 0x78	; 120
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <vfprintf+0x33e>
    1652:	88 e5       	ldi	r24, 0x58	; 88
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	b6 01       	movw	r22, r12
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <vfprintf+0x35a>
    165a:	8a 2d       	mov	r24, r10
    165c:	86 78       	andi	r24, 0x86	; 134
    165e:	51 f0       	breq	.+20     	; 0x1674 <vfprintf+0x35c>
    1660:	a1 fe       	sbrs	r10, 1
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <vfprintf+0x350>
    1664:	8b e2       	ldi	r24, 0x2B	; 43
    1666:	01 c0       	rjmp	.+2      	; 0x166a <vfprintf+0x352>
    1668:	80 e2       	ldi	r24, 0x20	; 32
    166a:	a7 fc       	sbrc	r10, 7
    166c:	8d e2       	ldi	r24, 0x2D	; 45
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	3a d0       	rcall	.+116    	; 0x16e8 <fputc>
    1674:	89 14       	cp	r8, r9
    1676:	30 f4       	brcc	.+12     	; 0x1684 <vfprintf+0x36c>
    1678:	b6 01       	movw	r22, r12
    167a:	80 e3       	ldi	r24, 0x30	; 48
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	34 d0       	rcall	.+104    	; 0x16e8 <fputc>
    1680:	9a 94       	dec	r9
    1682:	f8 cf       	rjmp	.-16     	; 0x1674 <vfprintf+0x35c>
    1684:	8a 94       	dec	r8
    1686:	f3 01       	movw	r30, r6
    1688:	e8 0d       	add	r30, r8
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	b6 01       	movw	r22, r12
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	2a d0       	rcall	.+84     	; 0x16e8 <fputc>
    1694:	81 10       	cpse	r8, r1
    1696:	f6 cf       	rjmp	.-20     	; 0x1684 <vfprintf+0x36c>
    1698:	22 20       	and	r2, r2
    169a:	09 f4       	brne	.+2      	; 0x169e <vfprintf+0x386>
    169c:	4e ce       	rjmp	.-868    	; 0x133a <vfprintf+0x22>
    169e:	b6 01       	movw	r22, r12
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	21 d0       	rcall	.+66     	; 0x16e8 <fputc>
    16a6:	2a 94       	dec	r2
    16a8:	f7 cf       	rjmp	.-18     	; 0x1698 <vfprintf+0x380>
    16aa:	f6 01       	movw	r30, r12
    16ac:	86 81       	ldd	r24, Z+6	; 0x06
    16ae:	97 81       	ldd	r25, Z+7	; 0x07
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vfprintf+0x39e>
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	9f ef       	ldi	r25, 0xFF	; 255
    16b6:	2b 96       	adiw	r28, 0x0b	; 11
    16b8:	e2 e1       	ldi	r30, 0x12	; 18
    16ba:	cc c0       	rjmp	.+408    	; 0x1854 <__epilogue_restores__>

000016bc <strnlen_P>:
    16bc:	fc 01       	movw	r30, r24
    16be:	05 90       	lpm	r0, Z+
    16c0:	61 50       	subi	r22, 0x01	; 1
    16c2:	70 40       	sbci	r23, 0x00	; 0
    16c4:	01 10       	cpse	r0, r1
    16c6:	d8 f7       	brcc	.-10     	; 0x16be <strnlen_P+0x2>
    16c8:	80 95       	com	r24
    16ca:	90 95       	com	r25
    16cc:	8e 0f       	add	r24, r30
    16ce:	9f 1f       	adc	r25, r31
    16d0:	08 95       	ret

000016d2 <strnlen>:
    16d2:	fc 01       	movw	r30, r24
    16d4:	61 50       	subi	r22, 0x01	; 1
    16d6:	70 40       	sbci	r23, 0x00	; 0
    16d8:	01 90       	ld	r0, Z+
    16da:	01 10       	cpse	r0, r1
    16dc:	d8 f7       	brcc	.-10     	; 0x16d4 <strnlen+0x2>
    16de:	80 95       	com	r24
    16e0:	90 95       	com	r25
    16e2:	8e 0f       	add	r24, r30
    16e4:	9f 1f       	adc	r25, r31
    16e6:	08 95       	ret

000016e8 <fputc>:
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	fb 01       	movw	r30, r22
    16f2:	23 81       	ldd	r18, Z+3	; 0x03
    16f4:	21 fd       	sbrc	r18, 1
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <fputc+0x16>
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	9f ef       	ldi	r25, 0xFF	; 255
    16fc:	2c c0       	rjmp	.+88     	; 0x1756 <fputc+0x6e>
    16fe:	22 ff       	sbrs	r18, 2
    1700:	16 c0       	rjmp	.+44     	; 0x172e <fputc+0x46>
    1702:	46 81       	ldd	r20, Z+6	; 0x06
    1704:	57 81       	ldd	r21, Z+7	; 0x07
    1706:	24 81       	ldd	r18, Z+4	; 0x04
    1708:	35 81       	ldd	r19, Z+5	; 0x05
    170a:	42 17       	cp	r20, r18
    170c:	53 07       	cpc	r21, r19
    170e:	44 f4       	brge	.+16     	; 0x1720 <fputc+0x38>
    1710:	a0 81       	ld	r26, Z
    1712:	b1 81       	ldd	r27, Z+1	; 0x01
    1714:	9d 01       	movw	r18, r26
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	31 83       	std	Z+1, r19	; 0x01
    171c:	20 83       	st	Z, r18
    171e:	8c 93       	st	X, r24
    1720:	26 81       	ldd	r18, Z+6	; 0x06
    1722:	37 81       	ldd	r19, Z+7	; 0x07
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	37 83       	std	Z+7, r19	; 0x07
    172a:	26 83       	std	Z+6, r18	; 0x06
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <fputc+0x6e>
    172e:	8b 01       	movw	r16, r22
    1730:	ec 01       	movw	r28, r24
    1732:	fb 01       	movw	r30, r22
    1734:	00 84       	ldd	r0, Z+8	; 0x08
    1736:	f1 85       	ldd	r31, Z+9	; 0x09
    1738:	e0 2d       	mov	r30, r0
    173a:	09 95       	icall
    173c:	89 2b       	or	r24, r25
    173e:	e1 f6       	brne	.-72     	; 0x16f8 <fputc+0x10>
    1740:	d8 01       	movw	r26, r16
    1742:	16 96       	adiw	r26, 0x06	; 6
    1744:	8d 91       	ld	r24, X+
    1746:	9c 91       	ld	r25, X
    1748:	17 97       	sbiw	r26, 0x07	; 7
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	17 96       	adiw	r26, 0x07	; 7
    174e:	9c 93       	st	X, r25
    1750:	8e 93       	st	-X, r24
    1752:	16 97       	sbiw	r26, 0x06	; 6
    1754:	ce 01       	movw	r24, r28
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <__ultoa_invert>:
    1760:	fa 01       	movw	r30, r20
    1762:	aa 27       	eor	r26, r26
    1764:	28 30       	cpi	r18, 0x08	; 8
    1766:	51 f1       	breq	.+84     	; 0x17bc <__ultoa_invert+0x5c>
    1768:	20 31       	cpi	r18, 0x10	; 16
    176a:	81 f1       	breq	.+96     	; 0x17cc <__ultoa_invert+0x6c>
    176c:	e8 94       	clt
    176e:	6f 93       	push	r22
    1770:	6e 7f       	andi	r22, 0xFE	; 254
    1772:	6e 5f       	subi	r22, 0xFE	; 254
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	8f 4f       	sbci	r24, 0xFF	; 255
    1778:	9f 4f       	sbci	r25, 0xFF	; 255
    177a:	af 4f       	sbci	r26, 0xFF	; 255
    177c:	b1 e0       	ldi	r27, 0x01	; 1
    177e:	3e d0       	rcall	.+124    	; 0x17fc <__ultoa_invert+0x9c>
    1780:	b4 e0       	ldi	r27, 0x04	; 4
    1782:	3c d0       	rcall	.+120    	; 0x17fc <__ultoa_invert+0x9c>
    1784:	67 0f       	add	r22, r23
    1786:	78 1f       	adc	r23, r24
    1788:	89 1f       	adc	r24, r25
    178a:	9a 1f       	adc	r25, r26
    178c:	a1 1d       	adc	r26, r1
    178e:	68 0f       	add	r22, r24
    1790:	79 1f       	adc	r23, r25
    1792:	8a 1f       	adc	r24, r26
    1794:	91 1d       	adc	r25, r1
    1796:	a1 1d       	adc	r26, r1
    1798:	6a 0f       	add	r22, r26
    179a:	71 1d       	adc	r23, r1
    179c:	81 1d       	adc	r24, r1
    179e:	91 1d       	adc	r25, r1
    17a0:	a1 1d       	adc	r26, r1
    17a2:	20 d0       	rcall	.+64     	; 0x17e4 <__ultoa_invert+0x84>
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <__ultoa_invert+0x48>
    17a6:	68 94       	set
    17a8:	3f 91       	pop	r19
    17aa:	2a e0       	ldi	r18, 0x0A	; 10
    17ac:	26 9f       	mul	r18, r22
    17ae:	11 24       	eor	r1, r1
    17b0:	30 19       	sub	r19, r0
    17b2:	30 5d       	subi	r19, 0xD0	; 208
    17b4:	31 93       	st	Z+, r19
    17b6:	de f6       	brtc	.-74     	; 0x176e <__ultoa_invert+0xe>
    17b8:	cf 01       	movw	r24, r30
    17ba:	08 95       	ret
    17bc:	46 2f       	mov	r20, r22
    17be:	47 70       	andi	r20, 0x07	; 7
    17c0:	40 5d       	subi	r20, 0xD0	; 208
    17c2:	41 93       	st	Z+, r20
    17c4:	b3 e0       	ldi	r27, 0x03	; 3
    17c6:	0f d0       	rcall	.+30     	; 0x17e6 <__ultoa_invert+0x86>
    17c8:	c9 f7       	brne	.-14     	; 0x17bc <__ultoa_invert+0x5c>
    17ca:	f6 cf       	rjmp	.-20     	; 0x17b8 <__ultoa_invert+0x58>
    17cc:	46 2f       	mov	r20, r22
    17ce:	4f 70       	andi	r20, 0x0F	; 15
    17d0:	40 5d       	subi	r20, 0xD0	; 208
    17d2:	4a 33       	cpi	r20, 0x3A	; 58
    17d4:	18 f0       	brcs	.+6      	; 0x17dc <__ultoa_invert+0x7c>
    17d6:	49 5d       	subi	r20, 0xD9	; 217
    17d8:	31 fd       	sbrc	r19, 1
    17da:	40 52       	subi	r20, 0x20	; 32
    17dc:	41 93       	st	Z+, r20
    17de:	02 d0       	rcall	.+4      	; 0x17e4 <__ultoa_invert+0x84>
    17e0:	a9 f7       	brne	.-22     	; 0x17cc <__ultoa_invert+0x6c>
    17e2:	ea cf       	rjmp	.-44     	; 0x17b8 <__ultoa_invert+0x58>
    17e4:	b4 e0       	ldi	r27, 0x04	; 4
    17e6:	a6 95       	lsr	r26
    17e8:	97 95       	ror	r25
    17ea:	87 95       	ror	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	ba 95       	dec	r27
    17f2:	c9 f7       	brne	.-14     	; 0x17e6 <__ultoa_invert+0x86>
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	61 05       	cpc	r22, r1
    17f8:	71 05       	cpc	r23, r1
    17fa:	08 95       	ret
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	0a 2e       	mov	r0, r26
    1802:	06 94       	lsr	r0
    1804:	57 95       	ror	r21
    1806:	47 95       	ror	r20
    1808:	37 95       	ror	r19
    180a:	27 95       	ror	r18
    180c:	ba 95       	dec	r27
    180e:	c9 f7       	brne	.-14     	; 0x1802 <__ultoa_invert+0xa2>
    1810:	62 0f       	add	r22, r18
    1812:	73 1f       	adc	r23, r19
    1814:	84 1f       	adc	r24, r20
    1816:	95 1f       	adc	r25, r21
    1818:	a0 1d       	adc	r26, r0
    181a:	08 95       	ret

0000181c <__prologue_saves__>:
    181c:	2f 92       	push	r2
    181e:	3f 92       	push	r3
    1820:	4f 92       	push	r4
    1822:	5f 92       	push	r5
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	ca 1b       	sub	r28, r26
    1846:	db 0b       	sbc	r29, r27
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	09 94       	ijmp

00001854 <__epilogue_restores__>:
    1854:	2a 88       	ldd	r2, Y+18	; 0x12
    1856:	39 88       	ldd	r3, Y+17	; 0x11
    1858:	48 88       	ldd	r4, Y+16	; 0x10
    185a:	5f 84       	ldd	r5, Y+15	; 0x0f
    185c:	6e 84       	ldd	r6, Y+14	; 0x0e
    185e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1860:	8c 84       	ldd	r8, Y+12	; 0x0c
    1862:	9b 84       	ldd	r9, Y+11	; 0x0b
    1864:	aa 84       	ldd	r10, Y+10	; 0x0a
    1866:	b9 84       	ldd	r11, Y+9	; 0x09
    1868:	c8 84       	ldd	r12, Y+8	; 0x08
    186a:	df 80       	ldd	r13, Y+7	; 0x07
    186c:	ee 80       	ldd	r14, Y+6	; 0x06
    186e:	fd 80       	ldd	r15, Y+5	; 0x05
    1870:	0c 81       	ldd	r16, Y+4	; 0x04
    1872:	1b 81       	ldd	r17, Y+3	; 0x03
    1874:	aa 81       	ldd	r26, Y+2	; 0x02
    1876:	b9 81       	ldd	r27, Y+1	; 0x01
    1878:	ce 0f       	add	r28, r30
    187a:	d1 1d       	adc	r29, r1
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	ed 01       	movw	r28, r26
    1888:	08 95       	ret

0000188a <_exit>:
    188a:	f8 94       	cli

0000188c <__stop_program>:
    188c:	ff cf       	rjmp	.-2      	; 0x188c <__stop_program>
