
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000112c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  0000112c  000011c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000088  008000ac  008000ac  0000120c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024c0  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e26  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb6  00000000  00000000  000046ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00005280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b33  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001996  00000000  00000000  000061fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	43 c0       	rjmp	.+134    	; 0xa4 <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	d9 01       	movw	r26, r18

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	ec e2       	ldi	r30, 0x2C	; 44
      3c:	f1 e1       	ldi	r31, 0x11	; 17
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	ac 3a       	cpi	r26, 0xAC	; 172
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	21 e0       	ldi	r18, 0x01	; 1
      4c:	ac ea       	ldi	r26, 0xAC	; 172
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	a4 33       	cpi	r26, 0x34	; 52
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	a1 d5       	rcall	.+2882   	; 0xbaa <__tablejump2__>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	92 d1       	rcall	.+804    	; 0x394 <main>
      70:	5b c8       	rjmp	.-3914   	; 0xfffff128 <__eeprom_end+0xff7ef128>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z5setupv>:
			sum += ar[i];
		}
	}

	return sum/(double)len;
}
      74:	14 ba       	out	0x14, r1	; 20
      76:	87 ee       	ldi	r24, 0xE7	; 231
      78:	90 e0       	ldi	r25, 0x00	; 0
      7a:	dc d1       	rcall	.+952    	; 0x434 <_ZN7Display10initializeEv>
      7c:	f8 94       	cli
      7e:	16 b8       	out	0x06, r1	; 6
      80:	3e 9a       	sbi	0x07, 6	; 7
      82:	3d 9a       	sbi	0x07, 5	; 7
      84:	32 9a       	sbi	0x06, 2	; 6
      86:	35 9a       	sbi	0x06, 5	; 6
      88:	33 9a       	sbi	0x06, 3	; 6
      8a:	37 9a       	sbi	0x06, 7	; 6
      8c:	36 9a       	sbi	0x06, 6	; 6
      8e:	78 94       	sei
      90:	08 95       	ret

00000092 <_Z5resetv>:
      92:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <_ZL5index>
      96:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
      9a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <_ZL8maxSlope+0x1>
      9e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <_ZL8maxSlope>
      a2:	08 95       	ret

000000a4 <__vector_14>:
      a4:	1f 92       	push	r1
      a6:	0f 92       	push	r0
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	0f 92       	push	r0
      ac:	11 24       	eor	r1, r1
      ae:	2f 93       	push	r18
      b0:	3f 93       	push	r19
      b2:	4f 93       	push	r20
      b4:	5f 93       	push	r21
      b6:	6f 93       	push	r22
      b8:	7f 93       	push	r23
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	af 93       	push	r26
      c0:	bf 93       	push	r27
      c2:	ef 93       	push	r30
      c4:	ff 93       	push	r31
      c6:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
      ca:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <_ZL8prevData>
      ce:	85 b1       	in	r24, 0x05	; 5
      d0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <_ZL7newData>
      d4:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <_ZL8prevData>
      d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      dc:	98 17       	cp	r25, r24
      de:	08 f0       	brcs	.+2      	; 0xe2 <__vector_14+0x3e>
      e0:	d0 c0       	rjmp	.+416    	; 0x282 <__vector_14+0x1de>
      e2:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <_ZL7newData>
      e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
      ea:	98 17       	cp	r25, r24
      ec:	08 f0       	brcs	.+2      	; 0xf0 <__vector_14+0x4c>
      ee:	05 c1       	rjmp	.+522    	; 0x2fa <__vector_14+0x256>
      f0:	c8 c0       	rjmp	.+400    	; 0x282 <__vector_14+0x1de>
      f2:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <_ZL8newSlope>
      fc:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     100:	ee 0f       	add	r30, r30
     102:	ff 1f       	adc	r31, r31
     104:	e6 54       	subi	r30, 0x46	; 70
     106:	ff 4f       	sbci	r31, 0xFF	; 255
     108:	91 83       	std	Z+1, r25	; 0x01
     10a:	80 83       	st	Z, r24
     10c:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <_ZL4time>
     116:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <_ZL4time+0x1>
     11a:	ee 0f       	add	r30, r30
     11c:	ff 1f       	adc	r31, r31
     11e:	e2 53       	subi	r30, 0x32	; 50
     120:	ff 4f       	sbci	r31, 0xFF	; 255
     122:	91 83       	std	Z+1, r25	; 0x01
     124:	80 83       	st	Z, r24
     126:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <_ZL4time+0x1>
     12a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <_ZL4time>
     12e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     132:	81 11       	cpse	r24, r1
     134:	08 c0       	rjmp	.+16     	; 0x146 <__vector_14+0xa2>
     136:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
     13a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     13e:	8f 5f       	subi	r24, 0xFF	; 255
     140:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <_ZL5index>
     144:	9e c0       	rjmp	.+316    	; 0x282 <__vector_14+0x1de>
     146:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <_ZL5timer>
     14a:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <_ZL5timer+0x1>
     14e:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	ee 0f       	add	r30, r30
     156:	ff 1f       	adc	r31, r31
     158:	e2 53       	subi	r30, 0x32	; 50
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	20 81       	ld	r18, Z
     15e:	31 81       	ldd	r19, Z+1	; 0x01
     160:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <_ZL8timerTol>
     164:	50 91 62 00 	lds	r21, 0x0062	; 0x800062 <_ZL8timerTol+0x1>
     168:	82 1b       	sub	r24, r18
     16a:	93 0b       	sbc	r25, r19
     16c:	9c 01       	movw	r18, r24
     16e:	22 f4       	brpl	.+8      	; 0x178 <__vector_14+0xd4>
     170:	22 27       	eor	r18, r18
     172:	33 27       	eor	r19, r19
     174:	28 1b       	sub	r18, r24
     176:	39 0b       	sbc	r19, r25
     178:	24 17       	cp	r18, r20
     17a:	35 07       	cpc	r19, r21
     17c:	0c f0       	brlt	.+2      	; 0x180 <__vector_14+0xdc>
     17e:	e1 c0       	rjmp	.+450    	; 0x342 <__vector_14+0x29e>
     180:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <_ZL5slope>
     184:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <_ZL5slope+0x1>
     188:	40 91 b1 00 	lds	r20, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     18c:	50 91 b2 00 	lds	r21, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     190:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <_ZL8slopeTol>
     194:	84 1b       	sub	r24, r20
     196:	95 0b       	sbc	r25, r21
     198:	ac 01       	movw	r20, r24
     19a:	22 f4       	brpl	.+8      	; 0x1a4 <__vector_14+0x100>
     19c:	44 27       	eor	r20, r20
     19e:	55 27       	eor	r21, r21
     1a0:	48 1b       	sub	r20, r24
     1a2:	59 0b       	sbc	r21, r25
     1a4:	82 2f       	mov	r24, r18
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	48 17       	cp	r20, r24
     1aa:	59 07       	cpc	r21, r25
     1ac:	0c f4       	brge	.+2      	; 0x1b0 <__vector_14+0x10c>
     1ae:	d4 c0       	rjmp	.+424    	; 0x358 <__vector_14+0x2b4>
     1b0:	c8 c0       	rjmp	.+400    	; 0x342 <__vector_14+0x29e>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	e8 2f       	mov	r30, r24
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ee 0f       	add	r30, r30
     1ba:	ff 1f       	adc	r31, r31
     1bc:	e2 53       	subi	r30, 0x32	; 50
     1be:	ff 4f       	sbci	r31, 0xFF	; 255
     1c0:	40 81       	ld	r20, Z
     1c2:	51 81       	ldd	r21, Z+1	; 0x01
     1c4:	20 91 b8 00 	lds	r18, 0x00B8	; 0x8000b8 <_ZL10totalTimer>
     1c8:	30 91 b9 00 	lds	r19, 0x00B9	; 0x8000b9 <_ZL10totalTimer+0x1>
     1cc:	24 0f       	add	r18, r20
     1ce:	35 1f       	adc	r19, r21
     1d0:	30 93 b9 00 	sts	0x00B9, r19	; 0x8000b9 <_ZL10totalTimer+0x1>
     1d4:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <_ZL10totalTimer>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <_ZL5index>
     1de:	89 17       	cp	r24, r25
     1e0:	48 f3       	brcs	.-46     	; 0x1b4 <__vector_14+0x110>
     1e2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <_ZL10totalTimer>
     1e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <_ZL10totalTimer+0x1>
     1ea:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <_ZL6period+0x1>
     1ee:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <_ZL6period>
     1f2:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	e2 53       	subi	r30, 0x32	; 50
     1fe:	ff 4f       	sbci	r31, 0xFF	; 255
     200:	80 81       	ld	r24, Z
     202:	91 81       	ldd	r25, Z+1	; 0x01
     204:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <_ZL5timer+0x1>
     208:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <_ZL5timer>
     20c:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <_ZL5index>
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e6 54       	subi	r30, 0x46	; 70
     218:	ff 4f       	sbci	r31, 0xFF	; 255
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <_ZL5slope+0x1>
     222:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <_ZL5slope>
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <_ZL5index>
     22c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
     230:	28 c0       	rjmp	.+80     	; 0x282 <__vector_14+0x1de>
     232:	2f df       	rcall	.-418    	; 0x92 <_Z5resetv>
     234:	26 c0       	rjmp	.+76     	; 0x282 <__vector_14+0x1de>
     236:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     23a:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     23e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <_ZL8maxSlope>
     242:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <_ZL8maxSlope+0x1>
     246:	82 17       	cp	r24, r18
     248:	93 07       	cpc	r25, r19
     24a:	8c f4       	brge	.+34     	; 0x26e <__vector_14+0x1ca>
     24c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     250:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     254:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <_ZL8maxSlope+0x1>
     258:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <_ZL8maxSlope>
     25c:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <_ZL4time+0x1>
     260:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <_ZL4time>
     264:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <_ZL7noMatch>
     268:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <_ZL5index>
     26c:	0a c0       	rjmp	.+20     	; 0x282 <__vector_14+0x1de>
     26e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <_ZL7noMatch>
     272:	8f 5f       	subi	r24, 0xFF	; 255
     274:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <_ZL7noMatch>
     278:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <_ZL7noMatch>
     27c:	8a 30       	cpi	r24, 0x0A	; 10
     27e:	08 f0       	brcs	.+2      	; 0x282 <__vector_14+0x1de>
     280:	08 df       	rcall	.-496    	; 0x92 <_Z5resetv>
     282:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     286:	88 23       	and	r24, r24
     288:	09 f4       	brne	.+2      	; 0x28c <__vector_14+0x1e8>
     28a:	6f c0       	rjmp	.+222    	; 0x36a <__vector_14+0x2c6>
     28c:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     290:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <_ZL4time>
     294:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <_ZL4time+0x1>
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <_ZL4time+0x1>
     29e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <_ZL4time>
     2a2:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <ampTimer>
     2a6:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <ampTimer+0x1>
     2aa:	2f 5f       	subi	r18, 0xFF	; 255
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <ampTimer+0x1>
     2b2:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <ampTimer>
     2b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2ba:	40 91 e5 00 	lds	r20, 0x00E5	; 0x8000e5 <_ZL7newData>
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	84 1b       	sub	r24, r20
     2c2:	91 09       	sbc	r25, r1
     2c4:	ac 01       	movw	r20, r24
     2c6:	22 f4       	brpl	.+8      	; 0x2d0 <__vector_14+0x22c>
     2c8:	44 27       	eor	r20, r20
     2ca:	55 27       	eor	r21, r21
     2cc:	48 1b       	sub	r20, r24
     2ce:	59 0b       	sbc	r21, r25
     2d0:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <_ZL6maxAmp>
     2d4:	84 17       	cp	r24, r20
     2d6:	10 f4       	brcc	.+4      	; 0x2dc <__vector_14+0x238>
     2d8:	40 93 ad 00 	sts	0x00AD, r20	; 0x8000ad <_ZL6maxAmp>
     2dc:	28 3e       	cpi	r18, 0xE8	; 232
     2de:	33 40       	sbci	r19, 0x03	; 3
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <__vector_14+0x240>
     2e2:	47 c0       	rjmp	.+142    	; 0x372 <__vector_14+0x2ce>
     2e4:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <ampTimer+0x1>
     2e8:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <ampTimer>
     2ec:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <_ZL6maxAmp>
     2f0:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end>
     2f4:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <_ZL6maxAmp>
     2f8:	3c c0       	rjmp	.+120    	; 0x372 <__vector_14+0x2ce>
     2fa:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_ZL7newData>
     2fe:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <_ZL8prevData>
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	82 1b       	sub	r24, r18
     306:	91 09       	sbc	r25, r1
     308:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <_ZL8newSlope+0x1>
     30c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <_ZL8newSlope>
     310:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <_ZL8newSlope>
     314:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <_ZL8newSlope+0x1>
     318:	40 91 b3 00 	lds	r20, 0x00B3	; 0x8000b3 <_ZL8maxSlope>
     31c:	50 91 b4 00 	lds	r21, 0x00B4	; 0x8000b4 <_ZL8maxSlope+0x1>
     320:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <_ZL8slopeTol>
     324:	84 1b       	sub	r24, r20
     326:	95 0b       	sbc	r25, r21
     328:	ac 01       	movw	r20, r24
     32a:	22 f4       	brpl	.+8      	; 0x334 <__vector_14+0x290>
     32c:	44 27       	eor	r20, r20
     32e:	55 27       	eor	r21, r21
     330:	48 1b       	sub	r20, r24
     332:	59 0b       	sbc	r21, r25
     334:	82 2f       	mov	r24, r18
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	48 17       	cp	r20, r24
     33a:	59 07       	cpc	r21, r25
     33c:	0c f4       	brge	.+2      	; 0x340 <__vector_14+0x29c>
     33e:	d9 ce       	rjmp	.-590    	; 0xf2 <__vector_14+0x4e>
     340:	7a cf       	rjmp	.-268    	; 0x236 <__vector_14+0x192>
     342:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     346:	8f 5f       	subi	r24, 0xFF	; 255
     348:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <_ZL5index>
     34c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     350:	8a 30       	cpi	r24, 0x0A	; 10
     352:	08 f4       	brcc	.+2      	; 0x356 <__vector_14+0x2b2>
     354:	96 cf       	rjmp	.-212    	; 0x282 <__vector_14+0x1de>
     356:	6d cf       	rjmp	.-294    	; 0x232 <__vector_14+0x18e>
     358:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <_ZL10totalTimer+0x1>
     35c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <_ZL10totalTimer>
     360:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <_ZL5index>
     364:	81 11       	cpse	r24, r1
     366:	25 cf       	rjmp	.-438    	; 0x1b2 <__vector_14+0x10e>
     368:	3c cf       	rjmp	.-392    	; 0x1e2 <__vector_14+0x13e>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <_ZL8clipping>
     370:	8f cf       	rjmp	.-226    	; 0x290 <__vector_14+0x1ec>
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <main>:

int main(void)
{
	//USART_Init ( MYUBRR );
	double mockFreq = 41.1;
	setup();
     394:	6f de       	rcall	.-802    	; 0x74 <_Z5setupv>
	
	getNoteByFreq(&currentNote, mockFreq);
     396:	46 e6       	ldi	r20, 0x66	; 102
     398:	56 e6       	ldi	r21, 0x66	; 102
     39a:	64 e2       	ldi	r22, 0x24	; 36
     39c:	72 e4       	ldi	r23, 0x42	; 66
     39e:	85 e2       	ldi	r24, 0x25	; 37
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	5a d0       	rcall	.+180    	; 0x458 <_Z13getNoteByFreqP4Noted>
	//displ.lightIndicator(&currentNote, mockFreq);
	displ.light(DI::C);
     3a4:	62 e7       	ldi	r22, 0x72	; 114
     3a6:	87 ee       	ldi	r24, 0xE7	; 231
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	39 d0       	rcall	.+114    	; 0x41e <_ZN7Display5lightE16DisplInstruction>
		//if (mockFreq > 250) {
			//mockFreq = 16;
		//}
		//_delay_ms(20);
	//}
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	08 95       	ret

000003b2 <_GLOBAL__sub_I_currentNote>:
};

const char noteNames[] = {'C', 'C', 'D', 'D', 'E', 'F', 'F', 'G', 'G', 'A', 'A', 'B'};
const bool noteSharps[] = {false, true, false, true, false, false, true, false, true, false, true, false};

typedef struct  {
     3b2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <currentNote+0xe>
	double Bs[3];
	double xBounds[3];
} LEDFunctionCache;

// Display class handles LED 7 segment display, LED indicating sharp note and a LED bar indicating deviation
class Display {
     3b6:	e7 ee       	ldi	r30, 0xE7	; 231
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	11 82       	std	Z+1, r1	; 0x01
     3bc:	10 82       	st	Z, r1
     3be:	12 82       	std	Z+2, r1	; 0x02
     3c0:	12 8a       	std	Z+18, r1	; 0x12
     3c2:	13 8a       	std	Z+19, r1	; 0x13
     3c4:	14 8a       	std	Z+20, r1	; 0x14
     3c6:	15 8a       	std	Z+21, r1	; 0x15
     3c8:	08 95       	ret

000003ca <_ZN7Display14cleanIndicatorEv>:
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     3ca:	fc 01       	movw	r30, r24
     3cc:	9c 01       	movw	r18, r24
     3ce:	21 5f       	subi	r18, 0xF1	; 241
     3d0:	3f 4f       	sbci	r19, 0xFF	; 255
     3d2:	13 82       	std	Z+3, r1	; 0x03
     3d4:	14 82       	std	Z+4, r1	; 0x04
     3d6:	15 82       	std	Z+5, r1	; 0x05
     3d8:	33 96       	adiw	r30, 0x03	; 3
     3da:	e2 17       	cp	r30, r18
     3dc:	f3 07       	cpc	r31, r19
     3de:	c9 f7       	brne	.-14     	; 0x3d2 <_ZN7Display14cleanIndicatorEv+0x8>
     3e0:	6f e0       	ldi	r22, 0x0F	; 15
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	03 96       	adiw	r24, 0x03	; 3
     3e6:	00 d2       	rcall	.+1024   	; 0x7e8 <ws2812_sendarray>
     3e8:	08 95       	ret

000003ea <_ZN7Display5lightEj>:

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
}

void Display::light(unsigned int instruction) {
     3ea:	fc 01       	movw	r30, r24
	if (instruction == this->currentlyDisplaying) return;
     3ec:	80 81       	ld	r24, Z
     3ee:	91 81       	ldd	r25, Z+1	; 0x01
     3f0:	86 17       	cp	r24, r22
     3f2:	97 07       	cpc	r25, r23
     3f4:	99 f0       	breq	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	this->lightSharp(false);
	this->cleanIndicator();
}

void Display::clean() {
	DISPLAY_PORT_OUTPUT = 0x00;
     3f6:	12 ba       	out	0x12, r1	; 18
	this->currentlyDisplaying = 0;
     3f8:	11 82       	std	Z+1, r1	; 0x01
     3fa:	10 82       	st	Z, r1
void Display::light(unsigned int instruction) {
	if (instruction == this->currentlyDisplaying) return;
	
	this->clean();

	if (instruction & (1 << midPin_)) {
     3fc:	61 fd       	sbrc	r22, 1
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     3fe:	91 9a       	sbi	0x12, 1	; 18
	this->clean();

	if (instruction & (1 << midPin_)) {
		this->write(midPin_);
	}
	if (instruction & (1 << upPin_)) {
     400:	64 fd       	sbrc	r22, 4
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     402:	94 9a       	sbi	0x12, 4	; 18
		this->write(midPin_);
	}
	if (instruction & (1 << upPin_)) {
		this->write(upPin_);
	}
	if (instruction & (1 << upRPin_)) {
     404:	65 fd       	sbrc	r22, 5
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     406:	95 9a       	sbi	0x12, 5	; 18
		this->write(upPin_);
	}
	if (instruction & (1 << upRPin_)) {
		this->write(upRPin_);
	}
	if (instruction & (1 << downRPin_)) {
     408:	66 fd       	sbrc	r22, 6
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     40a:	96 9a       	sbi	0x12, 6	; 18
		this->write(upRPin_);
	}
	if (instruction & (1 << downRPin_)) {
		this->write(downRPin_);
	}
	if (instruction & (1 << downPin_)) {
     40c:	62 fd       	sbrc	r22, 2
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     40e:	92 9a       	sbi	0x12, 2	; 18
		this->write(downRPin_);
	}
	if (instruction & (1 << downPin_)) {
		this->write(downPin_);
	}
	if (instruction & (1 << downLPin_)) {
     410:	60 fd       	sbrc	r22, 0
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     412:	90 9a       	sbi	0x12, 0	; 18
		this->write(downPin_);
	}
	if (instruction & (1 << downLPin_)) {
		this->write(downLPin_);
	}
	if (instruction & (1 << upLPin_)) {
     414:	63 fd       	sbrc	r22, 3
	}
	ws2812_sendarray((uint8_t *)this->indicatorBar, INDICATOR_BAR_LEN*3);
}

void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
     416:	93 9a       	sbi	0x12, 3	; 18
	}
	if (instruction & (1 << upLPin_)) {
		this->write(upLPin_);
	}
	
	this->currentlyDisplaying = instruction;
     418:	71 83       	std	Z+1, r23	; 0x01
     41a:	60 83       	st	Z, r22
     41c:	08 95       	ret

0000041e <_ZN7Display5lightE16DisplInstruction>:
void Display::write(unsigned int pin) {
	DISPLAY_PORT_OUTPUT |= _BV(pin);
}

void Display::light(DI instruction) {
	this->light(static_cast<unsigned int>(instruction));
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	e4 df       	rcall	.-56     	; 0x3ea <_ZN7Display5lightEj>
     422:	08 95       	ret

00000424 <_ZN7Display10lightSharpEb>:
	
	this->currentlyDisplaying = instruction;
}

void Display::lightSharp(bool light) {
	if (light) {
     424:	66 23       	and	r22, r22
     426:	11 f0       	breq	.+4      	; 0x42c <_ZN7Display10lightSharpEb+0x8>
		DISPLAY_PORT_OUTPUT |= _BV(sharpPin_);
     428:	97 9a       	sbi	0x12, 7	; 18
     42a:	01 c0       	rjmp	.+2      	; 0x42e <_ZN7Display10lightSharpEb+0xa>
	} else {
		DISPLAY_PORT_OUTPUT &= ~_BV(sharpPin_);
     42c:	97 98       	cbi	0x12, 7	; 18
	}
	this->currentSharpPinStatus = light;
     42e:	fc 01       	movw	r30, r24
     430:	62 83       	std	Z+2, r22	; 0x02
     432:	08 95       	ret

00000434 <_ZN7Display10initializeEv>:
#include "Display.h"


// IMPLEMENT CLASS DISPLAY
void Display::initialize() {
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
					
	DISPLAY_PORT_LED_CONFIG |=_BV(ws2812_pin);
     43a:	b9 9a       	sbi	0x17, 1	; 23
	DISPLAY_PORT_CONFIG |= 0xFF;
     43c:	81 b3       	in	r24, 0x11	; 17
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	81 bb       	out	0x11, r24	; 17
	this->lightSharp(false);
	this->cleanIndicator();
}

void Display::clean() {
	DISPLAY_PORT_OUTPUT = 0x00;
     442:	12 ba       	out	0x12, r1	; 18
	this->currentlyDisplaying = 0;
     444:	19 82       	std	Y+1, r1	; 0x01
     446:	18 82       	st	Y, r1
					
	DISPLAY_PORT_LED_CONFIG |=_BV(ws2812_pin);
	DISPLAY_PORT_CONFIG |= 0xFF;

	this->clean();
	this->lightSharp(false);
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	ce 01       	movw	r24, r28
     44c:	eb df       	rcall	.-42     	; 0x424 <_ZN7Display10lightSharpEb>
	this->cleanIndicator();
     44e:	ce 01       	movw	r24, r28
     450:	bc df       	rcall	.-136    	; 0x3ca <_ZN7Display14cleanIndicatorEv>
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <_Z13getNoteByFreqP4Noted>:
	}

	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
     458:	2f 92       	push	r2
     45a:	3f 92       	push	r3
     45c:	4f 92       	push	r4
     45e:	5f 92       	push	r5
     460:	6f 92       	push	r6
     462:	7f 92       	push	r7
     464:	8f 92       	push	r8
     466:	9f 92       	push	r9
     468:	af 92       	push	r10
     46a:	bf 92       	push	r11
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	2c 97       	sbiw	r28, 0x0c	; 12
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	9e 83       	std	Y+6, r25	; 0x06
     48e:	8d 83       	std	Y+5, r24	; 0x05
     490:	49 83       	std	Y+1, r20	; 0x01
     492:	5a 83       	std	Y+2, r21	; 0x02
     494:	6b 83       	std	Y+3, r22	; 0x03
     496:	7c 83       	std	Y+4, r23	; 0x04

#include "freqDetect.h"


bool isFreqLegal(double freq) {
	return freq >= MIN_FREQ && freq < MAX_FREQ;
     498:	2b e9       	ldi	r18, 0x9B	; 155
     49a:	38 e4       	ldi	r19, 0x48	; 72
     49c:	4e e7       	ldi	r20, 0x7E	; 126
     49e:	51 e4       	ldi	r21, 0x41	; 65
     4a0:	69 81       	ldd	r22, Y+1	; 0x01
     4a2:	7a 81       	ldd	r23, Y+2	; 0x02
     4a4:	8b 81       	ldd	r24, Y+3	; 0x03
     4a6:	9c 81       	ldd	r25, Y+4	; 0x04
     4a8:	19 d3       	rcall	.+1586   	; 0xadc <__gesf2>
     4aa:	88 23       	and	r24, r24
     4ac:	0c f4       	brge	.+2      	; 0x4b0 <__stack+0x51>
     4ae:	f9 c0       	rjmp	.+498    	; 0x6a2 <__stack+0x243>
     4b0:	22 e5       	ldi	r18, 0x52	; 82
     4b2:	38 e4       	ldi	r19, 0x48	; 72
     4b4:	4e ef       	ldi	r20, 0xFE	; 254
     4b6:	53 e4       	ldi	r21, 0x43	; 67
     4b8:	69 81       	ldd	r22, Y+1	; 0x01
     4ba:	7a 81       	ldd	r23, Y+2	; 0x02
     4bc:	8b 81       	ldd	r24, Y+3	; 0x03
     4be:	9c 81       	ldd	r25, Y+4	; 0x04
     4c0:	26 d2       	rcall	.+1100   	; 0x90e <__cmpsf2>
     4c2:	88 23       	and	r24, r24
     4c4:	0c f0       	brlt	.+2      	; 0x4c8 <__stack+0x69>
     4c6:	ed c0       	rjmp	.+474    	; 0x6a2 <__stack+0x243>
     4c8:	f0 c0       	rjmp	.+480    	; 0x6aa <__stack+0x24b>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     4ca:	0f 2e       	mov	r0, r31
     4cc:	c1 2c       	mov	r12, r1
     4ce:	d1 2c       	mov	r13, r1
     4d0:	f0 e8       	ldi	r31, 0x80	; 128
     4d2:	ef 2e       	mov	r14, r31
     4d4:	ff e3       	ldi	r31, 0x3F	; 63
     4d6:	ff 2e       	mov	r15, r31
     4d8:	f0 2d       	mov	r31, r0
		multiplier *= 2.0;
     4da:	a7 01       	movw	r20, r14
     4dc:	96 01       	movw	r18, r12
     4de:	c7 01       	movw	r24, r14
     4e0:	b6 01       	movw	r22, r12
     4e2:	b1 d1       	rcall	.+866    	; 0x846 <__addsf3>
     4e4:	6b 01       	movw	r12, r22
     4e6:	7c 01       	movw	r14, r24

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     4e8:	2b e9       	ldi	r18, 0x9B	; 155
     4ea:	38 e4       	ldi	r19, 0x48	; 72
     4ec:	4e ef       	ldi	r20, 0xFE	; 254
     4ee:	51 e4       	ldi	r21, 0x41	; 65
     4f0:	f9 d2       	rcall	.+1522   	; 0xae4 <__mulsf3>
     4f2:	4b 01       	movw	r8, r22
     4f4:	5c 01       	movw	r10, r24
     4f6:	9b 01       	movw	r18, r22
     4f8:	ac 01       	movw	r20, r24
     4fa:	69 81       	ldd	r22, Y+1	; 0x01
     4fc:	7a 81       	ldd	r23, Y+2	; 0x02
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	ec d2       	rcall	.+1496   	; 0xadc <__gesf2>
     504:	18 16       	cp	r1, r24
     506:	4c f3       	brlt	.-46     	; 0x4da <__stack+0x7b>
     508:	8f 82       	std	Y+7, r8	; 0x07
     50a:	98 86       	std	Y+8, r9	; 0x08
     50c:	a9 86       	std	Y+9, r10	; 0x09
     50e:	ba 86       	std	Y+10, r11	; 0x0a
     510:	e8 c0       	rjmp	.+464    	; 0x6e2 <__stack+0x283>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     512:	1c 01       	movw	r2, r24
     514:	51 01       	movw	r10, r2
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	a8 1a       	sub	r10, r24
     51a:	b1 08       	sbc	r11, r1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     51c:	ab 85       	ldd	r26, Y+11	; 0x0b
     51e:	bc 85       	ldd	r27, Y+12	; 0x0c
     520:	6d 91       	ld	r22, X+
     522:	7d 91       	ld	r23, X+
     524:	8d 91       	ld	r24, X+
     526:	9d 91       	ld	r25, X+
     528:	bc 87       	std	Y+12, r27	; 0x0c
     52a:	ab 87       	std	Y+11, r26	; 0x0b
     52c:	a7 01       	movw	r20, r14
     52e:	96 01       	movw	r18, r12
     530:	d9 d2       	rcall	.+1458   	; 0xae4 <__mulsf3>
     532:	9b 01       	movw	r18, r22
     534:	ac 01       	movw	r20, r24
     536:	69 81       	ldd	r22, Y+1	; 0x01
     538:	7a 81       	ldd	r23, Y+2	; 0x02
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9c 81       	ldd	r25, Y+4	; 0x04
     53e:	82 d1       	rcall	.+772    	; 0x844 <__subsf3>
     540:	ea d1       	rcall	.+980    	; 0x916 <__fixsfsi>
     542:	9b 01       	movw	r18, r22
     544:	77 23       	and	r23, r23
     546:	24 f4       	brge	.+8      	; 0x550 <__stack+0xf1>
     548:	22 27       	eor	r18, r18
     54a:	33 27       	eor	r19, r19
     54c:	26 1b       	sub	r18, r22
     54e:	37 0b       	sbc	r19, r23
     550:	b9 01       	movw	r22, r18
     552:	33 0f       	add	r19, r19
     554:	88 0b       	sbc	r24, r24
     556:	99 0b       	sbc	r25, r25
     558:	11 d2       	rcall	.+1058   	; 0x97c <__floatsisf>
     55a:	96 2e       	mov	r9, r22
     55c:	07 2f       	mov	r16, r23
     55e:	18 2f       	mov	r17, r24
     560:	89 2e       	mov	r8, r25
		if (distance < min_distance) {
     562:	27 2d       	mov	r18, r7
     564:	34 2d       	mov	r19, r4
     566:	45 2d       	mov	r20, r5
     568:	56 2d       	mov	r21, r6
     56a:	d1 d1       	rcall	.+930    	; 0x90e <__cmpsf2>
     56c:	88 23       	and	r24, r24
     56e:	54 f4       	brge	.+20     	; 0x584 <__stack+0x125>
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     570:	c1 01       	movw	r24, r2
     572:	01 96       	adiw	r24, 0x01	; 1
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     574:	79 2c       	mov	r7, r9
     576:	40 2e       	mov	r4, r16
     578:	51 2e       	mov	r5, r17
     57a:	68 2c       	mov	r6, r8
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     57c:	8c 30       	cpi	r24, 0x0C	; 12
     57e:	91 05       	cpc	r25, r1
     580:	41 f6       	brne	.-112    	; 0x512 <__stack+0xb3>
     582:	01 c0       	rjmp	.+2      	; 0x586 <__stack+0x127>
     584:	15 01       	movw	r2, r10
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     586:	f1 01       	movw	r30, r2
     588:	e0 59       	subi	r30, 0x90	; 144
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	80 81       	ld	r24, Z
     58e:	ed 81       	ldd	r30, Y+5	; 0x05
     590:	fe 81       	ldd	r31, Y+6	; 0x06
     592:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     594:	f1 01       	movw	r30, r2
     596:	ec 59       	subi	r30, 0x9C	; 156
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	80 81       	ld	r24, Z
     59c:	ad 81       	ldd	r26, Y+5	; 0x05
     59e:	be 81       	ldd	r27, Y+6	; 0x06
     5a0:	11 96       	adiw	r26, 0x01	; 1
     5a2:	8c 93       	st	X, r24
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     5a4:	f1 01       	movw	r30, r2
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	e4 58       	subi	r30, 0x84	; 132
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	20 81       	ld	r18, Z
     5b4:	31 81       	ldd	r19, Z+1	; 0x01
     5b6:	42 81       	ldd	r20, Z+2	; 0x02
     5b8:	53 81       	ldd	r21, Z+3	; 0x03
     5ba:	c7 01       	movw	r24, r14
     5bc:	b6 01       	movw	r22, r12
     5be:	92 d2       	rcall	.+1316   	; 0xae4 <__mulsf3>
     5c0:	2b 01       	movw	r4, r22
     5c2:	3c 01       	movw	r6, r24
     5c4:	ed 81       	ldd	r30, Y+5	; 0x05
     5c6:	fe 81       	ldd	r31, Y+6	; 0x06
     5c8:	62 83       	std	Z+2, r22	; 0x02
     5ca:	73 83       	std	Z+3, r23	; 0x03
     5cc:	84 83       	std	Z+4, r24	; 0x04
     5ce:	95 83       	std	Z+5, r25	; 0x05
	note->valid = true;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	86 87       	std	Z+14, r24	; 0x0e

	if (closest_i == NOTES_IN_OCTAVE-1) {
     5d4:	fb e0       	ldi	r31, 0x0B	; 11
     5d6:	2f 16       	cp	r2, r31
     5d8:	31 04       	cpc	r3, r1
     5da:	59 f4       	brne	.+22     	; 0x5f2 <__stack+0x193>
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	98 85       	ldd	r25, Y+8	; 0x08
     5e0:	a9 85       	ldd	r26, Y+9	; 0x09
     5e2:	ba 85       	ldd	r27, Y+10	; 0x0a
     5e4:	ed 81       	ldd	r30, Y+5	; 0x05
     5e6:	fe 81       	ldd	r31, Y+6	; 0x06
     5e8:	82 87       	std	Z+10, r24	; 0x0a
     5ea:	93 87       	std	Z+11, r25	; 0x0b
     5ec:	a4 87       	std	Z+12, r26	; 0x0c
     5ee:	b5 87       	std	Z+13, r27	; 0x0d
     5f0:	32 c0       	rjmp	.+100    	; 0x656 <__stack+0x1f7>
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     5f2:	f1 01       	movw	r30, r2
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	ee 0f       	add	r30, r30
     5fa:	ff 1f       	adc	r31, r31
     5fc:	e0 58       	subi	r30, 0x80	; 128
     5fe:	ff 4f       	sbci	r31, 0xFF	; 255
     600:	20 81       	ld	r18, Z
     602:	31 81       	ldd	r19, Z+1	; 0x01
     604:	42 81       	ldd	r20, Z+2	; 0x02
     606:	53 81       	ldd	r21, Z+3	; 0x03
     608:	c7 01       	movw	r24, r14
     60a:	b6 01       	movw	r22, r12
     60c:	6b d2       	rcall	.+1238   	; 0xae4 <__mulsf3>
     60e:	a3 01       	movw	r20, r6
     610:	92 01       	movw	r18, r4
     612:	18 d1       	rcall	.+560    	; 0x844 <__subsf3>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	5f e3       	ldi	r21, 0x3F	; 63
     61c:	63 d2       	rcall	.+1222   	; 0xae4 <__mulsf3>
     61e:	a3 01       	movw	r20, r6
     620:	92 01       	movw	r18, r4
     622:	11 d1       	rcall	.+546    	; 0x846 <__addsf3>
     624:	ad 81       	ldd	r26, Y+5	; 0x05
     626:	be 81       	ldd	r27, Y+6	; 0x06
     628:	1a 96       	adiw	r26, 0x0a	; 10
     62a:	6d 93       	st	X+, r22
     62c:	7d 93       	st	X+, r23
     62e:	8d 93       	st	X+, r24
     630:	9c 93       	st	X, r25
     632:	1d 97       	sbiw	r26, 0x0d	; 13
	}

	if (closest_i == 0) {
     634:	21 14       	cp	r2, r1
     636:	31 04       	cpc	r3, r1
     638:	71 f4       	brne	.+28     	; 0x656 <__stack+0x1f7>
		note->min_freq = MIN_FREQ*multiplier;
     63a:	2b e9       	ldi	r18, 0x9B	; 155
     63c:	38 e4       	ldi	r19, 0x48	; 72
     63e:	4e e7       	ldi	r20, 0x7E	; 126
     640:	51 e4       	ldi	r21, 0x41	; 65
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	4e d2       	rcall	.+1180   	; 0xae4 <__mulsf3>
     648:	ed 81       	ldd	r30, Y+5	; 0x05
     64a:	fe 81       	ldd	r31, Y+6	; 0x06
     64c:	66 83       	std	Z+6, r22	; 0x06
     64e:	77 83       	std	Z+7, r23	; 0x07
     650:	80 87       	std	Z+8, r24	; 0x08
     652:	91 87       	std	Z+9, r25	; 0x09
     654:	b0 c0       	rjmp	.+352    	; 0x7b6 <__stack+0x357>
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
     656:	f1 01       	movw	r30, r2
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	e8 58       	subi	r30, 0x88	; 136
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	20 81       	ld	r18, Z
     666:	31 81       	ldd	r19, Z+1	; 0x01
     668:	42 81       	ldd	r20, Z+2	; 0x02
     66a:	53 81       	ldd	r21, Z+3	; 0x03
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	39 d2       	rcall	.+1138   	; 0xae4 <__mulsf3>
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	c3 01       	movw	r24, r6
     678:	b2 01       	movw	r22, r4
     67a:	e4 d0       	rcall	.+456    	; 0x844 <__subsf3>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	5f e3       	ldi	r21, 0x3F	; 63
     684:	2f d2       	rcall	.+1118   	; 0xae4 <__mulsf3>
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	c3 01       	movw	r24, r6
     68c:	b2 01       	movw	r22, r4
     68e:	da d0       	rcall	.+436    	; 0x844 <__subsf3>
     690:	ad 81       	ldd	r26, Y+5	; 0x05
     692:	be 81       	ldd	r27, Y+6	; 0x06
     694:	16 96       	adiw	r26, 0x06	; 6
     696:	6d 93       	st	X+, r22
     698:	7d 93       	st	X+, r23
     69a:	8d 93       	st	X+, r24
     69c:	9c 93       	st	X, r25
     69e:	19 97       	sbiw	r26, 0x09	; 9
     6a0:	8a c0       	rjmp	.+276    	; 0x7b6 <__stack+0x357>
	return multiplier;
}

void getNoteByFreq(Note* note, double freq) {
	if (!isFreqLegal(freq)) {
		note->valid = false;
     6a2:	ed 81       	ldd	r30, Y+5	; 0x05
     6a4:	fe 81       	ldd	r31, Y+6	; 0x06
     6a6:	16 86       	std	Z+14, r1	; 0x0e
		return;
     6a8:	86 c0       	rjmp	.+268    	; 0x7b6 <__stack+0x357>

// Determine in which octave lies the frequency and get a multiplier required to work with that octave
double get_octave_multiplier(double freq) {
	double multiplier = 1.0;
	// double last_octave_freq = 0;
	while (freq > FIRST_OCT_MAX_FREQ * multiplier) {
     6aa:	2b e9       	ldi	r18, 0x9B	; 155
     6ac:	38 e4       	ldi	r19, 0x48	; 72
     6ae:	4e ef       	ldi	r20, 0xFE	; 254
     6b0:	51 e4       	ldi	r21, 0x41	; 65
     6b2:	69 81       	ldd	r22, Y+1	; 0x01
     6b4:	7a 81       	ldd	r23, Y+2	; 0x02
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	10 d2       	rcall	.+1056   	; 0xadc <__gesf2>
     6bc:	18 16       	cp	r1, r24
     6be:	0c f4       	brge	.+2      	; 0x6c2 <__stack+0x263>
     6c0:	04 cf       	rjmp	.-504    	; 0x4ca <__stack+0x6b>
     6c2:	8b e9       	ldi	r24, 0x9B	; 155
     6c4:	98 e4       	ldi	r25, 0x48	; 72
     6c6:	ae ef       	ldi	r26, 0xFE	; 254
     6c8:	b1 e4       	ldi	r27, 0x41	; 65
     6ca:	8f 83       	std	Y+7, r24	; 0x07
     6cc:	98 87       	std	Y+8, r25	; 0x08
     6ce:	a9 87       	std	Y+9, r26	; 0x09
     6d0:	ba 87       	std	Y+10, r27	; 0x0a
     6d2:	0f 2e       	mov	r0, r31
     6d4:	c1 2c       	mov	r12, r1
     6d6:	d1 2c       	mov	r13, r1
     6d8:	f0 e8       	ldi	r31, 0x80	; 128
     6da:	ef 2e       	mov	r14, r31
     6dc:	ff e3       	ldi	r31, 0x3F	; 63
     6de:	ff 2e       	mov	r15, r31
     6e0:	f0 2d       	mov	r31, r0

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
		double distance = abs(freq - (firstOctaveFreqs[note_i]*multiplier));
     6e2:	23 e1       	ldi	r18, 0x13	; 19
     6e4:	30 ed       	ldi	r19, 0xD0	; 208
     6e6:	42 e8       	ldi	r20, 0x82	; 130
     6e8:	51 e4       	ldi	r21, 0x41	; 65
     6ea:	c7 01       	movw	r24, r14
     6ec:	b6 01       	movw	r22, r12
     6ee:	fa d1       	rcall	.+1012   	; 0xae4 <__mulsf3>
     6f0:	9b 01       	movw	r18, r22
     6f2:	ac 01       	movw	r20, r24
     6f4:	69 81       	ldd	r22, Y+1	; 0x01
     6f6:	7a 81       	ldd	r23, Y+2	; 0x02
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	9c 81       	ldd	r25, Y+4	; 0x04
     6fc:	a3 d0       	rcall	.+326    	; 0x844 <__subsf3>
     6fe:	0b d1       	rcall	.+534    	; 0x916 <__fixsfsi>
     700:	9b 01       	movw	r18, r22
     702:	77 23       	and	r23, r23
     704:	24 f4       	brge	.+8      	; 0x70e <__stack+0x2af>
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	26 1b       	sub	r18, r22
     70c:	37 0b       	sbc	r19, r23
     70e:	b9 01       	movw	r22, r18
     710:	33 0f       	add	r19, r19
     712:	88 0b       	sbc	r24, r24
     714:	99 0b       	sbc	r25, r25
     716:	32 d1       	rcall	.+612    	; 0x97c <__floatsisf>
     718:	76 2e       	mov	r7, r22
     71a:	47 2e       	mov	r4, r23
     71c:	58 2e       	mov	r5, r24
     71e:	69 2e       	mov	r6, r25
		if (distance < min_distance) {
     720:	22 e5       	ldi	r18, 0x52	; 82
     722:	38 e4       	ldi	r19, 0x48	; 72
     724:	4e ef       	ldi	r20, 0xFE	; 254
     726:	53 e4       	ldi	r21, 0x43	; 67
     728:	f2 d0       	rcall	.+484    	; 0x90e <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	44 f4       	brge	.+16     	; 0x73e <__stack+0x2df>
     72e:	a0 e8       	ldi	r26, 0x80	; 128
     730:	b0 e0       	ldi	r27, 0x00	; 0
	double multiplier = get_octave_multiplier(freq);

	// Find closest note in O(n) time
	double min_distance = MAX_FREQ;
	int closest_i = -1;
	for (int note_i = 0; note_i < NOTES_IN_OCTAVE; note_i++) {
     732:	22 24       	eor	r2, r2
     734:	23 94       	inc	r2
     736:	31 2c       	mov	r3, r1
     738:	bc 87       	std	Y+12, r27	; 0x0c
     73a:	ab 87       	std	Y+11, r26	; 0x0b
     73c:	eb ce       	rjmp	.-554    	; 0x514 <__stack+0xb5>
			break;
		}
	}

	// Fill note struct
	note->note = noteNames[closest_i];
     73e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_ZL10noteSharps+0xb>
     742:	ed 81       	ldd	r30, Y+5	; 0x05
     744:	fe 81       	ldd	r31, Y+6	; 0x06
     746:	80 83       	st	Z, r24
	note->sharp = noteSharps[closest_i];
     748:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <_ZL8slopeTol>
     74c:	81 83       	std	Z+1, r24	; 0x01
	note->freq = firstOctaveFreqs[closest_i]*multiplier;
     74e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <_ZL9noteNames+0x8>
     752:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <_ZL9noteNames+0x9>
     756:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <_ZL9noteNames+0xa>
     75a:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <_ZL9noteNames+0xb>
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	c0 d1       	rcall	.+896    	; 0xae4 <__mulsf3>
     764:	2b 01       	movw	r4, r22
     766:	3c 01       	movw	r6, r24
     768:	ad 81       	ldd	r26, Y+5	; 0x05
     76a:	be 81       	ldd	r27, Y+6	; 0x06
     76c:	12 96       	adiw	r26, 0x02	; 2
     76e:	6d 93       	st	X+, r22
     770:	7d 93       	st	X+, r23
     772:	8d 93       	st	X+, r24
     774:	9c 93       	st	X, r25
     776:	15 97       	sbiw	r26, 0x05	; 5
	note->valid = true;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	1e 96       	adiw	r26, 0x0e	; 14
     77c:	8c 93       	st	X, r24

	if (closest_i == NOTES_IN_OCTAVE-1) {
		note->max_freq = FIRST_OCT_MAX_FREQ*multiplier;
		} else {
		note->max_freq = note->freq + (((firstOctaveFreqs[closest_i+1]*multiplier) - note->freq)/2.0);
     77e:	23 e1       	ldi	r18, 0x13	; 19
     780:	30 ed       	ldi	r19, 0xD0	; 208
     782:	42 e8       	ldi	r20, 0x82	; 130
     784:	51 e4       	ldi	r21, 0x41	; 65
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	ac d1       	rcall	.+856    	; 0xae4 <__mulsf3>
     78c:	a3 01       	movw	r20, r6
     78e:	92 01       	movw	r18, r4
     790:	59 d0       	rcall	.+178    	; 0x844 <__subsf3>
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	5f e3       	ldi	r21, 0x3F	; 63
     79a:	a4 d1       	rcall	.+840    	; 0xae4 <__mulsf3>
     79c:	a3 01       	movw	r20, r6
     79e:	92 01       	movw	r18, r4
     7a0:	52 d0       	rcall	.+164    	; 0x846 <__addsf3>
     7a2:	ed 81       	ldd	r30, Y+5	; 0x05
     7a4:	fe 81       	ldd	r31, Y+6	; 0x06
     7a6:	62 87       	std	Z+10, r22	; 0x0a
     7a8:	73 87       	std	Z+11, r23	; 0x0b
     7aa:	84 87       	std	Z+12, r24	; 0x0c
     7ac:	95 87       	std	Z+13, r25	; 0x0d
     7ae:	22 24       	eor	r2, r2
     7b0:	2a 94       	dec	r2
     7b2:	32 2c       	mov	r3, r2
     7b4:	50 cf       	rjmp	.-352    	; 0x656 <__stack+0x1f7>
	if (closest_i == 0) {
		note->min_freq = MIN_FREQ*multiplier;
		} else {
		note->min_freq = note->freq - ((note->freq - (firstOctaveFreqs[closest_i-1]*multiplier))/2.0);
	}
}
     7b6:	2c 96       	adiw	r28, 0x0c	; 12
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	9f 90       	pop	r9
     7d8:	8f 90       	pop	r8
     7da:	7f 90       	pop	r7
     7dc:	6f 90       	pop	r6
     7de:	5f 90       	pop	r5
     7e0:	4f 90       	pop	r4
     7e2:	3f 90       	pop	r3
     7e4:	2f 90       	pop	r2
     7e6:	08 95       	ret

000007e8 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
     7e8:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
     7ea:	28 b3       	in	r18, 0x18	; 24
     7ec:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
     7ee:	38 b3       	in	r19, 0x18	; 24
     7f0:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
     7f2:	4f b7       	in	r20, 0x3f	; 63
  cli();  
     7f4:	f8 94       	cli

  while (datlen--) {
     7f6:	61 15       	cp	r22, r1
     7f8:	71 05       	cpc	r23, r1
     7fa:	09 f4       	brne	.+2      	; 0x7fe <ws2812_sendarray+0x16>
     7fc:	21 c0       	rjmp	.+66     	; 0x840 <loop301+0x38>
     7fe:	fc 01       	movw	r30, r24
     800:	68 0f       	add	r22, r24
     802:	79 1f       	adc	r23, r25
    curbyte=*data++;
     804:	91 91       	ld	r25, Z+
    
    asm volatile(
     806:	88 e0       	ldi	r24, 0x08	; 8

00000808 <loop301>:
     808:	38 bb       	out	0x18, r19	; 24
     80a:	97 ff       	sbrs	r25, 7
     80c:	28 bb       	out	0x18, r18	; 24
     80e:	99 0f       	add	r25, r25
     810:	00 00       	nop
     812:	00 c0       	rjmp	.+0      	; 0x814 <loop301+0xc>
     814:	28 bb       	out	0x18, r18	; 24
     816:	00 00       	nop
     818:	00 c0       	rjmp	.+0      	; 0x81a <loop301+0x12>
     81a:	00 c0       	rjmp	.+0      	; 0x81c <loop301+0x14>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <loop301+0x16>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <loop301+0x18>
     820:	00 c0       	rjmp	.+0      	; 0x822 <loop301+0x1a>
     822:	00 c0       	rjmp	.+0      	; 0x824 <loop301+0x1c>
     824:	00 c0       	rjmp	.+0      	; 0x826 <loop301+0x1e>
     826:	00 c0       	rjmp	.+0      	; 0x828 <loop301+0x20>
     828:	00 c0       	rjmp	.+0      	; 0x82a <loop301+0x22>
     82a:	00 c0       	rjmp	.+0      	; 0x82c <loop301+0x24>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <loop301+0x26>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <loop301+0x28>
     830:	00 c0       	rjmp	.+0      	; 0x832 <loop301+0x2a>
     832:	00 c0       	rjmp	.+0      	; 0x834 <loop301+0x2c>
     834:	00 c0       	rjmp	.+0      	; 0x836 <loop301+0x2e>
     836:	8a 95       	dec	r24
     838:	39 f7       	brne	.-50     	; 0x808 <loop301>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
     83a:	e6 17       	cp	r30, r22
     83c:	f7 07       	cpc	r31, r23
     83e:	11 f7       	brne	.-60     	; 0x804 <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
     840:	4f bf       	out	0x3f, r20	; 63
     842:	08 95       	ret

00000844 <__subsf3>:
     844:	50 58       	subi	r21, 0x80	; 128

00000846 <__addsf3>:
     846:	bb 27       	eor	r27, r27
     848:	aa 27       	eor	r26, r26
     84a:	0e d0       	rcall	.+28     	; 0x868 <__addsf3x>
     84c:	0d c1       	rjmp	.+538    	; 0xa68 <__fp_round>
     84e:	fe d0       	rcall	.+508    	; 0xa4c <__fp_pscA>
     850:	30 f0       	brcs	.+12     	; 0x85e <__addsf3+0x18>
     852:	03 d1       	rcall	.+518    	; 0xa5a <__fp_pscB>
     854:	20 f0       	brcs	.+8      	; 0x85e <__addsf3+0x18>
     856:	31 f4       	brne	.+12     	; 0x864 <__addsf3+0x1e>
     858:	9f 3f       	cpi	r25, 0xFF	; 255
     85a:	11 f4       	brne	.+4      	; 0x860 <__addsf3+0x1a>
     85c:	1e f4       	brtc	.+6      	; 0x864 <__addsf3+0x1e>
     85e:	f3 c0       	rjmp	.+486    	; 0xa46 <__fp_nan>
     860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3+0x1e>
     862:	e0 95       	com	r30
     864:	e7 fb       	bst	r30, 7
     866:	e9 c0       	rjmp	.+466    	; 0xa3a <__fp_inf>

00000868 <__addsf3x>:
     868:	e9 2f       	mov	r30, r25
     86a:	0f d1       	rcall	.+542    	; 0xa8a <__fp_split3>
     86c:	80 f3       	brcs	.-32     	; 0x84e <__addsf3+0x8>
     86e:	ba 17       	cp	r27, r26
     870:	62 07       	cpc	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	18 f0       	brcs	.+6      	; 0x880 <__addsf3x+0x18>
     87a:	71 f4       	brne	.+28     	; 0x898 <__addsf3x+0x30>
     87c:	9e f5       	brtc	.+102    	; 0x8e4 <__addsf3x+0x7c>
     87e:	27 c1       	rjmp	.+590    	; 0xace <__fp_zero>
     880:	0e f4       	brtc	.+2      	; 0x884 <__addsf3x+0x1c>
     882:	e0 95       	com	r30
     884:	0b 2e       	mov	r0, r27
     886:	ba 2f       	mov	r27, r26
     888:	a0 2d       	mov	r26, r0
     88a:	0b 01       	movw	r0, r22
     88c:	b9 01       	movw	r22, r18
     88e:	90 01       	movw	r18, r0
     890:	0c 01       	movw	r0, r24
     892:	ca 01       	movw	r24, r20
     894:	a0 01       	movw	r20, r0
     896:	11 24       	eor	r1, r1
     898:	ff 27       	eor	r31, r31
     89a:	59 1b       	sub	r21, r25
     89c:	99 f0       	breq	.+38     	; 0x8c4 <__addsf3x+0x5c>
     89e:	59 3f       	cpi	r21, 0xF9	; 249
     8a0:	50 f4       	brcc	.+20     	; 0x8b6 <__addsf3x+0x4e>
     8a2:	50 3e       	cpi	r21, 0xE0	; 224
     8a4:	68 f1       	brcs	.+90     	; 0x900 <__addsf3x+0x98>
     8a6:	1a 16       	cp	r1, r26
     8a8:	f0 40       	sbci	r31, 0x00	; 0
     8aa:	a2 2f       	mov	r26, r18
     8ac:	23 2f       	mov	r18, r19
     8ae:	34 2f       	mov	r19, r20
     8b0:	44 27       	eor	r20, r20
     8b2:	58 5f       	subi	r21, 0xF8	; 248
     8b4:	f3 cf       	rjmp	.-26     	; 0x89c <__addsf3x+0x34>
     8b6:	46 95       	lsr	r20
     8b8:	37 95       	ror	r19
     8ba:	27 95       	ror	r18
     8bc:	a7 95       	ror	r26
     8be:	f0 40       	sbci	r31, 0x00	; 0
     8c0:	53 95       	inc	r21
     8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__addsf3x+0x4e>
     8c4:	7e f4       	brtc	.+30     	; 0x8e4 <__addsf3x+0x7c>
     8c6:	1f 16       	cp	r1, r31
     8c8:	ba 0b       	sbc	r27, r26
     8ca:	62 0b       	sbc	r22, r18
     8cc:	73 0b       	sbc	r23, r19
     8ce:	84 0b       	sbc	r24, r20
     8d0:	ba f0       	brmi	.+46     	; 0x900 <__addsf3x+0x98>
     8d2:	91 50       	subi	r25, 0x01	; 1
     8d4:	a1 f0       	breq	.+40     	; 0x8fe <__addsf3x+0x96>
     8d6:	ff 0f       	add	r31, r31
     8d8:	bb 1f       	adc	r27, r27
     8da:	66 1f       	adc	r22, r22
     8dc:	77 1f       	adc	r23, r23
     8de:	88 1f       	adc	r24, r24
     8e0:	c2 f7       	brpl	.-16     	; 0x8d2 <__addsf3x+0x6a>
     8e2:	0e c0       	rjmp	.+28     	; 0x900 <__addsf3x+0x98>
     8e4:	ba 0f       	add	r27, r26
     8e6:	62 1f       	adc	r22, r18
     8e8:	73 1f       	adc	r23, r19
     8ea:	84 1f       	adc	r24, r20
     8ec:	48 f4       	brcc	.+18     	; 0x900 <__addsf3x+0x98>
     8ee:	87 95       	ror	r24
     8f0:	77 95       	ror	r23
     8f2:	67 95       	ror	r22
     8f4:	b7 95       	ror	r27
     8f6:	f7 95       	ror	r31
     8f8:	9e 3f       	cpi	r25, 0xFE	; 254
     8fa:	08 f0       	brcs	.+2      	; 0x8fe <__addsf3x+0x96>
     8fc:	b3 cf       	rjmp	.-154    	; 0x864 <__addsf3+0x1e>
     8fe:	93 95       	inc	r25
     900:	88 0f       	add	r24, r24
     902:	08 f0       	brcs	.+2      	; 0x906 <__addsf3x+0x9e>
     904:	99 27       	eor	r25, r25
     906:	ee 0f       	add	r30, r30
     908:	97 95       	ror	r25
     90a:	87 95       	ror	r24
     90c:	08 95       	ret

0000090e <__cmpsf2>:
     90e:	71 d0       	rcall	.+226    	; 0x9f2 <__fp_cmp>
     910:	08 f4       	brcc	.+2      	; 0x914 <__cmpsf2+0x6>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	08 95       	ret

00000916 <__fixsfsi>:
     916:	04 d0       	rcall	.+8      	; 0x920 <__fixunssfsi>
     918:	68 94       	set
     91a:	b1 11       	cpse	r27, r1
     91c:	d9 c0       	rjmp	.+434    	; 0xad0 <__fp_szero>
     91e:	08 95       	ret

00000920 <__fixunssfsi>:
     920:	bc d0       	rcall	.+376    	; 0xa9a <__fp_splitA>
     922:	88 f0       	brcs	.+34     	; 0x946 <__fixunssfsi+0x26>
     924:	9f 57       	subi	r25, 0x7F	; 127
     926:	90 f0       	brcs	.+36     	; 0x94c <__fixunssfsi+0x2c>
     928:	b9 2f       	mov	r27, r25
     92a:	99 27       	eor	r25, r25
     92c:	b7 51       	subi	r27, 0x17	; 23
     92e:	a0 f0       	brcs	.+40     	; 0x958 <__fixunssfsi+0x38>
     930:	d1 f0       	breq	.+52     	; 0x966 <__fixunssfsi+0x46>
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	88 1f       	adc	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	1a f0       	brmi	.+6      	; 0x942 <__fixunssfsi+0x22>
     93c:	ba 95       	dec	r27
     93e:	c9 f7       	brne	.-14     	; 0x932 <__fixunssfsi+0x12>
     940:	12 c0       	rjmp	.+36     	; 0x966 <__fixunssfsi+0x46>
     942:	b1 30       	cpi	r27, 0x01	; 1
     944:	81 f0       	breq	.+32     	; 0x966 <__fixunssfsi+0x46>
     946:	c3 d0       	rcall	.+390    	; 0xace <__fp_zero>
     948:	b1 e0       	ldi	r27, 0x01	; 1
     94a:	08 95       	ret
     94c:	c0 c0       	rjmp	.+384    	; 0xace <__fp_zero>
     94e:	67 2f       	mov	r22, r23
     950:	78 2f       	mov	r23, r24
     952:	88 27       	eor	r24, r24
     954:	b8 5f       	subi	r27, 0xF8	; 248
     956:	39 f0       	breq	.+14     	; 0x966 <__fixunssfsi+0x46>
     958:	b9 3f       	cpi	r27, 0xF9	; 249
     95a:	cc f3       	brlt	.-14     	; 0x94e <__fixunssfsi+0x2e>
     95c:	86 95       	lsr	r24
     95e:	77 95       	ror	r23
     960:	67 95       	ror	r22
     962:	b3 95       	inc	r27
     964:	d9 f7       	brne	.-10     	; 0x95c <__fixunssfsi+0x3c>
     966:	3e f4       	brtc	.+14     	; 0x976 <__fixunssfsi+0x56>
     968:	90 95       	com	r25
     96a:	80 95       	com	r24
     96c:	70 95       	com	r23
     96e:	61 95       	neg	r22
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	8f 4f       	sbci	r24, 0xFF	; 255
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	08 95       	ret

00000978 <__floatunsisf>:
     978:	e8 94       	clt
     97a:	09 c0       	rjmp	.+18     	; 0x98e <__floatsisf+0x12>

0000097c <__floatsisf>:
     97c:	97 fb       	bst	r25, 7
     97e:	3e f4       	brtc	.+14     	; 0x98e <__floatsisf+0x12>
     980:	90 95       	com	r25
     982:	80 95       	com	r24
     984:	70 95       	com	r23
     986:	61 95       	neg	r22
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	8f 4f       	sbci	r24, 0xFF	; 255
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	99 23       	and	r25, r25
     990:	a9 f0       	breq	.+42     	; 0x9bc <__floatsisf+0x40>
     992:	f9 2f       	mov	r31, r25
     994:	96 e9       	ldi	r25, 0x96	; 150
     996:	bb 27       	eor	r27, r27
     998:	93 95       	inc	r25
     99a:	f6 95       	lsr	r31
     99c:	87 95       	ror	r24
     99e:	77 95       	ror	r23
     9a0:	67 95       	ror	r22
     9a2:	b7 95       	ror	r27
     9a4:	f1 11       	cpse	r31, r1
     9a6:	f8 cf       	rjmp	.-16     	; 0x998 <__floatsisf+0x1c>
     9a8:	fa f4       	brpl	.+62     	; 0x9e8 <__floatsisf+0x6c>
     9aa:	bb 0f       	add	r27, r27
     9ac:	11 f4       	brne	.+4      	; 0x9b2 <__floatsisf+0x36>
     9ae:	60 ff       	sbrs	r22, 0
     9b0:	1b c0       	rjmp	.+54     	; 0x9e8 <__floatsisf+0x6c>
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	8f 4f       	sbci	r24, 0xFF	; 255
     9b8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ba:	16 c0       	rjmp	.+44     	; 0x9e8 <__floatsisf+0x6c>
     9bc:	88 23       	and	r24, r24
     9be:	11 f0       	breq	.+4      	; 0x9c4 <__floatsisf+0x48>
     9c0:	96 e9       	ldi	r25, 0x96	; 150
     9c2:	11 c0       	rjmp	.+34     	; 0x9e6 <__floatsisf+0x6a>
     9c4:	77 23       	and	r23, r23
     9c6:	21 f0       	breq	.+8      	; 0x9d0 <__floatsisf+0x54>
     9c8:	9e e8       	ldi	r25, 0x8E	; 142
     9ca:	87 2f       	mov	r24, r23
     9cc:	76 2f       	mov	r23, r22
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <__floatsisf+0x5e>
     9d0:	66 23       	and	r22, r22
     9d2:	71 f0       	breq	.+28     	; 0x9f0 <__floatsisf+0x74>
     9d4:	96 e8       	ldi	r25, 0x86	; 134
     9d6:	86 2f       	mov	r24, r22
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	2a f0       	brmi	.+10     	; 0x9e8 <__floatsisf+0x6c>
     9de:	9a 95       	dec	r25
     9e0:	66 0f       	add	r22, r22
     9e2:	77 1f       	adc	r23, r23
     9e4:	88 1f       	adc	r24, r24
     9e6:	da f7       	brpl	.-10     	; 0x9de <__floatsisf+0x62>
     9e8:	88 0f       	add	r24, r24
     9ea:	96 95       	lsr	r25
     9ec:	87 95       	ror	r24
     9ee:	97 f9       	bld	r25, 7
     9f0:	08 95       	ret

000009f2 <__fp_cmp>:
     9f2:	99 0f       	add	r25, r25
     9f4:	00 08       	sbc	r0, r0
     9f6:	55 0f       	add	r21, r21
     9f8:	aa 0b       	sbc	r26, r26
     9fa:	e0 e8       	ldi	r30, 0x80	; 128
     9fc:	fe ef       	ldi	r31, 0xFE	; 254
     9fe:	16 16       	cp	r1, r22
     a00:	17 06       	cpc	r1, r23
     a02:	e8 07       	cpc	r30, r24
     a04:	f9 07       	cpc	r31, r25
     a06:	c0 f0       	brcs	.+48     	; 0xa38 <__fp_cmp+0x46>
     a08:	12 16       	cp	r1, r18
     a0a:	13 06       	cpc	r1, r19
     a0c:	e4 07       	cpc	r30, r20
     a0e:	f5 07       	cpc	r31, r21
     a10:	98 f0       	brcs	.+38     	; 0xa38 <__fp_cmp+0x46>
     a12:	62 1b       	sub	r22, r18
     a14:	73 0b       	sbc	r23, r19
     a16:	84 0b       	sbc	r24, r20
     a18:	95 0b       	sbc	r25, r21
     a1a:	39 f4       	brne	.+14     	; 0xa2a <__fp_cmp+0x38>
     a1c:	0a 26       	eor	r0, r26
     a1e:	61 f0       	breq	.+24     	; 0xa38 <__fp_cmp+0x46>
     a20:	23 2b       	or	r18, r19
     a22:	24 2b       	or	r18, r20
     a24:	25 2b       	or	r18, r21
     a26:	21 f4       	brne	.+8      	; 0xa30 <__fp_cmp+0x3e>
     a28:	08 95       	ret
     a2a:	0a 26       	eor	r0, r26
     a2c:	09 f4       	brne	.+2      	; 0xa30 <__fp_cmp+0x3e>
     a2e:	a1 40       	sbci	r26, 0x01	; 1
     a30:	a6 95       	lsr	r26
     a32:	8f ef       	ldi	r24, 0xFF	; 255
     a34:	81 1d       	adc	r24, r1
     a36:	81 1d       	adc	r24, r1
     a38:	08 95       	ret

00000a3a <__fp_inf>:
     a3a:	97 f9       	bld	r25, 7
     a3c:	9f 67       	ori	r25, 0x7F	; 127
     a3e:	80 e8       	ldi	r24, 0x80	; 128
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	08 95       	ret

00000a46 <__fp_nan>:
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	80 ec       	ldi	r24, 0xC0	; 192
     a4a:	08 95       	ret

00000a4c <__fp_pscA>:
     a4c:	00 24       	eor	r0, r0
     a4e:	0a 94       	dec	r0
     a50:	16 16       	cp	r1, r22
     a52:	17 06       	cpc	r1, r23
     a54:	18 06       	cpc	r1, r24
     a56:	09 06       	cpc	r0, r25
     a58:	08 95       	ret

00000a5a <__fp_pscB>:
     a5a:	00 24       	eor	r0, r0
     a5c:	0a 94       	dec	r0
     a5e:	12 16       	cp	r1, r18
     a60:	13 06       	cpc	r1, r19
     a62:	14 06       	cpc	r1, r20
     a64:	05 06       	cpc	r0, r21
     a66:	08 95       	ret

00000a68 <__fp_round>:
     a68:	09 2e       	mov	r0, r25
     a6a:	03 94       	inc	r0
     a6c:	00 0c       	add	r0, r0
     a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_round+0xc>
     a70:	88 23       	and	r24, r24
     a72:	52 f0       	brmi	.+20     	; 0xa88 <__fp_round+0x20>
     a74:	bb 0f       	add	r27, r27
     a76:	40 f4       	brcc	.+16     	; 0xa88 <__fp_round+0x20>
     a78:	bf 2b       	or	r27, r31
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__fp_round+0x18>
     a7c:	60 ff       	sbrs	r22, 0
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <__fp_round+0x20>
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	8f 4f       	sbci	r24, 0xFF	; 255
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	08 95       	ret

00000a8a <__fp_split3>:
     a8a:	57 fd       	sbrc	r21, 7
     a8c:	90 58       	subi	r25, 0x80	; 128
     a8e:	44 0f       	add	r20, r20
     a90:	55 1f       	adc	r21, r21
     a92:	59 f0       	breq	.+22     	; 0xaaa <__fp_splitA+0x10>
     a94:	5f 3f       	cpi	r21, 0xFF	; 255
     a96:	71 f0       	breq	.+28     	; 0xab4 <__fp_splitA+0x1a>
     a98:	47 95       	ror	r20

00000a9a <__fp_splitA>:
     a9a:	88 0f       	add	r24, r24
     a9c:	97 fb       	bst	r25, 7
     a9e:	99 1f       	adc	r25, r25
     aa0:	61 f0       	breq	.+24     	; 0xaba <__fp_splitA+0x20>
     aa2:	9f 3f       	cpi	r25, 0xFF	; 255
     aa4:	79 f0       	breq	.+30     	; 0xac4 <__fp_splitA+0x2a>
     aa6:	87 95       	ror	r24
     aa8:	08 95       	ret
     aaa:	12 16       	cp	r1, r18
     aac:	13 06       	cpc	r1, r19
     aae:	14 06       	cpc	r1, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	f2 cf       	rjmp	.-28     	; 0xa98 <__fp_split3+0xe>
     ab4:	46 95       	lsr	r20
     ab6:	f1 df       	rcall	.-30     	; 0xa9a <__fp_splitA>
     ab8:	08 c0       	rjmp	.+16     	; 0xaca <__fp_splitA+0x30>
     aba:	16 16       	cp	r1, r22
     abc:	17 06       	cpc	r1, r23
     abe:	18 06       	cpc	r1, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	f1 cf       	rjmp	.-30     	; 0xaa6 <__fp_splitA+0xc>
     ac4:	86 95       	lsr	r24
     ac6:	71 05       	cpc	r23, r1
     ac8:	61 05       	cpc	r22, r1
     aca:	08 94       	sec
     acc:	08 95       	ret

00000ace <__fp_zero>:
     ace:	e8 94       	clt

00000ad0 <__fp_szero>:
     ad0:	bb 27       	eor	r27, r27
     ad2:	66 27       	eor	r22, r22
     ad4:	77 27       	eor	r23, r23
     ad6:	cb 01       	movw	r24, r22
     ad8:	97 f9       	bld	r25, 7
     ada:	08 95       	ret

00000adc <__gesf2>:
     adc:	8a df       	rcall	.-236    	; 0x9f2 <__fp_cmp>
     ade:	08 f4       	brcc	.+2      	; 0xae2 <__gesf2+0x6>
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	08 95       	ret

00000ae4 <__mulsf3>:
     ae4:	0b d0       	rcall	.+22     	; 0xafc <__mulsf3x>
     ae6:	c0 cf       	rjmp	.-128    	; 0xa68 <__fp_round>
     ae8:	b1 df       	rcall	.-158    	; 0xa4c <__fp_pscA>
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <__mulsf3+0x12>
     aec:	b6 df       	rcall	.-148    	; 0xa5a <__fp_pscB>
     aee:	18 f0       	brcs	.+6      	; 0xaf6 <__mulsf3+0x12>
     af0:	95 23       	and	r25, r21
     af2:	09 f0       	breq	.+2      	; 0xaf6 <__mulsf3+0x12>
     af4:	a2 cf       	rjmp	.-188    	; 0xa3a <__fp_inf>
     af6:	a7 cf       	rjmp	.-178    	; 0xa46 <__fp_nan>
     af8:	11 24       	eor	r1, r1
     afa:	ea cf       	rjmp	.-44     	; 0xad0 <__fp_szero>

00000afc <__mulsf3x>:
     afc:	c6 df       	rcall	.-116    	; 0xa8a <__fp_split3>
     afe:	a0 f3       	brcs	.-24     	; 0xae8 <__mulsf3+0x4>

00000b00 <__mulsf3_pse>:
     b00:	95 9f       	mul	r25, r21
     b02:	d1 f3       	breq	.-12     	; 0xaf8 <__mulsf3+0x14>
     b04:	95 0f       	add	r25, r21
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	55 1f       	adc	r21, r21
     b0a:	62 9f       	mul	r22, r18
     b0c:	f0 01       	movw	r30, r0
     b0e:	72 9f       	mul	r23, r18
     b10:	bb 27       	eor	r27, r27
     b12:	f0 0d       	add	r31, r0
     b14:	b1 1d       	adc	r27, r1
     b16:	63 9f       	mul	r22, r19
     b18:	aa 27       	eor	r26, r26
     b1a:	f0 0d       	add	r31, r0
     b1c:	b1 1d       	adc	r27, r1
     b1e:	aa 1f       	adc	r26, r26
     b20:	64 9f       	mul	r22, r20
     b22:	66 27       	eor	r22, r22
     b24:	b0 0d       	add	r27, r0
     b26:	a1 1d       	adc	r26, r1
     b28:	66 1f       	adc	r22, r22
     b2a:	82 9f       	mul	r24, r18
     b2c:	22 27       	eor	r18, r18
     b2e:	b0 0d       	add	r27, r0
     b30:	a1 1d       	adc	r26, r1
     b32:	62 1f       	adc	r22, r18
     b34:	73 9f       	mul	r23, r19
     b36:	b0 0d       	add	r27, r0
     b38:	a1 1d       	adc	r26, r1
     b3a:	62 1f       	adc	r22, r18
     b3c:	83 9f       	mul	r24, r19
     b3e:	a0 0d       	add	r26, r0
     b40:	61 1d       	adc	r22, r1
     b42:	22 1f       	adc	r18, r18
     b44:	74 9f       	mul	r23, r20
     b46:	33 27       	eor	r19, r19
     b48:	a0 0d       	add	r26, r0
     b4a:	61 1d       	adc	r22, r1
     b4c:	23 1f       	adc	r18, r19
     b4e:	84 9f       	mul	r24, r20
     b50:	60 0d       	add	r22, r0
     b52:	21 1d       	adc	r18, r1
     b54:	82 2f       	mov	r24, r18
     b56:	76 2f       	mov	r23, r22
     b58:	6a 2f       	mov	r22, r26
     b5a:	11 24       	eor	r1, r1
     b5c:	9f 57       	subi	r25, 0x7F	; 127
     b5e:	50 40       	sbci	r21, 0x00	; 0
     b60:	8a f0       	brmi	.+34     	; 0xb84 <__mulsf3_pse+0x84>
     b62:	e1 f0       	breq	.+56     	; 0xb9c <__mulsf3_pse+0x9c>
     b64:	88 23       	and	r24, r24
     b66:	4a f0       	brmi	.+18     	; 0xb7a <__mulsf3_pse+0x7a>
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	bb 1f       	adc	r27, r27
     b6e:	66 1f       	adc	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	88 1f       	adc	r24, r24
     b74:	91 50       	subi	r25, 0x01	; 1
     b76:	50 40       	sbci	r21, 0x00	; 0
     b78:	a9 f7       	brne	.-22     	; 0xb64 <__mulsf3_pse+0x64>
     b7a:	9e 3f       	cpi	r25, 0xFE	; 254
     b7c:	51 05       	cpc	r21, r1
     b7e:	70 f0       	brcs	.+28     	; 0xb9c <__mulsf3_pse+0x9c>
     b80:	5c cf       	rjmp	.-328    	; 0xa3a <__fp_inf>
     b82:	a6 cf       	rjmp	.-180    	; 0xad0 <__fp_szero>
     b84:	5f 3f       	cpi	r21, 0xFF	; 255
     b86:	ec f3       	brlt	.-6      	; 0xb82 <__mulsf3_pse+0x82>
     b88:	98 3e       	cpi	r25, 0xE8	; 232
     b8a:	dc f3       	brlt	.-10     	; 0xb82 <__mulsf3_pse+0x82>
     b8c:	86 95       	lsr	r24
     b8e:	77 95       	ror	r23
     b90:	67 95       	ror	r22
     b92:	b7 95       	ror	r27
     b94:	f7 95       	ror	r31
     b96:	e7 95       	ror	r30
     b98:	9f 5f       	subi	r25, 0xFF	; 255
     b9a:	c1 f7       	brne	.-16     	; 0xb8c <__mulsf3_pse+0x8c>
     b9c:	fe 2b       	or	r31, r30
     b9e:	88 0f       	add	r24, r24
     ba0:	91 1d       	adc	r25, r1
     ba2:	96 95       	lsr	r25
     ba4:	87 95       	ror	r24
     ba6:	97 f9       	bld	r25, 7
     ba8:	08 95       	ret

00000baa <__tablejump2__>:
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	05 90       	lpm	r0, Z+
     bb0:	f4 91       	lpm	r31, Z
     bb2:	e0 2d       	mov	r30, r0
     bb4:	09 94       	ijmp

00000bb6 <vfprintf>:
     bb6:	ab e0       	ldi	r26, 0x0B	; 11
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e0 ee       	ldi	r30, 0xE0	; 224
     bbc:	f5 e0       	ldi	r31, 0x05	; 5
     bbe:	7d c2       	rjmp	.+1274   	; 0x10ba <__prologue_saves__>
     bc0:	6c 01       	movw	r12, r24
     bc2:	7b 01       	movw	r14, r22
     bc4:	8a 01       	movw	r16, r20
     bc6:	fc 01       	movw	r30, r24
     bc8:	17 82       	std	Z+7, r1	; 0x07
     bca:	16 82       	std	Z+6, r1	; 0x06
     bcc:	83 81       	ldd	r24, Z+3	; 0x03
     bce:	81 ff       	sbrs	r24, 1
     bd0:	bf c1       	rjmp	.+894    	; 0xf50 <vfprintf+0x39a>
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	3c 01       	movw	r6, r24
     bd8:	f6 01       	movw	r30, r12
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	f7 01       	movw	r30, r14
     bde:	93 fd       	sbrc	r25, 3
     be0:	85 91       	lpm	r24, Z+
     be2:	93 ff       	sbrs	r25, 3
     be4:	81 91       	ld	r24, Z+
     be6:	7f 01       	movw	r14, r30
     be8:	88 23       	and	r24, r24
     bea:	09 f4       	brne	.+2      	; 0xbee <vfprintf+0x38>
     bec:	ad c1       	rjmp	.+858    	; 0xf48 <vfprintf+0x392>
     bee:	85 32       	cpi	r24, 0x25	; 37
     bf0:	39 f4       	brne	.+14     	; 0xc00 <vfprintf+0x4a>
     bf2:	93 fd       	sbrc	r25, 3
     bf4:	85 91       	lpm	r24, Z+
     bf6:	93 ff       	sbrs	r25, 3
     bf8:	81 91       	ld	r24, Z+
     bfa:	7f 01       	movw	r14, r30
     bfc:	85 32       	cpi	r24, 0x25	; 37
     bfe:	21 f4       	brne	.+8      	; 0xc08 <vfprintf+0x52>
     c00:	b6 01       	movw	r22, r12
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	c0 d1       	rcall	.+896    	; 0xf86 <fputc>
     c06:	e8 cf       	rjmp	.-48     	; 0xbd8 <vfprintf+0x22>
     c08:	91 2c       	mov	r9, r1
     c0a:	21 2c       	mov	r2, r1
     c0c:	31 2c       	mov	r3, r1
     c0e:	ff e1       	ldi	r31, 0x1F	; 31
     c10:	f3 15       	cp	r31, r3
     c12:	d8 f0       	brcs	.+54     	; 0xc4a <vfprintf+0x94>
     c14:	8b 32       	cpi	r24, 0x2B	; 43
     c16:	79 f0       	breq	.+30     	; 0xc36 <vfprintf+0x80>
     c18:	38 f4       	brcc	.+14     	; 0xc28 <vfprintf+0x72>
     c1a:	80 32       	cpi	r24, 0x20	; 32
     c1c:	79 f0       	breq	.+30     	; 0xc3c <vfprintf+0x86>
     c1e:	83 32       	cpi	r24, 0x23	; 35
     c20:	a1 f4       	brne	.+40     	; 0xc4a <vfprintf+0x94>
     c22:	23 2d       	mov	r18, r3
     c24:	20 61       	ori	r18, 0x10	; 16
     c26:	1d c0       	rjmp	.+58     	; 0xc62 <vfprintf+0xac>
     c28:	8d 32       	cpi	r24, 0x2D	; 45
     c2a:	61 f0       	breq	.+24     	; 0xc44 <vfprintf+0x8e>
     c2c:	80 33       	cpi	r24, 0x30	; 48
     c2e:	69 f4       	brne	.+26     	; 0xc4a <vfprintf+0x94>
     c30:	23 2d       	mov	r18, r3
     c32:	21 60       	ori	r18, 0x01	; 1
     c34:	16 c0       	rjmp	.+44     	; 0xc62 <vfprintf+0xac>
     c36:	83 2d       	mov	r24, r3
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	38 2e       	mov	r3, r24
     c3c:	e3 2d       	mov	r30, r3
     c3e:	e4 60       	ori	r30, 0x04	; 4
     c40:	3e 2e       	mov	r3, r30
     c42:	2a c0       	rjmp	.+84     	; 0xc98 <vfprintf+0xe2>
     c44:	f3 2d       	mov	r31, r3
     c46:	f8 60       	ori	r31, 0x08	; 8
     c48:	1d c0       	rjmp	.+58     	; 0xc84 <vfprintf+0xce>
     c4a:	37 fc       	sbrc	r3, 7
     c4c:	2d c0       	rjmp	.+90     	; 0xca8 <vfprintf+0xf2>
     c4e:	20 ed       	ldi	r18, 0xD0	; 208
     c50:	28 0f       	add	r18, r24
     c52:	2a 30       	cpi	r18, 0x0A	; 10
     c54:	40 f0       	brcs	.+16     	; 0xc66 <vfprintf+0xb0>
     c56:	8e 32       	cpi	r24, 0x2E	; 46
     c58:	b9 f4       	brne	.+46     	; 0xc88 <vfprintf+0xd2>
     c5a:	36 fc       	sbrc	r3, 6
     c5c:	75 c1       	rjmp	.+746    	; 0xf48 <vfprintf+0x392>
     c5e:	23 2d       	mov	r18, r3
     c60:	20 64       	ori	r18, 0x40	; 64
     c62:	32 2e       	mov	r3, r18
     c64:	19 c0       	rjmp	.+50     	; 0xc98 <vfprintf+0xe2>
     c66:	36 fe       	sbrs	r3, 6
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <vfprintf+0xc0>
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	98 9e       	mul	r9, r24
     c6e:	20 0d       	add	r18, r0
     c70:	11 24       	eor	r1, r1
     c72:	92 2e       	mov	r9, r18
     c74:	11 c0       	rjmp	.+34     	; 0xc98 <vfprintf+0xe2>
     c76:	ea e0       	ldi	r30, 0x0A	; 10
     c78:	2e 9e       	mul	r2, r30
     c7a:	20 0d       	add	r18, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	22 2e       	mov	r2, r18
     c80:	f3 2d       	mov	r31, r3
     c82:	f0 62       	ori	r31, 0x20	; 32
     c84:	3f 2e       	mov	r3, r31
     c86:	08 c0       	rjmp	.+16     	; 0xc98 <vfprintf+0xe2>
     c88:	8c 36       	cpi	r24, 0x6C	; 108
     c8a:	21 f4       	brne	.+8      	; 0xc94 <vfprintf+0xde>
     c8c:	83 2d       	mov	r24, r3
     c8e:	80 68       	ori	r24, 0x80	; 128
     c90:	38 2e       	mov	r3, r24
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <vfprintf+0xe2>
     c94:	88 36       	cpi	r24, 0x68	; 104
     c96:	41 f4       	brne	.+16     	; 0xca8 <vfprintf+0xf2>
     c98:	f7 01       	movw	r30, r14
     c9a:	93 fd       	sbrc	r25, 3
     c9c:	85 91       	lpm	r24, Z+
     c9e:	93 ff       	sbrs	r25, 3
     ca0:	81 91       	ld	r24, Z+
     ca2:	7f 01       	movw	r14, r30
     ca4:	81 11       	cpse	r24, r1
     ca6:	b3 cf       	rjmp	.-154    	; 0xc0e <vfprintf+0x58>
     ca8:	98 2f       	mov	r25, r24
     caa:	9f 7d       	andi	r25, 0xDF	; 223
     cac:	95 54       	subi	r25, 0x45	; 69
     cae:	93 30       	cpi	r25, 0x03	; 3
     cb0:	28 f4       	brcc	.+10     	; 0xcbc <vfprintf+0x106>
     cb2:	0c 5f       	subi	r16, 0xFC	; 252
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	9f e3       	ldi	r25, 0x3F	; 63
     cb8:	99 83       	std	Y+1, r25	; 0x01
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <vfprintf+0x120>
     cbc:	83 36       	cpi	r24, 0x63	; 99
     cbe:	31 f0       	breq	.+12     	; 0xccc <vfprintf+0x116>
     cc0:	83 37       	cpi	r24, 0x73	; 115
     cc2:	71 f0       	breq	.+28     	; 0xce0 <vfprintf+0x12a>
     cc4:	83 35       	cpi	r24, 0x53	; 83
     cc6:	09 f0       	breq	.+2      	; 0xcca <vfprintf+0x114>
     cc8:	55 c0       	rjmp	.+170    	; 0xd74 <vfprintf+0x1be>
     cca:	20 c0       	rjmp	.+64     	; 0xd0c <vfprintf+0x156>
     ccc:	f8 01       	movw	r30, r16
     cce:	80 81       	ld	r24, Z
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	0e 5f       	subi	r16, 0xFE	; 254
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
     cd6:	88 24       	eor	r8, r8
     cd8:	83 94       	inc	r8
     cda:	91 2c       	mov	r9, r1
     cdc:	53 01       	movw	r10, r6
     cde:	12 c0       	rjmp	.+36     	; 0xd04 <vfprintf+0x14e>
     ce0:	28 01       	movw	r4, r16
     ce2:	f2 e0       	ldi	r31, 0x02	; 2
     ce4:	4f 0e       	add	r4, r31
     ce6:	51 1c       	adc	r5, r1
     ce8:	f8 01       	movw	r30, r16
     cea:	a0 80       	ld	r10, Z
     cec:	b1 80       	ldd	r11, Z+1	; 0x01
     cee:	36 fe       	sbrs	r3, 6
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <vfprintf+0x142>
     cf2:	69 2d       	mov	r22, r9
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x146>
     cf8:	6f ef       	ldi	r22, 0xFF	; 255
     cfa:	7f ef       	ldi	r23, 0xFF	; 255
     cfc:	c5 01       	movw	r24, r10
     cfe:	38 d1       	rcall	.+624    	; 0xf70 <strnlen>
     d00:	4c 01       	movw	r8, r24
     d02:	82 01       	movw	r16, r4
     d04:	f3 2d       	mov	r31, r3
     d06:	ff 77       	andi	r31, 0x7F	; 127
     d08:	3f 2e       	mov	r3, r31
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <vfprintf+0x180>
     d0c:	28 01       	movw	r4, r16
     d0e:	22 e0       	ldi	r18, 0x02	; 2
     d10:	42 0e       	add	r4, r18
     d12:	51 1c       	adc	r5, r1
     d14:	f8 01       	movw	r30, r16
     d16:	a0 80       	ld	r10, Z
     d18:	b1 80       	ldd	r11, Z+1	; 0x01
     d1a:	36 fe       	sbrs	r3, 6
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <vfprintf+0x16e>
     d1e:	69 2d       	mov	r22, r9
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x172>
     d24:	6f ef       	ldi	r22, 0xFF	; 255
     d26:	7f ef       	ldi	r23, 0xFF	; 255
     d28:	c5 01       	movw	r24, r10
     d2a:	17 d1       	rcall	.+558    	; 0xf5a <strnlen_P>
     d2c:	4c 01       	movw	r8, r24
     d2e:	f3 2d       	mov	r31, r3
     d30:	f0 68       	ori	r31, 0x80	; 128
     d32:	3f 2e       	mov	r3, r31
     d34:	82 01       	movw	r16, r4
     d36:	33 fc       	sbrc	r3, 3
     d38:	19 c0       	rjmp	.+50     	; 0xd6c <vfprintf+0x1b6>
     d3a:	82 2d       	mov	r24, r2
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	88 16       	cp	r8, r24
     d40:	99 06       	cpc	r9, r25
     d42:	a0 f4       	brcc	.+40     	; 0xd6c <vfprintf+0x1b6>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	1d d1       	rcall	.+570    	; 0xf86 <fputc>
     d4c:	2a 94       	dec	r2
     d4e:	f5 cf       	rjmp	.-22     	; 0xd3a <vfprintf+0x184>
     d50:	f5 01       	movw	r30, r10
     d52:	37 fc       	sbrc	r3, 7
     d54:	85 91       	lpm	r24, Z+
     d56:	37 fe       	sbrs	r3, 7
     d58:	81 91       	ld	r24, Z+
     d5a:	5f 01       	movw	r10, r30
     d5c:	b6 01       	movw	r22, r12
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	12 d1       	rcall	.+548    	; 0xf86 <fputc>
     d62:	21 10       	cpse	r2, r1
     d64:	2a 94       	dec	r2
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	82 1a       	sub	r8, r18
     d6a:	91 08       	sbc	r9, r1
     d6c:	81 14       	cp	r8, r1
     d6e:	91 04       	cpc	r9, r1
     d70:	79 f7       	brne	.-34     	; 0xd50 <vfprintf+0x19a>
     d72:	e1 c0       	rjmp	.+450    	; 0xf36 <vfprintf+0x380>
     d74:	84 36       	cpi	r24, 0x64	; 100
     d76:	11 f0       	breq	.+4      	; 0xd7c <vfprintf+0x1c6>
     d78:	89 36       	cpi	r24, 0x69	; 105
     d7a:	39 f5       	brne	.+78     	; 0xdca <vfprintf+0x214>
     d7c:	f8 01       	movw	r30, r16
     d7e:	37 fe       	sbrs	r3, 7
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <vfprintf+0x1da>
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	0c 5f       	subi	r16, 0xFC	; 252
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	08 c0       	rjmp	.+16     	; 0xda0 <vfprintf+0x1ea>
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	07 2e       	mov	r0, r23
     d96:	00 0c       	add	r0, r0
     d98:	88 0b       	sbc	r24, r24
     d9a:	99 0b       	sbc	r25, r25
     d9c:	0e 5f       	subi	r16, 0xFE	; 254
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	f3 2d       	mov	r31, r3
     da2:	ff 76       	andi	r31, 0x6F	; 111
     da4:	3f 2e       	mov	r3, r31
     da6:	97 ff       	sbrs	r25, 7
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <vfprintf+0x206>
     daa:	90 95       	com	r25
     dac:	80 95       	com	r24
     dae:	70 95       	com	r23
     db0:	61 95       	neg	r22
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	8f 4f       	sbci	r24, 0xFF	; 255
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	f0 68       	ori	r31, 0x80	; 128
     dba:	3f 2e       	mov	r3, r31
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	a3 01       	movw	r20, r6
     dc2:	1d d1       	rcall	.+570    	; 0xffe <__ultoa_invert>
     dc4:	88 2e       	mov	r8, r24
     dc6:	86 18       	sub	r8, r6
     dc8:	44 c0       	rjmp	.+136    	; 0xe52 <vfprintf+0x29c>
     dca:	85 37       	cpi	r24, 0x75	; 117
     dcc:	31 f4       	brne	.+12     	; 0xdda <vfprintf+0x224>
     dce:	23 2d       	mov	r18, r3
     dd0:	2f 7e       	andi	r18, 0xEF	; 239
     dd2:	b2 2e       	mov	r11, r18
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	25 c0       	rjmp	.+74     	; 0xe24 <vfprintf+0x26e>
     dda:	93 2d       	mov	r25, r3
     ddc:	99 7f       	andi	r25, 0xF9	; 249
     dde:	b9 2e       	mov	r11, r25
     de0:	8f 36       	cpi	r24, 0x6F	; 111
     de2:	c1 f0       	breq	.+48     	; 0xe14 <vfprintf+0x25e>
     de4:	18 f4       	brcc	.+6      	; 0xdec <vfprintf+0x236>
     de6:	88 35       	cpi	r24, 0x58	; 88
     de8:	79 f0       	breq	.+30     	; 0xe08 <vfprintf+0x252>
     dea:	ae c0       	rjmp	.+348    	; 0xf48 <vfprintf+0x392>
     dec:	80 37       	cpi	r24, 0x70	; 112
     dee:	19 f0       	breq	.+6      	; 0xdf6 <vfprintf+0x240>
     df0:	88 37       	cpi	r24, 0x78	; 120
     df2:	21 f0       	breq	.+8      	; 0xdfc <vfprintf+0x246>
     df4:	a9 c0       	rjmp	.+338    	; 0xf48 <vfprintf+0x392>
     df6:	e9 2f       	mov	r30, r25
     df8:	e0 61       	ori	r30, 0x10	; 16
     dfa:	be 2e       	mov	r11, r30
     dfc:	b4 fe       	sbrs	r11, 4
     dfe:	0d c0       	rjmp	.+26     	; 0xe1a <vfprintf+0x264>
     e00:	fb 2d       	mov	r31, r11
     e02:	f4 60       	ori	r31, 0x04	; 4
     e04:	bf 2e       	mov	r11, r31
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x264>
     e08:	34 fe       	sbrs	r3, 4
     e0a:	0a c0       	rjmp	.+20     	; 0xe20 <vfprintf+0x26a>
     e0c:	29 2f       	mov	r18, r25
     e0e:	26 60       	ori	r18, 0x06	; 6
     e10:	b2 2e       	mov	r11, r18
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x26a>
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <vfprintf+0x26e>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x26e>
     e20:	20 e1       	ldi	r18, 0x10	; 16
     e22:	32 e0       	ldi	r19, 0x02	; 2
     e24:	f8 01       	movw	r30, r16
     e26:	b7 fe       	sbrs	r11, 7
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <vfprintf+0x282>
     e2a:	60 81       	ld	r22, Z
     e2c:	71 81       	ldd	r23, Z+1	; 0x01
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	0c 5f       	subi	r16, 0xFC	; 252
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x28e>
     e38:	60 81       	ld	r22, Z
     e3a:	71 81       	ldd	r23, Z+1	; 0x01
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 5f       	subi	r16, 0xFE	; 254
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	a3 01       	movw	r20, r6
     e46:	db d0       	rcall	.+438    	; 0xffe <__ultoa_invert>
     e48:	88 2e       	mov	r8, r24
     e4a:	86 18       	sub	r8, r6
     e4c:	fb 2d       	mov	r31, r11
     e4e:	ff 77       	andi	r31, 0x7F	; 127
     e50:	3f 2e       	mov	r3, r31
     e52:	36 fe       	sbrs	r3, 6
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <vfprintf+0x2ba>
     e56:	23 2d       	mov	r18, r3
     e58:	2e 7f       	andi	r18, 0xFE	; 254
     e5a:	a2 2e       	mov	r10, r18
     e5c:	89 14       	cp	r8, r9
     e5e:	58 f4       	brcc	.+22     	; 0xe76 <vfprintf+0x2c0>
     e60:	34 fe       	sbrs	r3, 4
     e62:	0b c0       	rjmp	.+22     	; 0xe7a <vfprintf+0x2c4>
     e64:	32 fc       	sbrc	r3, 2
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <vfprintf+0x2c4>
     e68:	83 2d       	mov	r24, r3
     e6a:	8e 7e       	andi	r24, 0xEE	; 238
     e6c:	a8 2e       	mov	r10, r24
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <vfprintf+0x2c4>
     e70:	b8 2c       	mov	r11, r8
     e72:	a3 2c       	mov	r10, r3
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x2c6>
     e76:	b8 2c       	mov	r11, r8
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x2c6>
     e7a:	b9 2c       	mov	r11, r9
     e7c:	a4 fe       	sbrs	r10, 4
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <vfprintf+0x2e8>
     e80:	fe 01       	movw	r30, r28
     e82:	e8 0d       	add	r30, r8
     e84:	f1 1d       	adc	r31, r1
     e86:	80 81       	ld	r24, Z
     e88:	80 33       	cpi	r24, 0x30	; 48
     e8a:	21 f4       	brne	.+8      	; 0xe94 <vfprintf+0x2de>
     e8c:	9a 2d       	mov	r25, r10
     e8e:	99 7e       	andi	r25, 0xE9	; 233
     e90:	a9 2e       	mov	r10, r25
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x2f0>
     e94:	a2 fe       	sbrs	r10, 2
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <vfprintf+0x2ee>
     e98:	b3 94       	inc	r11
     e9a:	b3 94       	inc	r11
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <vfprintf+0x2f0>
     e9e:	8a 2d       	mov	r24, r10
     ea0:	86 78       	andi	r24, 0x86	; 134
     ea2:	09 f0       	breq	.+2      	; 0xea6 <vfprintf+0x2f0>
     ea4:	b3 94       	inc	r11
     ea6:	a3 fc       	sbrc	r10, 3
     ea8:	10 c0       	rjmp	.+32     	; 0xeca <vfprintf+0x314>
     eaa:	a0 fe       	sbrs	r10, 0
     eac:	06 c0       	rjmp	.+12     	; 0xeba <vfprintf+0x304>
     eae:	b2 14       	cp	r11, r2
     eb0:	80 f4       	brcc	.+32     	; 0xed2 <vfprintf+0x31c>
     eb2:	28 0c       	add	r2, r8
     eb4:	92 2c       	mov	r9, r2
     eb6:	9b 18       	sub	r9, r11
     eb8:	0d c0       	rjmp	.+26     	; 0xed4 <vfprintf+0x31e>
     eba:	b2 14       	cp	r11, r2
     ebc:	58 f4       	brcc	.+22     	; 0xed4 <vfprintf+0x31e>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e2       	ldi	r24, 0x20	; 32
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	60 d0       	rcall	.+192    	; 0xf86 <fputc>
     ec6:	b3 94       	inc	r11
     ec8:	f8 cf       	rjmp	.-16     	; 0xeba <vfprintf+0x304>
     eca:	b2 14       	cp	r11, r2
     ecc:	18 f4       	brcc	.+6      	; 0xed4 <vfprintf+0x31e>
     ece:	2b 18       	sub	r2, r11
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x320>
     ed2:	98 2c       	mov	r9, r8
     ed4:	21 2c       	mov	r2, r1
     ed6:	a4 fe       	sbrs	r10, 4
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <vfprintf+0x342>
     eda:	b6 01       	movw	r22, r12
     edc:	80 e3       	ldi	r24, 0x30	; 48
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	52 d0       	rcall	.+164    	; 0xf86 <fputc>
     ee2:	a2 fe       	sbrs	r10, 2
     ee4:	16 c0       	rjmp	.+44     	; 0xf12 <vfprintf+0x35c>
     ee6:	a1 fc       	sbrc	r10, 1
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <vfprintf+0x33a>
     eea:	88 e7       	ldi	r24, 0x78	; 120
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <vfprintf+0x33e>
     ef0:	88 e5       	ldi	r24, 0x58	; 88
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	b6 01       	movw	r22, r12
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <vfprintf+0x35a>
     ef8:	8a 2d       	mov	r24, r10
     efa:	86 78       	andi	r24, 0x86	; 134
     efc:	51 f0       	breq	.+20     	; 0xf12 <vfprintf+0x35c>
     efe:	a1 fe       	sbrs	r10, 1
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <vfprintf+0x350>
     f02:	8b e2       	ldi	r24, 0x2B	; 43
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <vfprintf+0x352>
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	a7 fc       	sbrc	r10, 7
     f0a:	8d e2       	ldi	r24, 0x2D	; 45
     f0c:	b6 01       	movw	r22, r12
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	3a d0       	rcall	.+116    	; 0xf86 <fputc>
     f12:	89 14       	cp	r8, r9
     f14:	30 f4       	brcc	.+12     	; 0xf22 <vfprintf+0x36c>
     f16:	b6 01       	movw	r22, r12
     f18:	80 e3       	ldi	r24, 0x30	; 48
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	34 d0       	rcall	.+104    	; 0xf86 <fputc>
     f1e:	9a 94       	dec	r9
     f20:	f8 cf       	rjmp	.-16     	; 0xf12 <vfprintf+0x35c>
     f22:	8a 94       	dec	r8
     f24:	f3 01       	movw	r30, r6
     f26:	e8 0d       	add	r30, r8
     f28:	f1 1d       	adc	r31, r1
     f2a:	80 81       	ld	r24, Z
     f2c:	b6 01       	movw	r22, r12
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	2a d0       	rcall	.+84     	; 0xf86 <fputc>
     f32:	81 10       	cpse	r8, r1
     f34:	f6 cf       	rjmp	.-20     	; 0xf22 <vfprintf+0x36c>
     f36:	22 20       	and	r2, r2
     f38:	09 f4       	brne	.+2      	; 0xf3c <vfprintf+0x386>
     f3a:	4e ce       	rjmp	.-868    	; 0xbd8 <vfprintf+0x22>
     f3c:	b6 01       	movw	r22, r12
     f3e:	80 e2       	ldi	r24, 0x20	; 32
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	21 d0       	rcall	.+66     	; 0xf86 <fputc>
     f44:	2a 94       	dec	r2
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <vfprintf+0x380>
     f48:	f6 01       	movw	r30, r12
     f4a:	86 81       	ldd	r24, Z+6	; 0x06
     f4c:	97 81       	ldd	r25, Z+7	; 0x07
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x39e>
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	2b 96       	adiw	r28, 0x0b	; 11
     f56:	e2 e1       	ldi	r30, 0x12	; 18
     f58:	cc c0       	rjmp	.+408    	; 0x10f2 <__epilogue_restores__>

00000f5a <strnlen_P>:
     f5a:	fc 01       	movw	r30, r24
     f5c:	05 90       	lpm	r0, Z+
     f5e:	61 50       	subi	r22, 0x01	; 1
     f60:	70 40       	sbci	r23, 0x00	; 0
     f62:	01 10       	cpse	r0, r1
     f64:	d8 f7       	brcc	.-10     	; 0xf5c <strnlen_P+0x2>
     f66:	80 95       	com	r24
     f68:	90 95       	com	r25
     f6a:	8e 0f       	add	r24, r30
     f6c:	9f 1f       	adc	r25, r31
     f6e:	08 95       	ret

00000f70 <strnlen>:
     f70:	fc 01       	movw	r30, r24
     f72:	61 50       	subi	r22, 0x01	; 1
     f74:	70 40       	sbci	r23, 0x00	; 0
     f76:	01 90       	ld	r0, Z+
     f78:	01 10       	cpse	r0, r1
     f7a:	d8 f7       	brcc	.-10     	; 0xf72 <strnlen+0x2>
     f7c:	80 95       	com	r24
     f7e:	90 95       	com	r25
     f80:	8e 0f       	add	r24, r30
     f82:	9f 1f       	adc	r25, r31
     f84:	08 95       	ret

00000f86 <fputc>:
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	fb 01       	movw	r30, r22
     f90:	23 81       	ldd	r18, Z+3	; 0x03
     f92:	21 fd       	sbrc	r18, 1
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <fputc+0x16>
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	2c c0       	rjmp	.+88     	; 0xff4 <fputc+0x6e>
     f9c:	22 ff       	sbrs	r18, 2
     f9e:	16 c0       	rjmp	.+44     	; 0xfcc <fputc+0x46>
     fa0:	46 81       	ldd	r20, Z+6	; 0x06
     fa2:	57 81       	ldd	r21, Z+7	; 0x07
     fa4:	24 81       	ldd	r18, Z+4	; 0x04
     fa6:	35 81       	ldd	r19, Z+5	; 0x05
     fa8:	42 17       	cp	r20, r18
     faa:	53 07       	cpc	r21, r19
     fac:	44 f4       	brge	.+16     	; 0xfbe <fputc+0x38>
     fae:	a0 81       	ld	r26, Z
     fb0:	b1 81       	ldd	r27, Z+1	; 0x01
     fb2:	9d 01       	movw	r18, r26
     fb4:	2f 5f       	subi	r18, 0xFF	; 255
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	31 83       	std	Z+1, r19	; 0x01
     fba:	20 83       	st	Z, r18
     fbc:	8c 93       	st	X, r24
     fbe:	26 81       	ldd	r18, Z+6	; 0x06
     fc0:	37 81       	ldd	r19, Z+7	; 0x07
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	37 83       	std	Z+7, r19	; 0x07
     fc8:	26 83       	std	Z+6, r18	; 0x06
     fca:	14 c0       	rjmp	.+40     	; 0xff4 <fputc+0x6e>
     fcc:	8b 01       	movw	r16, r22
     fce:	ec 01       	movw	r28, r24
     fd0:	fb 01       	movw	r30, r22
     fd2:	00 84       	ldd	r0, Z+8	; 0x08
     fd4:	f1 85       	ldd	r31, Z+9	; 0x09
     fd6:	e0 2d       	mov	r30, r0
     fd8:	09 95       	icall
     fda:	89 2b       	or	r24, r25
     fdc:	e1 f6       	brne	.-72     	; 0xf96 <fputc+0x10>
     fde:	d8 01       	movw	r26, r16
     fe0:	16 96       	adiw	r26, 0x06	; 6
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	17 97       	sbiw	r26, 0x07	; 7
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	17 96       	adiw	r26, 0x07	; 7
     fec:	9c 93       	st	X, r25
     fee:	8e 93       	st	-X, r24
     ff0:	16 97       	sbiw	r26, 0x06	; 6
     ff2:	ce 01       	movw	r24, r28
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <__ultoa_invert>:
     ffe:	fa 01       	movw	r30, r20
    1000:	aa 27       	eor	r26, r26
    1002:	28 30       	cpi	r18, 0x08	; 8
    1004:	51 f1       	breq	.+84     	; 0x105a <__ultoa_invert+0x5c>
    1006:	20 31       	cpi	r18, 0x10	; 16
    1008:	81 f1       	breq	.+96     	; 0x106a <__ultoa_invert+0x6c>
    100a:	e8 94       	clt
    100c:	6f 93       	push	r22
    100e:	6e 7f       	andi	r22, 0xFE	; 254
    1010:	6e 5f       	subi	r22, 0xFE	; 254
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	af 4f       	sbci	r26, 0xFF	; 255
    101a:	b1 e0       	ldi	r27, 0x01	; 1
    101c:	3e d0       	rcall	.+124    	; 0x109a <__ultoa_invert+0x9c>
    101e:	b4 e0       	ldi	r27, 0x04	; 4
    1020:	3c d0       	rcall	.+120    	; 0x109a <__ultoa_invert+0x9c>
    1022:	67 0f       	add	r22, r23
    1024:	78 1f       	adc	r23, r24
    1026:	89 1f       	adc	r24, r25
    1028:	9a 1f       	adc	r25, r26
    102a:	a1 1d       	adc	r26, r1
    102c:	68 0f       	add	r22, r24
    102e:	79 1f       	adc	r23, r25
    1030:	8a 1f       	adc	r24, r26
    1032:	91 1d       	adc	r25, r1
    1034:	a1 1d       	adc	r26, r1
    1036:	6a 0f       	add	r22, r26
    1038:	71 1d       	adc	r23, r1
    103a:	81 1d       	adc	r24, r1
    103c:	91 1d       	adc	r25, r1
    103e:	a1 1d       	adc	r26, r1
    1040:	20 d0       	rcall	.+64     	; 0x1082 <__ultoa_invert+0x84>
    1042:	09 f4       	brne	.+2      	; 0x1046 <__ultoa_invert+0x48>
    1044:	68 94       	set
    1046:	3f 91       	pop	r19
    1048:	2a e0       	ldi	r18, 0x0A	; 10
    104a:	26 9f       	mul	r18, r22
    104c:	11 24       	eor	r1, r1
    104e:	30 19       	sub	r19, r0
    1050:	30 5d       	subi	r19, 0xD0	; 208
    1052:	31 93       	st	Z+, r19
    1054:	de f6       	brtc	.-74     	; 0x100c <__ultoa_invert+0xe>
    1056:	cf 01       	movw	r24, r30
    1058:	08 95       	ret
    105a:	46 2f       	mov	r20, r22
    105c:	47 70       	andi	r20, 0x07	; 7
    105e:	40 5d       	subi	r20, 0xD0	; 208
    1060:	41 93       	st	Z+, r20
    1062:	b3 e0       	ldi	r27, 0x03	; 3
    1064:	0f d0       	rcall	.+30     	; 0x1084 <__ultoa_invert+0x86>
    1066:	c9 f7       	brne	.-14     	; 0x105a <__ultoa_invert+0x5c>
    1068:	f6 cf       	rjmp	.-20     	; 0x1056 <__ultoa_invert+0x58>
    106a:	46 2f       	mov	r20, r22
    106c:	4f 70       	andi	r20, 0x0F	; 15
    106e:	40 5d       	subi	r20, 0xD0	; 208
    1070:	4a 33       	cpi	r20, 0x3A	; 58
    1072:	18 f0       	brcs	.+6      	; 0x107a <__ultoa_invert+0x7c>
    1074:	49 5d       	subi	r20, 0xD9	; 217
    1076:	31 fd       	sbrc	r19, 1
    1078:	40 52       	subi	r20, 0x20	; 32
    107a:	41 93       	st	Z+, r20
    107c:	02 d0       	rcall	.+4      	; 0x1082 <__ultoa_invert+0x84>
    107e:	a9 f7       	brne	.-22     	; 0x106a <__ultoa_invert+0x6c>
    1080:	ea cf       	rjmp	.-44     	; 0x1056 <__ultoa_invert+0x58>
    1082:	b4 e0       	ldi	r27, 0x04	; 4
    1084:	a6 95       	lsr	r26
    1086:	97 95       	ror	r25
    1088:	87 95       	ror	r24
    108a:	77 95       	ror	r23
    108c:	67 95       	ror	r22
    108e:	ba 95       	dec	r27
    1090:	c9 f7       	brne	.-14     	; 0x1084 <__ultoa_invert+0x86>
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 05       	cpc	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	08 95       	ret
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	0a 2e       	mov	r0, r26
    10a0:	06 94       	lsr	r0
    10a2:	57 95       	ror	r21
    10a4:	47 95       	ror	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	ba 95       	dec	r27
    10ac:	c9 f7       	brne	.-14     	; 0x10a0 <__ultoa_invert+0xa2>
    10ae:	62 0f       	add	r22, r18
    10b0:	73 1f       	adc	r23, r19
    10b2:	84 1f       	adc	r24, r20
    10b4:	95 1f       	adc	r25, r21
    10b6:	a0 1d       	adc	r26, r0
    10b8:	08 95       	ret

000010ba <__prologue_saves__>:
    10ba:	2f 92       	push	r2
    10bc:	3f 92       	push	r3
    10be:	4f 92       	push	r4
    10c0:	5f 92       	push	r5
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	ca 1b       	sub	r28, r26
    10e4:	db 0b       	sbc	r29, r27
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	09 94       	ijmp

000010f2 <__epilogue_restores__>:
    10f2:	2a 88       	ldd	r2, Y+18	; 0x12
    10f4:	39 88       	ldd	r3, Y+17	; 0x11
    10f6:	48 88       	ldd	r4, Y+16	; 0x10
    10f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    10fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1100:	9b 84       	ldd	r9, Y+11	; 0x0b
    1102:	aa 84       	ldd	r10, Y+10	; 0x0a
    1104:	b9 84       	ldd	r11, Y+9	; 0x09
    1106:	c8 84       	ldd	r12, Y+8	; 0x08
    1108:	df 80       	ldd	r13, Y+7	; 0x07
    110a:	ee 80       	ldd	r14, Y+6	; 0x06
    110c:	fd 80       	ldd	r15, Y+5	; 0x05
    110e:	0c 81       	ldd	r16, Y+4	; 0x04
    1110:	1b 81       	ldd	r17, Y+3	; 0x03
    1112:	aa 81       	ldd	r26, Y+2	; 0x02
    1114:	b9 81       	ldd	r27, Y+1	; 0x01
    1116:	ce 0f       	add	r28, r30
    1118:	d1 1d       	adc	r29, r1
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	ed 01       	movw	r28, r26
    1126:	08 95       	ret

00001128 <_exit>:
    1128:	f8 94       	cli

0000112a <__stop_program>:
    112a:	ff cf       	rjmp	.-2      	; 0x112a <__stop_program>
